Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x88, Size: 0x10]
	<LevelStreaming*> StreamingLevelsToConsider;//[Offset: 0x98, Size: 0x50]
	FString StreamingLevelsPrefix;//[Offset: 0xe8, Size: 0x10]
	Level* CurrentLevelPendingVisibility;//[Offset: 0xf8, Size: 0x8]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x100, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x108, Size: 0x8]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x110, Size: 0x8]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x118, Size: 0x8]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x138, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x140, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x148, Size: 0x8]
	AISystemBase* AISystem;//[Offset: 0x150, Size: 0x8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x158, Size: 0x8]
	Level*[] Levels;//[Offset: 0x160, Size: 0x10]
	LevelCollection[] LevelCollections;//[Offset: 0x170, Size: 0x10]
	Level* CurrentLevel;//[Offset: 0x188, Size: 0x8]
	GameInstance* OwningGameInstance;//[Offset: 0x190, Size: 0x8]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x198, Size: 0x10]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x1a8, Size: 0x8]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x1b0, Size: 0x8]
	WorldComposition* WorldComposition;//[Offset: 0x830, Size: 0x8]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x882, Size: 0x1]
	WorldPSCPool PSCPool;//[Offset: 0x8b0, Size: 0x58]
	void HandleTimelineScrubbed();// 0x47c0710

--------------------------------
Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x33e07d0

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0xc0, Size: 0x8]
	Model* Model;//[Offset: 0xc8, Size: 0x8]
	ModelComponent*[] ModelComponents;//[Offset: 0xd0, Size: 0x10]
	LevelActorContainer* ActorCluster;//[Offset: 0xe0, Size: 0x8]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe8, Size: 0x4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xec, Size: 0x4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xf0, Size: 0x8]
	NavigationObjectBase* NavListStart;//[Offset: 0xf8, Size: 0x8]
	NavigationObjectBase* NavListEnd;//[Offset: 0x100, Size: 0x8]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x108, Size: 0x10]
	float LightmapTotalSize;//[Offset: 0x118, Size: 0x4]
	float ShadowmapTotalSize;//[Offset: 0x11c, Size: 0x4]
	Vector[] StaticNavigableGeometry;//[Offset: 0x120, Size: 0x10]
	Guid[] StreamingTextureGuids;//[Offset: 0x130, Size: 0x10]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0, Size: 0x1]
	Guid LevelBuildDataId;//[Offset: 0x1d4, Size: 0x10]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1e8, Size: 0x8]
	IntVector LightBuildLevelOffset;//[Offset: 0x1f0, Size: 0xc]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1fc, Size: 0x1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1fc, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1fc, Size: 0x1]
	WorldSettings* WorldSettings;//[Offset: 0x248, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x258, Size: 0x10]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x278, Size: 0x10]

--------------------------------
Class: Model.Object

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x5a8, Size: 0x8]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x250, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x254, Size: 0x4]
	float CachedMaxDrawDistance;//[Offset: 0x258, Size: 0x4]
	byte DepthPriorityGroup;//[Offset: 0x25c, Size: 0x1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x25d, Size: 0x1]
	byte IndirectLightingCacheQuality;//[Offset: 0x25e, Size: 0x1]
	enum LightmapType;//[Offset: 0x25f, Size: 0x1]
	byte DebugID;//[Offset: 0x260, Size: 0x1]
	byte bTreatAsBackgroundForOcclusion;//[Offset: 0x261, Size: 0x1]
	bool bNeverDistanceCull;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x262, Size: 0x1]
	bool bCulledAsHugePlane;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x262, Size: 0x1]
	bool bUseComplexOccCulling;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x262, Size: 0x1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x263, Size: 0x1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x263, Size: 0x1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x263, Size: 0x1]
	bool bCheckAsyncSceneOnMove;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x263, Size: 0x1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264, Size: 0x1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264, Size: 0x1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x264, Size: 0x1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x264, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x264, Size: 0x1]
	bool bVisibleInRealTimeSkyCaptures;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x264, Size: 0x1]
	bool bOnlyForTopHigh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x264, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x264, Size: 0x1]
	bool bRenderInMono;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x265, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x265, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x265, Size: 0x1]
	bool bDrawIdeaOutline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x265, Size: 0x1]
	byte IdeaOutlineColor;//[Offset: 0x266, Size: 0x1]
	bool bOutlineNotBeOccluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x267, Size: 0x1]
	bool bDrawIdeaOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x267, Size: 0x1]
	bool bTwoSidedLDROutline;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x267, Size: 0x1]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x267, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x267, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x267, Size: 0x1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x267, Size: 0x1]
	byte ShadowCtrl;//[Offset: 0x268, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x269, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x269, Size: 0x1]
	bool bAutoCastShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x269, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x269, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x269, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x269, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x269, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x269, Size: 0x1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26a, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26a, Size: 0x1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x26a, Size: 0x1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x26a, Size: 0x1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x26a, Size: 0x1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x26a, Size: 0x1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x26a, Size: 0x1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x26a, Size: 0x1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26b, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26b, Size: 0x1]
	bool bRenderOverlookDepth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x26b, Size: 0x1]
	bool bEnableReplaceMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x26b, Size: 0x1]
	bool bFullScreenTranslucency;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x26b, Size: 0x1]
	bool bNeverCullByFrustumAndOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x26b, Size: 0x1]
	bool bAffectPrt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x26b, Size: 0x1]
	byte CullingLayer;//[Offset: 0x26c, Size: 0x1]
	byte CanCharacterStepUpOn;//[Offset: 0x26e, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x26f, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x270, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x274, Size: 0x4]
	float MinimumPixelValueFactor;//[Offset: 0x278, Size: 0x4]
	int TranslucencySortPriority;//[Offset: 0x27c, Size: 0x4]
	int VisibilityId;//[Offset: 0x280, Size: 0x4]
	float BoundsScale;//[Offset: 0x290, Size: 0x4]
	float OCBoundsScale;//[Offset: 0x294, Size: 0x4]
	int OCBoundsExtent;//[Offset: 0x298, Size: 0x4]
	float LastSubmitTime;//[Offset: 0x29c, Size: 0x4]
	float LastRenderTime;//[Offset: 0x2a0, Size: 0x4]
	float LastRenderTimeOnScreen;//[Offset: 0x2a4, Size: 0x4]
	BoundsAgencyVolume*[] BoundsAgencies;//[Offset: 0x2a8, Size: 0x10]
	Actor*[] MoveIgnoreActors;//[Offset: 0x2c8, Size: 0x10]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x2d8, Size: 0x10]
	BodyInstance BodyInstance;//[Offset: 0x2f8, Size: 0x140]
	delegate OnComponentHit;//[Offset: 0x438, Size: 0x10]
	delegate OnComponentBeginOverlap;//[Offset: 0x448, Size: 0x10]
	delegate OnComponentEndOverlap;//[Offset: 0x458, Size: 0x10]
	delegate OnComponentWake;//[Offset: 0x468, Size: 0x10]
	delegate OnComponentSleep;//[Offset: 0x478, Size: 0x10]
	delegate OnBeginCursorOver;//[Offset: 0x498, Size: 0x10]
	delegate OnEndCursorOver;//[Offset: 0x4a8, Size: 0x10]
	delegate OnClicked;//[Offset: 0x4b8, Size: 0x10]
	delegate OnReleased;//[Offset: 0x4c8, Size: 0x10]
	delegate OnInputTouchBegin;//[Offset: 0x4d8, Size: 0x10]
	delegate OnInputTouchEnd;//[Offset: 0x4e8, Size: 0x10]
	delegate OnInputTouchEnter;//[Offset: 0x4f8, Size: 0x10]
	delegate OnInputTouchLeave;//[Offset: 0x508, Size: 0x10]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x530, Size: 0x8]
	PrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;//[Offset: 0x538, Size: 0x58]
	void WakeRigidBody(FName BoneName);// 0x47558f0
	void WakeAllRigidBodies();// 0x47558d4
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x475583c
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x475576c
	void SetTwoSidedLDROutline(bool bInTwoSided);// 0x47556e8
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x475566c
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x47555e8
	void SetSimulatePhysics(bool bSimulate);// 0x475555c
	void SetShadowCtrl(byte InShadowCtrl);// 0x47554e0
	void SetRenderOverlookDepth(bool bValue);// 0x475545c
	void SetRenderInMono(bool bValue);// 0x47553d8
	void SetRenderInMainPass(bool bValue);// 0x4755354
	void SetRenderCustomDepth(bool bValue);// 0x47552d0
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x475524c
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x4755148
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x4755038
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x4754f28
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x4754e1c
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x4754d10
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x4754bf0
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x4754ad0
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x4754a4c
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x47549c8
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x475493c
	void SetNeverCullByFrustumAndOcclusion(bool bValue);// 0x47548b8
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x47547fc
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x475473c
	void SetMassScale(FName BoneName, float InMassScale);// 0x475467c
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x4754578
	void SetLockedAxis(byte LockedAxis);// 0x47544f4
	void SetLinearDamping(float InDamping);// 0x4754470
	void SetIdeaOutlineNotBeOccluded(bool bNotBeOccluded);// 0x47543ec
	void SetIdeaOutlineColor(const byte InOutlineColor);// 0x4754370
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x47542ec
	void SetFullScreenTranslucency(bool bValue);// 0x4754268
	void SetEnableReplaceMaterial(bool bValue);// 0x47541e4
	void SetEnableGravity(bool bGravityEnabled);// 0x4754158
	void SetDrawIdeaOutline(bool bNewDrawOutline);// 0x47540d4
	void SetDrawIdeaOcclusion(bool bNewDrawOcclusion);// 0x4754050
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x4753fd4
	void SetCustomDepthStencilValue(int Value);// 0x4753f58
	void SetCullDistance(float NewCullDistance);// 0x4753edc
	void SetConstraintMode(byte ConstraintMode);// 0x4753e58
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x4753d98
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x4753d14
	void SetCollisionProfileName(FName InCollisionProfileName);// 0x4753c90
	void SetCollisionObjectType(byte Channel);// 0x4753c0c
	void SetCollisionEnabled(byte NewType);// 0x4753b88
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x4753ad0
	void SetCastShadow(bool NewCastShadow);// 0x4753a4c
	void SetBoundsScale(float NewBoundsScale);// 0x47539d0
	void SetAngularDamping(float InDamping);// 0x475394c
	void SetAllUseCCD(bool InUseCCD);// 0x47538c0
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x47537f8
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x4753718
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x4753614
	void SetAllPhysicsAngularVelocity(out const Vector NewAngVel, bool bAddToCurrent);// 0x4753534
	void SetAllMassScale(float InMassScale);// 0x47534b0
	void SetAffectPrt(bool bValue);// 0x475342c
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x4753358
	bool RemoveBoundsAgency(BoundsAgencyVolume* Agency);// 0x47532d0
	void PutRigidBodyToSleep(FName BoneName);// 0x4753254
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x4752f1c
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x4752c24
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x4752928
	bool K2_IsQueryCollisionEnabled();// 0x47528e0
	bool K2_IsPhysicsCollisionEnabled();// 0x4752898
	bool K2_IsCollisionEnabled();// 0x4752854
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x4752520
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x4752498
	bool IsOverlappingActor(const Actor* Other);// 0x4752410
	bool IsGravityEnabled();// 0x47523d0
	bool IsAnyRigidBodyAwake();// 0x4752390
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x47522d0
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x4752210
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x47521c8
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x47520fc
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x4752074
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x4751fec
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x4751f50
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x4751eb4
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x4751e18
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x4751d34
	int GetNumMaterials();// 0x4751cf8
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x4751c20
	MaterialInterface* GetMaterial(int ElementIndex);// 0x4751b94
	float GetMassScale(FName BoneName);// 0x4751b08
	float GetMass();// 0x4751acc
	float GetLinearDamping();// 0x4751a90
	Vector GetInertiaTensor(FName BoneName);// 0x4751a00
	bool GetGenerateOverlapEvents();// 0x47519dc
	byte GetCollisionResponseToChannel(byte Channel);// 0x4751950
	FName GetCollisionProfileName();// 0x475191c
	byte GetCollisionObjectType();// 0x47518e0
	byte GetCollisionEnabled();// 0x47518a4
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x4751778
	Vector GetCenterOfMass(FName BoneName);// 0x47516f0
	float GetAngularDamping();// 0x47516b4
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x47515ac
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x47514dc
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x4751450
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x47513cc
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x4751348
	void ClearMoveIgnoreComponents();// 0x475131c
	void ClearMoveIgnoreActors();// 0x4751308
	bool CanCharacterStepUp(Pawn* Pawn);// 0x4751278
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x4751174
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x475105c
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x4750f58
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x4750de0
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x4750c68
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x4750b68
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x4750a64
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x4750964
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x4750864
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x4750760
	bool AddBoundsAgency(BoundsAgencyVolume* Agency);// 0x47506d8
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x47505d4
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x47504bc
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x47503b8

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xf8, Size: 0x8]
	SceneComponent* AttachParent;//[Offset: 0x100, Size: 0x8]
	FName AttachSocketName;//[Offset: 0x108, Size: 0x8]
	SceneComponent*[] AttachChildren;//[Offset: 0x110, Size: 0x10]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0x120, Size: 0x10]
	Vector RelativeLocation;//[Offset: 0x15c, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x168, Size: 0xc]
	Vector RelativeScale3D;//[Offset: 0x174, Size: 0xc]
	Vector ComponentVelocity;//[Offset: 0x1b0, Size: 0xc]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1bc, Size: 0x1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1bc, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1bc, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1bc, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1bc, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1bc, Size: 0x1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1bc, Size: 0x1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1bd, Size: 0x1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1bd, Size: 0x1]
	bool bAbsoluteTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1bd, Size: 0x1]
	byte Mobility;//[Offset: 0x1be, Size: 0x1]
	byte DetailMode;//[Offset: 0x1bf, Size: 0x1]
	byte LowDeviceDetailMode;//[Offset: 0x1c0, Size: 0x1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x210, Size: 0x10]
	void ToggleVisibility(bool bPropagateToChildren);// 0x4778688
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x47785c0
	void SetWorldScale3D(Vector NewScale);// 0x4778544
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x4778478
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x47783f4
	void SetRelativeScale3D(Vector NewScale3D);// 0x4778370
	void SetMobility(byte NewMobility);// 0x47782ec
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x4778220
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x477810c
	void ResetRelativeTransform();// 0x47780f8
	void OnRep_Visibility(bool OldValue);// 0x4778074
	void OnRep_Transform();// 0x4778060
	void OnRep_AttachSocketName();// 0x477804c
	void OnRep_AttachParent();// 0x4778038
	void OnRep_AttachChildren();// 0x4778024
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4777e44
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4777cd4
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4777b24
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x47779b4
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x47777d4
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4777664
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x47774b4
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4777344
	Transform K2_GetComponentToWorld();// 0x47772d0
	Vector K2_GetComponentScale();// 0x4777298
	Rotator K2_GetComponentRotation();// 0x4777260
	Vector K2_GetComponentLocation();// 0x4777228
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x47770f0
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x4776f2c
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x4776de4
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4776c04
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4776a94
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4776924
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x47767b4
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4776644
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4776464
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x47762f4
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4776184
	bool IsVisible();// 0x4776144
	bool IsSimulatingPhysics(FName BoneName);// 0x47760b4
	bool IsAnySimulatingPhysics();// 0x4776074
	Vector GetUpVector();// 0x477603c
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x4775f34
	Rotator GetSocketRotation(FName InSocketName);// 0x4775ea4
	Quat GetSocketQuaternion(FName InSocketName);// 0x4775e0c
	Vector GetSocketLocation(FName InSocketName);// 0x4775d7c
	bool GetShouldUpdatePhysicsVolume();// 0x4775d5c
	Vector GetRightVector();// 0x4775d24
	Transform GetRelativeTransform();// 0x4775cb0
	PhysicsVolume* GetPhysicsVolume();// 0x4775c7c
	void GetParentComponents(out SceneComponent*[] Parents);// 0x4775be0
	int GetNumChildrenComponents();// 0x4775bac
	Vector GetForwardVector();// 0x4775b74
	Vector GetComponentVelocity();// 0x4775b34
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x4775a4c
	SceneComponent* GetChildComponent(int ChildIndex);// 0x47759c8
	FName GetAttachSocketName();// 0x47759ac
	SceneComponent* GetAttachParent();// 0x4775990
	FName[] GetAllSocketNames();// 0x477590c
	bool DoesSocketExist(FName InSocketName);// 0x477587c
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x47757ac

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x58]
	FName[] ComponentTags;//[Offset: 0x88, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x98, Size: 0x10]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa8, Size: 0x1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa8, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa9, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xaa, Size: 0x1]
	enum CreationMethod;//[Offset: 0xac, Size: 0x1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0xb0, Size: 0x10]
	delegate OnComponentActivated;//[Offset: 0xc0, Size: 0x10]
	delegate OnComponentDeactivated;//[Offset: 0xd0, Size: 0x10]
	void ToggleActive();// 0x45903e8
	void SetTickGroup(byte NewTickGroup);// 0x459036c
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x45902e8
	void SetIsReplicated(bool ShouldReplicate);// 0x4590264
	void SetComponentTickInterval(float TickInterval);// 0x45901e8
	void SetComponentTickEnabled(bool bEnabled);// 0x459015c
	void SetAutoActivate(bool bNewAutoActivate);// 0x45900d0
	void SetActive(bool bNewActive, bool bReset);// 0x4590000
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x458ff7c
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x458fef8
	void ReceiveTick(float DeltaSeconds);// 0x33e07d0
	void ReceiveEndPlay(byte EndPlayReason);// 0x33e07d0
	void ReceiveBeginPlay();// 0x33e07d0
	void OnRep_IsActive();// 0x458fedc
	void K2_DestroyComponent(Object* Object);// 0x458fe60
	bool IsComponentTickEnabled();// 0x458fe28
	bool IsBeingDestroyed();// 0x458fe08
	bool IsActive();// 0x458fdc8
	Actor* GetOwner();// 0x458fdac
	float GetComponentTickInterval();// 0x458fd78
	void Deactivate();// 0x458fd5c
	bool ComponentHasTag(FName Tag);// 0x458fcd4
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x458fc50
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x458fbcc
	void Activate(bool bReset);// 0x458fb40

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1]
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	float TickInterval;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: BoundsAgencyVolume.Volume.Brush.Actor.Object
	bool bCulledAsHugePlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x378, Size: 0x1]
	bool bUseComplexOccCulling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x378, Size: 0x1]
	float MaxCullDistance;//[Offset: 0x37c, Size: 0x4]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x340, Size: 0x1]
	Color BrushColor;//[Offset: 0x344, Size: 0x4]
	int PolyFlags;//[Offset: 0x348, Size: 0x4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34c, Size: 0x1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34c, Size: 0x1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34c, Size: 0x1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x34c, Size: 0x1]
	Model* Brush;//[Offset: 0x350, Size: 0x8]
	BrushComponent* BrushComponent;//[Offset: 0x358, Size: 0x8]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x360, Size: 0x1]
	GeomSelection[] SavedSelections;//[Offset: 0x368, Size: 0x10]

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x58]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x80, Size: 0x1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x80, Size: 0x1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x80, Size: 0x1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x80, Size: 0x1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x81, Size: 0x1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x81, Size: 0x1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x81, Size: 0x1]
	bool bReplayRewindable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x81, Size: 0x1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x81, Size: 0x1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x81, Size: 0x1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x81, Size: 0x1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x81, Size: 0x1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x82, Size: 0x1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x82, Size: 0x1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x82, Size: 0x1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x82, Size: 0x1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x82, Size: 0x1]
	bool bIsEditorOnlyActor;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x82, Size: 0x1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x82, Size: 0x1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x82, Size: 0x1]
	bool bIsLevelBoundsRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x83, Size: 0x1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x83, Size: 0x1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x83, Size: 0x1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x84, Size: 0x1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x84, Size: 0x1]
	byte RemoteRole;//[Offset: 0x85, Size: 0x1]
	RepMovement ReplicatedMovement;//[Offset: 0x88, Size: 0x34]
	float InitialLifeSpan;//[Offset: 0xbc, Size: 0x4]
	float CustomTimeDilation;//[Offset: 0xc0, Size: 0x4]
	RepAttachment AttachmentReplication;//[Offset: 0xc8, Size: 0x40]
	Actor* Owner;//[Offset: 0x108, Size: 0x8]
	FName NetDriverName;//[Offset: 0x110, Size: 0x8]
	byte Role;//[Offset: 0x118, Size: 0x1]
	byte NetDormancy;//[Offset: 0x119, Size: 0x1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x11a, Size: 0x1]
	byte AutoReceiveInput;//[Offset: 0x11b, Size: 0x1]
	int InputPriority;//[Offset: 0x11c, Size: 0x4]
	InputComponent* InputComponent;//[Offset: 0x120, Size: 0x8]
	float NetCullDistanceSquared;//[Offset: 0x128, Size: 0x4]
	int NetTag;//[Offset: 0x12c, Size: 0x4]
	float NetUpdateFrequency;//[Offset: 0x130, Size: 0x4]
	float MinNetUpdateFrequency;//[Offset: 0x134, Size: 0x4]
	float NetPriority;//[Offset: 0x138, Size: 0x4]
	Pawn* Instigator;//[Offset: 0x140, Size: 0x8]
	Actor*[] Children;//[Offset: 0x148, Size: 0x10]
	SceneComponent* RootComponent;//[Offset: 0x158, Size: 0x8]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x160, Size: 0x10]
	FName[] Layers;//[Offset: 0x178, Size: 0x10]
	ChildActorComponent* ParentComponent;//[Offset: 0x188, Size: 0x8]
	FName[] Tags;//[Offset: 0x190, Size: 0x10]
	delegate OnTakeAnyDamage;//[Offset: 0x1a0, Size: 0x10]
	delegate OnTakePointDamage;//[Offset: 0x1b0, Size: 0x10]
	delegate OnTakeRadialDamage;//[Offset: 0x1c0, Size: 0x10]
	delegate OnActorBeginOverlap;//[Offset: 0x1d0, Size: 0x10]
	delegate OnActorEndOverlap;//[Offset: 0x1e0, Size: 0x10]
	delegate OnBeginCursorOver;//[Offset: 0x1f0, Size: 0x10]
	delegate OnEndCursorOver;//[Offset: 0x200, Size: 0x10]
	delegate OnClicked;//[Offset: 0x210, Size: 0x10]
	delegate OnReleased;//[Offset: 0x220, Size: 0x10]
	delegate OnInputTouchBegin;//[Offset: 0x230, Size: 0x10]
	delegate OnInputTouchEnd;//[Offset: 0x240, Size: 0x10]
	delegate OnInputTouchEnter;//[Offset: 0x250, Size: 0x10]
	delegate OnInputTouchLeave;//[Offset: 0x260, Size: 0x10]
	delegate OnActorHit;//[Offset: 0x270, Size: 0x10]
	delegate OnDestroyed;//[Offset: 0x290, Size: 0x10]
	delegate OnEndPlay;//[Offset: 0x2a0, Size: 0x10]
	ActorComponent*[] InstanceComponents;//[Offset: 0x310, Size: 0x10]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x320, Size: 0x10]
	bool WasRecentlyRendered(float Tolerance);// 0x4589104
	void UserConstructionScript();// 0x33e07d0
	void TearOff();// 0x45890e8
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x4589034
	void SetTickGroup(byte NewTickGroup);// 0x4588fb8
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x4588f34
	void SetReplicates(bool bInReplicates);// 0x4588eb0
	void SetReplicateMovement(bool bInReplicateMovement);// 0x4588e24
	void SetOwner(Actor* NewOwner);// 0x4588da0
	void SetNetDormancy(byte NewDormancy);// 0x4588d24
	void SetLifeSpan(float InLifespan);// 0x4588ca0
	void SetActorTickInterval(float TickInterval);// 0x4588c24
	void SetActorTickEnabled(bool bEnabled);// 0x4588ba0
	void SetActorScale3D(Vector NewScale3D);// 0x4588b24
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x4588aa8
	void SetActorHiddenInGame(bool bNewHidden);// 0x4588a1c
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x4588998
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x4588914
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x4588890
	void ReceiveTick(float DeltaSeconds);// 0x33e07d0
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x33e07d0
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x33e07d0
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x33e07d0
	void ReceiveEndPlay(byte EndPlayReason);// 0x33e07d0
	void ReceiveDestroyed();// 0x33e07d0
	void ReceiveBeginPlay();// 0x33e07d0
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x33e07d0
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x33e07d0
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x33e07d0
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x33e07d0
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x33e07d0
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x33e07d0
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x33e07d0
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x33e07d0
	void ReceiveActorEndCursorOver();// 0x33e07d0
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x33e07d0
	void ReceiveActorBeginCursorOver();// 0x33e07d0
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x4588784
	void OnRep_ReplicateMovement();// 0x4588768
	void OnRep_ReplicatedMovement();// 0x458874c
	void OnRep_Owner();// 0x4588730
	void OnRep_Instigator();// 0x4588714
	void OnRep_AttachmentReplication();// 0x45886f8
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x4588588
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x4588504
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x4588434
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4588240
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x458816c
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4587f8c
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4587e1c
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4587cac
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4587ae8
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4587964
	void K2_OnReset();// 0x33e07d0
	void K2_OnEndViewTarget(PlayerController* PC);// 0x33e07d0
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x33e07d0
	SceneComponent* K2_GetRootComponent();// 0x4587948
	Rotator K2_GetActorRotation();// 0x4587848
	Vector K2_GetActorLocation();// 0x45877f0
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x45876fc
	void K2_DestroyComponent(ActorComponent* Component);// 0x4587680
	void K2_DestroyActor();// 0x4587664
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x45874b8
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x458730c
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x45871d8
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x45870a4
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4586ec4
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4586d54
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4586be4
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4586a04
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4586894
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4586724
	bool IsOverlappingActor(const Actor* Other);// 0x458669c
	bool IsChildActor();// 0x4586664
	bool IsActorTickEnabled();// 0x458662c
	bool IsActorBeingDestroyed();// 0x458660c
	bool HasAuthority();// 0x45865e8
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x4586564
	Vector GetVelocity();// 0x4586524
	Transform GetTransform();// 0x45864ac
	bool GetTickableWhenPaused();// 0x4586474
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x45863f0
	byte GetRemoteRole();// 0x45863d4
	ChildActorComponent* GetParentComponent();// 0x45863a0
	Actor* GetParentActor();// 0x458636c
	Actor* GetOwner();// 0x4586350
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x45862b4
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x45861d0
	byte GetLocalRole();// 0x45861b4
	float GetLifeSpan();// 0x4586178
	Controller* GetInstigatorController();// 0x4586144
	Pawn* GetInstigator();// 0x4586110
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x4585fa4
	float GetInputAxisValue(const FName InputAxisName);// 0x4585f20
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x4585db8
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x4585d34
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x4585cb0
	float GetGameTimeSinceCreation();// 0x4585c7c
	float GetDotProductTo(const Actor* OtherActor);// 0x4585bf8
	float GetDistanceTo(const Actor* OtherActor);// 0x4585b74
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x4585a64
	ActorComponent*[] GetComponentsByClass(class ActorComponent ComponentClass);// 0x4585994
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x4585910
	FName GetAttachParentSocketName();// 0x45858dc
	Actor* GetAttachParentActor();// 0x45858a8
	void GetAttachedActors(out Actor*[] OutActors);// 0x458580c
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x4585720
	Vector GetActorUpVector();// 0x45856cc
	float GetActorTimeDilation();// 0x4585698
	float GetActorTickInterval();// 0x4585664
	Vector GetActorScale3D();// 0x458562c
	Vector GetActorRightVector();// 0x45855d8
	Vector GetActorRelativeScale3D();// 0x45855a0
	Vector GetActorForwardVector();// 0x458554c
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x4585468
	bool GetActorEnableCollision();// 0x4585448
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent);// 0x4585328
	void ForceNetUpdate();// 0x458530c
	void FlushNetDormancy();// 0x45852f8
	void EnableInput(PlayerController* PlayerController);// 0x4585274
	void DisableInput(PlayerController* PlayerController);// 0x45851f0
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x458516c
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x45850e8
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x4585064
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x4584eb8
	bool ActorHasTag(FName Tag);// 0x4584e30

--------------------------------
Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]
	byte G;//[Offset: 0x1, Size: 0x1]
	byte R;//[Offset: 0x2, Size: 0x1]
	byte A;//[Offset: 0x3, Size: 0x1]

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4]
	float Yaw;//[Offset: 0x4, Size: 0x4]
	float Roll;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc]
	FName AttachSocket;//[Offset: 0x2c, Size: 0x8]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x590, Size: 0x8]
	BodySetup* BrushBodySetup;//[Offset: 0x598, Size: 0x8]

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x28, Size: 0x58]
	FName BoneName;//[Offset: 0x80, Size: 0x8]
	byte PhysicsType;//[Offset: 0x88, Size: 0x1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 0x1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 0x1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 0x1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x89, Size: 0x1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x89, Size: 0x1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x89, Size: 0x1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x89, Size: 0x1]
	byte CollisionReponse;//[Offset: 0x8b, Size: 0x1]
	byte CollisionTraceFlag;//[Offset: 0x8c, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x90, Size: 0x8]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x98, Size: 0x10]
	BodyInstance DefaultInstance;//[Offset: 0x110, Size: 0x140]
	Vector BuildScale3D;//[Offset: 0x264, Size: 0xc]

--------------------------------
Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	float Radius;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4]
	FName Name;//[Offset: 0xc, Size: 0x8]
	bool bContributeToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]

--------------------------------
Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float X;//[Offset: 0x48, Size: 0x4]
	float Y;//[Offset: 0x4c, Size: 0x4]
	float Z;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius;//[Offset: 0x48, Size: 0x4]
	float Length;//[Offset: 0x4c, Size: 0x4]

--------------------------------
Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10]
	Box ElemBox;//[Offset: 0x40, Size: 0x1c]
	Transform Transform;//[Offset: 0x60, Size: 0x30]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Translation;//[Offset: 0x10, Size: 0xc]
	Vector Scale3D;//[Offset: 0x1c, Size: 0xc]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius0;//[Offset: 0x48, Size: 0x4]
	float Radius1;//[Offset: 0x4c, Size: 0x4]
	float Length;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x2c, Size: 0x1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	float Restitution;//[Offset: 0x30, Size: 0x4]
	byte RestitutionCombineMode;//[Offset: 0x34, Size: 0x1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	float Density;//[Offset: 0x38, Size: 0x4]
	float RaiseMassToPower;//[Offset: 0x3c, Size: 0x4]
	float DestructibleDamageThresholdScale;//[Offset: 0x40, Size: 0x4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x48, Size: 0x8]
	byte SurfaceType;//[Offset: 0x50, Size: 0x1]
	float TireFrictionScale;//[Offset: 0x54, Size: 0x4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 0x8]
	float FrictionScale;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BodyInstance
	byte ObjectType;//[Offset: 0x6, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1]
	enum SleepFamily;//[Offset: 0xa, Size: 0x1]
	byte DOFMode;//[Offset: 0xb, Size: 0x1]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	FName CollisionProfileName;//[Offset: 0x1c, Size: 0x8]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 0x30]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 0x4]
	float MassInKgOverride;//[Offset: 0x5c, Size: 0x4]
	float LinearDamping;//[Offset: 0x68, Size: 0x4]
	float AngularDamping;//[Offset: 0x6c, Size: 0x4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 0xc]
	Vector COMNudge;//[Offset: 0x7c, Size: 0xc]
	float MassScale;//[Offset: 0x88, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 0xc]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa8, Size: 0x10]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb8, Size: 0x8]
	float MaxAngularVelocity;//[Offset: 0xc0, Size: 0x4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xc4, Size: 0x4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc8, Size: 0x4]
	float PhysicsBlendWeight;//[Offset: 0xcc, Size: 0x4]
	int PositionSolverIterationCount;//[Offset: 0xd0, Size: 0x4]
	int VelocitySolverIterationCount;//[Offset: 0xd4, Size: 0x4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]
	byte Pawn;//[Offset: 0x2, Size: 0x1]
	byte Visibility;//[Offset: 0x3, Size: 0x1]
	byte Camera;//[Offset: 0x4, Size: 0x1]
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]
	byte Vehicle;//[Offset: 0x6, Size: 0x1]
	byte Destructible;//[Offset: 0x7, Size: 0x1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]

--------------------------------
Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8]
	byte Response;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int SelectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x160, Size: 0x10]
	bool WasControllerKeyJustReleased(Key Key);// 0x4659638
	bool WasControllerKeyJustPressed(Key Key);// 0x46594cc
	bool IsControllerKeyDown(Key Key);// 0x4659360
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x46591f0
	Vector GetControllerVectorKeyState(Key Key);// 0x4659084
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x4658fa8
	float GetControllerKeyTimeDown(Key Key);// 0x4658e40
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x4658d20
	float GetControllerAnalogKeyState(Key Key);// 0x4658bb8

--------------------------------
Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 0x10]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 0x10]
	void SetMouseSensitivity(const float SensitivityX, const float SensitivityY);// 0x4749c84
	void SetBind(FName BindName, FString Command);// 0x4749bbc
	void InvertAxisKey(const Key AxisKey);// 0x4749a64
	void InvertAxis(const FName AxisName);// 0x47499e8
	void ClearSmoothing();// 0x47499d4

--------------------------------
Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18]
	FString Command;//[Offset: 0x18, Size: 0x10]
	bool Control;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool Shift;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool Alt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool Cmd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCtrl;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool bIgnoreShift;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bIgnoreAlt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCmd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x348, Size: 0x1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x348, Size: 0x1]
	float BaseEyeHeight;//[Offset: 0x34c, Size: 0x4]
	byte AutoPossessPlayer;//[Offset: 0x350, Size: 0x1]
	enum AutoPossessAI;//[Offset: 0x351, Size: 0x1]
	byte RemoteViewPitch;//[Offset: 0x352, Size: 0x1]
	class Controller* AIControllerClass;//[Offset: 0x358, Size: 0x8]
	PlayerState* PlayerState;//[Offset: 0x360, Size: 0x8]
	Controller* LastHitBy;//[Offset: 0x370, Size: 0x8]
	Controller* Controller;//[Offset: 0x378, Size: 0x8]
	Vector ControlInputVector;//[Offset: 0x384, Size: 0xc]
	Vector LastControlInputVector;//[Offset: 0x390, Size: 0xc]
	void SpawnDefaultController();// 0x4724640
	void ReceiveUnpossessed(Controller* OldController);// 0x33e07d0
	void ReceivePossessed(Controller* NewController);// 0x33e07d0
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x47244fc
	void OnRep_PlayerState();// 0x47244e0
	void OnRep_Controller();// 0x47244c4
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x47243b8
	Vector K2_GetMovementInputVector();// 0x4724380
	bool IsPlayerControlled();// 0x4724340
	bool IsMoveInputIgnored();// 0x4724300
	bool IsLocallyControlled();// 0x47242c0
	bool IsControlled();// 0x4724288
	Vector GetPendingMovementInputVector();// 0x4724250
	Vector GetNavAgentLocation();// 0x4724210
	PawnMovementComponent* GetMovementComponent();// 0x47241d4
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x4724158
	Vector GetLastMovementInputVector();// 0x4724120
	Rotator GetControlRotation();// 0x47240e8
	Controller* GetController();// 0x47240cc
	Rotator GetBaseAimRotation();// 0x472408c
	void DetachFromControllerPendingDestroy();// 0x4724070
	Vector ConsumeMovementInputVector();// 0x4724030
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x4723f2c
	void AddControllerYawInput(float Val);// 0x4723ea8
	void AddControllerRollInput(float Val);// 0x4723e24
	void AddControllerPitchInput(float Val);// 0x4723da0

--------------------------------
Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x348, Size: 0x8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x358, Size: 0x10]
	FName StateName;//[Offset: 0x368, Size: 0x8]
	Pawn* Pawn;//[Offset: 0x370, Size: 0x8]
	Character* Character;//[Offset: 0x380, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x388, Size: 0x8]
	Rotator ControlRotation;//[Offset: 0x3a8, Size: 0xc]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b4, Size: 0x1]
	bool bIsPlayerController;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3b4, Size: 0x1]
	void UnPossess();// 0x45f823c
	void StopMovement();// 0x45f8220
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x45f813c
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x45f80b0
	void SetIgnoreLookInput(bool bNewLookInput);// 0x45f8024
	void SetControlRotation(out const Rotator NewRotation);// 0x45f7f94
	void ResetIgnoreMoveInput();// 0x45f7f78
	void ResetIgnoreLookInput();// 0x45f7f5c
	void ResetIgnoreInputFlags();// 0x45f7f40
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x33e07d0
	void Possess(Pawn* InPawn);// 0x45f7ebc
	void OnRep_PlayerState();// 0x45f7ea0
	void OnRep_Pawn();// 0x45f7e84
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x45f7d68
	Pawn* K2_GetPawn();// 0x45f7d34
	bool IsPlayerController();// 0x45f7d14
	bool IsMoveInputIgnored();// 0x45f7cd4
	bool IsLookInputIgnored();// 0x45f7c94
	bool IsLocalPlayerController();// 0x45f7c44
	bool IsLocalController();// 0x45f7c04
	Actor* GetViewTarget();// 0x45f7bc8
	Rotator GetDesiredRotation();// 0x45f7b88
	Rotator GetControlRotation();// 0x45f7b48
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x45f7a80
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x45f79bc
	PlayerController* CastToPlayerController();// 0x45f7988

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x340, Size: 0x4]
	FString PlayerName;//[Offset: 0x348, Size: 0x10]
	int PlayerId;//[Offset: 0x368, Size: 0x4]
	byte Ping;//[Offset: 0x36c, Size: 0x1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x36e, Size: 0x1]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x36e, Size: 0x1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x36e, Size: 0x1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x36e, Size: 0x1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x36e, Size: 0x1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x36e, Size: 0x1]
	int StartTime;//[Offset: 0x370, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x378, Size: 0x8]
	FString SavedNetworkAddress;//[Offset: 0x388, Size: 0x10]
	UniqueNetIdRepl UniqueId;//[Offset: 0x398, Size: 0x28]
	Pawn* PawnPrivate;//[Offset: 0x3c8, Size: 0x8]
	FString PlayerNamePrivate;//[Offset: 0x3e0, Size: 0x10]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x33e07d0
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x33e07d0
	void OnRep_UniqueId();// 0x474aabc
	void OnRep_Score();// 0x474aaa0
	void OnRep_PlayerName();// 0x474aa84
	void OnRep_PlayerId();// 0x474aa68
	void OnRep_bIsInactive();// 0x474aa4c
	FString GetPlayerName();// 0x474a9c8

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x3a0, Size: 0x8]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x3a8, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x3b0, Size: 0x8]
	BasedMovementInfo BasedMovement;//[Offset: 0x3b8, Size: 0x30]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x3e8, Size: 0x30]
	float AnimRootMotionTranslationScale;//[Offset: 0x418, Size: 0x4]
	Vector BaseTranslationOffset;//[Offset: 0x41c, Size: 0xc]
	Quat BaseRotationOffset;//[Offset: 0x430, Size: 0x10]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x440, Size: 0x4]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x444, Size: 0x4]
	byte ReplicatedMovementMode;//[Offset: 0x448, Size: 0x1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 0x1]
	float CrouchedEyeHeight;//[Offset: 0x44c, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x450, Size: 0x1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x450, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x450, Size: 0x1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x450, Size: 0x1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x450, Size: 0x1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x450, Size: 0x1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x450, Size: 0x1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x450, Size: 0x1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x451, Size: 0x1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x451, Size: 0x1]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x451, Size: 0x1]
	float JumpKeyHoldTime;//[Offset: 0x454, Size: 0x4]
	float JumpForceTimeRemaining;//[Offset: 0x458, Size: 0x4]
	float ProxyJumpForceStartedTime;//[Offset: 0x45c, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x460, Size: 0x4]
	int JumpMaxCount;//[Offset: 0x464, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x468, Size: 0x4]
	delegate OnReachedJumpApex;//[Offset: 0x470, Size: 0x10]
	delegate MovementModeChangedDelegate;//[Offset: 0x490, Size: 0x10]
	delegate OnCharacterMovementUpdated;//[Offset: 0x4a0, Size: 0x10]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x4b0, Size: 0xf8]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x5b0, Size: 0x40]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x5f0, Size: 0x10]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x600, Size: 0x158]
	void UnCrouch(bool bClientSimulation);// 0x45e7ab0
	void StopJumping();// 0x45e7a94
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x45e7a10
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x45e78ec
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x45e76c0
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x45e7384
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x45e6fd0
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x45e6c1c
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x45e6980
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x45e68ec
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x45e67e4
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x45e666c
	void OnRep_RootMotion();// 0x45e6658
	void OnRep_ReplicatedBasedMovement();// 0x45e663c
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x45e6628
	void OnRep_IsCrouched();// 0x45e660c
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x33e07d0
	void OnLanded(out const HitResult Hit);// 0x33e07d0
	void OnJumped();// 0x45e65f0
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x45e64dc
	void K2_UpdateCustomMovement(float DeltaTime);// 0x33e07d0
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x33e07d0
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x33e07d0
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x33e07d0
	void Jump();// 0x45e64c0
	bool IsPlayingRootMotion();// 0x45e6488
	bool IsPlayingNetworkedRootMotionMontage();// 0x45e6450
	bool IsJumpProvidingForce();// 0x45e6410
	AnimMontage* GetCurrentMontage();// 0x45e63dc
	Vector GetBaseTranslationOffset();// 0x45e63b4
	Rotator GetBaseRotationOffsetRotator();// 0x45e6360
	float GetAnimRootMotionTranslationScale();// 0x45e632c
	void Crouch(bool bClientSimulation);// 0x45e62a0
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x45e60a4
	void ClientCheatWalk();// 0x45e6088
	void ClientCheatGhost();// 0x45e606c
	void ClientCheatFly();// 0x45e6050
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x45e5ba4
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x45e58f0
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x45e56b4
	void ClientAckGoodMove(float Timestamp);// 0x45e5638
	bool CanJumpInternal();// 0x45e55f8
	bool CanJump();// 0x45e55c0
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x45e54fc

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x720, Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x728, Size: 0x8]
	AnimInstance* AnimScriptInstance;//[Offset: 0x730, Size: 0x8]
	AnimInstance*[] SubInstances;//[Offset: 0x738, Size: 0x10]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x748, Size: 0x8]
	SingleAnimationPlayData AnimationData;//[Offset: 0x750, Size: 0x18]
	Vector RootBoneTranslation;//[Offset: 0x778, Size: 0xc]
	Vector LineCheckBoundsScale;//[Offset: 0x784, Size: 0xc]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x7b0, Size: 0x10]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x7c0, Size: 0x10]
	float GlobalAnimRateScale;//[Offset: 0x7f0, Size: 0x4]
	enum UseAsyncScene;//[Offset: 0x7f4, Size: 0x1]
	byte KinematicBonesUpdateType;//[Offset: 0x7f5, Size: 0x1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x7f6, Size: 0x1]
	byte AnimationMode;//[Offset: 0x7f7, Size: 0x1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7f9, Size: 0x1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7fb, Size: 0x1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7fb, Size: 0x1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7fb, Size: 0x1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7fb, Size: 0x1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7fb, Size: 0x1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7fc, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7fc, Size: 0x1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7fc, Size: 0x1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7fc, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7fc, Size: 0x1]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7fc, Size: 0x1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7fc, Size: 0x1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7fc, Size: 0x1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7fd, Size: 0x1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7fd, Size: 0x1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7fd, Size: 0x1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7fd, Size: 0x1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7fd, Size: 0x1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7fd, Size: 0x1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7fd, Size: 0x1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7fd, Size: 0x1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7fe, Size: 0x1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x800, Size: 0x2]
	bool bUseSkeletalMeshDrawDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x802, Size: 0x1]
	FName[] DisallowedAnimCurves;//[Offset: 0x808, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x818, Size: 0x8]
	delegate OnConstraintBroken;//[Offset: 0x828, Size: 0x10]
	float TeleportDistanceThreshold;//[Offset: 0x8d8, Size: 0x4]
	float TeleportRotationThreshold;//[Offset: 0x8dc, Size: 0x4]
	uint32 LastPoseTickFrame;//[Offset: 0x8e0, Size: 0x4]
	delegate OnAnimInitialized;//[Offset: 0x938, Size: 0x10]
	delegate OnAnimInitBeforeTick;//[Offset: 0x948, Size: 0x10]
	bool bAutoRegisterWithBudgetAllocator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xad0, Size: 0x1]
	bool bAutoCalculateSignificance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xad0, Size: 0x1]
	bool bShouldUseActorRenderedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xad0, Size: 0x1]
	void ToggleDisablePostProcessBlueprint();// 0x47830c4
	void TermBodiesBelow(FName ParentBoneName);// 0x4783048
	void Stop();// 0x4783034
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x4782f78
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x4782ef4
	void SetTeleportRotationThreshold(float Threshold);// 0x4782e78
	void SetTeleportDistanceThreshold(float Threshold);// 0x4782dfc
	void SetPosition(float InPos, bool bFireNotifies);// 0x4782d3c
	void SetPlayRate(float Rate);// 0x4782cc0
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x4782c44
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x4782b30
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x4782a34
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x47829b0
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x47828a4
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x47827dc
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x4782758
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x47826d4
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x4782614
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x478251c
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x478244c
	void SetAutoRegisterWithBudgetAllocator(bool bInAutoRegisterWithBudgetAllocator);// 0x47823c0
	void SetAnimationMode(byte InAnimationMode);// 0x4782344
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x47822c8
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x478219c
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x47820b0
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x478202c
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x4781f18
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x4781e04
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x4781cd0
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x4781c4c
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x4781b8c
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x4781a6c
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x4781910
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x4781894
	void ResetAllowedAnimCurveEvaluation();// 0x4781880
	void ResetAllBodiesSimulatePhysics();// 0x478186c
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x47817ac
	void Play(bool bLooping);// 0x4781728
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x47815a8
	void K2_SetAnimInstanceClass(class Object NewClass);// 0x4781524
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x4781340
	bool IsPlaying();// 0x4781308
	bool IsBodyGravityEnabled(FName BoneName);// 0x4781280
	bool HasValidAnimationInstance();// 0x4781248
	float GetTeleportRotationThreshold();// 0x4781214
	float GetTeleportDistanceThreshold();// 0x47811e0
	AnimInstance* GetSubInstanceByName(FName InName);// 0x478115c
	Vector GetSkeletalCenterOfMass();// 0x4781124
	AnimInstance* GetPostProcessInstance();// 0x47810f0
	float GetPosition();// 0x47810bc
	float GetPlayRate();// 0x4781088
	float GetMorphTarget(FName MorphTargetName);// 0x4781004
	bool GetDisablePostProcessBlueprint();// 0x4780fcc
	bool GetDisableAnimCurves();// 0x4780fa4
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x4780e34
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x4780d68
	AnimInstance* GetAnimInstance();// 0x4780d34
	byte GetAnimationMode();// 0x4780d00
	bool GetAllowedAnimCurveEvaluate();// 0x4780cdc
	FName FindConstraintBoneName(int ConstraintIndex);// 0x4780c58
	void ClearMorphTargets();// 0x4780c44
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x4780b4c
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x4780a8c
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x478093c
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x47807ec
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x47806d8

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x5b8, Size: 0x8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x5c0, Size: 0x8]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x670, Size: 0x8]
	bool bNoNeedPhysicsAsset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678, Size: 0x1]
	int ForcedLodModel;//[Offset: 0x67c, Size: 0x4]
	int MinLodModel;//[Offset: 0x680, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x690, Size: 0x4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x698, Size: 0x10]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x6bc, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c4, Size: 0x1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c4, Size: 0x1]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c4, Size: 0x1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6c4, Size: 0x1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6c4, Size: 0x1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6c4, Size: 0x1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6c4, Size: 0x1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6c4, Size: 0x1]
	bool bSyncAttachParentLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c5, Size: 0x1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c5, Size: 0x1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c5, Size: 0x1]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6c5, Size: 0x1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6c5, Size: 0x1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6c5, Size: 0x1]
	bool bRenderStatic;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6c5, Size: 0x1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6c5, Size: 0x1]
	bool bIgnoreSkeletalMeshLODBias;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c6, Size: 0x1]
	bool bMobileIsBasePassFirstRender;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c6, Size: 0x1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6d4, Size: 0x1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6d4, Size: 0x1]
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x6e0, Size: 0x1c]
	void UnHideBoneByName(FName BoneName);// 0x478bf2c
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x478bd94
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x478bbfc
	void ShowMaterialSection(int MaterialID, bool bShow, int LODIndex);// 0x478baf8
	void ShowAllMaterialSections(int LODIndex);// 0x478ba7c
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x478b9a4
	void SetTickAnimTimeDilation(float TimeDilation);// 0x478b92c
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x478b854
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x478b78c
	void SetRenderStatic(bool bNewValue);// 0x478b708
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x478b640
	void SetMinLOD(int InNewMinLOD);// 0x478b5c4
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x478b504
	void SetForcedLOD(int InNewForcedLOD);// 0x478b488
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x478b3c8
	bool IsBoneHiddenByName(FName BoneName);// 0x478b340
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x478b288
	float GetTickAnimTimeDilation();// 0x478b26c
	FName GetSocketBoneName(FName InSocketName);// 0x478b1e8
	Vector GetRefPosePosition(int BoneIndex);// 0x478b160
	FName GetParentBone(FName BoneName);// 0x478b0dc
	int GetNumLODs();// 0x478b0a8
	int GetNumBones();// 0x478b074
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x478af78
	FName GetBoneName(int BoneIndex);// 0x478aef4
	int GetBoneIndex(FName BoneName);// 0x478ae70
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x478ad18
	void ClearVertexColorOverride(int LODIndex);// 0x478ac9c
	void ClearSkinWeightOverride(int LODIndex);// 0x478ac20
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x478ab58

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x590, Size: 0x10]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x46f0374
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x46f02bc
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x46f01b0
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x46f0120
	FName[] GetMaterialSlotNames();// 0x46f0094
	MaterialInterface*[] GetMaterials();// 0x46f0008
	int GetMaterialIndex(FName MaterialSlotName);// 0x46eff7c

--------------------------------
Class: MaterialInterface.Object
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x48, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x58, Size: 0x10]
	bool bCanReplaceMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	MaterialInterface* ReplaceMaterial;//[Offset: 0x70, Size: 0x8]
	enum TransparentUseDownsample;//[Offset: 0x78, Size: 0x1]
	bool bForceTransparentOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79, Size: 0x1]
	float LDRAlphaMultiplyFactor;//[Offset: 0x7c, Size: 0x4]
	bool bTranslucentReceiveCSM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bCharacterStencil;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bOverlookDepthClip;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bAddToOverlookRenderSet;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	bool bSupportMobileSpotLightShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x80, Size: 0x1]
	bool bSupportReceiveMobileSpotLightShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x80, Size: 0x1]
	bool bSupportMobilePointLightShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x80, Size: 0x1]
	bool bSupportReceiveMobilePointLightShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x80, Size: 0x1]
	bool bPrtSkySphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x81, Size: 0x1]
	bool bAffectPrt;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x81, Size: 0x1]
	bool bReceivePrt;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x81, Size: 0x1]
	float PrtAffectRatio;//[Offset: 0x84, Size: 0x4]
	void SetStreamingTextureMipOffset(int NewMipOffset);// 0x46eb49c
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups);// 0x46eb34c
	void SetCanReplaceMaterial(bool State);// 0x46eb2e8
	PhysicalMaterial* GetPhysicalMaterial();// 0x46eb2ac
	Material* GetBaseMaterial();// 0x46eb278

--------------------------------
Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]
	FName TextureName;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x90, Size: 0x8]
	ScalarMaterialInput Metallic;//[Offset: 0x98, Size: 0xc]
	ScalarMaterialInput Specular;//[Offset: 0xac, Size: 0xc]
	VectorMaterialInput Normal;//[Offset: 0xc0, Size: 0xc]
	ColorMaterialInput EmissiveColor;//[Offset: 0xd4, Size: 0xc]
	byte MaterialDomain;//[Offset: 0xe8, Size: 0x1]
	byte BlendMode;//[Offset: 0xe9, Size: 0x1]
	byte DecalBlendMode;//[Offset: 0xea, Size: 0x1]
	byte MaterialDecalResponse;//[Offset: 0xeb, Size: 0x1]
	byte ShadingModel;//[Offset: 0xec, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0xf0, Size: 0x4]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0xf8, Size: 0xc]
	ScalarMaterialInput Refraction;//[Offset: 0x10c, Size: 0xc]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x120, Size: 0x10]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x138, Size: 0xc]
	Vector4MaterialInput PlanarReflectionOffsetScale;//[Offset: 0x14c, Size: 0x20]
	bool bAllowOverridingShadingModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x160, Size: 0x1]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x160, Size: 0x1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x160, Size: 0x1]
	bool bFullScreenTranslucency;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x160, Size: 0x1]
	bool bRenderAfterPostProcess;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x160, Size: 0x1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x160, Size: 0x1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x160, Size: 0x1]
	bool bContactShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x160, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x161, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x161, Size: 0x1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x161, Size: 0x1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x161, Size: 0x1]
	bool bForceGammaSpace;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x161, Size: 0x1]
	bool bForceNotDoGammaInPC;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x161, Size: 0x1]
	int NumCustomizedUVs;//[Offset: 0x164, Size: 0x4]
	byte TranslucencyLightingMode;//[Offset: 0x168, Size: 0x1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x16c, Size: 0x4]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170, Size: 0x1]
	float TranslucentShadowDensityScale;//[Offset: 0x174, Size: 0x4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x178, Size: 0x4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x17c, Size: 0x4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x180, Size: 0x4]
	float TranslucentBackscatteringExponent;//[Offset: 0x184, Size: 0x4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x188, Size: 0x10]
	float TranslucentShadowStartOffset;//[Offset: 0x198, Size: 0x4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19c, Size: 0x1]
	bool bInverseDepthTest;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19c, Size: 0x1]
	bool bWriteOnlyAlpha;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19c, Size: 0x1]
	bool bWriteFakeShadowStencil;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x19c, Size: 0x1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x19c, Size: 0x1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x19c, Size: 0x1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x19c, Size: 0x1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x19c, Size: 0x1]
	float LDRTonemappingBrightness;//[Offset: 0x1a0, Size: 0x4]
	float AdjustHairShadowDepthMask;//[Offset: 0x1a4, Size: 0x4]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a8, Size: 0x1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a8, Size: 0x1]
	bool bUsedWithCinematicSkeletalMesh;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a8, Size: 0x1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1a8, Size: 0x1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1a8, Size: 0x1]
	bool bUsedWithGPUParticleSprites;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1a8, Size: 0x1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1a8, Size: 0x1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a8, Size: 0x1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1a9, Size: 0x1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1a9, Size: 0x1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1a9, Size: 0x1]
	bool bUsedWithGeometryCache;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1a9, Size: 0x1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1a9, Size: 0x1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1a9, Size: 0x1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1a9, Size: 0x1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1a9, Size: 0x1]
	bool bUsedWithInstancedSkelMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1aa, Size: 0x1]
	bool bUsedWithSlateBorder;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1aa, Size: 0x1]
	bool bUsedWithSlateFont;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1aa, Size: 0x1]
	bool bUsedWithSlateCustom;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1aa, Size: 0x1]
	bool bSlateShaderDrawDisabledEffect;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1aa, Size: 0x1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1aa, Size: 0x1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1aa, Size: 0x1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1aa, Size: 0x1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ab, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1ab, Size: 0x1]
	bool bUseAlphaToCoverage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1ab, Size: 0x1]
	bool bNotUseFixMobileGGX;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1ab, Size: 0x1]
	bool bForceFloatUV;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1ab, Size: 0x1]
	bool bForceMaterialFloat;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1ab, Size: 0x1]
	bool bForceSimpleShadowMap;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1ab, Size: 0x1]
	bool bDisableShadowColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1ab, Size: 0x1]
	bool bDisableVertexAnimationInShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ac, Size: 0x1]
	bool bDisableLightGrid;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1ac, Size: 0x1]
	bool bDarkMetallic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1ac, Size: 0x1]
	bool bCustomSkylight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1ac, Size: 0x1]
	bool bForceUnlitForLow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1ac, Size: 0x1]
	bool bKeepNormalForLow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1ac, Size: 0x1]
	bool bUseHQPointLight;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1ac, Size: 0x1]
	bool bFoliageSoft;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1ac, Size: 0x1]
	bool bEnableExtraBoneInfluence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ad, Size: 0x1]
	bool bUseForGFur;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1ad, Size: 0x1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1ad, Size: 0x1]
	bool bBypassMobilePointLight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1ad, Size: 0x1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1ad, Size: 0x1]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1ad, Size: 0x1]
	bool bWettable;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1ad, Size: 0x1]
	bool bForceOutputLinearSpace;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1ad, Size: 0x1]
	bool bForce4Bone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ae, Size: 0x1]
	bool bFixAlphaProblem;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1ae, Size: 0x1]
	bool bUseSSGI;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1ae, Size: 0x1]
	bool bUseSecondSkyLight;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1ae, Size: 0x1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1ae, Size: 0x1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1ae, Size: 0x1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1ae, Size: 0x1]
	byte D3D11TessellationMode;//[Offset: 0x1af, Size: 0x1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b0, Size: 0x1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1b0, Size: 0x1]
	float MaxDisplacement;//[Offset: 0x1b4, Size: 0x4]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b8, Size: 0x1]
	bool bOutputVelocityOnBasePass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1b8, Size: 0x1]
	byte ShadingRate;//[Offset: 0x1b9, Size: 0x1]
	MaterialExpression*[] Expressions;//[Offset: 0x1c0, Size: 0x10]
	MaterialFunctionInfo[] MaterialFunctionInfos;//[Offset: 0x1d0, Size: 0x10]
	MaterialParameterCollectionInfo[] MaterialParameterCollectionInfos;//[Offset: 0x1e0, Size: 0x10]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f0, Size: 0x1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f0, Size: 0x1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f0, Size: 0x1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f0, Size: 0x1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f0, Size: 0x1]
	bool bIsSky;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f0, Size: 0x1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f0, Size: 0x1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 0x1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 0x1]
	bool bHasTwoSidedSignExpression;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 0x1]
	uint32 UsageFlagWarnings;//[Offset: 0x1f4, Size: 0x4]
	byte BlendableLocation;//[Offset: 0x1f8, Size: 0x1]
	int BlendablePriority;//[Offset: 0x1fc, Size: 0x4]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x200, Size: 0x1]
	byte RefractionMode;//[Offset: 0x201, Size: 0x1]
	float RefractionDepthBias;//[Offset: 0x204, Size: 0x4]
	bool bIsForceEnableTranslucencyDepthWrite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x208, Size: 0x1]
	bool bZWrite;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x208, Size: 0x1]
	bool DisableACESTonemapping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x209, Size: 0x1]
	bool bHighDefinitionScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20a, Size: 0x1]
	bool bSharedNormalMeshAndParticle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20b, Size: 0x1]
	Guid StateId;//[Offset: 0x20c, Size: 0x10]
	bool[] CachedQualityLevelsUsed;//[Offset: 0x248, Size: 0x10]
	Texture*[] ExpressionTextureReferences;//[Offset: 0x2f8, Size: 0x10]

--------------------------------
Class: ScalarMaterialInput.MaterialInput

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: VectorMaterialInput.MaterialInput

--------------------------------
Class: ColorMaterialInput.MaterialInput

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: Vector4MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	Vector4 Constant;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]
	float G;//[Offset: 0x4, Size: 0x4]
	float B;//[Offset: 0x8, Size: 0x4]
	float A;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x28, Size: 0x8]
	MaterialFunction* Function;//[Offset: 0x30, Size: 0x8]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: MaterialFunction.MaterialFunctionInterface.Object
	FString Description;//[Offset: 0x40, Size: 0x10]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bPrefixParameterNames;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	MaterialExpression*[] FunctionExpressions;//[Offset: 0x58, Size: 0x10]
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	byte MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]
	int C;//[Offset: 0x8, Size: 0x4]
	int D;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Guid ID;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: Texture.Object
	Guid LightingGuid;//[Offset: 0x30, Size: 0x10]
	int MaxTextureSize;//[Offset: 0x40, Size: 0x4]
	int MaxTextureSizePC;//[Offset: 0x44, Size: 0x4]
	int LODBias;//[Offset: 0x48, Size: 0x4]
	int NumCinematicMipLevels;//[Offset: 0x4c, Size: 0x4]
	byte CompressionSettings;//[Offset: 0x50, Size: 0x1]
	byte Filter;//[Offset: 0x51, Size: 0x1]
	byte LODGroup;//[Offset: 0x52, Size: 0x1]
	bool srgb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53, Size: 0x1]
	bool bNotUsedInHighHDRQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x53, Size: 0x1]
	bool bNotUsedInHighQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x53, Size: 0x1]
	bool bNotUsedInMediumQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x53, Size: 0x1]
	bool bNotUsedInLowQuality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x53, Size: 0x1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x53, Size: 0x1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x53, Size: 0x1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x53, Size: 0x1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	int CachedCombinedLODBias;//[Offset: 0x58, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x60, Size: 0x10]
	void UpdateResource();// 0x47ae408

--------------------------------
Class: SkeletalMesh.Object
	Skeleton* Skeleton;//[Offset: 0x48, Size: 0x8]
	float LDMaxDrawDistance;//[Offset: 0x50, Size: 0x4]
	BoxSphereBounds ImportedBounds;//[Offset: 0x54, Size: 0x1c]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x70, Size: 0x1c]
	Vector PositiveBoundsExtension;//[Offset: 0x8c, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0x98, Size: 0xc]
	SkeletalMaterial[] Materials;//[Offset: 0xa8, Size: 0x10]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xb8, Size: 0x10]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xc8, Size: 0x10]
	PerPlatformInt MinLOD;//[Offset: 0xd8, Size: 0x4]
	byte SkelMirrorAxis;//[Offset: 0xdc, Size: 0x1]
	byte SkelMirrorFlipAxis;//[Offset: 0xdd, Size: 0x1]
	bool bUseFullPrecisionPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xde, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xde, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xde, Size: 0x1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xde, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xde, Size: 0x1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xde, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xde, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0xe0, Size: 0x8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0xe8, Size: 0x8]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0xf0, Size: 0x10]
	MorphTarget*[] MorphTargets;//[Offset: 0x100, Size: 0x10]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x288, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x290, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x2a0, Size: 0x10]
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x477ee20
	int NumSockets();// 0x477edec
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x477ed68
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x477ece4
	BoxSphereBounds GetImportedBounds();// 0x477ec98
	BoxSphereBounds GetBounds();// 0x477ec4c
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x477eb78
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x477eaf4

--------------------------------
Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 0x10]
	SmartNameContainer SmartNames;//[Offset: 0x240, Size: 0x50]
	BlendProfile*[] BlendProfiles;//[Offset: 0x2b8, Size: 0x10]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x2c8, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x3a0, Size: 0x10]

--------------------------------
Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ParentIndex;//[Offset: 0x8, Size: 0x4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1]

--------------------------------
Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x4788d20
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x4788c98

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x14]
	float BlendScale;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]
	float SphereRadius;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]

--------------------------------
Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverrideDensities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x18, Size: 0x3c]
	BoneReference[] BonesToRemove;//[Offset: 0x58, Size: 0x10]
	BoneReference[] BonesToPrioritize;//[Offset: 0x68, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x78, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x80, Size: 0x8]
	AnimSequence* BakePoseOverride;//[Offset: 0x88, Size: 0x8]
	FString SourceImportFilename;//[Offset: 0x90, Size: 0x10]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	bool bHasPerLODVertexColors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1]

--------------------------------
Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4]
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 0x4]
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 0x4]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4]
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1]
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1]
	bool bRemapMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bRecalcNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4]
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4]
	bool bEnforceBoneBoundaries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	float VolumeImportance;//[Offset: 0x30, Size: 0x4]
	bool bLockEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	int BaseLOD;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 0x10]
	AnimSequence* RefPoseSeq;//[Offset: 0x168, Size: 0x8]
	int RefFrameIndex;//[Offset: 0x170, Size: 0x4]
	int EncodingPkgVersion;//[Offset: 0x174, Size: 0x4]
	FName RetargetSource;//[Offset: 0x178, Size: 0x8]
	byte AdditiveAnimType;//[Offset: 0x180, Size: 0x1]
	byte RefPoseType;//[Offset: 0x181, Size: 0x1]
	enum interpolation;//[Offset: 0x182, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x183, Size: 0x1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x184, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x184, Size: 0x1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x184, Size: 0x1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x184, Size: 0x1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x188, Size: 0x10]

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10]
	float SequenceLength;//[Offset: 0x90, Size: 0x4]
	float RateScale;//[Offset: 0x94, Size: 0x4]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10]
	float GetPlayLength();// 0x45ad10c

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4]
	FName NotifyName;//[Offset: 0x40, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8]
	float Duration;//[Offset: 0x58, Size: 0x4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	byte MontageTickType;//[Offset: 0x91, Size: 0x1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bTriggerOnFollower;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	int TrackIndex;//[Offset: 0xa4, Size: 0x4]

--------------------------------
Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8]
	int SlotIndex;//[Offset: 0x10, Size: 0x4]
	int SegmentIndex;//[Offset: 0x14, Size: 0x4]
	byte LinkMethod;//[Offset: 0x18, Size: 0x1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4]
	float SegmentLength;//[Offset: 0x20, Size: 0x4]
	float LinkValue;//[Offset: 0x24, Size: 0x4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 0x38]
	float BlendInTime;//[Offset: 0xe0, Size: 0x4]
	AlphaBlend BlendOut;//[Offset: 0xe8, Size: 0x38]
	float BlendOutTime;//[Offset: 0x120, Size: 0x4]
	float BlendOutTriggerTime;//[Offset: 0x124, Size: 0x4]
	FName SyncGroup;//[Offset: 0x128, Size: 0x8]
	int SyncSlotIndex;//[Offset: 0x130, Size: 0x4]
	MarkerSyncData MarkerData;//[Offset: 0x138, Size: 0x20]
	CompositeSection[] CompositeSections;//[Offset: 0x158, Size: 0x10]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x168, Size: 0x10]
	BranchingPoint[] BranchingPoints;//[Offset: 0x178, Size: 0x10]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x189, Size: 0x1]
	bool bEnableAutoBlendOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18a, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x18b, Size: 0x1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x190, Size: 0x10]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x1a0, Size: 0x10]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1b0, Size: 0x28]
	FName TimeStretchCurveName;//[Offset: 0x1d8, Size: 0x8]
	float GetDefaultBlendOutTime();// 0x45a3aec

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	enum BlendOption;//[Offset: 0x0, Size: 0x1]
	CurveFloat* CustomCurve;//[Offset: 0x8, Size: 0x8]
	float blendTime;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x70]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	float GetFloatValue(float InTime);// 0x45fdd80

--------------------------------
Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x45fd590
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x45fd4b4

--------------------------------
Class: RichCurve.IndexedCurve
	byte PreInfinityExtrap;//[Offset: 0x58, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x59, Size: 0x1]
	float DefaultValue;//[Offset: 0x5c, Size: 0x4]
	RichCurveKey[] Keys;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1]
	byte TangentMode;//[Offset: 0x1, Size: 0x1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Value;//[Offset: 0x8, Size: 0x4]
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8]
	float StartTime;//[Offset: 0x38, Size: 0x4]
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8]
	float StartPos;//[Offset: 0x8, Size: 0x4]
	float AnimStartTime;//[Offset: 0xc, Size: 0x4]
	float AnimEndTime;//[Offset: 0x10, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4]
	int LoopingCount;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8]
	float DisplayTime;//[Offset: 0x38, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4]
	float TriggerTime;//[Offset: 0x4, Size: 0x4]
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x33e07d0
	FString GetNotifyName();// 0x45a9d44

--------------------------------
Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x33e07d0
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x33e07d0
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x33e07d0
	FString GetNotifyName();// 0x45aab58

--------------------------------
Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x70]

--------------------------------
Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]
	SmartName Name;//[Offset: 0x8, Size: 0xc]
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bNotForDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x280, Size: 0x10]

--------------------------------
Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24]

--------------------------------
Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8]
	bool bIsLocalSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]
	float PositionStrength;//[Offset: 0x14, Size: 0x4]
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1b8]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e0, Size: 0x10]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f0, Size: 0x104]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x18, Size: 0x8]
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8]
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8]
	Vector Pos1;//[Offset: 0x30, Size: 0xc]
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc]
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc]
	Vector Pos2;//[Offset: 0x54, Size: 0xc]
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc]
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x104]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 0x4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 0x4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 0x1c]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 0x20]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 0x1c]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 0x4c]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 0x4c]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4]
	byte XMotion;//[Offset: 0x18, Size: 0x1]
	byte YMotion;//[Offset: 0x19, Size: 0x1]
	byte ZMotion;//[Offset: 0x1a, Size: 0x1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float Restitution;//[Offset: 0x8, Size: 0x4]
	float ContactDistance;//[Offset: 0xc, Size: 0x4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4]
	byte TwistMotion;//[Offset: 0x18, Size: 0x1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc]
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float MaxForce;//[Offset: 0x8, Size: 0x4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc]
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1]

--------------------------------
Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x104]
	FName ProfileName;//[Offset: 0x104, Size: 0x8]

--------------------------------
Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50]
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28]
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28]

--------------------------------
Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8]
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x31, Size: 0x1]
	delegate OnMontageBlendingOut;//[Offset: 0x48, Size: 0x10]
	delegate OnMontageStarted;//[Offset: 0x58, Size: 0x10]
	delegate OnMontageEnded;//[Offset: 0x68, Size: 0x10]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x78, Size: 0x10]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x108, Size: 0x70]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x178, Size: 0x10]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x459f2b8
	Pawn* TryGetPawnOwner();// 0x459f27c
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x459f1c4
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x459f100
	void SetRootMotionMode(byte Value);// 0x459f07c
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x459efc4
	void SavePoseSnapshot(FName SnapshotName);// 0x459ef40
	void ResetDynamics(enum InTeleportType);// 0x459eec4
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x459ec9c
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x459eae8
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x459ea30
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x459e978
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x459e8c0
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x459e7d0
	void Montage_Resume(const AnimMontage* Montage);// 0x459e754
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x459e5d4
	void Montage_Pause(const AnimMontage* Montage);// 0x459e558
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x459e4a4
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x459e3f0
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x459e368
	bool Montage_IsActive(const AnimMontage* Montage);// 0x459e2e0
	float Montage_GetPosition(const AnimMontage* Montage);// 0x459e25c
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x459e1d8
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x459e150
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x459e0cc
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x459e048
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x459df80
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x459de38
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x459dd70
	bool IsAnyMontagePlaying();// 0x459dd38
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x459dc70
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x459db5c
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x459dac0
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x459da04
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x459d948
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x459d88c
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x459d7d0
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x459d714
	SkeletalMeshComponent* GetOwningComponent();// 0x459d6e0
	Actor* GetOwningActor();// 0x459d6ac
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x459d5f0
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x459d534
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x459d478
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x459d3bc
	float GetInstanceMachineWeight(int MachineIndex);// 0x459d338
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x459d2b4
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x459d230
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x459d1ac
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x459d128
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x459d0a4
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x459d020
	float GetCurveValue(FName CurveName);// 0x459cf9c
	FName GetCurrentStateName(int MachineIndex);// 0x459cf18
	AnimMontage* GetCurrentActiveMontage();// 0x459cee4
	void GetAllCurveNames(out FName[] OutNames);// 0x459ce48
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x459cd70
	void ClearMorphTargets();// 0x459cd5c
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x459cc78
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x33e07d0
	void BlueprintPostEvaluateAnimation();// 0x33e07d0
	void BlueprintInitializeAnimation();// 0x33e07d0
	void BlueprintBeginPlay();// 0x33e07d0

--------------------------------
Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10]
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8]
	FName SnapshotName;//[Offset: 0x28, Size: 0x8]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8]
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10]
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x30, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x38, Size: 0x8]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 0x3c]

--------------------------------
Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName BoneName;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8]
	Object* PRIVATE_InnermostPreviousCDO;//[Offset: 0x58, Size: 0x8]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x68, Size: 0x8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x70, Size: 0x10]
	TimelineTemplate*[] Timelines;//[Offset: 0x80, Size: 0x10]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x90, Size: 0x8]
	byte BlueprintType;//[Offset: 0x98, Size: 0x1]
	int BlueprintSystemVersion;//[Offset: 0x9c, Size: 0x4]
	bool bNativize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bLegacyGeneratedClassIsAuthoritative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x50]
	FName AttachToName;//[Offset: 0x88, Size: 0x8]
	FName ParentComponentOrVariableName;//[Offset: 0x90, Size: 0x8]
	FName ParentComponentOwnerClassName;//[Offset: 0x98, Size: 0x8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa8, Size: 0x10]
	Guid VariableGuid;//[Offset: 0xb8, Size: 0x10]
	FName InternalVariableName;//[Offset: 0xc8, Size: 0x8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4]
	byte LengthMode;//[Offset: 0x2c, Size: 0x1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1]
	bool bValidatedAsWired;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d, Size: 0x1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10]
	Guid TimelineGuid;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: TTEventTrack.TTTrackBase
	CurveFloat* CurveKeys;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: TTTrackBase
	FName TrackName;//[Offset: 0x0, Size: 0x8]
	bool bIsExternalCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: TTFloatTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: TTVectorTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x70]
	Vector GetVectorValue(float InTime);// 0x45fff24

--------------------------------
Class: TTLinearColorTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x70]
	float AdjustHue;//[Offset: 0x1f0, Size: 0x4]
	float AdjustSaturation;//[Offset: 0x1f4, Size: 0x4]
	float AdjustBrightness;//[Offset: 0x1f8, Size: 0x4]
	float AdjustBrightnessCurve;//[Offset: 0x1fc, Size: 0x4]
	float AdjustVibrance;//[Offset: 0x200, Size: 0x4]
	float AdjustMinAlpha;//[Offset: 0x204, Size: 0x4]
	float AdjustMaxAlpha;//[Offset: 0x208, Size: 0x4]
	LinearColor GetLinearColorValue(float InTime);// 0x45fe4cc
	LinearColor GetClampedLinearColorValue(float InTime);// 0x45fe43c

--------------------------------
Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8]
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4]
	byte Weights;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float SavedPosition;//[Offset: 0xc, Size: 0x4]
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x188, Size: 0x8]
	float GravityScale;//[Offset: 0x190, Size: 0x4]
	float MaxStepHeight;//[Offset: 0x194, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x198, Size: 0x4]
	float JumpOffJumpZFactor;//[Offset: 0x19c, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x1a0, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x1a4, Size: 0x4]
	byte MovementMode;//[Offset: 0x1a8, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x1a9, Size: 0x1]
	enum NetworkSmoothingMode;//[Offset: 0x1aa, Size: 0x1]
	float GroundFriction;//[Offset: 0x1ac, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x1cc, Size: 0x4]
	float MaxWalkSpeedCrouched;//[Offset: 0x1d0, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x1d4, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x1d8, Size: 0x4]
	float MaxCustomMovementSpeed;//[Offset: 0x1dc, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x1e0, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x1e4, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x1e8, Size: 0x4]
	float BrakingFriction;//[Offset: 0x1ec, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x1f0, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x1f4, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x1f8, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x1fc, Size: 0x4]
	float AirControl;//[Offset: 0x200, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x204, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x208, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x20c, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x210, Size: 0x4]
	float Buoyancy;//[Offset: 0x214, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x218, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x21c, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x220, Size: 0xc]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22c, Size: 0x1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22c, Size: 0x1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22c, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22c, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22c, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22c, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x22c, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22d, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22d, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22d, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22d, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22d, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22d, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22e, Size: 0x1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22e, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22e, Size: 0x1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22e, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x22e, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x22e, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x22e, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x22e, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x230, Size: 0x8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x238, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x23c, Size: 0x4]
	float Mass;//[Offset: 0x240, Size: 0x4]
	float StandingDownwardForceScale;//[Offset: 0x244, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x248, Size: 0x4]
	float PushForceFactor;//[Offset: 0x24c, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x250, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x254, Size: 0x4]
	float MinTouchForce;//[Offset: 0x258, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x25c, Size: 0x4]
	float RepulsionForce;//[Offset: 0x260, Size: 0x4]
	Vector Acceleration;//[Offset: 0x264, Size: 0xc]
	Quat LastUpdateRotation;//[Offset: 0x270, Size: 0x10]
	Vector LastUpdateLocation;//[Offset: 0x280, Size: 0xc]
	Vector LastUpdateVelocity;//[Offset: 0x28c, Size: 0xc]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x298, Size: 0x4]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x29c, Size: 0x4]
	float ServerLastClientAdjustmentTime;//[Offset: 0x2a0, Size: 0x4]
	Vector PendingImpulseToApply;//[Offset: 0x2a4, Size: 0xc]
	Vector PendingForceToApply;//[Offset: 0x2b0, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x2bc, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x2c8, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x2cc, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x2d0, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2d4, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x2d8, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2dc, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2e0, Size: 0x4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2e4, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2e8, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2ec, Size: 0x4]
	float NetProxyShrinkRadius;//[Offset: 0x2f0, Size: 0x4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2f4, Size: 0x4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2f8, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2fc, Size: 0x4]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x300, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x304, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x308, Size: 0x4]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x30c, Size: 0x4]
	float LedgeCheckThreshold;//[Offset: 0x310, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x314, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x318, Size: 0x94]
	byte DefaultLandMovementMode;//[Offset: 0x3ac, Size: 0x1]
	byte DefaultWaterMovementMode;//[Offset: 0x3ad, Size: 0x1]
	byte GroundMovementMode;//[Offset: 0x3ae, Size: 0x1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3af, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3af, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3af, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3af, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3af, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3af, Size: 0x1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3af, Size: 0x1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3af, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b0, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3b0, Size: 0x1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3b0, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3b0, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3b0, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3b0, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3b0, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3b0, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b1, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3b1, Size: 0x1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3b1, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3b1, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3b1, Size: 0x1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3b1, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3b1, Size: 0x1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b2, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3b2, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3b2, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3b2, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3b2, Size: 0x1]
	float AvoidanceConsiderationRadius;//[Offset: 0x3c4, Size: 0x4]
	Vector RequestedVelocity;//[Offset: 0x3c8, Size: 0xc]
	int AvoidanceUID;//[Offset: 0x3d4, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3d8, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3dc, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3e0, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x3e4, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x3e8, Size: 0xc]
	float NavMeshProjectionInterval;//[Offset: 0x498, Size: 0x4]
	float NavMeshProjectionTimer;//[Offset: 0x49c, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x4a0, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x4a4, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x4a8, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x4ac, Size: 0x4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x4b0, Size: 0x58]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x518, Size: 0x4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x520, Size: 0xf8]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x6b0, Size: 0x40]
	Vector AnimRootMotionVelocity;//[Offset: 0x6f0, Size: 0xc]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x45ece78
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x45ecdfc
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x45ecd3c
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x45eccb4
	void SetGroupsToIgnore(int GroupFlags);// 0x45ecc38
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x45ecbb0
	void SetGroupsToAvoid(int GroupFlags);// 0x45ecb34
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x45ecaac
	void SetAvoidanceGroup(int GroupFlags);// 0x45eca30
	void SetAvoidanceEnabled(bool bEnable);// 0x45ec9ac
	float K2_GetWalkableFloorZ();// 0x45ec978
	float K2_GetWalkableFloorAngle();// 0x45ec944
	float K2_GetModifiedMaxAcceleration();// 0x45ec908
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x45ec81c
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x45ec680
	bool IsWalking();// 0x45ec640
	bool IsWalkable(out const HitResult Hit);// 0x45ec584
	float GetValidPerchRadius();// 0x45ec550
	float GetPerchRadiusThreshold();// 0x45ec51c
	PrimitiveComponent* GetMovementBase();// 0x45ec4e8
	float GetMinAnalogSpeed();// 0x45ec4ac
	float GetMaxJumpHeightWithJumpTime();// 0x45ec470
	float GetMaxJumpHeight();// 0x45ec434
	float GetMaxBrakingDeceleration();// 0x45ec3f8
	float GetMaxAcceleration();// 0x45ec3bc
	Vector GetLastUpdateVelocity();// 0x45ec394
	Rotator GetLastUpdateRotation();// 0x45ec358
	Vector GetLastUpdateLocation();// 0x45ec334
	Vector GetImpartedMovementBaseVelocity();// 0x45ec2f4
	Vector GetCurrentAcceleration();// 0x45ec2bc
	Character* GetCharacterOwner();// 0x45ec2a0
	float GetAnalogInputModifier();// 0x45ec26c
	void DisableMovement();// 0x45ec250
	void ClearAccumulatedForces();// 0x45ec234
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x45ec054
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x45ebf0c
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x45ebe44
	void AddForce(Vector Force);// 0x45ebdc0

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x170, Size: 0x8]
	Vector K2_GetInputVector();// 0x47273e0
	bool IsMoveInputIgnored();// 0x47273a0
	Vector GetPendingInputVector();// 0x4727368
	Pawn* GetPawnOwner();// 0x4727334
	Vector GetLastInputVector();// 0x47272fc
	Vector ConsumeInputVector();// 0x47272bc
	void AddInputVector(Vector WorldVector, bool bForce);// 0x47271f4

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0x130, Size: 0x30]
	float FixedPathBrakingDistance;//[Offset: 0x160, Size: 0x4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x164, Size: 0x1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x164, Size: 0x1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x164, Size: 0x1]
	MovementProperties MovementState;//[Offset: 0x165, Size: 0x1]
	Object* PathFollowingComp;//[Offset: 0x168, Size: 0x8]
	void StopMovementKeepPathing();// 0x46f8e64
	void StopActiveMovement();// 0x46f8e48
	bool IsSwimming();// 0x46f8e08
	bool IsMovingOnGround();// 0x46f8dc8
	bool IsFlying();// 0x46f8d88
	bool IsFalling();// 0x46f8d48
	bool IsCrouching();// 0x46f8d08

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xf0, Size: 0x8]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xf8, Size: 0x8]
	Vector Velocity;//[Offset: 0x104, Size: 0xc]
	Vector PlaneConstraintNormal;//[Offset: 0x110, Size: 0xc]
	Vector PlaneConstraintOrigin;//[Offset: 0x11c, Size: 0xc]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x128, Size: 0x1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x128, Size: 0x1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x128, Size: 0x1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x128, Size: 0x1]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x128, Size: 0x1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x128, Size: 0x1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x128, Size: 0x1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x128, Size: 0x1]
	enum PlaneConstraintAxisSetting;//[Offset: 0x12b, Size: 0x1]
	void StopMovementImmediately();// 0x46f2504
	void SnapUpdatedComponentToPlane();// 0x46f24e8
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x46f2464
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x46f23e0
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x46f235c
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x46f2298
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x46f220c
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x46f2188
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x46f2104
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x46f1f40
	float K2_GetModifiedMaxSpeed();// 0x46f1f04
	float K2_GetMaxSpeedModifier();// 0x46f1ec8
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x46f1e38
	Vector GetPlaneConstraintOrigin();// 0x46f1df8
	Vector GetPlaneConstraintNormal();// 0x46f1db8
	enum GetPlaneConstraintAxisSetting();// 0x46f1d9c
	PhysicsVolume* GetPhysicsVolume();// 0x46f1d60
	float GetMaxSpeed();// 0x46f1d24
	float GetGravityZ();// 0x46f1ce8
	Vector ConstrainNormalToPlane(Vector Normal);// 0x46f1c50
	Vector ConstrainLocationToPlane(Vector Location);// 0x46f1bb8
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x46f1b20

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4]
	float AgentHeight;//[Offset: 0x8, Size: 0x4]
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]
	FString SubPathString;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float FloorDist;//[Offset: 0x4, Size: 0x4]
	float LineDist;//[Offset: 0x8, Size: 0x4]
	HitResult HitResult;//[Offset: 0xc, Size: 0x88]

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	int FaceIndex;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]
	float Distance;//[Offset: 0xc, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 0xc]
	float PenetrationDepth;//[Offset: 0x58, Size: 0x4]
	int Item;//[Offset: 0x5c, Size: 0x4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 0x8]
	Actor* Actor;//[Offset: 0x68, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 0x8]
	FName BoneName;//[Offset: 0x78, Size: 0x8]
	FName MyBoneName;//[Offset: 0x80, Size: 0x8]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 0x1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0xe9, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0xec, Size: 0xc]

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendWeight;//[Offset: 0x4, Size: 0x4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30]

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x378, Size: 0x4]
	int Priority;//[Offset: 0x37c, Size: 0x4]
	float FluidFriction;//[Offset: 0x380, Size: 0x4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x384, Size: 0x1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x384, Size: 0x1]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x5a8, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x5ac, Size: 0x4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x45e3150
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x45e308c
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x45e2fc8
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x45e2ee0
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x45e2e00
	float GetUnscaledCapsuleRadius();// 0x45e2de4
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x45e2dc0
	float GetUnscaledCapsuleHalfHeight();// 0x45e2da4
	float GetShapeScale();// 0x45e2d64
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x45e2c4c
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x45e2b50
	float GetScaledCapsuleRadius();// 0x45e2b20
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x45e2ae0
	float GetScaledCapsuleHalfHeight();// 0x45e2abc

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x590, Size: 0x8]
	Color ShapeColor;//[Offset: 0x598, Size: 0x4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59c, Size: 0x1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59c, Size: 0x1]
	class NavAreaBase* AreaClass;//[Offset: 0x5a0, Size: 0x8]

--------------------------------
Class: NavAreaBase.Object

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc]
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x158]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	float Position;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0xf8]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x140, Size: 0xc]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x14c, Size: 0xc]

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4]
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4]
	float DamageFalloff;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	player* player;//[Offset: 0x3b8, Size: 0x8]
	Pawn* AcknowledgedPawn;//[Offset: 0x3c0, Size: 0x8]
	HUD* MyHUD;//[Offset: 0x3c8, Size: 0x8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x3d0, Size: 0x8]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x3d8, Size: 0x8]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e0, Size: 0x1]
	Rotator TargetViewRotation;//[Offset: 0x3e4, Size: 0xc]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x3fc, Size: 0x4]
	Actor*[] HiddenActors;//[Offset: 0x408, Size: 0x10]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x418, Size: 0x10]
	float LastSpectatorStateSynchTime;//[Offset: 0x42c, Size: 0x4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x430, Size: 0xc]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x43c, Size: 0xc]
	int ClientCap;//[Offset: 0x448, Size: 0x4]
	CheatManager* CheatManager;//[Offset: 0x450, Size: 0x8]
	class CheatManager* CheatClass;//[Offset: 0x458, Size: 0x8]
	PlayerInput* PlayerInput;//[Offset: 0x460, Size: 0x8]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x468, Size: 0x10]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4e8, Size: 0x1]
	byte NetPlayerIndex;//[Offset: 0x4e9, Size: 0x1]
	NetConnection* PendingSwapConnection;//[Offset: 0x528, Size: 0x8]
	NetConnection* NetConnection;//[Offset: 0x530, Size: 0x8]
	float InputYawScale;//[Offset: 0x544, Size: 0x4]
	float InputPitchScale;//[Offset: 0x548, Size: 0x4]
	float InputRollScale;//[Offset: 0x54c, Size: 0x4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x550, Size: 0x1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x550, Size: 0x1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x550, Size: 0x1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x550, Size: 0x1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x550, Size: 0x1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x550, Size: 0x1]
	float ForceFeedbackScale;//[Offset: 0x554, Size: 0x4]
	Key[] ClickEventKeys;//[Offset: 0x558, Size: 0x10]
	byte DefaultMouseCursor;//[Offset: 0x568, Size: 0x1]
	byte CurrentMouseCursor;//[Offset: 0x569, Size: 0x1]
	byte DefaultClickTraceChannel;//[Offset: 0x56a, Size: 0x1]
	byte CurrentClickTraceChannel;//[Offset: 0x56b, Size: 0x1]
	float HitResultTraceDistance;//[Offset: 0x56c, Size: 0x4]
	uint16 SeamlessTravelCount;//[Offset: 0x570, Size: 0x2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x572, Size: 0x2]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x5e8, Size: 0x8]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5f0, Size: 0x1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x608, Size: 0x8]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x660, Size: 0x8]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66c, Size: 0x1]
	Vector SpawnLocation;//[Offset: 0x670, Size: 0xc]
	bool WasInputKeyJustReleased(Key Key);// 0x47419ec
	bool WasInputKeyJustPressed(Key Key);// 0x4741880
	void ToggleSpeaking(bool bInSpeaking);// 0x47417f4
	void SwitchLevel(FString URL);// 0x4741760
	void StopHapticEffect(enum Hand);// 0x47416e4
	void StartFire(byte FireModeNum);// 0x4741660
	void SetVirtualJoystickVisibility(bool bVisible);// 0x47415d4
	void SetViewTargetWithBlend(Actor* NewViewTarget, float blendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x4741458
	void SetName(FString S);// 0x47413c4
	void SetMouseLocation(const int X, const int Y);// 0x4741310
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x4741258
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x4741168
	void SetDisableHaptics(bool bNewDisabled);// 0x47410dc
	void SetControllerLightColor(Color Color);// 0x4741064
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x4740eb8
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x4740dbc
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x4740d00
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x4740bf0
	void ServerViewPrevPlayer();// 0x4740b94
	void ServerViewNextPlayer();// 0x4740b38
	void ServerVerifyViewTarget();// 0x4740adc
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x4740a30
	void ServerUpdateLevelVisibility(FName PackageName, bool bIsVisible);// 0x4740944
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x4740854
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x47405ac
	void ServerToggleAILogging();// 0x4740550
	void ServerShortTimeout();// 0x47404f4
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x474043c
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x4740344
	void ServerRestartPlayer();// 0x47402e8
	void ServerPause();// 0x474028c
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x47401f0
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x473ff48
	void ServerCheckClientPossessionReliable();// 0x473feec
	void ServerCheckClientPossession();// 0x473fe90
	void ServerChangeName(FString S);// 0x473fdd4
	void ServerCamera(FName NewMode);// 0x473fd28
	void ServerAcknowledgePossession(Pawn* P);// 0x473fc7c
	void SendToConsole(FString Command);// 0x473fbe8
	void RestartLevel();// 0x473fbcc
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x473faac
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x473f974
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x473f6f8
	void Pause();// 0x473f6dc
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x473f650
	void LocalTravel(FString URL);// 0x473f5bc
	bool IsInputKeyDown(Key Key);// 0x473f450
	void GetViewportSize(out int SizeX, out int SizeY);// 0x473f374
	SpectatorPawn* GetSpectatorPawn();// 0x473f358
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x473f268
	Vector GetInputVectorKeyState(Key Key);// 0x473f0fc
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x473ef8c
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x473eeb0
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x473ed34
	float GetInputKeyTimeDown(Key Key);// 0x473ebcc
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x473eaac
	float GetInputAnalogKeyState(Key Key);// 0x473e944
	HUD* GetHUD();// 0x473e910
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x473e774
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x473e604
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x473e494
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x473e334
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x473e200
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x473e0cc
	Vector GetFocalLocation();// 0x473e08c
	void FOV(float NewFOV);// 0x473e008
	void EnableCheats();// 0x473dfec
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x473de8c
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x473dda4
	void ConsoleKey(Key Key);// 0x473dc44
	void ClientWasKicked(const FText KickReason);// 0x473db64
	void ClientVoiceHandshakeComplete();// 0x473db48
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x473dab4
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x473d91c
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x473d754
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x473d5fc
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x473d4ac
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x473d364
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x473d2a8
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x473d1e0
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x473d15c
	void ClientStartOnlineSession();// 0x473d140
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x473d0bc
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x473cfb0
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x473cf24
	void ClientSetHUD(class HUD NewHUDClass);// 0x473cea0
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x473cda4
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x473cc3c
	void ClientSetCameraMode(FName NewCamMode);// 0x473cbb8
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x473ca30
	void ClientSetBlockOnAsyncLoading();// 0x473ca14
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x473c934
	void ClientReturnToMainMenu(FString ReturnReason);// 0x473c8a0
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x473c81c
	void ClientRestart(Pawn* NewPawn);// 0x473c798
	void ClientReset();// 0x473c77c
	void ClientRepObjRef(Object* Object);// 0x473c6f8
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x473c588
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x473c444
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x473c334
	void ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, FName Tag);// 0x473c1e4
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x473c0a8
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x473be30
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x473bc68
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x473bb5c
	void ClientIgnoreMoveInput(bool bIgnore);// 0x473bad0
	void ClientIgnoreLookInput(bool bIgnore);// 0x473ba44
	void ClientGotoState(FName NewState);// 0x473b9c0
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x473b8f8
	void ClientForceGarbageCollection();// 0x473b8dc
	void ClientFlushLevelStreaming();// 0x473b8c8
	void ClientEndOnlineSession();// 0x473b8ac
	void ClientEnableNetworkVoice(bool bEnable);// 0x473b820
	void ClientCommitMapChange();// 0x473b804
	void ClientClearCameraLensEffects();// 0x473b7e8
	void ClientCapBandwidth(int Cap);// 0x473b764
	void ClientCancelPendingMapChange();// 0x473b748
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x473b64c
	void ClearAudioListenerOverride();// 0x473b638
	void ClearAudioListenerAttenuationOverride();// 0x473b624
	bool CanRestartPlayer();// 0x473b5e4
	void Camera(FName NewMode);// 0x473b560
	void AddYawInput(float Val);// 0x473b4dc
	void AddRollInput(float Val);// 0x473b458
	void AddPitchInput(float Val);// 0x473b3d4
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x473b350

--------------------------------
Class: player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x340, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x348, Size: 0x8]
	float DefaultFOV;//[Offset: 0x358, Size: 0x4]
	float DefaultOrthoWidth;//[Offset: 0x360, Size: 0x4]
	float DefaultAspectRatio;//[Offset: 0x368, Size: 0x4]
	CameraCacheEntry CameraCache;//[Offset: 0x3b0, Size: 0x5d0]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x980, Size: 0x5d0]
	TViewTarget ViewTarget;//[Offset: 0xf50, Size: 0x5e0]
	TViewTarget PendingViewTarget;//[Offset: 0x1530, Size: 0x5e0]
	int OverrideCullingMask;//[Offset: 0x1b24, Size: 0x4]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1b30, Size: 0x5d0]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x2100, Size: 0x5d0]
	CameraModifier*[] ModifierList;//[Offset: 0x26d0, Size: 0x10]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x26e0, Size: 0x10]
	float FreeCamDistance;//[Offset: 0x26f0, Size: 0x4]
	Vector FreeCamOffset;//[Offset: 0x26f4, Size: 0xc]
	Vector ViewTargetOffset;//[Offset: 0x2700, Size: 0xc]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x2720, Size: 0x10]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x2730, Size: 0x8]
	CameraAnimInst* AnimInstPool;//[Offset: 0x2738, Size: 0x8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2778, Size: 0x10]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x2798, Size: 0x10]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x27a8, Size: 0x10]
	CameraActor* AnimCameraActor;//[Offset: 0x27b8, Size: 0x8]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27c0, Size: 0x1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27c0, Size: 0x1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x27c0, Size: 0x1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x27c0, Size: 0x1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27c1, Size: 0x1]
	float ViewPitchMin;//[Offset: 0x27c4, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x27c8, Size: 0x4]
	float ViewYawMin;//[Offset: 0x27cc, Size: 0x4]
	float ViewYawMax;//[Offset: 0x27d0, Size: 0x4]
	float ViewRollMin;//[Offset: 0x27d4, Size: 0x4]
	float ViewRollMax;//[Offset: 0x27d8, Size: 0x4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x4737a18
	void StopCameraFade();// 0x47379fc
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x4737934
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x473786c
	void StopAllInstancesOfCameraAnim(CameraAnim* anim, bool bImmediate);// 0x47377a4
	void StopAllCameraShakes(bool bImmediately);// 0x4737718
	void StopAllCameraAnims(bool bImmediate);// 0x473768c
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x47374c4
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x47373bc
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x473732c
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x47372a8
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x473715c
	CameraAnimInst* PlayCameraAnim(CameraAnim* anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x4736e98
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x4736d44
	void OnPhotographySessionStart();// 0x4736d28
	void OnPhotographySessionEnd();// 0x4736d0c
	void OnPhotographyMultiPartCaptureStart();// 0x4736cf0
	void OnPhotographyMultiPartCaptureEnd();// 0x4736cd4
	PlayerController* GetOwningPlayerController();// 0x4736c98
	float GetFOVAngle();// 0x4736c5c
	float GetCullingMask();// 0x4736c20
	Rotator GetCameraRotation();// 0x4736be8
	Vector GetCameraLocation();// 0x4736bb0
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x4736b24
	void ClearCameraLensEffects();// 0x4736b08
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV, out int NewCullingMask);// 0x33e07d0
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x4736a7c
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x47369f0

--------------------------------
Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x5c0]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float FOV;//[Offset: 0x18, Size: 0x4]
	float DesiredFOV;//[Offset: 0x1c, Size: 0x4]
	float OrthoWidth;//[Offset: 0x20, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 0x4]
	float AspectRatio;//[Offset: 0x2c, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x31, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x34, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x570]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x5b0, Size: 0x8]
	int CullingMask;//[Offset: 0x5b8, Size: 0x4]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bOverride_BlueCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bOverride_ExpandGamut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]
	bool bOverride_MobileBloom1Scale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]
	bool bOverride_MobileBloom2Scale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]
	bool bOverride_MobileBloom3Scale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]
	bool bOverride_MobileBloom4Scale;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]
	bool bOverride_MobileSaturationThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]
	bool bOverride_MobileSaturationIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bOverride_CameraISO;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bOverride_MobileAOSwitch;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bOverride_MobileAOInstensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bOverride_AOAttenuationDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bOverride_AOAttenuationSpeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bOverride_MobileAOFilterMethod;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldMaxBokehSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldMethod;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldBokehShape;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldColorThreshold;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldSizeThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool bOverride_SSGISwitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool bOverride_SSGIInstensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bOverride_SSGIDistance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	bool bOverride_SSGIIndirectMinDiffuse;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1]
	bool bOverride_SSGIVPLMinIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1]
	bool bOverride_SSGIUpdateInterval;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1]
	bool bOverride_SSGIIndirectResPercent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1]
	bool bOverride_SSGIRayMarchingResPercent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1]
	bool bOverride_SSGIMatchDistance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1]
	bool bOverride_SSGIVPLAge;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1]
	bool bOverride_SSGIVPLReplaceNum;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1]
	bool bOverride_SSGIVPLBias;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 0x1]
	bool bOverride_SSGIVPLCoffiConst;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 0x1]
	bool bOverride_SSGIVPLCoffiLinear;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 0x1]
	bool bOverride_SSGIVPLCoffiQuadric;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 0x1]
	bool bOverride_SSGIVPLGrid;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 0x1]
	bool bOverride_SSGIVPLMinPercent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 0x1]
	bool bOverride_FsrRcasSharpness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x17, Size: 0x1]
	bool bOverride_PrtSwitch;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x17, Size: 0x1]
	bool bOverride_PrtIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x17, Size: 0x1]
	bool bOverride_PrtSkyAOIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x17, Size: 0x1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x17, Size: 0x1]
	byte BloomMethod;//[Offset: 0x18, Size: 0x1]
	byte AutoExposureMethod;//[Offset: 0x19, Size: 0x1]
	byte DepthOfFieldMethod;//[Offset: 0x1a, Size: 0x1]
	float WhiteTemp;//[Offset: 0x1c, Size: 0x4]
	float WhiteTint;//[Offset: 0x20, Size: 0x4]
	Vector4 ColorSaturation;//[Offset: 0x30, Size: 0x10]
	Vector4 ColorContrast;//[Offset: 0x40, Size: 0x10]
	Vector4 ColorGamma;//[Offset: 0x50, Size: 0x10]
	Vector4 ColorGain;//[Offset: 0x60, Size: 0x10]
	Vector4 ColorOffset;//[Offset: 0x70, Size: 0x10]
	Vector4 ColorSaturationShadows;//[Offset: 0x80, Size: 0x10]
	Vector4 ColorContrastShadows;//[Offset: 0x90, Size: 0x10]
	Vector4 ColorGammaShadows;//[Offset: 0xa0, Size: 0x10]
	Vector4 ColorGainShadows;//[Offset: 0xb0, Size: 0x10]
	Vector4 ColorOffsetShadows;//[Offset: 0xc0, Size: 0x10]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 0x10]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 0x10]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 0x10]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 0x10]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 0x10]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 0x10]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 0x10]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 0x10]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 0x10]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 0x10]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 0x4]
	float ColorCorrectionShadowsMax;//[Offset: 0x174, Size: 0x4]
	float BlueCorrection;//[Offset: 0x178, Size: 0x4]
	float ExpandGamut;//[Offset: 0x17c, Size: 0x4]
	float FilmSlope;//[Offset: 0x180, Size: 0x4]
	float FilmToe;//[Offset: 0x184, Size: 0x4]
	float FilmShoulder;//[Offset: 0x188, Size: 0x4]
	float FilmBlackClip;//[Offset: 0x18c, Size: 0x4]
	float FilmWhiteClip;//[Offset: 0x190, Size: 0x4]
	LinearColor FilmWhitePoint;//[Offset: 0x194, Size: 0x10]
	LinearColor FilmShadowTint;//[Offset: 0x1a4, Size: 0x10]
	float FilmShadowTintBlend;//[Offset: 0x1b4, Size: 0x4]
	float FilmShadowTintAmount;//[Offset: 0x1b8, Size: 0x4]
	float FilmSaturation;//[Offset: 0x1bc, Size: 0x4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1c0, Size: 0x10]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1d0, Size: 0x10]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1e0, Size: 0x10]
	float FilmContrast;//[Offset: 0x1f0, Size: 0x4]
	float FilmToeAmount;//[Offset: 0x1f4, Size: 0x4]
	float FilmHealAmount;//[Offset: 0x1f8, Size: 0x4]
	float FilmDynamicRange;//[Offset: 0x1fc, Size: 0x4]
	LinearColor SceneColorTint;//[Offset: 0x200, Size: 0x10]
	float SceneFringeIntensity;//[Offset: 0x210, Size: 0x4]
	float ChromaticAberrationStartOffset;//[Offset: 0x214, Size: 0x4]
	float BloomIntensity;//[Offset: 0x218, Size: 0x4]
	float BloomThreshold;//[Offset: 0x21c, Size: 0x4]
	float MobileBloom1Scale;//[Offset: 0x220, Size: 0x4]
	float MobileBloom2Scale;//[Offset: 0x224, Size: 0x4]
	float MobileBloom3Scale;//[Offset: 0x228, Size: 0x4]
	float MobileBloom4Scale;//[Offset: 0x22c, Size: 0x4]
	float MobileSaturationThreshold;//[Offset: 0x230, Size: 0x4]
	float MobileSaturationIntensity;//[Offset: 0x234, Size: 0x4]
	float BloomSizeScale;//[Offset: 0x238, Size: 0x4]
	float Bloom1Size;//[Offset: 0x23c, Size: 0x4]
	float Bloom2Size;//[Offset: 0x240, Size: 0x4]
	float Bloom3Size;//[Offset: 0x244, Size: 0x4]
	float Bloom4Size;//[Offset: 0x248, Size: 0x4]
	float Bloom5Size;//[Offset: 0x24c, Size: 0x4]
	float Bloom6Size;//[Offset: 0x250, Size: 0x4]
	LinearColor Bloom1Tint;//[Offset: 0x254, Size: 0x10]
	LinearColor Bloom2Tint;//[Offset: 0x264, Size: 0x10]
	LinearColor Bloom3Tint;//[Offset: 0x274, Size: 0x10]
	LinearColor Bloom4Tint;//[Offset: 0x284, Size: 0x10]
	LinearColor Bloom5Tint;//[Offset: 0x294, Size: 0x10]
	LinearColor Bloom6Tint;//[Offset: 0x2a4, Size: 0x10]
	float BloomConvolutionSize;//[Offset: 0x2b4, Size: 0x4]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2b8, Size: 0x8]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2c0, Size: 0x8]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2c8, Size: 0x4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2cc, Size: 0x4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2d0, Size: 0x4]
	float BloomConvolutionBufferScale;//[Offset: 0x2d4, Size: 0x4]
	Texture* BloomDirtMask;//[Offset: 0x2d8, Size: 0x8]
	float BloomDirtMaskIntensity;//[Offset: 0x2e0, Size: 0x4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2e4, Size: 0x10]
	LinearColor AmbientCubemapTint;//[Offset: 0x2f4, Size: 0x10]
	float AmbientCubemapIntensity;//[Offset: 0x304, Size: 0x4]
	TextureCube* AmbientCubemap;//[Offset: 0x308, Size: 0x8]
	float CameraShutterSpeed;//[Offset: 0x310, Size: 0x4]
	float CameraISO;//[Offset: 0x314, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x318, Size: 0x4]
	float DepthOfFieldMinFstop;//[Offset: 0x31c, Size: 0x4]
	int DepthOfFieldBladeCount;//[Offset: 0x320, Size: 0x4]
	float AutoExposureBias;//[Offset: 0x324, Size: 0x4]
	float AutoExposureLowPercent;//[Offset: 0x328, Size: 0x4]
	float AutoExposureHighPercent;//[Offset: 0x32c, Size: 0x4]
	float AutoExposureMinBrightness;//[Offset: 0x330, Size: 0x4]
	float AutoExposureMaxBrightness;//[Offset: 0x334, Size: 0x4]
	float AutoExposureSpeedUp;//[Offset: 0x338, Size: 0x4]
	float AutoExposureSpeedDown;//[Offset: 0x33c, Size: 0x4]
	float HistogramLogMin;//[Offset: 0x340, Size: 0x4]
	float HistogramLogMax;//[Offset: 0x344, Size: 0x4]
	float AutoExposureCalibrationConstant;//[Offset: 0x348, Size: 0x4]
	float LensFlareIntensity;//[Offset: 0x34c, Size: 0x4]
	LinearColor LensFlareTint;//[Offset: 0x350, Size: 0x10]
	float LensFlareBokehSize;//[Offset: 0x360, Size: 0x4]
	float LensFlareThreshold;//[Offset: 0x364, Size: 0x4]
	Texture* LensFlareBokehShape;//[Offset: 0x368, Size: 0x8]
	LinearColor LensFlareTints;//[Offset: 0x370, Size: 0x10]
	float VignetteIntensity;//[Offset: 0x3f0, Size: 0x4]
	float GrainJitter;//[Offset: 0x3f4, Size: 0x4]
	float GrainIntensity;//[Offset: 0x3f8, Size: 0x4]
	bool bMobileAOSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3fc, Size: 0x1]
	float MobileAOInstensity;//[Offset: 0x400, Size: 0x4]
	float AOAttenuationDistance;//[Offset: 0x404, Size: 0x4]
	float AOAttenuationSpeed;//[Offset: 0x408, Size: 0x4]
	byte MobileAOFilterMethod;//[Offset: 0x40c, Size: 0x1]
	float AmbientOcclusionIntensity;//[Offset: 0x410, Size: 0x4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x414, Size: 0x4]
	float AmbientOcclusionRadius;//[Offset: 0x418, Size: 0x4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41c, Size: 0x1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x420, Size: 0x4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x424, Size: 0x4]
	float AmbientOcclusionDistance;//[Offset: 0x428, Size: 0x4]
	float AmbientOcclusionPower;//[Offset: 0x42c, Size: 0x4]
	float AmbientOcclusionBias;//[Offset: 0x430, Size: 0x4]
	float AmbientOcclusionQuality;//[Offset: 0x434, Size: 0x4]
	float AmbientOcclusionMipBlend;//[Offset: 0x438, Size: 0x4]
	float AmbientOcclusionMipScale;//[Offset: 0x43c, Size: 0x4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x440, Size: 0x4]
	LinearColor IndirectLightingColor;//[Offset: 0x444, Size: 0x10]
	float IndirectLightingIntensity;//[Offset: 0x454, Size: 0x4]
	float ColorGradingIntensity;//[Offset: 0x458, Size: 0x4]
	Texture* ColorGradingLUT;//[Offset: 0x460, Size: 0x8]
	float DepthOfFieldSensorWidth;//[Offset: 0x468, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x46c, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x470, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x474, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x478, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x47c, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x480, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x484, Size: 0x4]
	float DepthOfFieldMaxBokehSize;//[Offset: 0x488, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x48c, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x490, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x494, Size: 0x4]
	Texture* DepthOfFieldBokehShape;//[Offset: 0x498, Size: 0x8]
	float DepthOfFieldColorThreshold;//[Offset: 0x4a0, Size: 0x4]
	float DepthOfFieldSizeThreshold;//[Offset: 0x4a4, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4a8, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x4ac, Size: 0x4]
	float MotionBlurAmount;//[Offset: 0x4b0, Size: 0x4]
	float MotionBlurMax;//[Offset: 0x4b4, Size: 0x4]
	float MotionBlurPerObjectSize;//[Offset: 0x4b8, Size: 0x4]
	float LPVIntensity;//[Offset: 0x4bc, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x4c0, Size: 0x4]
	float LPVSize;//[Offset: 0x4c4, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4c8, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4cc, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x4d0, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4d4, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4d8, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4dc, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4e0, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x4e4, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4e8, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4ec, Size: 0x4]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4f0, Size: 0x4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x4f4, Size: 0x4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x4f8, Size: 0x4]
	float LPVFadeRange;//[Offset: 0x4fc, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x500, Size: 0x4]
	float ScreenPercentage;//[Offset: 0x504, Size: 0x4]
	bool SSGISwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x508, Size: 0x1]
	float SSGIInstensity;//[Offset: 0x50c, Size: 0x4]
	int SSGIMatchDistance;//[Offset: 0x510, Size: 0x4]
	int SSGIVPLAge;//[Offset: 0x514, Size: 0x4]
	int SSGIVPLReplaceNum;//[Offset: 0x518, Size: 0x4]
	int SSGIVPLBias;//[Offset: 0x51c, Size: 0x4]
	float SSGIVPLCoffiConst;//[Offset: 0x520, Size: 0x4]
	float SSGIVPLCoffiLinear;//[Offset: 0x524, Size: 0x4]
	float SSGIVPLCoffiQuadric;//[Offset: 0x528, Size: 0x4]
	int SSGIDistance;//[Offset: 0x52c, Size: 0x4]
	float SSGIIndirectMinDiffuse;//[Offset: 0x530, Size: 0x4]
	float SSGIVPLMinIntensity;//[Offset: 0x534, Size: 0x4]
	int SSGIUpdateInterval;//[Offset: 0x538, Size: 0x4]
	int SSGIIndirectResPercent;//[Offset: 0x53c, Size: 0x4]
	int SSGIRayMarchingResPercent;//[Offset: 0x540, Size: 0x4]
	int SSGIVPLGrid;//[Offset: 0x544, Size: 0x4]
	float SSGIVPLMinPercent;//[Offset: 0x548, Size: 0x4]
	float FsrRcasSharpness;//[Offset: 0x54c, Size: 0x4]
	bool PrtSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]
	float PrtIntensity;//[Offset: 0x554, Size: 0x4]
	float PrtSkyAOIntensity;//[Offset: 0x558, Size: 0x4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x560, Size: 0x10]

--------------------------------
Class: Texture2D.Texture.Object
	int StreamingIndex;//[Offset: 0xc8, Size: 0x4]
	int LevelIndex;//[Offset: 0xcc, Size: 0x4]
	int FirstResourceMemMip;//[Offset: 0xd0, Size: 0x4]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 0x1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd4, Size: 0x1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd4, Size: 0x1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd4, Size: 0x1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd4, Size: 0x1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd4, Size: 0x1]
	byte AddressX;//[Offset: 0xd5, Size: 0x1]
	byte AddressY;//[Offset: 0xd6, Size: 0x1]
	IntPoint ImportedSize;//[Offset: 0xd8, Size: 0x8]
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0xe0, Size: 0x8]
	int Blueprint_GetSizeY();// 0x47aebc8
	int Blueprint_GetSizeX();// 0x47aeb94

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: TextureCube.Texture.Object

--------------------------------
Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4]
	Object* Object;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x5c0]
	PlayerState* PlayerState;//[Offset: 0x5d0, Size: 0x8]

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	byte Priority;//[Offset: 0x29, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8]
	float AlphaInTime;//[Offset: 0x38, Size: 0x4]
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4]
	float Alpha;//[Offset: 0x40, Size: 0x4]
	bool IsDisabled();// 0x45da0a8
	Actor* GetViewTarget();// 0x45da06c
	void EnableModifier();// 0x45da050
	void DisableModifier(bool bImmediate);// 0x45d9fc4
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x33e07d0
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x33e07d0

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x390, Size: 0x8]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x398, Size: 0x8]
	PlayerCameraManager* BaseCamera;//[Offset: 0x3a0, Size: 0x8]
	Transform RelativeTransform;//[Offset: 0x3b0, Size: 0x30]
	float BaseFOV;//[Offset: 0x3e0, Size: 0x4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e4, Size: 0x1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3e4, Size: 0x1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x3e8, Size: 0x10]
	float DistFromCamera;//[Offset: 0x3f8, Size: 0x4]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x340, Size: 0x8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x348, Size: 0x1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x348, Size: 0x1]
	delegate OnParticleSpawn;//[Offset: 0x350, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x360, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x370, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x380, Size: 0x10]
	void ToggleActive();// 0x46113dc
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x4611320
	void SetTemplate(ParticleSystem* NewTemplate);// 0x461129c
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x46111e8
	void SetFloatParameter(FName ParameterName, float Param);// 0x4611130
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x4611074
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x4610fc0
	void OnRep_bCurrentlyActive();// 0x4610fa4
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x4610f20
	bool IsActive();// 0x4610ee8
	void Deactivate();// 0x4610ed4
	void Activate();// 0x4610ec0

--------------------------------
Class: ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x590, Size: 0x8]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x598, Size: 0x10]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x5a8, Size: 0x10]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5b8, Size: 0x1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b9, Size: 0x1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5b9, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5b9, Size: 0x1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5b9, Size: 0x1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5ba, Size: 0x1]
	bool bUseParticleSystemDrawDistance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5ba, Size: 0x1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5ba, Size: 0x1]
	byte LODMethod;//[Offset: 0x5bd, Size: 0x1]
	enum RequiredSignificance;//[Offset: 0x5be, Size: 0x1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x5c0, Size: 0x10]
	delegate OnParticleSpawn;//[Offset: 0x5d0, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x5e0, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x5f0, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x600, Size: 0x10]
	Vector OldPosition;//[Offset: 0x610, Size: 0xc]
	Vector PartSysVelocity;//[Offset: 0x61c, Size: 0xc]
	float WarmupTime;//[Offset: 0x628, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x62c, Size: 0x4]
	float SecondsBeforeInactive;//[Offset: 0x638, Size: 0x4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x640, Size: 0x4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x668, Size: 0x10]
	float CustomTimeDilation;//[Offset: 0x680, Size: 0x4]
	SceneComponent* AutoAttachParent;//[Offset: 0x6d8, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x6e0, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x6e8, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x6e9, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x6ea, Size: 0x1]
	delegate OnSystemFinished;//[Offset: 0x718, Size: 0x10]
	delegate OnCompleteFinished;//[Offset: 0x728, Size: 0x10]
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x4721550
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x4721424
	void SetTemplate(ParticleSystem* NewTemplate);// 0x47213a8
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x47212f4
	void SetFloatParameter(FName ParameterName, float Param);// 0x472123c
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x4721174
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x47210b8
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x4720fb8
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x4720ebc
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x4720dbc
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x4720cbc
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x4720bc0
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x4720ac0
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x47209fc
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x47208ec
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x4720764
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x47206b0
	void ReleaseToPool();// 0x472069c
	int GetNumActiveParticles();// 0x4720668
	MaterialInterface* GetNamedMaterial(FName InName);// 0x47205dc
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x47204c0
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x47203a0
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x4720284
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x4720168
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x4720048
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x471ff2c
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x471fe4c
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x471fcd0
	void EndTrails();// 0x471fcbc
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x471fbf0
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x471fac4

--------------------------------
Class: ParticleSystem.Object
	byte SystemUpdateMode;//[Offset: 0x28, Size: 0x1]
	float UpdateTime_FPS;//[Offset: 0x2c, Size: 0x4]
	float UpdateTime_Delta;//[Offset: 0x30, Size: 0x4]
	float WarmupTime;//[Offset: 0x34, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x38, Size: 0x4]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	float LODDistanceCheckTime;//[Offset: 0x64, Size: 0x4]
	byte LODMethod;//[Offset: 0x68, Size: 0x1]
	float[] LODDistances;//[Offset: 0x70, Size: 0x10]
	bool[] LODPCFlag;//[Offset: 0x80, Size: 0x10]
	float LDMaxDrawDistance;//[Offset: 0x90, Size: 0x4]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94, Size: 0x1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x98, Size: 0x10]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	Box FixedRelativeBoundingBox;//[Offset: 0xac, Size: 0x1c]
	float SecondsBeforeInactive;//[Offset: 0xc8, Size: 0x4]
	bool bUnableCustomGlobalCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	byte FeatureLevel;//[Offset: 0xcd, Size: 0x1]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xce, Size: 0x1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xce, Size: 0x1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xce, Size: 0x1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xce, Size: 0x1]
	float Delay;//[Offset: 0xd0, Size: 0x4]
	float DelayLow;//[Offset: 0xd4, Size: 0x4]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xdc, Size: 0x4]
	enum InsignificantReaction;//[Offset: 0xe0, Size: 0x1]
	float InsignificanceDelay;//[Offset: 0xe4, Size: 0x4]
	enum MaxSignificanceLevel;//[Offset: 0xe8, Size: 0x1]
	bool IsManageBySignificance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	uint32 MaxPoolSize;//[Offset: 0xec, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xf0, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xfc, Size: 0x4]
	byte OcclusionBoundsMethod;//[Offset: 0x100, Size: 0x1]
	Box CustomOcclusionBounds;//[Offset: 0x104, Size: 0x1c]
	LODSoloTrack[] SoloTracking;//[Offset: 0x120, Size: 0x10]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0x130, Size: 0x10]
	bool ContainsEmitterType(class Object TypeData);// 0x471e7d0

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8]
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1]
	enum SignificanceLevel;//[Offset: 0x35, Size: 0x1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 0x1]
	bool bSupportParticleDynamicInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x37, Size: 0x1]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 0x1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 0x1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 0x1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10]
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4]
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4]
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 0x4]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8]
	Vector EmitterOrigin;//[Offset: 0x38, Size: 0xc]
	Rotator EmitterRotation;//[Offset: 0x44, Size: 0xc]
	byte ScreenAlignment;//[Offset: 0x50, Size: 0x1]
	float MinFacingCameraBlendDistance;//[Offset: 0x54, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x58, Size: 0x4]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1]
	bool bIgnoreComponentScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 0x1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5c, Size: 0x1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5c, Size: 0x1]
	byte SortMode;//[Offset: 0x5d, Size: 0x1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5e, Size: 0x1]
	float EmitterDuration;//[Offset: 0x60, Size: 0x4]
	float EmitterDurationLow;//[Offset: 0x64, Size: 0x4]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	int EmitterLoops;//[Offset: 0x6c, Size: 0x4]
	RawDistributionFloat SpawnRate;//[Offset: 0x70, Size: 0x38]
	byte ParticleBurstMethod;//[Offset: 0xa8, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0xb0, Size: 0x10]
	float EmitterDelay;//[Offset: 0xc0, Size: 0x4]
	float EmitterDelayLow;//[Offset: 0xc4, Size: 0x4]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc8, Size: 0x1]
	byte InterpolationMethod;//[Offset: 0xc9, Size: 0x1]
	int SubImages_Horizontal;//[Offset: 0xcc, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0xd0, Size: 0x4]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 0x1]
	float RandomImageTime;//[Offset: 0xd8, Size: 0x4]
	int RandomImageChanges;//[Offset: 0xdc, Size: 0x4]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 0x1]
	Vector MacroUVPosition;//[Offset: 0xe4, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xf0, Size: 0x4]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1]
	int MaxDrawCount;//[Offset: 0xf8, Size: 0x4]
	enum UVFlippingMode;//[Offset: 0xfc, Size: 0x1]
	Texture2D* CutoutTexture;//[Offset: 0x100, Size: 0x8]
	byte BoundingMode;//[Offset: 0x108, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0x109, Size: 0x1]
	float AlphaThreshold;//[Offset: 0x10c, Size: 0x4]
	int CutoutSubImagesX;//[Offset: 0x110, Size: 0x4]
	int CutoutSubImagesY;//[Offset: 0x114, Size: 0x4]
	byte EmitterNormalsMode;//[Offset: 0x118, Size: 0x1]
	Vector NormalsSphereCenter;//[Offset: 0x11c, Size: 0xc]
	Vector NormalsCylinderDirection;//[Offset: 0x128, Size: 0xc]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x134, Size: 0x1]
	FName[] NamedMaterialOverrides;//[Offset: 0x138, Size: 0x10]
	Vector2D[] UBOBoundingGeometry;//[Offset: 0x148, Size: 0x10]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	byte LODValidity;//[Offset: 0x2a, Size: 0x1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x28, Size: 0x4]
	float MaxValue;//[Offset: 0x2c, Size: 0x4]
	DistributionFloat* Distribution;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x28]

--------------------------------
Class: DistributionLookupTable
	byte Op;//[Offset: 0x0, Size: 0x1]
	byte EntryCount;//[Offset: 0x1, Size: 0x1]
	byte EntryStride;//[Offset: 0x2, Size: 0x1]
	byte SubEntryStride;//[Offset: 0x3, Size: 0x1]
	float TimeScale;//[Offset: 0x4, Size: 0x4]
	float TimeBias;//[Offset: 0x8, Size: 0x4]
	float[] Values;//[Offset: 0x10, Size: 0x10]
	byte LockFlag;//[Offset: 0x20, Size: 0x1]

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 0x4]
	int CountLow;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 0x38]
	RawDistributionFloat RateScale;//[Offset: 0x68, Size: 0x38]
	byte ParticleBurstMethod;//[Offset: 0xa0, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0xa8, Size: 0x10]
	RawDistributionFloat BurstScale;//[Offset: 0xb8, Size: 0x38]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bSuspendSpawnInHouse;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Frequency;//[Offset: 0x4, Size: 0x4]
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4]
	bool FirstTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool LastTimeOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool UseReflectedImpactVector;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bUseOrbitOffset;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	FName CustomName;//[Offset: 0x10, Size: 0x8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 0x1]
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 0x50]
	OrbitOptions OffsetOptions;//[Offset: 0x80, Size: 0x4]
	RawDistributionVector RotationAmount;//[Offset: 0x88, Size: 0x50]
	OrbitOptions RotationOptions;//[Offset: 0xd8, Size: 0x4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xe0, Size: 0x50]
	OrbitOptions RotationRateOptions;//[Offset: 0x130, Size: 0x4]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x28, Size: 0x4]
	float MaxValue;//[Offset: 0x2c, Size: 0x4]
	Vector MinValueVec;//[Offset: 0x30, Size: 0xc]
	Vector MaxValueVec;//[Offset: 0x3c, Size: 0xc]
	DistributionVector* Distribution;//[Offset: 0x48, Size: 0x8]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 0x1]
	FName EventName;//[Offset: 0x2c, Size: 0x8]

--------------------------------
Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10]
	int ActiveTab;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10]
	float ViewStartInput;//[Offset: 0x20, Size: 0x4]
	float ViewEndInput;//[Offset: 0x24, Size: 0x4]
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4]
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8]
	Color CurveColor;//[Offset: 0x8, Size: 0x4]
	FString CurveName;//[Offset: 0x10, Size: 0x10]
	int bHideCurve;//[Offset: 0x20, Size: 0x4]
	int bColorCurve;//[Offset: 0x24, Size: 0x4]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4]
	int bClamp;//[Offset: 0x2c, Size: 0x4]
	float ClampLow;//[Offset: 0x30, Size: 0x4]
	float ClampHigh;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: ParticleSystemLOD

--------------------------------
Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte ParamType;//[Offset: 0x8, Size: 0x1]
	float Scalar;//[Offset: 0xc, Size: 0x4]
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]
	Vector Vector;//[Offset: 0x14, Size: 0xc]
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc]
	Color Color;//[Offset: 0x2c, Size: 0x4]
	Actor* Actor;//[Offset: 0x30, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x46ea340
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x46ea28c
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x46ea1d4
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x46ea0e4
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x46ea05c
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x46e9fd8
	float K2_GetScalarParameterValue(FName ParameterName);// 0x46e9f54
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x46e9e94
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x46e9e18
	void CopyInterpParameters(MaterialInstance* Source);// 0x46e9d9c

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x90, Size: 0x8]
	MaterialInterface* Parent;//[Offset: 0x98, Size: 0x8]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xa8, Size: 0x10]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xb8, Size: 0x10]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0xc8, Size: 0x10]
	FontParameterValue[] FontParameterValues;//[Offset: 0xd8, Size: 0x10]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0xe8, Size: 0x50]
	bool bOverrideBaseProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138, Size: 0x1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x13c, Size: 0x38]
	Texture*[] PermutationTextureReferences;//[Offset: 0x1a0, Size: 0x10]
	StaticParameterSet StaticParameters;//[Offset: 0x1b0, Size: 0x40]

--------------------------------
Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	float ParameterValue;//[Offset: 0x10, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte Association;//[Offset: 0x8, Size: 0x1]
	int Index;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Font* FontValue;//[Offset: 0x10, Size: 0x8]
	int FontPage;//[Offset: 0x18, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 0x10]

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10]
	int IsRemapped;//[Offset: 0x58, Size: 0x4]
	float EmScale;//[Offset: 0x5c, Size: 0x4]
	float Ascent;//[Offset: 0x60, Size: 0x4]
	float Descent;//[Offset: 0x64, Size: 0x4]
	float Leading;//[Offset: 0x68, Size: 0x4]
	int Kerning;//[Offset: 0x6c, Size: 0x4]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8]
	int NumCharacters;//[Offset: 0x118, Size: 0x4]
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10]
	float ScalingFactor;//[Offset: 0x130, Size: 0x4]
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4]
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8]
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x38]

--------------------------------
Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4]
	int StartV;//[Offset: 0x4, Size: 0x4]
	int USize;//[Offset: 0x8, Size: 0x4]
	int VSize;//[Offset: 0xc, Size: 0x4]
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]
	int VerticalOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10]
	float Height;//[Offset: 0x10, Size: 0x4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	byte CharacterSet;//[Offset: 0x15, Size: 0x1]
	FString Chars;//[Offset: 0x18, Size: 0x10]
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10]
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10]
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4]
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4]
	int XPadding;//[Offset: 0x78, Size: 0x4]
	int YPadding;//[Offset: 0x7c, Size: 0x4]
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4]
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4]
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4]
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	int Kerning;//[Offset: 0x94, Size: 0x4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	FontData Font;//[Offset: 0x8, Size: 0x20]

--------------------------------
Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10]
	enum Hinting;//[Offset: 0x10, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1]
	int SubFaceIndex;//[Offset: 0x14, Size: 0x4]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10]
	float ScalingFactor;//[Offset: 0x10, Size: 0x4]

--------------------------------
Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10]
	FString Cultures;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Value;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverride_LDRTonemappingBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool bOverride_TransparentDownSampleUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	bool bOverride_ForceTransparentOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bOverride_LDRAlphaMultiplyFactor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bOverride_TranslucentReceiveCSM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool bOverride_UseSecondSkyLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	bool bOverride_CharacterStencil;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bOverride_OverlookDepthClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool bOverride_AdjustHairShadowDepthMask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]
	bool bOverride_AddToOverlookRenderSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 0x1]
	bool bOverride_SupportMobileSpotLightShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bOverride_SupportReceiveMobileSpotLightShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool bOverride_SupportMobilePointLightShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	bool bOverride_SupportReceiveMobilePointLightShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]
	bool bOverride_PrtSkySphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool bOverride_AffectPrt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	bool bOverride_ReceivePrt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 0x1]
	bool bOverride_PrtAffectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x18, Size: 0x4]
	float LDRTonemappingBrightness;//[Offset: 0x1c, Size: 0x4]
	byte BlendMode;//[Offset: 0x20, Size: 0x1]
	byte ShadingModel;//[Offset: 0x21, Size: 0x1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x22, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x22, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x22, Size: 0x1]
	bool ForceTransparentOpaque;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x22, Size: 0x1]
	enum TransparentDownsampleUsage;//[Offset: 0x23, Size: 0x1]
	float LDRAlphaMultiplyFactor;//[Offset: 0x24, Size: 0x4]
	bool bTranslucentReceiveCSM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool UseSecondSkyLight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool CharacterStencil;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool OverlookDepthClip;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	float AdjustHairShadowDepthMask;//[Offset: 0x2c, Size: 0x4]
	bool AddToOverlookRenderSet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bSupportMobileSpotLightShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bSupportReceiveMobileSpotLightShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bSupportMobilePointLightShadow;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bSupportReceiveMobilePointLightShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool PrtSkySphere;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	bool AffectPrt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x30, Size: 0x1]
	bool ReceivePrt;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x30, Size: 0x1]
	float PrtAffectRatio;//[Offset: 0x34, Size: 0x4]

--------------------------------
Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: StaticSwitchParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]

--------------------------------
Class: StaticComponentMaskParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool G;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool B;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	bool A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: StaticTerrainLayerWeightParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4]
	bool bWeightBasedBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: StaticMaterialLayersParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	MaterialLayersFunctions Value;//[Offset: 0x10, Size: 0x40]
	bool bOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x54, Size: 0x10]

--------------------------------
Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10]
	bool[] LayerStates;//[Offset: 0x20, Size: 0x10]
	FString KeyString;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	CameraShake*[] ActiveShakes;//[Offset: 0x48, Size: 0x10]
	float SplitScreenShakeScale;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float OscillationDuration;//[Offset: 0x2c, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0x30, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0x34, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0x38, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0x5c, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0x80, Size: 0xc]
	float AnimPlayRate;//[Offset: 0x8c, Size: 0x4]
	float AnimScale;//[Offset: 0x90, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x94, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0x98, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0x9c, Size: 0x4]
	CameraAnim* anim;//[Offset: 0xa0, Size: 0x8]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xb8, Size: 0x8]
	float ShakeScale;//[Offset: 0x148, Size: 0x4]
	float OscillatorTimeRemaining;//[Offset: 0x14c, Size: 0x4]
	CameraAnimInst* AnimInst;//[Offset: 0x150, Size: 0x8]
	void ReceiveStopShake(bool bImmediately);// 0x33e07d0
	void ReceivePlayShake(float Scale);// 0x33e07d0
	bool ReceiveIsFinished();// 0x45de2b8
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x33e07d0

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc]
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc]
	FOscillator Roll;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	byte InitialOffset;//[Offset: 0x8, Size: 0x1]
	enum Waveform;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc]
	FOscillator Y;//[Offset: 0xc, Size: 0xc]
	FOscillator Z;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8]
	float AnimLength;//[Offset: 0x30, Size: 0x4]
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	float BaseFOV;//[Offset: 0x54, Size: 0x4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x570]
	float BasePostProcessBlendWeight;//[Offset: 0x5d0, Size: 0x4]

--------------------------------
Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10]
	FName GroupName;//[Offset: 0x40, Size: 0x8]
	Color GroupColor;//[Offset: 0x48, Size: 0x4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1]

--------------------------------
Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8]
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1]
	FString TrackTitle;//[Offset: 0x58, Size: 0x10]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8]
	float PlayRate;//[Offset: 0x50, Size: 0x4]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8]
	byte PlaySpace;//[Offset: 0x78, Size: 0x1]
	void Stop(bool bImmediate);// 0x45d805c
	void SetScale(float NewDuration);// 0x45d7fe0
	void SetDuration(float NewDuration);// 0x45d7f64

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8]
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8]
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4]
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]
	byte RotMode;//[Offset: 0xc1, Size: 0x1]

--------------------------------
Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector OutVal;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	byte InterpMode;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc]
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x340, Size: 0x1]
	CameraComponent* CameraComponent;//[Offset: 0x348, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x350, Size: 0x8]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x360, Size: 0x1]
	float AspectRatio;//[Offset: 0x364, Size: 0x4]
	float FOVAngle;//[Offset: 0x368, Size: 0x4]
	float PostProcessBlendWeight;//[Offset: 0x36c, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x370, Size: 0x570]
	int GetAutoActivatePlayerIndex();// 0x45d74ac

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x248, Size: 0x4]
	float OrthoWidth;//[Offset: 0x24c, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x250, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x254, Size: 0x4]
	float AspectRatio;//[Offset: 0x258, Size: 0x4]
	int CullingMask;//[Offset: 0x25c, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x260, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x260, Size: 0x1]
	bool bLockToHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x260, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x260, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x261, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x2a0, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2d0, Size: 0x570]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x45d8fc0
	void SetProjectionMode(byte InProjectionMode);// 0x45d8f48
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x45d8ed0
	void SetOrthoWidth(float InOrthoWidth);// 0x45d8e58
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x45d8de0
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x45d8d68
	void SetFieldOfView(float InFieldOfView);// 0x45d8cf0
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x45d8c64
	void SetAspectRatio(float InAspectRatio);// 0x45d8bec
	void RemoveBlendable(interface classNone InBlendableObject);// 0x45d8aec
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x45d898c
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x45d8858

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8]
	void Walk();// 0x45f16b8
	void ViewSelf();// 0x45f169c
	void ViewPlayer(FString S);// 0x45f1608
	void ViewClass(class Actor DesiredClass);// 0x45f1584
	void ViewActor(FName ActorName);// 0x45f1500
	void UpdateSafeArea();// 0x45f14ec
	void ToggleServerStatReplicatorUpdateStatNet();// 0x45f14d8
	void ToggleServerStatReplicatorClientOverwrite();// 0x45f14c4
	void ToggleDebugCamera();// 0x45f14a8
	void ToggleAILogging();// 0x45f148c
	void TestCollisionDistance();// 0x45f1470
	void Teleport();// 0x45f1454
	void Summon(FString ClassName);// 0x45f13c0
	void StreamLevelOut(FName PackageName);// 0x45f133c
	void StreamLevelIn(FName PackageName);// 0x45f12b8
	void SpawnServerStatReplicator();// 0x45f12a4
	void Slomo(float NewTimeDilation);// 0x45f1220
	void SetWorldOrigin();// 0x45f120c
	void SetMouseSensitivityToDefault();// 0x45f11f0
	void ServerToggleAILogging();// 0x45f1194
	void ReceiveInitCheatManager();// 0x33e07d0
	void ReceiveEndPlay();// 0x33e07d0
	void PlayersOnly();// 0x45f1178
	void OnlyLoadLevel(FName PackageName);// 0x45f10f4
	void LogLoc();// 0x45f10d8
	void InvertMouse();// 0x45f10bc
	void God();// 0x45f10a0
	void Ghost();// 0x45f1084
	void FreezeFrame(float Delay);// 0x45f1000
	void Fly();// 0x45f0fe4
	void FlushLog();// 0x45f0fc8
	void EnableDebugCamera();// 0x45f0fac
	void DumpVoiceMutingState();// 0x45f0f90
	void DumpPartyState();// 0x45f0f74
	void DumpOnlineSessionState();// 0x45f0f58
	void DumpChatState();// 0x45f0f3c
	void DisableDebugCamera();// 0x45f0f20
	void DestroyTarget();// 0x45f0f04
	void DestroyServerStatReplicator();// 0x45f0ef0
	void DestroyPawns(class Pawn aClass);// 0x45f0e6c
	void DestroyAllPawnsExceptTarget();// 0x45f0e50
	void DestroyAll(class Actor aClass);// 0x45f0dcc
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x45f0d10
	void DebugCapsuleSweepPawn();// 0x45f0cf4
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x45f0c68
	void DebugCapsuleSweepClear();// 0x45f0c4c
	void DebugCapsuleSweepChannel(byte Channel);// 0x45f0bc8
	void DebugCapsuleSweepCapture();// 0x45f0bac
	void DebugCapsuleSweep();// 0x45f0b90
	void DamageTarget(float DamageAmount);// 0x45f0b0c
	void CheatScript(FString ScriptName);// 0x45f0a2c
	void ChangeSize(float F);// 0x45f09a8
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x45f0820
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x45f0678
	void BugIt(FString ScreenShotDescription);// 0x45f05e4

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x67d, Size: 0x1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x67d, Size: 0x1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x680, Size: 0x8]
	float SpeedScale;//[Offset: 0x6a8, Size: 0x4]
	float InitialMaxSpeed;//[Offset: 0x6ac, Size: 0x4]
	float InitialAccel;//[Offset: 0x6b0, Size: 0x4]
	float InitialDecel;//[Offset: 0x6b4, Size: 0x4]
	void ToggleDisplay();// 0x46024fc
	void ShowDebugSelectedInfo();// 0x46024e0
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x4602464
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x33e07d0
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x33e07d0
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x33e07d0
	Actor* GetSelectedActor();// 0x4602430

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x590, Size: 0x4]
	float FrustumAngle;//[Offset: 0x594, Size: 0x4]
	float FrustumAspectRatio;//[Offset: 0x598, Size: 0x4]
	float FrustumStartDist;//[Offset: 0x59c, Size: 0x4]
	float FrustumEndDist;//[Offset: 0x5a0, Size: 0x4]
	Texture* Texture;//[Offset: 0x5a8, Size: 0x8]

--------------------------------
Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10]
	float Duration;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAffectsLeftSmall;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightLarge;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightSmall;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x78]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x70]
	CurveFloat* ExternalCurve;//[Offset: 0x70, Size: 0x8]

--------------------------------
Class: NetConnection.player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10]
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10]
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8]
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8]
	int MaxPacket;//[Offset: 0xa0, Size: 0x4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1]
	UniqueNetIdRepl PlayerId;//[Offset: 0x158, Size: 0x28]
	double LastReceiveTime;//[Offset: 0x1e8, Size: 0x8]
	Channel*[] ChannelsToTick;//[Offset: 0x17a0, Size: 0x10]

--------------------------------
Class: ChildConnection.NetConnection.player.Object
	NetConnection* Parent;//[Offset: 0x18f8, Size: 0x8]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10]
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4]
	int MaxInternetClientRate;//[Offset: 0x5c, Size: 0x4]
	int MaxClientRate;//[Offset: 0x60, Size: 0x4]
	float ServerTravelPause;//[Offset: 0x64, Size: 0x4]
	float SpawnPrioritySeconds;//[Offset: 0x68, Size: 0x4]
	float RelevantTimeout;//[Offset: 0x6c, Size: 0x4]
	float KeepAliveTime;//[Offset: 0x70, Size: 0x4]
	float InitialConnectTimeout;//[Offset: 0x74, Size: 0x4]
	float ConnectionTimeout;//[Offset: 0x78, Size: 0x4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x7c, Size: 0x4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8]
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10]
	World* World;//[Offset: 0x108, Size: 0x8]
	Package* WorldPackage;//[Offset: 0x110, Size: 0x8]
	class Object* NetConnectionClass;//[Offset: 0x138, Size: 0x8]
	class Object* ReplicationDriverClass;//[Offset: 0x140, Size: 0x8]
	Property* RoleProperty;//[Offset: 0x148, Size: 0x8]
	Property* RemoteRoleProperty;//[Offset: 0x150, Size: 0x8]
	FName NetDriverName;//[Offset: 0x158, Size: 0x8]
	Channel*[] ActorChannelPool;//[Offset: 0x1a0, Size: 0x10]
	float Time;//[Offset: 0x1b8, Size: 0x4]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x650, Size: 0x8]

--------------------------------
Class: Package.Object

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: ReplicationDriver.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10]
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4]
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4]
	float ActivationDelay;//[Offset: 0x48, Size: 0x4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float StartupDelay;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8]
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8]
	Vector2D Center;//[Offset: 0x10, Size: 0x8]
	Vector2D VisualSize;//[Offset: 0x18, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x20, Size: 0x8]
	Vector2D InteractionSize;//[Offset: 0x28, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x30, Size: 0x8]
	Key MainInputKey;//[Offset: 0x38, Size: 0x18]
	Key AltInputKey;//[Offset: 0x50, Size: 0x18]

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x39c, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x3a0, Size: 0x4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x3a8, Size: 0x8]
	SphereComponent* CollisionComponent;//[Offset: 0x3b0, Size: 0x8]
	StaticMeshComponent* MeshComponent;//[Offset: 0x3b8, Size: 0x8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c0, Size: 0x1]
	void TurnAtRate(float Rate);// 0x46037c4
	void MoveUp_World(float Val);// 0x4603740
	void MoveRight(float Val);// 0x46036bc
	void MoveForward(float Val);// 0x4603638
	void LookUpAtRate(float Rate);// 0x46035b4

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x5a8, Size: 0x4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x4796e84
	float GetUnscaledSphereRadius();// 0x4796e68
	float GetShapeScale();// 0x4796e28
	float GetScaledSphereRadius();// 0x4796de0

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x5b4, Size: 0x4]
	int PreviousLODLevel;//[Offset: 0x5b8, Size: 0x4]
	int MinLOD;//[Offset: 0x5bc, Size: 0x4]
	int SubDivisionStepSize;//[Offset: 0x5c0, Size: 0x4]
	StaticMesh* StaticMesh;//[Offset: 0x5c8, Size: 0x8]
	Color WireframeColorOverride;//[Offset: 0x5d0, Size: 0x4]
	OrientedBox OrientedBox;//[Offset: 0x5d4, Size: 0x3c]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x610, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x610, Size: 0x1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x610, Size: 0x1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x610, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x610, Size: 0x1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x610, Size: 0x1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x610, Size: 0x1]
	bool bReverseCulling;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x610, Size: 0x1]
	bool bUseStaticMeshDrawDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x611, Size: 0x1]
	bool IsDynamicInstancingParametersEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x611, Size: 0x1]
	bool bMobileIsBasePassFirstRender;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x611, Size: 0x1]
	int OverriddenLightMapRes;//[Offset: 0x614, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x618, Size: 0x4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x620, Size: 0x10]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x630, Size: 0x10]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x640, Size: 0x50]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x47a7994
	void SetReverseCulling(bool ReverseCulling);// 0x47a7910
	void SetForcedLodModel(int NewForcedLodModel);// 0x47a7894
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x47a7818
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x47a773c

--------------------------------
Class: StaticMesh.Object
	float LDMaxDrawDistance;//[Offset: 0x48, Size: 0x4]
	PerPlatformInt MinLOD;//[Offset: 0x4c, Size: 0x4]
	StaticMaterial[] StaticMaterials;//[Offset: 0x50, Size: 0x10]
	float LightmapUVDensity;//[Offset: 0x60, Size: 0x4]
	int LightMapResolution;//[Offset: 0x64, Size: 0x4]
	int LightMapCoordinateIndex;//[Offset: 0x68, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x70, Size: 0x8]
	int LODForCollision;//[Offset: 0x78, Size: 0x4]
	bool bUseOrientedBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa4, Size: 0x1]
	bool bSupportLowLODShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa4, Size: 0x1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa4, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa5, Size: 0x1]
	bool bMaliLowEndInstancingWorkaround;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa5, Size: 0x1]
	bool bHasExtraAttributes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa5, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa5, Size: 0x1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xb8, Size: 0x10]
	Vector PositiveBoundsExtension;//[Offset: 0xc8, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0xd4, Size: 0xc]
	BoxSphereBounds ExtendedBounds;//[Offset: 0xe0, Size: 0x1c]
	OrientedBox ExtendedOrientedBox;//[Offset: 0xfc, Size: 0x3c]
	AssetUserData*[] AssetUserData;//[Offset: 0x138, Size: 0x10]
	int GetNumSections(int inLod);// 0x47a6078
	int GetNumLODs();// 0x47a6044
	int GetMaterialIndex(FName MaterialSlotName);// 0x47a5fc0
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x47a5f3c
	BoxSphereBounds GetBounds();// 0x47a5ef0
	Box GetBoundingBox();// 0x47a5ea4

--------------------------------
Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc]
	FString Tag;//[Offset: 0x58, Size: 0x10]

--------------------------------
Class: OrientedBox
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Vector AxisX;//[Offset: 0xc, Size: 0xc]
	Vector AxisY;//[Offset: 0x18, Size: 0xc]
	Vector AxisZ;//[Offset: 0x24, Size: 0xc]
	float ExtentX;//[Offset: 0x30, Size: 0x4]
	float ExtentY;//[Offset: 0x34, Size: 0x4]
	float ExtentZ;//[Offset: 0x38, Size: 0x4]

--------------------------------
Class: StaticMeshComponentLODInfo
	PaintedVertex[] PaintedVertices;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: PaintedVertex
	Vector Position;//[Offset: 0x0, Size: 0xc]
	Vector4 Normal;//[Offset: 0x10, Size: 0x10]
	Color Color;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0xe0, Size: 0x10]
	delegate AnimationBindEvent;//[Offset: 0xf0, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x100, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x110, Size: 0x28]
	delegate ForegroundColorDelegate;//[Offset: 0x138, Size: 0x10]
	Margin Padding;//[Offset: 0x148, Size: 0x10]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x158, Size: 0x10]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x168, Size: 0x10]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x178, Size: 0x10]
	WidgetTree* WidgetTree;//[Offset: 0x188, Size: 0x8]
	int Priority;//[Offset: 0x190, Size: 0x4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x194, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x194, Size: 0x1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x194, Size: 0x1]
	bool bHasScriptImplementedTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x194, Size: 0x1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x194, Size: 0x1]
	bool bPaintOutLine;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x194, Size: 0x1]
	enum TickFrequency;//[Offset: 0x195, Size: 0x1]
	InputComponent* InputComponent;//[Offset: 0x198, Size: 0x8]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x1a0, Size: 0x10]
	void UnregisterInputComponent();// 0x3e18254
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x3e1816c
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x3e18084
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x3e18008
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x3e17f8c
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x33e07d0
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x3e17ecc
	void StopListeningForAllInputActions();// 0x3e17eb8
	void StopAnimationsAndLatentActions();// 0x3e17ea4
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x3e17e28
	void StopAllAnimations();// 0x3e17e14
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x3e17d58
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x3e17ca0
	void SetPadding(Margin InPadding);// 0x3e17c20
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x3e17ba4
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x3e17aec
	void SetInputActionPriority(int NewPriority);// 0x3e17a70
	void SetInputActionBlocking(bool bShouldBlock);// 0x3e179ec
	void SetForegroundColor(SlateColor InForegroundColor);// 0x3e17880
	void SetDesiredSizeInViewport(Vector2D Size);// 0x3e17808
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x3e1778c
	void SetAnchorsInViewport(Anchors Anchors);// 0x3e1770c
	void SetAlignmentInViewport(Vector2D Alignment);// 0x3e17694
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x3e17618
	void RemoveFromViewport();// 0x3e17604
	void RegisterInputComponent();// 0x3e175f0
	void PreConstruct(bool IsDesignTime);// 0x33e07d0
	void PlayAnimationTo(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x3e1744c
	void PlayAnimationByName(FString Name);// 0x3e173c0
	void PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x3e17254
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x3e171d0
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x33e07d0
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x33e07d0
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x33e07d0
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x33e07d0
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x33e07d0
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x33e07d0
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x33e07d0
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x33e07d0
	void OnPaint(out PaintContext Context);// 0x33e07d0
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x33e07d0
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x33e07d0
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x33e07d0
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x33e07d0
	void OnMouseCaptureLost();// 0x33e07d0
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x33e07d0
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x33e07d0
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x33e07d0
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x33e07d0
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x33e07d0
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x33e07d0
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x33e07d0
	void OnInitialized();// 0x33e07d0
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x33e07d0
	void OnFocusLost(FocusEvent InFocusEvent);// 0x33e07d0
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x33e07d0
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x33e07d0
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x33e07d0
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x33e07d0
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x33e07d0
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x33e07d0
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x3e1714c
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x3e170c8
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x33e07d0
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x33e07d0
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate callback);// 0x3e16f58
	bool IsPlayingAnimation();// 0x3e16f34
	bool IsListeningForInputAction(FName ActionName);// 0x3e16eac
	bool IsInViewport();// 0x3e16e74
	bool IsInteractable();// 0x33e07d0
	bool IsAnyAnimationPlaying();// 0x3e16e3c
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x3e16db4
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x3e16d2c
	Pawn* GetOwningPlayerPawn();// 0x3e16cf8
	bool GetIsVisible();// 0x3e16cc0
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x3e16c3c
	WidgetAnimation* GetAnimationByName(FString Name);// 0x3e16ba0
	Anchors GetAnchorsInViewport();// 0x3e16b68
	Vector2D GetAlignmentInViewport();// 0x3e16b34
	void EnablePaintOutLine(bool bEnable);// 0x3e16ab0
	void Destruct();// 0x33e07d0
	void Construct();// 0x33e07d0
	void CancelLatentActions();// 0x3e16a9c
	void BindToAnimationStartedForLua(WidgetAnimation* Animation);// 0x3e16a20
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x3e16938
	void BindToAnimationFinishedForLua(WidgetAnimation* Animation);// 0x3e168bc
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x3e167d4
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x3e16674
	void AddToViewport(int ZOrder);// 0x3e165f8
	bool AddToPlayerScreen(int ZOrder);// 0x3e16570

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10]
	delegate VisibilityDelegate;//[Offset: 0x40, Size: 0x10]
	delegate bIsCircleHitTestDelegate;//[Offset: 0x50, Size: 0x10]
	WidgetTransform RenderTransform;//[Offset: 0x60, Size: 0x1c]
	Vector2D RenderTransformPivot;//[Offset: 0x7c, Size: 0x8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x84, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x84, Size: 0x1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x84, Size: 0x1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x84, Size: 0x1]
	byte UsedLayerPolicy;//[Offset: 0x85, Size: 0x1]
	byte PreservedLayerNum;//[Offset: 0x86, Size: 0x1]
	int ShowLayerID;//[Offset: 0x88, Size: 0x4]
	int OffestLayerPara;//[Offset: 0x8c, Size: 0x4]
	bool bDrawEffectNoPixel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	byte Cursor;//[Offset: 0x91, Size: 0x1]
	enum Clipping;//[Offset: 0x92, Size: 0x1]
	enum Visibility;//[Offset: 0x93, Size: 0x1]
	bool bIsCircleHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x94, Size: 0x1]
	float RenderOpacity;//[Offset: 0x98, Size: 0x4]
	PropertyBinding*[] NativeBindings;//[Offset: 0xc8, Size: 0x10]
	void SetVisibility(enum InVisibility);// 0x3e1f65c
	void SetUserFocus(PlayerController* PlayerController);// 0x3e1f5e0
	void SetRenderTranslation(Vector2D Translation);// 0x3e1f568
	void SetRenderTransformPivot(Vector2D Pivot);// 0x3e1f4f0
	void SetRenderTransform(WidgetTransform InTransform);// 0x3e1f444
	void SetRenderShear(Vector2D Shear);// 0x3e1f3cc
	void SetRenderScale(Vector2D Scale);// 0x3e1f354
	void SetRenderOpacity(float InOpacity);// 0x3e1f2d8
	void SetRenderAngle(float Angle);// 0x3e1f25c
	void SetKeyboardFocus();// 0x3e1f248
	void SetIsEnabled(bool bInIsEnabled);// 0x3e1f1bc
	void SetIsCircleHitTest(bool bInIsCircleHitTest);// 0x3e1f130
	void SetCursor(byte InCursor);// 0x3e1f0b4
	void SetClipping(enum InClipping);// 0x3e1f038
	void ResetCursor();// 0x3e1f024
	void RemoveFromParent();// 0x3e1f008
	EventReply OnReply__DelegateSignature();// 0x33e07d0
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x33e07d0
	bool IsVisible();// 0x3e1efd0
	bool IsHovered();// 0x3e1ef90
	void InvalidateLayoutAndVolatility();// 0x3e1ef7c
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x3e1eef4
	bool HasUserFocus(PlayerController* PlayerController);// 0x3e1ee6c
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x3e1edac
	bool HasMouseCapture();// 0x3e1ed74
	bool HasKeyboardFocus();// 0x3e1ed3c
	bool HasFocusedDescendants();// 0x3e1ed04
	bool HasAnyUserFocus();// 0x3e1eccc
	Widget* GetWidget__DelegateSignature();// 0x33e07d0
	enum GetVisibility();// 0x3e1ec98
	FText GetText__DelegateSignature();// 0x33e07d0
	enum GetSlateVisibility__DelegateSignature();// 0x33e07d0
	SlateColor GetSlateColor__DelegateSignature();// 0x33e07d0
	SlateBrush GetSlateBrush__DelegateSignature();// 0x33e07d0
	float GetRenderOpacity();// 0x3e1ec64
	PanelWidget* GetParent();// 0x3e1ec30
	PlayerController* GetOwningPlayer();// 0x3e1ebf4
	LocalPlayer* GetOwningLocalPlayer();// 0x3e1ebb8
	byte GetMouseCursor__DelegateSignature();// 0x33e07d0
	LinearColor GetLinearColor__DelegateSignature();// 0x33e07d0
	bool GetIsEnabled();// 0x3e1eb80
	bool GetIsCircleHitTest();// 0x3e1eb48
	int GetInt32__DelegateSignature();// 0x33e07d0
	float GetFloat__DelegateSignature();// 0x33e07d0
	Vector2D GetDesiredSize();// 0x3e1eb14
	enum GetClipping();// 0x3e1eae0
	enum GetCheckBoxState__DelegateSignature();// 0x33e07d0
	Geometry GetCachedGeometry();// 0x3e1eaa8
	bool GetBool__DelegateSignature();// 0x33e07d0
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x33e07d0
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x33e07d0
	void ForceVolatile(bool bForce);// 0x3e1ea24
	void ForceLayoutPrepass();// 0x3e1ea10
	void DrawEffectNoPixel(bool noPixel);// 0x3e1e98c

--------------------------------
Class: Visual.Object

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]
	float Top;//[Offset: 0x4, Size: 0x4]
	float Right;//[Offset: 0x8, Size: 0x4]
	float Bottom;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8]
	Widget* Content;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0xd8, Size: 0x10]
	bool RemoveChildAt(int Index);// 0x3dfaf34
	bool RemoveChild(Widget* Content);// 0x3dfaeac
	bool HasChild(Widget* Content);// 0x3dfae24
	bool HasAnyChildren();// 0x3dfadec
	int GetChildrenCount();// 0x3dfadb8
	int GetChildIndex(Widget* Content);// 0x3dfad34
	Widget* GetChildAt(int Index);// 0x3dfacb0
	void ClearChildren();// 0x3dfac9c
	PanelSlot* AddChild(Widget* Content);// 0x3dfac18

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8]
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]
	Vector2D Shear;//[Offset: 0x10, Size: 0x8]
	float Angle;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28]
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: DynamicPropertyPath.CachedPropertyPath

--------------------------------
Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10]
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* Struct;//[Offset: 0x10, Size: 0x8]
	Field* Field;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x380, Size: 0x8]
	void SetUserTag(FName InUserTag);// 0x3e0df64
	FName GetUserTag();// 0x3e0df48

--------------------------------
Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x350, Size: 0x10]
	bool bLegacyFinishOnStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	FString DisplayLabel;//[Offset: 0x368, Size: 0x10]
	float GetStartTime();// 0x3e21f08
	float GetEndTime();// 0x3e21ed4

--------------------------------
Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneEvaluationTemplate PrecompiledEvaluationTemplate;//[Offset: 0x50, Size: 0x2f0]
	enum DefaultCompletionMode;//[Offset: 0x340, Size: 0x1]
	bool bParentContextsAreSignificant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1]

--------------------------------
Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0xa0, Size: 0x30]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0xd0, Size: 0xa0]
	Guid SequenceSignature;//[Offset: 0x170, Size: 0x10]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0x180, Size: 0x4]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x188, Size: 0xa8]
	MovieSceneTrackFieldData TrackFieldData;//[Offset: 0x230, Size: 0x60]
	MovieSceneSubSectionFieldData SubSectionFieldData;//[Offset: 0x290, Size: 0x60]

--------------------------------
Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 0x10]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1]
	MovieSceneEvaluationTrackSegments Segments;//[Offset: 0x18, Size: 0x20]
	MovieSceneTrack* SourceTrack;//[Offset: 0x38, Size: 0x8]
	SectionEvaluationDataTree EvaluationTree;//[Offset: 0x40, Size: 0x60]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0xa0, Size: 0x10]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0xb0, Size: 0x38]
	FName EvaluationGroup;//[Offset: 0xe8, Size: 0x8]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]

--------------------------------
Class: MovieSceneEvaluationTrackSegments
	int[] SegmentIdentifierToIndex;//[Offset: 0x0, Size: 0x10]
	MovieSceneSegment[] SortedSegments;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneSegment

--------------------------------
Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4]

--------------------------------
Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvalNearestSection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPreroll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bEvaluateNearestSection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]

--------------------------------
Class: SectionEvaluationDataTree

--------------------------------
Class: MovieSceneEvalTemplatePtr

--------------------------------
Class: MovieSceneTrackImplementationPtr

--------------------------------
Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: MovieSceneFrameRange

--------------------------------
Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 0x4]
	int NumInitPtrs;//[Offset: 0x4, Size: 0x4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	MovieSceneSegmentIdentifier SegmentID;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneSegmentIdentifier
	int IdentifierIndex;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10]
	<MovieSceneSequenceID,uint32> SubTemplateSerialNumbers;//[Offset: 0x20, Size: 0x50]

--------------------------------
Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc]
	uint32 EvaluationIndex;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceHierarchy
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 0x50]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x50, Size: 0x50]

--------------------------------
Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 0xc]
	FrameRate TickResolution;//[Offset: 0x24, Size: 0x8]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x2c, Size: 0x4]
	MovieSceneFrameRange PlayRange;//[Offset: 0x30, Size: 0x10]
	MovieSceneFrameRange PreRollRange;//[Offset: 0x40, Size: 0x10]
	MovieSceneFrameRange PostRollRange;//[Offset: 0x50, Size: 0x10]
	int HierarchicalBias;//[Offset: 0x60, Size: 0x4]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x68, Size: 0x18]
	Guid SubSectionSignature;//[Offset: 0x88, Size: 0x10]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0x98, Size: 0xc]

--------------------------------
Class: MovieSceneSequenceTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	FrameTime Offset;//[Offset: 0x4, Size: 0x8]

--------------------------------
Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	float SubFrame;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4]
	int Denominator;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MovieSceneSequenceInstanceDataPtr

--------------------------------
Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentId;//[Offset: 0x0, Size: 0x4]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50]

--------------------------------
Class: MovieSceneTrackFieldData

--------------------------------
Class: MovieSceneSubSectionFieldData

--------------------------------
Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0x80, Size: 0x10]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0x90, Size: 0x8]
	MovieSceneFrameRange SelectionRange;//[Offset: 0x98, Size: 0x10]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xa8, Size: 0x10]
	FrameRate TickResolution;//[Offset: 0xb8, Size: 0x8]
	FrameRate DisplayRate;//[Offset: 0xc0, Size: 0x8]
	enum EvaluationType;//[Offset: 0xc8, Size: 0x1]
	enum ClockSource;//[Offset: 0xc9, Size: 0x1]

--------------------------------
Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30]
	FName[] Tags;//[Offset: 0x30, Size: 0x10]
	Guid Guid;//[Offset: 0x40, Size: 0x10]
	FString Name;//[Offset: 0x50, Size: 0x10]
	Object* ObjectTemplate;//[Offset: 0x60, Size: 0x8]
	Guid[] ChildPossessables;//[Offset: 0x68, Size: 0x10]
	enum Ownership;//[Offset: 0x78, Size: 0x1]
	FName LevelName;//[Offset: 0x7c, Size: 0x8]

--------------------------------
Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10]
	Guid Guid;//[Offset: 0x10, Size: 0x10]
	FString Name;//[Offset: 0x20, Size: 0x10]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 0x8]
	Guid ParentGuid;//[Offset: 0x38, Size: 0x10]

--------------------------------
Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]
	FString BindingName;//[Offset: 0x10, Size: 0x10]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]
	bool bIsRootWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]

--------------------------------
Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8]
	Widget* Content;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8]
	delegate Delegate;//[Offset: 0x8, Size: 0x10]
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1]
	FName UserTag;//[Offset: 0x1c, Size: 0x8]

--------------------------------
Class: Geometry

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8]
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: PointerEvent.InputEvent

--------------------------------
Class: InputEvent

--------------------------------
Class: EventReply

--------------------------------
Class: FocusEvent

--------------------------------
Class: KeyEvent.InputEvent

--------------------------------
Class: PaintContext

--------------------------------
Class: MotionEvent.InputEvent

--------------------------------
Class: CharacterEvent.InputEvent

--------------------------------
Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10]
	Object* Payload;//[Offset: 0x38, Size: 0x8]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8]
	enum Pivot;//[Offset: 0x48, Size: 0x1]
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8]
	delegate OnDrop;//[Offset: 0x58, Size: 0x10]
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10]
	delegate OnDragged;//[Offset: 0x78, Size: 0x10]
	void Drop(out const PointerEvent PointerEvent);// 0x3de5a14
	void Dragged(out const PointerEvent PointerEvent);// 0x3de58cc
	void DragCancelled(out const PointerEvent PointerEvent);// 0x3de5784

--------------------------------
Class: AnalogInputEvent.KeyEvent.InputEvent

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8]
	Margin Margin;//[Offset: 0x10, Size: 0x10]
	SlateColor TintColor;//[Offset: 0x20, Size: 0x28]
	Object* ResourceObject;//[Offset: 0x48, Size: 0x8]
	FName ResourceName;//[Offset: 0x50, Size: 0x8]
	Box2D UVRegion;//[Offset: 0x58, Size: 0x14]
	byte DrawAs;//[Offset: 0x6c, Size: 0x1]
	byte Tiling;//[Offset: 0x6d, Size: 0x1]
	byte Mirroring;//[Offset: 0x6e, Size: 0x1]
	byte ImageType;//[Offset: 0x6f, Size: 0x1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8]
	Vector2D Max;//[Offset: 0x8, Size: 0x8]
	byte bIsValid;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: LocalPlayer.player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 0x8]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 0x1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 0x8]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	int ControllerId;//[Offset: 0x108, Size: 0x4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 0x10]
	World* World;//[Offset: 0x70, Size: 0x8]
	GameInstance* GameInstance;//[Offset: 0x78, Size: 0x8]
	void SSSwapControllers();// 0x464d900
	void ShowTitleSafeArea();// 0x464d8e4
	void SetConsoleTarget(int PlayerIndex);// 0x464d860

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10]

--------------------------------
Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8]
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10]
	void ReceiveShutdown();// 0x33e07d0
	void ReceiveInit();// 0x33e07d0
	void HandleTravelError(byte FailureType);// 0x33e07d0
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x33e07d0
	void DebugRemovePlayer(int ControllerId);// 0x4637f6c
	void DebugCreatePlayer(int ControllerId);// 0x4637ee8

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: ViewTargetTransitionParams
	float blendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExp;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4]
	int UUID;//[Offset: 0x4, Size: 0x4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bNewShouldBeLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBeVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x340, Size: 0x8]
	FName MatineeControllerName;//[Offset: 0x348, Size: 0x8]
	float PlayRate;//[Offset: 0x350, Size: 0x4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x354, Size: 0x1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x354, Size: 0x1]
	float ForceStartPosition;//[Offset: 0x358, Size: 0x4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35c, Size: 0x1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x35c, Size: 0x1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x35c, Size: 0x1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x35c, Size: 0x1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x35c, Size: 0x1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x35c, Size: 0x1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x35c, Size: 0x1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x35c, Size: 0x1]
	int PreferredSplitScreenNum;//[Offset: 0x360, Size: 0x4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x364, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x364, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x364, Size: 0x1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x364, Size: 0x1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x368, Size: 0x10]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x378, Size: 0x1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x380, Size: 0x10]
	CameraCutInfo[] CameraCuts;//[Offset: 0x390, Size: 0x10]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3a0, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3a0, Size: 0x1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3a0, Size: 0x1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3a0, Size: 0x1]
	float InterpPosition;//[Offset: 0x3a4, Size: 0x4]
	byte ReplicationForceIsPlaying;//[Offset: 0x3ac, Size: 0x1]
	delegate OnPlay;//[Offset: 0x3b0, Size: 0x10]
	delegate OnStop;//[Offset: 0x3c0, Size: 0x10]
	delegate OnPause;//[Offset: 0x3d0, Size: 0x10]
	void Stop();// 0x46eed98
	void SetPosition(float NewPosition, bool bJump);// 0x46eecd8
	void SetLoopingState(bool bNewLooping);// 0x46eec4c
	void Reverse();// 0x46eec30
	void Play();// 0x46eec14
	void Pause();// 0x46eebf8
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x46eead4
	void ChangePlaybackDirection();// 0x46eeab8

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4]
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8]
	float EdSectionStart;//[Offset: 0x48, Size: 0x4]
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8]
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float Timestamp;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x248, Size: 0x8]
	Actor* ChildActor;//[Offset: 0x250, Size: 0x8]
	Actor* ChildActorTemplate;//[Offset: 0x258, Size: 0x8]
	void SetChildActorClass(class Actor InClass);// 0x45f3914

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8]
	FName MemberName;//[Offset: 0x8, Size: 0x8]
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: PrimitiveComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x340, Size: 0x1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x33e07d0
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x46d125c
	bool RemoteEvent(FName EventName);// 0x46d11cc
	void LevelReset();// 0x33e07d0

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
	int Z;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x348, Size: 0x8]
	BillboardComponent* GoodSprite;//[Offset: 0x350, Size: 0x8]
	BillboardComponent* BadSprite;//[Offset: 0x358, Size: 0x8]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x360, Size: 0x1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x590, Size: 0x8]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x598, Size: 0x1]
	float ScreenSize;//[Offset: 0x59c, Size: 0x4]
	float U;//[Offset: 0x5a0, Size: 0x4]
	float UL;//[Offset: 0x5a4, Size: 0x4]
	float V;//[Offset: 0x5a8, Size: 0x4]
	float VL;//[Offset: 0x5ac, Size: 0x4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x45c33e4
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x45c3278
	void SetSprite(Texture2D* NewSprite);// 0x45c31f4

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1]

--------------------------------
Class: WorldSettings.Info.Actor.Object
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x348, Size: 0x1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x348, Size: 0x1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x348, Size: 0x1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x348, Size: 0x1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x348, Size: 0x1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x348, Size: 0x1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x348, Size: 0x1]
	bool bHasWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x349, Size: 0x1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x350, Size: 0x8]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x358, Size: 0x8]
	float KillZ;//[Offset: 0x360, Size: 0x4]
	class DamageType* KillZDamageType;//[Offset: 0x368, Size: 0x8]
	float WorldGravityZ;//[Offset: 0x370, Size: 0x4]
	float GlobalGravityZ;//[Offset: 0x374, Size: 0x4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x378, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x380, Size: 0x8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x388, Size: 0x8]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x390, Size: 0x8]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x398, Size: 0x4]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39c, Size: 0x1]
	Vector DefaultColorScale;//[Offset: 0x3a0, Size: 0xc]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x3ac, Size: 0x4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x3b0, Size: 0x4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x3b4, Size: 0x4]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c0, Size: 0x1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c0, Size: 0x1]
	int VisibilityCellSize;//[Offset: 0x3c4, Size: 0x4]
	byte VisibilityAggressiveness;//[Offset: 0x3c8, Size: 0x1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c9, Size: 0x1]
	bool bAllowPrtProbe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ca, Size: 0x1]
	float PrtIntensity;//[Offset: 0x3cc, Size: 0x4]
	float PrtSkyAOIntensity;//[Offset: 0x3d0, Size: 0x4]
	LightmassWorldInfoSettings LightmassSettings;//[Offset: 0x3d4, Size: 0x54]
	IdeaBakingWorldInfoSettings IdeaBakingSettings;//[Offset: 0x428, Size: 0x40]
	float WorldToMeters;//[Offset: 0x468, Size: 0x4]
	float MonoCullingDistance;//[Offset: 0x46c, Size: 0x4]
	BookMark* BookMarks;//[Offset: 0x470, Size: 0x8]
	float TimeDilation;//[Offset: 0x4c0, Size: 0x4]
	float MatineeTimeDilation;//[Offset: 0x4c4, Size: 0x4]
	float DemoPlayTimeDilation;//[Offset: 0x4c8, Size: 0x4]
	float MinGlobalTimeDilation;//[Offset: 0x4cc, Size: 0x4]
	float MaxGlobalTimeDilation;//[Offset: 0x4d0, Size: 0x4]
	float MinUndilatedFrameTime;//[Offset: 0x4d4, Size: 0x4]
	float MaxUndilatedFrameTime;//[Offset: 0x4d8, Size: 0x4]
	PlayerState* Pauser;//[Offset: 0x4e0, Size: 0x8]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4e8, Size: 0x1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4e8, Size: 0x1]
	NetViewer[] ReplicationViewers;//[Offset: 0x4f0, Size: 0x10]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500, Size: 0x1]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x504, Size: 0x24]
	AssetUserData*[] AssetUserData;//[Offset: 0x528, Size: 0x10]
	int MaxNumberOfBookmarks;//[Offset: 0x538, Size: 0x4]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x540, Size: 0x8]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x548, Size: 0x10]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x558, Size: 0x8]
	void OnRep_WorldGravityZ();// 0x47c3898

--------------------------------
Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18]
	bool bIsOverriden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4]
	float LastImpactSoundTime;//[Offset: 0x30, Size: 0x4]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x340, Size: 0x10]
	class GameSession* GameSessionClass;//[Offset: 0x350, Size: 0x8]
	class GameStateBase* GameStateClass;//[Offset: 0x358, Size: 0x8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x360, Size: 0x8]
	class PlayerState* PlayerStateClass;//[Offset: 0x368, Size: 0x8]
	class HUD* HUDClass;//[Offset: 0x370, Size: 0x8]
	class Pawn* DefaultPawnClass;//[Offset: 0x378, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x380, Size: 0x8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x388, Size: 0x8]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x390, Size: 0x8]
	GameSession* GameSession;//[Offset: 0x398, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x3a0, Size: 0x8]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x3a8, Size: 0x8]
	FText DefaultPlayerName;//[Offset: 0x3b0, Size: 0x18]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c8, Size: 0x1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c8, Size: 0x1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c8, Size: 0x1]
	void StartPlay();// 0x463acb8
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x463abec
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x463aac4
	bool ShouldReset(Actor* ActorToReset);// 0x463aa34
	void ReturnToMainMenuHost();// 0x463aa18
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x463a8f8
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x463a83c
	void RestartPlayer(Controller* NewPlayer);// 0x463a7b8
	void ResetLevel();// 0x463a79c
	bool PlayerCanRestart(PlayerController* player);// 0x463a70c
	bool MustSpectate(PlayerController* NewPlayerController);// 0x463a67c
	void K2_PostLogin(PlayerController* NewPlayer);// 0x33e07d0
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x33e07d0
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x33e07d0
	void K2_OnLogout(Controller* ExitingController);// 0x33e07d0
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x33e07d0
	Actor* K2_FindPlayerStart(Controller* player, FString IncomingName);// 0x463a5a8
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x463a4ec
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x463a468
	bool HasMatchStarted();// 0x463a428
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x463a3a4
	int GetNumSpectators();// 0x463a368
	int GetNumPlayers();// 0x463a32c
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x463a2a0
	Actor* FindPlayerStart(Controller* player, FString IncomingName);// 0x463a1c4
	Actor* ChoosePlayerStart(Controller* player);// 0x463a138
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x463a024
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x4639f54

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x340, Size: 0x4]
	int MaxPlayers;//[Offset: 0x344, Size: 0x4]
	int MaxPartySize;//[Offset: 0x348, Size: 0x4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x34c, Size: 0x1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 0x1]
	FName SessionName;//[Offset: 0x350, Size: 0x8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x340, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x348, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x350, Size: 0x8]
	PlayerState*[] PlayerArray;//[Offset: 0x358, Size: 0x10]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x36c, Size: 0x4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x370, Size: 0x4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x374, Size: 0x4]
	void OnRep_SpectatorClass();// 0x4649068
	void OnRep_ReplicatedWorldTimeSeconds();// 0x464904c
	void OnRep_ReplicatedHasBegunPlay();// 0x4649030
	void OnRep_GameModeClass();// 0x4649014
	bool HasMatchStarted();// 0x4648fd4
	bool HasBegunPlay();// 0x4648f94
	float GetServerWorldTimeSeconds();// 0x4648f58
	float GetPlayerStartTime(Controller* Controller);// 0x4648ecc
	float GetPlayerRespawnDelay(Controller* Controller);// 0x4648e40

--------------------------------
Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	bool bOverwriteClientStats;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1]
	uint32 Channels;//[Offset: 0x344, Size: 0x4]
	uint32 InRate;//[Offset: 0x348, Size: 0x4]
	uint32 OutRate;//[Offset: 0x34c, Size: 0x4]
	uint32 OutSaturation;//[Offset: 0x350, Size: 0x4]
	uint32 MaxPacketOverhead;//[Offset: 0x354, Size: 0x4]
	uint32 InRateClientMax;//[Offset: 0x358, Size: 0x4]
	uint32 InRateClientMin;//[Offset: 0x35c, Size: 0x4]
	uint32 InRateClientAvg;//[Offset: 0x360, Size: 0x4]
	uint32 InPacketsClientMax;//[Offset: 0x364, Size: 0x4]
	uint32 InPacketsClientMin;//[Offset: 0x368, Size: 0x4]
	uint32 InPacketsClientAvg;//[Offset: 0x36c, Size: 0x4]
	uint32 OutRateClientMax;//[Offset: 0x370, Size: 0x4]
	uint32 OutRateClientMin;//[Offset: 0x374, Size: 0x4]
	uint32 OutRateClientAvg;//[Offset: 0x378, Size: 0x4]
	uint32 OutPacketsClientMax;//[Offset: 0x37c, Size: 0x4]
	uint32 OutPacketsClientMin;//[Offset: 0x380, Size: 0x4]
	uint32 OutPacketsClientAvg;//[Offset: 0x384, Size: 0x4]
	uint32 NetNumClients;//[Offset: 0x388, Size: 0x4]
	uint32 InPackets;//[Offset: 0x38c, Size: 0x4]
	uint32 OutPackets;//[Offset: 0x390, Size: 0x4]
	uint32 InBunches;//[Offset: 0x394, Size: 0x4]
	uint32 OutBunches;//[Offset: 0x398, Size: 0x4]
	uint32 OutLoss;//[Offset: 0x39c, Size: 0x4]
	uint32 InLoss;//[Offset: 0x3a0, Size: 0x4]
	uint32 VoiceBytesSent;//[Offset: 0x3a4, Size: 0x4]
	uint32 VoiceBytesRecv;//[Offset: 0x3a8, Size: 0x4]
	uint32 VoicePacketsSent;//[Offset: 0x3ac, Size: 0x4]
	uint32 VoicePacketsRecv;//[Offset: 0x3b0, Size: 0x4]
	uint32 PercentInVoice;//[Offset: 0x3b4, Size: 0x4]
	uint32 PercentOutVoice;//[Offset: 0x3b8, Size: 0x4]
	uint32 NumActorChannels;//[Offset: 0x3bc, Size: 0x4]
	uint32 NumConsideredActors;//[Offset: 0x3c0, Size: 0x4]
	uint32 PrioritizedActors;//[Offset: 0x3c4, Size: 0x4]
	uint32 NumRelevantActors;//[Offset: 0x3c8, Size: 0x4]
	uint32 NumRelevantDeletedActors;//[Offset: 0x3cc, Size: 0x4]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x3d0, Size: 0x4]
	uint32 NumReplicatedActors;//[Offset: 0x3d4, Size: 0x4]
	uint32 NumActors;//[Offset: 0x3d8, Size: 0x4]
	uint32 NumNetActors;//[Offset: 0x3dc, Size: 0x4]
	uint32 NumDormantActors;//[Offset: 0x3e0, Size: 0x4]
	uint32 NumInitiallyDormantActors;//[Offset: 0x3e4, Size: 0x4]
	uint32 NumNetGUIDsAckd;//[Offset: 0x3e8, Size: 0x4]
	uint32 NumNetGUIDsPending;//[Offset: 0x3ec, Size: 0x4]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x3f0, Size: 0x4]
	uint32 ObjPathBytes;//[Offset: 0x3f4, Size: 0x4]
	uint32 NetGUIDOutRate;//[Offset: 0x3f8, Size: 0x4]
	uint32 NetGUIDInRate;//[Offset: 0x3fc, Size: 0x4]
	uint32 NetSaturated;//[Offset: 0x400, Size: 0x4]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	int AdjustedNetSpeed;//[Offset: 0x340, Size: 0x4]
	float LastNetSpeedUpdateTime;//[Offset: 0x344, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x348, Size: 0x4]
	int MinDynamicBandwidth;//[Offset: 0x34c, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x350, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x354, Size: 0x1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x354, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x358, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x35c, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x360, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x364, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x368, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x36c, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x370, Size: 0x4]
	float MoveRepSize;//[Offset: 0x374, Size: 0x4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x378, Size: 0x4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x37c, Size: 0x4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x380, Size: 0x4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x384, Size: 0x4]
	float MaxClientForcedUpdateDuration;//[Offset: 0x388, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x38c, Size: 0x4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x390, Size: 0x4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x394, Size: 0x4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x398, Size: 0x4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x39c, Size: 0x4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x3a0, Size: 0x4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 0x1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x3a8, Size: 0x4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 0x1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ad, Size: 0x1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x3b0, Size: 0x4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x3b4, Size: 0x4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x3b8, Size: 0x4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x3bc, Size: 0x4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c1, Size: 0x1]

--------------------------------
Class: LightmassWorldInfoSettings
	float StaticLightingLevelScale;//[Offset: 0x0, Size: 0x4]
	int NumIndirectLightingBounces;//[Offset: 0x4, Size: 0x4]
	int NumSkyLightingBounces;//[Offset: 0x8, Size: 0x4]
	float IndirectLightingQuality;//[Offset: 0xc, Size: 0x4]
	float IndirectLightingSmoothness;//[Offset: 0x10, Size: 0x4]
	Color EnvironmentColor;//[Offset: 0x14, Size: 0x4]
	float EnvironmentIntensity;//[Offset: 0x18, Size: 0x4]
	float EmissiveBoost;//[Offset: 0x1c, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x20, Size: 0x4]
	byte VolumeLightingMethod;//[Offset: 0x24, Size: 0x1]
	float VolumetricLightmapDetailCellSize;//[Offset: 0x28, Size: 0x4]
	float VolumetricLightmapMaximumBrickMemoryMb;//[Offset: 0x2c, Size: 0x4]
	float VolumetricLightmapSphericalHarmonicSmoothing;//[Offset: 0x30, Size: 0x4]
	float VolumeLightSamplePlacementScale;//[Offset: 0x34, Size: 0x4]
	bool bUseAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bGenerateAmbientOcclusionMaterialMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	float DirectIlluminationOcclusionFraction;//[Offset: 0x3c, Size: 0x4]
	float IndirectIlluminationOcclusionFraction;//[Offset: 0x40, Size: 0x4]
	float OcclusionExponent;//[Offset: 0x44, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x48, Size: 0x4]
	float MaxOcclusionDistance;//[Offset: 0x4c, Size: 0x4]
	bool bVisualizeMaterialDiffuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bVisualizeAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	bool bCompressLightmaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: IdeaBakingWorldInfoSettings
	enum BakingLayout;//[Offset: 0x0, Size: 0x1]
	int NumCoarseSamples;//[Offset: 0x4, Size: 0x4]
	int NumSamples;//[Offset: 0x8, Size: 0x4]
	int NumLightingBounces;//[Offset: 0xc, Size: 0x4]
	float LightmapBoost;//[Offset: 0x10, Size: 0x4]
	float SunHardness;//[Offset: 0x14, Size: 0x4]
	enum BakingMode;//[Offset: 0x18, Size: 0x1]
	bool bUseParallelBaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1]
	bool bUseConservativeRasterization;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1]
	bool bUseLocalOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1]
	float LocalOcclusionTracingDistance;//[Offset: 0x1c, Size: 0x4]
	float LocalOcclusionPower;//[Offset: 0x20, Size: 0x4]
	int NumDenoisingIterators;//[Offset: 0x24, Size: 0x4]
	int NumDilationIterators;//[Offset: 0x28, Size: 0x4]
	float RayTraceMaxDistance;//[Offset: 0x2c, Size: 0x4]
	float RetraceDistance;//[Offset: 0x30, Size: 0x4]
	float SmallestTexelRadius;//[Offset: 0x34, Size: 0x4]
	uint32 AreaLightSampleCount;//[Offset: 0x38, Size: 0x4]
	bool bWithPortalDirectLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]

--------------------------------
Class: BookMark.BookmarkBase.Object
	Vector Location;//[Offset: 0x28, Size: 0xc]
	Rotator Rotation;//[Offset: 0x34, Size: 0xc]
	FString[] HiddenLevels;//[Offset: 0x40, Size: 0x10]

--------------------------------
Class: BookmarkBase.Object

--------------------------------
Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]
	Actor* InViewer;//[Offset: 0x8, Size: 0x8]
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8]
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc]
	Vector ViewDir;//[Offset: 0x24, Size: 0xc]

--------------------------------
Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUseMBPOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c]
	uint32 MBPNumSubdivs;//[Offset: 0x20, Size: 0x4]

--------------------------------
Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 0x8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 0x10]
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30]
	int LevelLODIndex;//[Offset: 0xb0, Size: 0x4]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb6, Size: 0x1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb6, Size: 0x1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb6, Size: 0x1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb6, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb6, Size: 0x1]
	bool bShouldBlockOnUnload;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb6, Size: 0x1]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb7, Size: 0x1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb7, Size: 0x1]
	LinearColor LevelColor;//[Offset: 0xb8, Size: 0x10]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xc8, Size: 0x10]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xd8, Size: 0x4]
	delegate OnLevelLoaded;//[Offset: 0xe0, Size: 0x10]
	delegate OnLevelUnloaded;//[Offset: 0xf0, Size: 0x10]
	delegate OnLevelShown;//[Offset: 0x100, Size: 0x10]
	delegate OnLevelHidden;//[Offset: 0x110, Size: 0x10]
	Level* LoadedLevel;//[Offset: 0x120, Size: 0x8]
	Level* PendingUnloadLevel;//[Offset: 0x128, Size: 0x8]
	Level*[] UnloadingLevels;//[Offset: 0x130, Size: 0x10]
	bool ShouldBeLoaded();// 0x46d1fcc
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x46d1f48
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x46d1ebc
	void SetLevelLODIndex(int LODIndex);// 0x46d1e40
	bool IsStreamingStatePending();// 0x46d1e08
	bool IsLevelVisible();// 0x46d1dd0
	bool IsLevelLoaded();// 0x46d1dac
	FName GetWorldAssetPackageFName();// 0x46d1d78
	LevelScriptActor* GetLevelScriptActor();// 0x46d1d44
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x46d1ca8

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x378, Size: 0x10]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x388, Size: 0x1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x388, Size: 0x1]
	byte StreamingUsage;//[Offset: 0x389, Size: 0x1]

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x778, Size: 0x50]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0xb6c, Size: 0x4]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xba0, Size: 0x1]

--------------------------------
Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8]
	Level* Level;//[Offset: 0x28, Size: 0x8]
	Object*[] ObjReferences;//[Offset: 0x90, Size: 0x10]

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: NavigationSystemBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18]
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4]
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4]
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x45c299c
	int GetObjectCount();// 0x45c2968
	int GetNewAvoidanceUID();// 0x45c2934
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x45c28ac

--------------------------------
Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8]
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8]
	<Level*> Levels;//[Offset: 0x28, Size: 0x50]

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4]
	float OrgY;//[Offset: 0x2c, Size: 0x4]
	float ClipX;//[Offset: 0x30, Size: 0x4]
	float ClipY;//[Offset: 0x34, Size: 0x4]
	Color DrawColor;//[Offset: 0x38, Size: 0x4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	int SizeX;//[Offset: 0x40, Size: 0x4]
	int SizeY;//[Offset: 0x44, Size: 0x4]
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x45e0a6c
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x45e0998
	Vector K2_Project(Vector WorldLocation);// 0x45e0908
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x45e07e4
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x45e0570
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x45e0208
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x45e0098
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x45dff74
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint, bool bReverseCulling);// 0x45dfd44
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x45dfc04
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x45dfac4
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x45df6b0
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x45df59c

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10]

--------------------------------
Class: WorldComposition.Object
	bool bUseLayerNameFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	FString[] FilterLayerNames;//[Offset: 0x50, Size: 0x10]
	bool bPlayerBorned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bUseInitViewpoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	Vector InitViewPoint;//[Offset: 0x64, Size: 0xc]
	LevelStreaming*[] TilesStreaming;//[Offset: 0x70, Size: 0x10]
	double TilesStreamingTimeThreshold;//[Offset: 0x80, Size: 0x8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	float RebaseOriginDistance;//[Offset: 0x8c, Size: 0x4]
	Object* CurrentTopHighActor;//[Offset: 0xa0, Size: 0x8]
	void SetUseExViewPoints(bool bInUseExViewPoints);// 0x47c1840
	void SetInitViewPoint(out const Vector InVector);// 0x47c17b8
	void RescanNewLevels();// 0x47c17a4
	int GetVisibleLevelToLoadNum(out const Vector CenterLocation);// 0x47c170c
	float GetVisibleLevelLoadPercent(out const Vector CenterLocation);// 0x47c1674
	int GetVisibleLevelLoadedNum(out const Vector CenterLocation);// 0x47c15dc
	int GetNumOfVisibleLevelToLoad();// 0x47c15a8
	int GetNumOfVisibleLevelLoaded();// 0x47c1574
	float GetLoadPercentOfVisibleLevel();// 0x47c1540
	void GetExViewPoints(out Vector[] OutExViewPoints);// 0x47c14a4
	void EmptyExViewPoints();// 0x47c1490
	void AddExViewPoint(out const Vector InExViewPoint);// 0x47c1408

--------------------------------
Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: Landscape.LandscapeProxy.Actor.Object

--------------------------------
Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x340, Size: 0x8]
	Guid LandscapeGuid;//[Offset: 0x348, Size: 0x10]
	IntPoint LandscapeSectionOffset;//[Offset: 0x358, Size: 0x8]
	int MaxLODLevel;//[Offset: 0x360, Size: 0x4]
	float LODDistanceFactor;//[Offset: 0x364, Size: 0x4]
	byte LODFalloff;//[Offset: 0x368, Size: 0x1]
	float ComponentScreenSizeToUseSubSections;//[Offset: 0x36c, Size: 0x4]
	float[] LODValues;//[Offset: 0x378, Size: 0x10]
	int TriangleCount;//[Offset: 0x388, Size: 0x4]
	bool EnableSlopeLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38d, Size: 0x1]
	bool EnableSlopeLOD_Baked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38e, Size: 0x1]
	float LODFixedScreenSize;//[Offset: 0x390, Size: 0x4]
	float LODFixedScreenSize_Baked;//[Offset: 0x394, Size: 0x4]
	float LODFixedSlope;//[Offset: 0x398, Size: 0x4]
	float LODFixedSlope_Baked;//[Offset: 0x39c, Size: 0x4]
	float TessellationComponentScreenSize;//[Offset: 0x3a0, Size: 0x4]
	bool UseTessellationComponentScreenSizeFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 0x1]
	float TessellationComponentScreenSizeFalloff;//[Offset: 0x3a8, Size: 0x4]
	int OccluderGeometryLOD;//[Offset: 0x3ac, Size: 0x4]
	int StaticLightingLOD;//[Offset: 0x3b0, Size: 0x4]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x3b8, Size: 0x8]
	float StreamingDistanceMultiplier;//[Offset: 0x3c0, Size: 0x4]
	MaterialInterface* LandscapeMaterial;//[Offset: 0x3c8, Size: 0x8]
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x3d0, Size: 0x8]
	LandscapeProxyMaterialOverride[] LandscapeMaterialsOverride;//[Offset: 0x3d8, Size: 0x10]
	float NegativeZBoundsExtension;//[Offset: 0x3e8, Size: 0x4]
	float PositiveZBoundsExtension;//[Offset: 0x3ec, Size: 0x4]
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x3f0, Size: 0x10]
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x400, Size: 0x10]
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x410, Size: 0x10]
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 0x1]
	float StaticLightingResolution;//[Offset: 0x488, Size: 0x4]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48c, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48c, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48c, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x48c, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x48d, Size: 0x1]
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48e, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48e, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x490, Size: 0x4]
	bool bRenderOverlookDepth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x494, Size: 0x1]
	float LDMaxDrawDistance;//[Offset: 0x498, Size: 0x4]
	int CollisionMipLevel;//[Offset: 0x49c, Size: 0x4]
	int SimpleCollisionMipLevel;//[Offset: 0x4a0, Size: 0x4]
	float CollisionThickness;//[Offset: 0x4a4, Size: 0x4]
	BodyInstance BodyInstance;//[Offset: 0x4a8, Size: 0x140]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5e8, Size: 0x1]
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5e8, Size: 0x1]
	int ComponentSizeQuads;//[Offset: 0x5ec, Size: 0x4]
	int SubsectionSizeQuads;//[Offset: 0x5f0, Size: 0x4]
	int NumSubsections;//[Offset: 0x5f4, Size: 0x4]
	bool bUseDynamicMaterialInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8, Size: 0x1]
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f9, Size: 0x1]
	void SetLandscapeMaterialVectorParameterValue(FName ParameterName, LinearColor Value);// 0x3b860b0
	void SetLandscapeMaterialTextureParameterValue(FName ParameterName, Texture* Value);// 0x3b85ffc
	void SetLandscapeMaterialScalarParameterValue(FName ParameterName, float Value);// 0x3b85f44
	void EditorSetLandscapeMaterial(MaterialInterface* NewLandscapeMaterial);// 0x3b85ec8
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer);// 0x3b85be4
	void ChangeUseTessellationComponentScreenSizeFalloff(bool InComponentScreenSizeToUseSubSections);// 0x3b85b58
	void ChangeTessellationComponentScreenSizeFalloff(float InUseTessellationComponentScreenSizeFalloff);// 0x3b85ad4
	void ChangeTessellationComponentScreenSize(float InTessellationComponentScreenSize);// 0x3b85a50
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0x3b859cc
	void ChangeComponentScreenSizeToUseSubSections(float InComponentScreenSizeToUseSubSections);// 0x3b85948
	void BakeSlopFactors();// 0x3b8592c

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x590, Size: 0x10]
	LandscapeSplineSegment*[] Segments;//[Offset: 0x5a0, Size: 0x10]
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x5b0, Size: 0x10]
	SplineMeshComponent*[] GetSplineMeshComponents();// 0x3b8780c

--------------------------------
Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x28, Size: 0xc]
	Rotator Rotation;//[Offset: 0x34, Size: 0xc]
	float Width;//[Offset: 0x40, Size: 0x4]
	float SideFalloff;//[Offset: 0x44, Size: 0x4]
	float EndFalloff;//[Offset: 0x48, Size: 0x4]
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x50, Size: 0x10]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x60, Size: 0x10]
	Box Bounds;//[Offset: 0x70, Size: 0x1c]
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 0x8]
	bool End;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x28, Size: 0x18]
	InterpCurveVector SplineInfo;//[Offset: 0x58, Size: 0x18]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 0x10]
	Box Bounds;//[Offset: 0x80, Size: 0x1c]
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0xa0, Size: 0x10]

--------------------------------
Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 0x8]
	float TangentLen;//[Offset: 0x8, Size: 0x4]
	FName SocketName;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Vector Left;//[Offset: 0xc, Size: 0xc]
	Vector Right;//[Offset: 0x18, Size: 0xc]
	Vector FalloffLeft;//[Offset: 0x24, Size: 0xc]
	Vector FalloffRight;//[Offset: 0x30, Size: 0xc]
	float StartEndFalloff;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x698, Size: 0x58]
	Vector SplineUpDir;//[Offset: 0x6f0, Size: 0xc]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6fc, Size: 0x1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6fc, Size: 0x1]
	byte ForwardAxis;//[Offset: 0x6fd, Size: 0x1]
	float SplineBoundaryMin;//[Offset: 0x700, Size: 0x4]
	float SplineBoundaryMax;//[Offset: 0x704, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x708, Size: 0x8]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x710, Size: 0x10]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x720, Size: 0x1]
	void UpdateMesh();// 0x47a2748
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x47a2688
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x47a25cc
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x47a250c
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x47a244c
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x47a2390
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x47a2200
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x47a2128
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x47a2068
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x47a1fa8
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x47a1eec
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x47a1e2c
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x47a1d6c
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x47a1cb0
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x47a1bf0
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x47a1b30
	Vector GetStartTangent();// 0x47a1af8
	Vector2D GetStartScale();// 0x47a1ac4
	float GetStartRoll();// 0x47a1a90
	Vector GetStartPosition();// 0x47a1a58
	Vector2D GetStartOffset();// 0x47a1a24
	Vector GetSplineUpDir();// 0x47a19ec
	byte GetForwardAxis();// 0x47a19b8
	Vector GetEndTangent();// 0x47a1980
	Vector2D GetEndScale();// 0x47a194c
	float GetEndRoll();// 0x47a1918
	Vector GetEndPosition();// 0x47a18e0
	Vector2D GetEndOffset();// 0x47a18ac
	float GetBoundaryMin();// 0x47a1878
	float GetBoundaryMax();// 0x47a1844

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0xc]
	Vector StartTangent;//[Offset: 0xc, Size: 0xc]
	Vector2D StartScale;//[Offset: 0x18, Size: 0x8]
	float StartRoll;//[Offset: 0x20, Size: 0x4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8]
	Vector EndPos;//[Offset: 0x2c, Size: 0xc]
	Vector EndTangent;//[Offset: 0x38, Size: 0xc]
	Vector2D EndScale;//[Offset: 0x44, Size: 0x8]
	float EndRoll;//[Offset: 0x4c, Size: 0x4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: LandscapeProxyMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x590, Size: 0x4]
	int SectionBaseY;//[Offset: 0x594, Size: 0x4]
	int ComponentSizeQuads;//[Offset: 0x598, Size: 0x4]
	int SubsectionSizeQuads;//[Offset: 0x59c, Size: 0x4]
	int NumSubsections;//[Offset: 0x5a0, Size: 0x4]
	MaterialInterface* OverrideMaterial;//[Offset: 0x5a8, Size: 0x8]
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x5b0, Size: 0x8]
	LandscapeComponentMaterialOverride[] OverrideMaterials;//[Offset: 0x5b8, Size: 0x10]
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x5c8, Size: 0x10]
	MaterialInstanceDynamic*[] MaterialInstancesDynamic;//[Offset: 0x5d8, Size: 0x10]
	int8[] LODIndexToMaterialIndex;//[Offset: 0x5e8, Size: 0x10]
	int8[] MaterialIndexToDisabledTessellationMaterial;//[Offset: 0x5f8, Size: 0x10]
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x608, Size: 0x10]
	Texture2D*[] WeightmapTextures;//[Offset: 0x618, Size: 0x10]
	Texture2D* XYOffsetmapTexture;//[Offset: 0x628, Size: 0x8]
	Vector4 WeightmapScaleBias;//[Offset: 0x630, Size: 0x10]
	float WeightmapSubsectionOffset;//[Offset: 0x640, Size: 0x4]
	Vector4 HeightmapScaleBias;//[Offset: 0x650, Size: 0x10]
	Texture2D* HeightmapTexture;//[Offset: 0x660, Size: 0x8]
	Box CachedLocalBox;//[Offset: 0x668, Size: 0x1c]
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x684, Size: 0x1c]
	Guid MapBuildDataId;//[Offset: 0x6a0, Size: 0x10]
	Guid[] IrrelevantLights;//[Offset: 0x6b0, Size: 0x10]
	int CollisionMipLevel;//[Offset: 0x6c0, Size: 0x4]
	int SimpleCollisionMipLevel;//[Offset: 0x6c4, Size: 0x4]
	float NegativeZBoundsExtension;//[Offset: 0x6c8, Size: 0x4]
	float PositiveZBoundsExtension;//[Offset: 0x6cc, Size: 0x4]
	float StaticLightingResolution;//[Offset: 0x6d0, Size: 0x4]
	int ForcedLOD;//[Offset: 0x6d4, Size: 0x4]
	int LODBias;//[Offset: 0x6d8, Size: 0x4]
	float[] LODSlopeFactors;//[Offset: 0x6e0, Size: 0x10]
	float[] LODHeightFactors;//[Offset: 0x6f0, Size: 0x10]
	float[] LODFixedSlopeRecommendValues;//[Offset: 0x700, Size: 0x10]
	Guid StateId;//[Offset: 0x710, Size: 0x10]
	Guid BakedTextureMaterialGuid;//[Offset: 0x720, Size: 0x10]
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x730, Size: 0x8]
	byte MobileBlendableLayerMask;//[Offset: 0x738, Size: 0x1]
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x740, Size: 0x8]
	MaterialInterface*[] MobileMaterialInterfaces;//[Offset: 0x748, Size: 0x10]
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x758, Size: 0x10]
	Vector4 BakedDataScale;//[Offset: 0x770, Size: 0x10]
	Texture2D* BakedTexture;//[Offset: 0x780, Size: 0x8]
	MaterialInstanceDynamic* GetMaterialInstanceDynamic(int InIndex);// 0x3b81858

--------------------------------
Class: LandscapeComponentMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x46e9790
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x46e970c
	float K2_GetScalarParameterValue(FName ParameterName);// 0x46e9688

--------------------------------
Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 0x8]
	byte WeightmapTextureIndex;//[Offset: 0x8, Size: 0x1]
	byte WeightmapTextureChannel;//[Offset: 0x9, Size: 0x1]

--------------------------------
Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x28, Size: 0x8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x30, Size: 0x8]
	float Hardness;//[Offset: 0x38, Size: 0x4]
	LinearColor LayerUsageDebugColor;//[Offset: 0x3c, Size: 0x10]

--------------------------------
Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x590, Size: 0x10]
	int SectionBaseX;//[Offset: 0x5a0, Size: 0x4]
	int SectionBaseY;//[Offset: 0x5a4, Size: 0x4]
	int CollisionSizeQuads;//[Offset: 0x5a8, Size: 0x4]
	float CollisionScale;//[Offset: 0x5ac, Size: 0x4]
	int SimpleCollisionSizeQuads;//[Offset: 0x5b0, Size: 0x4]
	byte[] CollisionQuadFlags;//[Offset: 0x5b8, Size: 0x10]
	Guid HeightfieldGuid;//[Offset: 0x5c8, Size: 0x10]
	Box CachedLocalBox;//[Offset: 0x5d8, Size: 0x1c]
	LandscapeComponent* RenderComponent;//[Offset: 0x5f4, Size: 0x1c]
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x620, Size: 0x10]

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x738, Size: 0x10]
	int NumBuiltInstances;//[Offset: 0x748, Size: 0x4]
	Box BuiltInstanceBounds;//[Offset: 0x750, Size: 0x1c]
	Box UnbuiltInstanceBounds;//[Offset: 0x76c, Size: 0x1c]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x788, Size: 0x10]
	int OcclusionLayerNumNodes;//[Offset: 0x7a0, Size: 0x4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x7a4, Size: 0x1c]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c0, Size: 0x1]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7c0, Size: 0x1]
	int InstanceCountToRender;//[Offset: 0x7c4, Size: 0x4]
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x464ef38

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x690, Size: 0x10]
	int InstancingRandomSeed;//[Offset: 0x6a0, Size: 0x4]
	int InstanceStartCullDistance;//[Offset: 0x6a4, Size: 0x4]
	int InstanceEndCullDistance;//[Offset: 0x6a8, Size: 0x4]
	int[] InstanceReorderTable;//[Offset: 0x6b0, Size: 0x10]
	int[] IdeaOutlineInstances;//[Offset: 0x6c0, Size: 0x10]
	int NumPendingLightmaps;//[Offset: 0x710, Size: 0x4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x718, Size: 0x10]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x465db00
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x465da4c
	bool RemoveInstance(int InstanceIndex);// 0x465d9bc
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x465d84c
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x465d6e0
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x465d588
	int GetInstanceCount();// 0x465d554
	void ClearInstances();// 0x465d538
	bool CancelOutlineInstance(int InstanceIndex);// 0x465d4a8
	bool AddOutlineInstance(int InstanceIndex);// 0x465d418
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x465d334
	int AddInstance(out const Transform InstanceTransform);// 0x465d248

--------------------------------
Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x40]

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10]
	Plane YPlane;//[Offset: 0x10, Size: 0x10]
	Plane ZPlane;//[Offset: 0x20, Size: 0x10]
	Plane WPlane;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: InstancedStaticMeshMappingInfo

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x590, Size: 0x60]
	InterpCurveVector SplineInfo;//[Offset: 0x5f0, Size: 0x18]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x608, Size: 0x18]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x620, Size: 0x18]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x638, Size: 0x18]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x650, Size: 0x1]
	int ReparamStepsPerSegment;//[Offset: 0x654, Size: 0x4]
	float Duration;//[Offset: 0x658, Size: 0x4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65c, Size: 0x1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65d, Size: 0x1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65e, Size: 0x1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65f, Size: 0x1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x660, Size: 0x1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x661, Size: 0x1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x662, Size: 0x1]
	float LoopPosition;//[Offset: 0x664, Size: 0x4]
	Vector DefaultUpVector;//[Offset: 0x668, Size: 0xc]
	void UpdateSpline();// 0x479c4a0
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x479c3d4
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x479c284
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x479c1fc
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x479c060
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x479bf10
	void SetSplineWorldPoints(out const Vector[] Points);// 0x479be6c
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x479bd70
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x479bc48
	void SetSplineLocalPoints(out const Vector[] Points);// 0x479bba4
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x479bb1c
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x479b9cc
	void SetDrawDebug(bool bShow);// 0x479b948
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x479b878
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x479b76c
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x479b6a4
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x479b5e8
	bool IsClosedLoop();// 0x479b5b0
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x479b524
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x479b454
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x479b3c8
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x479b2f8
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x479b26c
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x479b1e0
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x479b110
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x479b084
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x479af74
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x479aeb0
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x479adec
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x479ac5c
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x479ab18
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x479a9d4
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x479a8c4
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x479a800
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x479a73c
	byte GetSplinePointType(int PointIndex);// 0x479a6b8
	float GetSplineLength();// 0x479a684
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x479a5b8
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x479a530
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x479a4a8
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x479a398
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x479a2d4
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x479a210
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x479a104
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x479a044
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4799f84
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4799e74
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4799db0
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4799cec
	int GetNumberOfSplinePoints();// 0x4799cb8
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4799ba8
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4799ae4
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4799a20
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x47998c8
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x47997ac
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x47996e8
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x4799664
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x47995e0
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x47994d0
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x479940c
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4799348
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x47992c0
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x47991fc
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4799120
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x4798fc4
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4798ee8
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x4798e4c
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4798d70
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4798c98
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4798bbc
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4798ae0
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x4798a48
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x479896c
	void ClearSplinePoints(bool bUpdateSpline);// 0x47988e8
	void AddSplineWorldPoint(out const Vector Position);// 0x4798858
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x4798708
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x47985f4
	void AddSplineLocalPoint(out const Vector Position);// 0x4798564
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x4798478
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x479837c

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x18]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18]

--------------------------------
Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4]
	Quat OutVal;//[Offset: 0x10, Size: 0x10]
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10]
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10]
	byte InterpMode;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4]
	float OutVal;//[Offset: 0x4, Size: 0x4]
	float ArriveTangent;//[Offset: 0x8, Size: 0x4]
	float LeaveTangent;//[Offset: 0xc, Size: 0x4]
	byte InterpMode;//[Offset: 0x10, Size: 0x1]

--------------------------------
Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4]
	Vector Position;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]
	Vector Scale;//[Offset: 0x34, Size: 0xc]
	byte Type;//[Offset: 0x40, Size: 0x1]

--------------------------------
Class: LandscapeGizmoActiveActor.LandscapeGizmoActor.Actor.Object

--------------------------------
Class: LandscapeGizmoActor.Actor.Object

--------------------------------
Class: IdeaLandscape.Actor.Object
	RuntimeMeshComponent* Mesh;//[Offset: 0x340, Size: 0x8]
	IdeaLandscapeGeometry* LandscapeGeometry;//[Offset: 0x348, Size: 0x8]
	Material* LandscapeMat;//[Offset: 0x350, Size: 0x8]
	bool bPerformBackfaceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	float BackfaceCullingHeightBias;//[Offset: 0x35c, Size: 0x4]
	bool bPerformDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	float DistanceCullingValue;//[Offset: 0x364, Size: 0x4]

--------------------------------
Class: RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	RuntimeMesh* RuntimeMeshReference;//[Offset: 0x5c0, Size: 0x8]
	BodySetup* BodySetup;//[Offset: 0x5c8, Size: 0x8]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x5d0, Size: 0x10]
	void UpdateMeshSectionPacked_Blueprint(int SectionIndex, out const RuntimeMeshBlueprintVertexSimple[] Vertices, out const int[] Triangles, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles);// 0x1c24418
	void UpdateMeshSectionFromBuilder(int sectionId, RuntimeBlueprintMeshBuilder* MeshData);// 0x1c24360
	void UpdateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const LinearColor[] Colors, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles);// 0x1c23e2c
	bool ShouldSerializeMeshData();// 0x1c23e08
	void SetShouldSerializeMeshData(bool bShouldSerialize);// 0x1c23d7c
	void SetSectionMaterial(int sectionId, MaterialInterface* Material);// 0x1c23cc0
	void SetRuntimeMeshMobility(enum NewMobility);// 0x1c23c30
	void SetRuntimeMesh(RuntimeMesh* NewMesh);// 0x1c23bb4
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x1c23a78
	void SetMeshSectionCollisionEnabled(int SectionIndex, bool bNewCollisionEnabled);// 0x1c2393c
	void SetMeshSectionCastsShadow(int SectionIndex, bool bNewCastsShadow);// 0x1c23800
	void SetMeshCollisionSection(int CollisionSectionIndex, out const Vector[] Vertices, out const int[] Triangles);// 0x1c2362c
	void SetConvexCollisionSection(int ConvexSectionIndex, Vector[] ConvexVerts);// 0x1c234ac
	void SetCollisionUseComplexAsSimple(bool bNewValue);// 0x1c2341c
	void SetCollisionUseAsyncCooking(bool bNewValue);// 0x1c23390
	void SetCollisionSpheres(out const RuntimeMeshCollisionSphere[] NewSpheres);// 0x1c2326c
	void SetCollisionMode(enum NewMode);// 0x1c231e8
	void SetCollisionCapsules(out const RuntimeMeshCollisionCapsule[] NewCapsules);// 0x1c230c4
	void SetCollisionBoxes(out const RuntimeMeshCollisionBox[] NewBoxes);// 0x1c22fa0
	void RemoveCollisionSphere(int Index);// 0x1c22ea4
	void RemoveCollisionCapsule(int Index);// 0x1c22da8
	void RemoveCollisionBox(int Index);// 0x1c22cac
	bool IsMeshSectionVisible(int SectionIndex);// 0x1c22b98
	bool IsMeshSectionCollisionEnabled(int SectionIndex);// 0x1c22a84
	bool IsMeshSectionCastingShadows(int SectionIndex);// 0x1c22970
	bool IsCollisionUsingComplexAsSimple();// 0x1c22940
	bool IsCollisionUsingAsyncCooking();// 0x1c2291c
	MaterialInterface* GetSectionMaterial(int sectionId);// 0x1c22878
	int GetSectionIdFromCollisionFaceIndex(int FaceIndex);// 0x1c227f4
	Box GetSectionBoundingBox(int SectionIndex);// 0x1c226b8
	enum GetRuntimeMeshMobility();// 0x1c22688
	RuntimeMesh* GetRuntimeMesh();// 0x1c2266c
	RuntimeMesh* GetOrCreateRuntimeMesh();// 0x1c22630
	int GetNumSections();// 0x1c2256c
	int GetAvailableSectionIndex();// 0x1c224a8
	bool DoesSectionExist(int SectionIndex);// 0x1c22394
	void CreateMeshSectionPacked_Blueprint(int SectionIndex, out const RuntimeMeshBlueprintVertexSimple[] Vertices, out const int[] Triangles, bool bCreateCollision, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles, enum UpdateFrequency, bool bUseHighPrecisionTangents, bool bUseHighPrecisionUVs);// 0x1c21f90
	void CreateMeshSectionFromBuilder(int sectionId, RuntimeBlueprintMeshBuilder* MeshData, bool bCreateCollision, enum UpdateFrequency);// 0x1c21e50
	void CreateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const LinearColor[] Colors, bool bCreateCollision, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles, enum UpdateFrequency, bool bUseHighPrecisionTangents, bool bUseHighPrecisionUVs);// 0x1c218b4
	void CookCollisionNow();// 0x1c21880
	void ClearMeshSection(int SectionIndex);// 0x1c21790
	void ClearMeshCollisionSection(int CollisionSectionIndex);// 0x1c21694
	void ClearConvexCollisionSection(int ConvexSectionIndex);// 0x1c21598
	void ClearCollisionSpheres();// 0x1c214e4
	void ClearCollisionCapsules();// 0x1c21430
	void ClearCollisionBoxes();// 0x1c2137c
	void ClearAllMeshSections();// 0x1c212cc
	void ClearAllMeshCollisionSections();// 0x1c21218
	void ClearAllConvexCollisionSections();// 0x1c21164
	int AddConvexCollisionSection(Vector[] ConvexVerts);// 0x1c21014
	int AddCollisionSphere(out const RuntimeMeshCollisionSphere NewSphere);// 0x1c20ed0
	int AddCollisionCapsule(out const RuntimeMeshCollisionCapsule NewCapsule);// 0x1c20d70
	int AddCollisionBox(out const RuntimeMeshCollisionBox NewBox);// 0x1c20c0c

--------------------------------
Class: RuntimeMesh.Object
	MaterialInterface*[] Materials;//[Offset: 0x40, Size: 0x10]
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool bShouldSerializeMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	enum CollisionMode;//[Offset: 0x73, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x78, Size: 0x8]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x80, Size: 0x10]
	delegate CollisionUpdated;//[Offset: 0x90, Size: 0x10]
	void UpdateMeshSectionPacked_Blueprint(int SectionIndex, out const RuntimeMeshBlueprintVertexSimple[] Vertices, out const int[] Triangles, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles);// 0x1c19278
	void UpdateMeshSectionFromBuilder(int sectionId, RuntimeBlueprintMeshBuilder* MeshData);// 0x1c190cc
	void UpdateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const LinearColor[] Colors, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles);// 0x1c18bb0
	bool ShouldSerializeMeshData();// 0x1c18b94
	void SetShouldSerializeMeshData(bool bShouldSerialize);// 0x1c18b14
	void SetSectionTessellationTriangles(int sectionId, out const int[] Triangles);// 0x1c189d0
	void SetSectionMaterial(int sectionId, MaterialInterface* Material);// 0x1c18918
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x1c187e8
	void SetMeshSectionCollisionEnabled(int SectionIndex, bool bNewCollisionEnabled);// 0x1c186b8
	void SetMeshSectionCastsShadow(int SectionIndex, bool bNewCastsShadow);// 0x1c18588
	void SetMeshCollisionSection(int CollisionSectionIndex, out const Vector[] Vertices, out const int[] Triangles);// 0x1c183d8
	void SetConvexCollisionSection(int ConvexSectionIndex, Vector[] ConvexVerts);// 0x1c182b4
	void SetCollisionUseComplexAsSimple(bool bNewValue);// 0x1c1822c
	void SetCollisionUseAsyncCooking(bool bNewValue);// 0x1c181ac
	void SetCollisionSpheres(out const RuntimeMeshCollisionSphere[] NewSpheres);// 0x1c180a4
	void SetCollisionMode(enum NewMode);// 0x1c1802c
	void SetCollisionCapsules(out const RuntimeMeshCollisionCapsule[] NewCapsules);// 0x1c17f24
	void SetCollisionBoxes(out const RuntimeMeshCollisionBox[] NewBoxes);// 0x1c17e1c
	void RemoveCollisionSphere(int Index);// 0x1c17d34
	void RemoveCollisionCapsule(int Index);// 0x1c17c4c
	void RemoveCollisionBox(int Index);// 0x1c17b64
	bool IsMeshSectionVisible(int SectionIndex);// 0x1c17a60
	bool IsMeshSectionCollisionEnabled(int SectionIndex);// 0x1c1795c
	bool IsMeshSectionCastingShadows(int SectionIndex);// 0x1c17858
	bool IsCollisionUsingComplexAsSimple();// 0x1c1783c
	bool IsCollisionUsingAsyncCooking();// 0x1c17820
	MaterialInterface* GetSectionMaterial(int sectionId);// 0x1c17784
	int GetSectionIdFromCollisionFaceIndex(int FaceIndex);// 0x1c17700
	Box GetSectionBoundingBox(int SectionIndex);// 0x1c175f4
	int GetNumSections();// 0x1c17540
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x1c17470
	enum GetCollisionMode();// 0x1c17454
	int GetAvailableSectionIndex();// 0x1c173a0
	bool DoesSectionExist(int SectionIndex);// 0x1c1729c
	void CreateMeshSectionPacked_Blueprint(int SectionIndex, out const RuntimeMeshBlueprintVertexSimple[] Vertices, out const int[] Triangles, bool bCreateCollision, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles, enum UpdateFrequency, bool bUseHighPrecisionTangents, bool bUseHighPrecisionUVs);// 0x1c16eb0
	void CreateMeshSectionFromBuilder(int sectionId, RuntimeBlueprintMeshBuilder* MeshData, bool bCreateCollision, enum UpdateFrequency);// 0x1c16c84
	void CreateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const LinearColor[] Colors, bool bCreateCollision, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles, enum UpdateFrequency, bool bUseHighPrecisionTangents, bool bUseHighPrecisionUVs);// 0x1c16618
	void CookCollisionNow();// 0x1c16604
	void ClearMeshSection(int SectionIndex);// 0x1c1651c
	void ClearMeshCollisionSection(int CollisionSectionIndex);// 0x1c16434
	void ClearConvexCollisionSection(int ConvexSectionIndex);// 0x1c1634c
	void ClearCollisionSpheres();// 0x1c162a4
	void ClearCollisionCapsules();// 0x1c161fc
	void ClearCollisionBoxes();// 0x1c16154
	void ClearAllMeshSections();// 0x1c160ac
	void ClearAllMeshCollisionSections();// 0x1c16004
	void ClearAllConvexCollisionSections();// 0x1c15f5c
	int AddConvexCollisionSection(Vector[] ConvexVerts);// 0x1c15e70
	int AddCollisionSphere(out const RuntimeMeshCollisionSphere NewSphere);// 0x1c15d48
	int AddCollisionCapsule(out const RuntimeMeshCollisionCapsule NewCapsule);// 0x1c15c04
	int AddCollisionBox(out const RuntimeMeshCollisionBox NewBox);// 0x1c15abc

--------------------------------
Class: RuntimeMeshBlueprintVertexSimple
	Vector Position;//[Offset: 0x0, Size: 0xc]
	Vector Normal;//[Offset: 0xc, Size: 0xc]
	RuntimeMeshTangent Tangent;//[Offset: 0x18, Size: 0x10]
	LinearColor Color;//[Offset: 0x28, Size: 0x10]
	Vector2D UV0;//[Offset: 0x38, Size: 0x8]

--------------------------------
Class: RuntimeMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 0xc]
	bool bFlipTangentY;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: RuntimeBlueprintMeshBuilder.RuntimeBlueprintMeshAccessor.Object
	int SetVertex(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, Vector InPosition, Vector Normal, RuntimeMeshTangent Tangent, Vector2D UV0, LinearColor Color);// 0x1c1eae4
	int SetUV(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, Vector2D Value, int Channel);// 0x1c1e984
	int SetTangents(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, Vector TangentX, Vector TangentY, Vector TangentZ);// 0x1c1e7dc
	int SetTangent(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, RuntimeMeshTangent Value);// 0x1c1e6ac
	int SetPosition(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, Vector Value);// 0x1c1e584
	void SetNumVertices(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int NewNum);// 0x1c1e4b4
	void SetNumIndices(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int NewNum);// 0x1c1e3e0
	int SetNormalTangent(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, Vector Normal, RuntimeMeshTangent Tangent);// 0x1c1e278
	int SetNormal(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, out const Vector4 Value);// 0x1c1e144
	void SetIndex(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, int Value);// 0x1c1e038
	int SetColor(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, LinearColor Value);// 0x1c1df00
	int NumVertices(out RuntimeBlueprintMeshBuilder* OutMeshBuilder);// 0x1c1de68
	int NumUVChannels(out RuntimeBlueprintMeshBuilder* OutMeshBuilder);// 0x1c1ddd0
	int NumIndices(out RuntimeBlueprintMeshBuilder* OutMeshBuilder);// 0x1c1dd34
	bool IsUsingHighPrecisionUVs(out RuntimeBlueprintMeshBuilder* OutMeshBuilder);// 0x1c1dc9c
	bool IsUsingHighPrecisionTangents(out RuntimeBlueprintMeshBuilder* OutMeshBuilder);// 0x1c1dc04
	bool IsUsing32BitIndices(out RuntimeBlueprintMeshBuilder* OutMeshBuilder);// 0x1c1db6c
	bool IsReadonly(out RuntimeBlueprintMeshBuilder* OutMeshBuilder);// 0x1c1dac4
	Vector2D GetUV(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, int Channel);// 0x1c1d9b0
	Vector GetTangent(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index);// 0x1c1d8d0
	Vector GetPosition(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index);// 0x1c1d7f0
	Vector4 GetNormal(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index);// 0x1c1d710
	int GetIndex(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index);// 0x1c1d630
	LinearColor GetColor(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index);// 0x1c1d540
	void EmptyVertices(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Slack);// 0x1c1d470
	void EmptyIndices(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Slack);// 0x1c1d39c
	int AddVertex(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, Vector InPosition, Vector Normal, RuntimeMeshTangent Tangent, Vector2D UV0, LinearColor Color);// 0x1c1d144
	int AddTriangle(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index0, int Index1, int Index2);// 0x1c1cff0
	int AddIndex(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int NewIndex);// 0x1c1cf10

--------------------------------
Class: RuntimeBlueprintMeshAccessor.Object

--------------------------------
Class: RuntimeMeshCollisionSphere
	Vector Center;//[Offset: 0x0, Size: 0xc]
	float Radius;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: RuntimeMeshCollisionCapsule
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float Radius;//[Offset: 0x18, Size: 0x4]
	float Length;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: RuntimeMeshCollisionBox
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	Vector Extents;//[Offset: 0x18, Size: 0xc]

--------------------------------
Class: IdeaLandscapeGeometry.DataAsset.Object
	Vector[] Vertex;//[Offset: 0x30, Size: 0x10]
	Vector[] Normals;//[Offset: 0x40, Size: 0x10]
	Vector2D[] UV;//[Offset: 0x50, Size: 0x10]
	int[] Indices;//[Offset: 0x60, Size: 0x10]
	<IntPoint,int> ComponentIndexOffset;//[Offset: 0x70, Size: 0x50]
	int ComponentIndexCount;//[Offset: 0xc0, Size: 0x4]
	int ComponentVertexCount;//[Offset: 0xc4, Size: 0x4]
	<FString,SubLevelComponentMapValue> SubLevelComponentMap;//[Offset: 0xc8, Size: 0x50]

--------------------------------
Class: SubLevelComponentMapValue
	FString Name;//[Offset: 0x0, Size: 0x10]
	int[] IndexOffsetArray;//[Offset: 0x10, Size: 0x10]
	int[] IndexCountArray;//[Offset: 0x20, Size: 0x10]
	int[] BorderIndex1;//[Offset: 0x30, Size: 0x10]
	int[] BorderIndex2;//[Offset: 0x40, Size: 0x10]
	int[] BorderIndex3;//[Offset: 0x50, Size: 0x10]
	int[] BorderIndex4;//[Offset: 0x60, Size: 0x10]
	int[] UnderBorderIndex1;//[Offset: 0x70, Size: 0x10]
	int[] UnderBorderIndex2;//[Offset: 0x80, Size: 0x10]
	int[] UnderBorderIndex3;//[Offset: 0x90, Size: 0x10]
	int[] UnderBorderIndex4;//[Offset: 0xa0, Size: 0x10]
	int[] BorderIndicesBuffer1;//[Offset: 0xb0, Size: 0x10]
	int[] BorderIndicesBuffer2;//[Offset: 0xc0, Size: 0x10]
	int[] BorderIndicesBuffer3;//[Offset: 0xd0, Size: 0x10]
	int[] BorderIndicesBuffer4;//[Offset: 0xe0, Size: 0x10]
	FString Sibling1Name;//[Offset: 0xf0, Size: 0x10]
	FString Sibling2Name;//[Offset: 0x100, Size: 0x10]
	FString Sibling3Name;//[Offset: 0x110, Size: 0x10]
	FString Sibling4Name;//[Offset: 0x120, Size: 0x10]
	int Sibling1Idx;//[Offset: 0x130, Size: 0x4]
	int Sibling2Idx;//[Offset: 0x134, Size: 0x4]
	int Sibling3Idx;//[Offset: 0x138, Size: 0x4]
	int Sibling4Idx;//[Offset: 0x13c, Size: 0x4]
	Box Bounds;//[Offset: 0x140, Size: 0x1c]

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x340, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1]
	void OnRep_bEnabled();// 0x462b4e8

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	bool EnableCEHF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x248, Size: 0x1]
	float FogDensity;//[Offset: 0x24c, Size: 0x4]
	LinearColor FogInscatteringColor;//[Offset: 0x250, Size: 0x10]
	float FogDensityFar;//[Offset: 0x260, Size: 0x4]
	LinearColor FogInscatteringColorFar;//[Offset: 0x264, Size: 0x10]
	float FogHeightFalloffFar;//[Offset: 0x274, Size: 0x4]
	float FogMaxOpacityFar;//[Offset: 0x278, Size: 0x4]
	float StartDistanceFar;//[Offset: 0x27c, Size: 0x4]
	float FogDensityFarthest;//[Offset: 0x280, Size: 0x4]
	LinearColor FogInscatteringColorFarthest;//[Offset: 0x284, Size: 0x10]
	float FogHeightFalloffFarthest;//[Offset: 0x294, Size: 0x4]
	float FogMaxOpacityFarthest;//[Offset: 0x298, Size: 0x4]
	float StartDistanceFarthest;//[Offset: 0x29c, Size: 0x4]
	float FogDensityLow;//[Offset: 0x2a0, Size: 0x4]
	float FogHeightLow;//[Offset: 0x2a4, Size: 0x4]
	LinearColor FogInscatteringColorLow;//[Offset: 0x2a8, Size: 0x10]
	float StartDistanceLow;//[Offset: 0x2b8, Size: 0x4]
	float EndDistanceLow;//[Offset: 0x2bc, Size: 0x4]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x2c0, Size: 0x8]
	float InscatteringColorCubemapAngle;//[Offset: 0x2c8, Size: 0x4]
	LinearColor InscatteringTextureTint;//[Offset: 0x2cc, Size: 0x10]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x2dc, Size: 0x4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x2e0, Size: 0x4]
	float DirectionalInscatteringExponent;//[Offset: 0x2e4, Size: 0x4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x2e8, Size: 0x4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x2ec, Size: 0x10]
	float FogHeightFalloff;//[Offset: 0x2fc, Size: 0x4]
	float FogMaxOpacity;//[Offset: 0x300, Size: 0x4]
	float StartDistance;//[Offset: 0x304, Size: 0x4]
	float FogCutoffDistance;//[Offset: 0x308, Size: 0x4]
	bool FogDarkenEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c, Size: 0x1]
	float FogDarkenFadeDistance;//[Offset: 0x310, Size: 0x4]
	float FogDarkenStartDistance;//[Offset: 0x314, Size: 0x4]
	float FogDarkenIntensity;//[Offset: 0x318, Size: 0x4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c, Size: 0x1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x320, Size: 0x4]
	Color VolumetricFogAlbedo;//[Offset: 0x324, Size: 0x4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x328, Size: 0x10]
	float VolumetricFogExtinctionScale;//[Offset: 0x338, Size: 0x4]
	float VolumetricFogDistance;//[Offset: 0x33c, Size: 0x4]
	float VolumetricFogStartDistance;//[Offset: 0x340, Size: 0x4]
	float VolumetricFogHeightFalloff;//[Offset: 0x344, Size: 0x4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x348, Size: 0x4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1]
	void SetVolumetricFogStartDistance(float NewValue);// 0x462cd68
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x462ccec
	void SetVolumetricFogHeightFalloff(float NewValue);// 0x462cc70
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x462cbf4
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x462cb78
	void SetVolumetricFogDistance(float NewValue);// 0x462cafc
	void SetVolumetricFogAlbedo(Color NewValue);// 0x462ca84
	void SetVolumetricFog(bool bNewValue);// 0x462ca00
	void SetStartDistanceLow(float Value);// 0x462c984
	void SetStartDistanceFarthest(float Value);// 0x462c908
	void SetStartDistanceFar(float Value);// 0x462c88c
	void SetStartDistance(float Value);// 0x462c810
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x462c794
	void SetInscatteringTextureTint(LinearColor Value);// 0x462c718
	void SetInscatteringColorCubemapAngle(float Value);// 0x462c69c
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x462c620
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x462c5a4
	void SetFogMaxOpacityFarthest(float Value);// 0x462c528
	void SetFogMaxOpacityFar(float Value);// 0x462c4ac
	void SetFogMaxOpacity(float Value);// 0x462c430
	void SetFogInscatteringColorLow(LinearColor Value);// 0x462c3b4
	void SetFogInscatteringColorFarthest(LinearColor Value);// 0x462c338
	void SetFogInscatteringColorFar(LinearColor Value);// 0x462c2bc
	void SetFogInscatteringColor(LinearColor Value);// 0x462c240
	void SetFogHeightLow(float Value);// 0x462c1c4
	void SetFogHeightFalloffFarthest(float Value);// 0x462c148
	void SetFogHeightFalloffFar(float Value);// 0x462c0cc
	void SetFogHeightFalloff(float Value);// 0x462c050
	void SetFogDensityLow(float Value);// 0x462bfd4
	void SetFogDensityFarthest(float Value);// 0x462bf58
	void SetFogDensityFar(float Value);// 0x462bedc
	void SetFogDensity(float Value);// 0x462be60
	void SetFogDarkenStartDistance(float Value);// 0x462bde4
	void SetFogDarkenIntensity(float Value);// 0x462bd68
	void SetFogDarkenFadeDistance(float Value);// 0x462bcec
	void SetFogDarkenEnable(bool Value);// 0x462bc68
	void SetFogCutoffDistance(float Value);// 0x462bbec
	void SetEndDistanceLow(float Value);// 0x462bb70
	void SetDirectionalInscatteringStartDistance(float Value);// 0x462baf4
	void SetDirectionalInscatteringExponent(float Value);// 0x462ba78
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x462b9fc

--------------------------------
Class: XWaterVolume.PhysicsVolume.Volume.Brush.Actor.Object
	void OnEndOverlap(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x30594f8
	void OnBeginOverlap(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x3059320

--------------------------------
Class: ToaaGameModeBase.GameModeBase.Info.Actor.Object

--------------------------------
Class: Newland_C.ParentLevelScriptActor.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 0x8]
	void SwapMaterialInternal(PrimitiveComponent* Target, int MaterialID, int Temp_int_Variable, int Temp_int_Variable1, int Temp_int_Variable2, int Temp_int_Variable3, MaterialInterface* CallFunc_GetMaterial_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetConsoleVariableInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue1, bool CallFunc_BooleanAND_ReturnValue, int K2Node_Select_Default);// 0x33e07d0
	void WeatherSelection(FString WeatherID);// 0x33e07d0
	void SyncHeightFog();// 0x33e07d0
	void SaveWeather(FString WeatherIndex);// 0x33e07d0
	void WeatherLogin(FString WeatherID, bool NoError);// 0x33e07d0
	void WeatherGlobalSwitch(bool Switch);// 0x33e07d0
	void OpenPPV();// 0x33e07d0
	void ReWrite();// 0x33e07d0
	void OpenWeatherSource();// 0x33e07d0
	void BPE_LoadAsset();// 0x33e07d0
	void Level(FName LevelName, bool isLoad, bool IsVisible);// 0x33e07d0
	void SwitchParticles();// 0x33e07d0
	void ReceiveBeginPlay();// 0x33e07d0
	void ExecuteUbergraph_Newland(int EntryPoint, FString K2Node_Event_WeatherID1, FString K2Node_Event_WeatherIndex, FString K2Node_Event_WeatherID, bool K2Node_Event_NoError, bool K2Node_Event_Switch, FName K2Node_Event_LevelName, bool K2Node_Event_isLoad, bool K2Node_Event_isVisible);// 0x33e07d0
	MaterialInterface* SwapMaterial;//[Offset: 0x350, Size: 0x8]
	int UserQualityID;//[Offset: 0x358, Size: 0x4]
	StaticMeshActor*[] WaterArray;//[Offset: 0x360, Size: 0x10]
	BP_XDWeather_C* Wref;//[Offset: 0x370, Size: 0x8]

--------------------------------
Class: ParentLevelScriptActor.LevelScriptActor.Actor.Object
	void ShowLoading();// 0x2f1d910

--------------------------------
Class: PointerToUberGraphFrame

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x340, Size: 0x8]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	void SetMobility(byte InMobility);// 0x47a6c48

--------------------------------
Class: BP_XDWeather_C.XDWeather.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3d8, Size: 0x8]
	void FindDataInternal(out DataTable*[] DataTableArray, FName WeatherRowName, out bool WeatherRowFound, out WeatherIdStruct WeatherRow, WeatherIdStruct RowFound, bool Found, int CallFunc_Array_Length_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, DataTable* CallFunc_Array_Get_Item, WeatherIdStruct CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x33e07d0
	void LerpPgWater(out const PG_Water A, out const PG_Water B, float Alpha, out PG_Water StructOut, PG_Water LocalData, bool CallFunc_Greater_FloatFloat_ReturnValue, LinearColor CallFunc_LinearColorLerp_ReturnValue, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue1, float CallFunc_Lerp_ReturnValue2, float CallFunc_Lerp_ReturnValue3, float CallFunc_Lerp_ReturnValue4, float CallFunc_Lerp_ReturnValue5, LinearColor CallFunc_LinearColorLerp_ReturnValue1, float CallFunc_Lerp_ReturnValue6, LinearColor CallFunc_LinearColorLerp_ReturnValue2, float CallFunc_Lerp_ReturnValue7, float CallFunc_Lerp_ReturnValue8, LinearColor CallFunc_LinearColorLerp_ReturnValue3, float CallFunc_Lerp_ReturnValue9, float CallFunc_Lerp_ReturnValue10, float CallFunc_Lerp_ReturnValue11, LinearColor CallFunc_LinearColorLerp_ReturnValue4, float CallFunc_Lerp_ReturnValue12, float CallFunc_Lerp_ReturnValue13, LinearColor CallFunc_LinearColorLerp_ReturnValue5, LinearColor CallFunc_LinearColorLerp_ReturnValue6, float CallFunc_Lerp_ReturnValue14, float CallFunc_Lerp_ReturnValue15, float CallFunc_Lerp_ReturnValue16, float CallFunc_Lerp_ReturnValue17, float CallFunc_Lerp_ReturnValue18, float CallFunc_Lerp_ReturnValue19, float CallFunc_Lerp_ReturnValue20, LinearColor CallFunc_LinearColorLerp_ReturnValue7, float CallFunc_Lerp_ReturnValue21, LinearColor CallFunc_LinearColorLerp_ReturnValue8, LinearColor CallFunc_LinearColorLerp_ReturnValue9, LinearColor CallFunc_LinearColorLerp_ReturnValue10, float CallFunc_Lerp_ReturnValue22, float CallFunc_Lerp_ReturnValue23, float CallFunc_Lerp_ReturnValue24, LinearColor CallFunc_LinearColorLerp_ReturnValue11, LinearColor CallFunc_LinearColorLerp_ReturnValue12);// 0x33e07d0
	void 0粒子开关0                                                                                      (interface classNone CallFunc_SwitchParticles_self_CastInput);// 0x33e07d0
	void ClearPreWeatherTex(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x33e07d0
	void SetWeatherData(class WeatherLightClass_C lightData, bool CallFunc_EqualEqual_ClassClass_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x33e07d0
	void TransitionUpdate(int CallFunc_GetDeviceLevel_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x33e07d0
	void LerpSpecial(out const LightStruct Light1, out const LightStruct Light2, SkyBoxStruct SKYBOX1, SkyBoxStruct SKYBOX2, float Alpha, out LightStruct StructOutLIGHT, out SkyBoxStruct StructOutSKYBOX, SkyBoxStruct LocalSKYBOX, LightStruct LocalLIGHT, Rotator CallFunc_RLerp_ReturnValue, float CallFunc_Fraction_ReturnValue, float CallFunc_Fraction_ReturnValue1, float CallFunc_Lerp_ReturnValue);// 0x33e07d0
	void UpdateSpecialLerpData(LightStruct CallFunc_LerpSpecial_StructOutLIGHT, SkyBoxStruct CallFunc_LerpSpecial_StructOutSKYBOX);// 0x33e07d0
	void SetPPR();// 0x33e07d0
	void LerpAmbient(out const AmbientStruct A, out const AmbientStruct B, float Alpha, out AmbientStruct StructOut, AmbientStruct LocalData, LinearColor CallFunc_LinearColorLerp_ReturnValue, float CallFunc_Lerp_ReturnValue, LinearColor CallFunc_LinearColorLerp_ReturnValue1, LinearColor CallFunc_LinearColorLerp_ReturnValue2, LinearColor CallFunc_LinearColorLerp_ReturnValue3, LinearColor CallFunc_LinearColorLerp_ReturnValue4, float CallFunc_Lerp_ReturnValue1, float CallFunc_Lerp_ReturnValue2, float CallFunc_Lerp_ReturnValue3, LinearColor CallFunc_LinearColorLerp_ReturnValue5, LinearColor CallFunc_LinearColorLerp_ReturnValue6);// 0x33e07d0
	void LerpFog(out const FogStruct A, out const FogStruct B, float Alpha, out FogStruct StructOut, FogStruct LocalData, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue1, float CallFunc_Lerp_ReturnValue2, LinearColor CallFunc_LinearColorLerp_ReturnValue, float CallFunc_Lerp_ReturnValue3, LinearColor CallFunc_LinearColorLerp_ReturnValue1, float CallFunc_Lerp_ReturnValue4, float CallFunc_Lerp_ReturnValue5, float CallFunc_Lerp_ReturnValue6, float CallFunc_Lerp_ReturnValue7, float CallFunc_Lerp_ReturnValue8, LinearColor CallFunc_LinearColorLerp_ReturnValue2, float CallFunc_Lerp_ReturnValue9, float CallFunc_Lerp_ReturnValue10, float CallFunc_Lerp_ReturnValue11, float CallFunc_Lerp_ReturnValue12, LinearColor CallFunc_LinearColorLerp_ReturnValue3, float CallFunc_Lerp_ReturnValue13, float CallFunc_Lerp_ReturnValue14, float CallFunc_Lerp_ReturnValue15, float CallFunc_Lerp_ReturnValue16, LinearColor CallFunc_LinearColorLerp_ReturnValue4);// 0x33e07d0
	void LerpDyCloud(out const DyCloudSturct A, out const DyCloudSturct B, float Alpha, out DyCloudSturct StructOut, DyCloudSturct LocalData, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue1, float CallFunc_Lerp_ReturnValue2, float CallFunc_Lerp_ReturnValue3, float CallFunc_Lerp_ReturnValue4, float CallFunc_Lerp_ReturnValue5, float CallFunc_Lerp_ReturnValue6, float CallFunc_Lerp_ReturnValue7, float CallFunc_Lerp_ReturnValue8, float CallFunc_Lerp_ReturnValue9, float CallFunc_Lerp_ReturnValue10, float CallFunc_Lerp_ReturnValue11, float CallFunc_Lerp_ReturnValue12, float CallFunc_Lerp_ReturnValue13, float CallFunc_Lerp_ReturnValue14, float CallFunc_Lerp_ReturnValue15, float CallFunc_Lerp_ReturnValue16, float CallFunc_Lerp_ReturnValue17, float CallFunc_Lerp_ReturnValue18, float CallFunc_Lerp_ReturnValue19, float CallFunc_Lerp_ReturnValue20, float CallFunc_Lerp_ReturnValue21, float CallFunc_Lerp_ReturnValue22, float CallFunc_Lerp_ReturnValue23, float CallFunc_Lerp_ReturnValue24);// 0x33e07d0
	void LerpSkybox(out const SkyBoxStruct A, out const SkyBoxStruct B, float Alpha, out SkyBoxStruct StructOut, SkyBoxStruct LocalData, float CallFunc_MultiplyMultiply_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_BreakColor_R, float CallFunc_BreakColor_G, float CallFunc_BreakColor_B, float CallFunc_BreakColor_A, float CallFunc_MultiplyMultiply_FloatFloat_ReturnValue1, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue1, float CallFunc_Add_FloatFloat_ReturnValue1, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue1, float CallFunc_Lerp_ReturnValue2, LinearColor CallFunc_LinearColorLerp_ReturnValue, LinearColor CallFunc_LinearColorLerp_ReturnValue1, LinearColor CallFunc_LinearColorLerp_ReturnValue2, LinearColor CallFunc_LinearColorLerp_ReturnValue3, LinearColor CallFunc_LinearColorLerp_ReturnValue4, LinearColor CallFunc_LinearColorLerp_ReturnValue5, Rotator CallFunc_RLerp_ReturnValue, LinearColor CallFunc_LinearColorLerp_ReturnValue6, float CallFunc_Lerp_ReturnValue3, LinearColor CallFunc_LinearColorLerp_ReturnValue7, float CallFunc_Lerp_ReturnValue4, float CallFunc_BreakColor_R1, float CallFunc_BreakColor_G1, float CallFunc_BreakColor_B1, float CallFunc_BreakColor_A1, LinearColor CallFunc_LinearColorLerp_ReturnValue8, float CallFunc_Add_FloatFloat_ReturnValue2, LinearColor CallFunc_LinearColorLerp_ReturnValue9, float CallFunc_Add_FloatFloat_ReturnValue3, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float CallFunc_Lerp_ReturnValue5);// 0x33e07d0
	void LerpLight(out const LightStruct A, out const LightStruct B, float Alpha, out LightStruct StructOut, LightStruct LocalData, float CallFunc_Lerp_ReturnValue, LinearColor CallFunc_LinearColorLerp_ReturnValue, float CallFunc_Lerp_ReturnValue1, LinearColor CallFunc_LinearColorLerp_ReturnValue1, float CallFunc_Lerp_ReturnValue2, LinearColor CallFunc_LinearColorLerp_ReturnValue2, LinearColor CallFunc_LinearColorLerp_ReturnValue3, LinearColor CallFunc_LinearColorLerp_ReturnValue4, LinearColor CallFunc_LinearColorLerp_ReturnValue5, LinearColor CallFunc_LinearColorLerp_ReturnValue6, LinearColor CallFunc_LinearColorLerp_ReturnValue7, float CallFunc_Lerp_ReturnValue3, float CallFunc_Lerp_ReturnValue4, LinearColor CallFunc_LinearColorLerp_ReturnValue8, LinearColor CallFunc_LinearColorLerp_ReturnValue9, LinearColor CallFunc_LinearColorLerp_ReturnValue10);// 0x33e07d0
	void BP_UpdateSkyParameters(float DeltaTime, int CallFunc_GetDeviceLevel_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x33e07d0
	void SetExternalActors(int CallFunc_GetDeviceLevel_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, Rotator CallFunc_MakeRotator_ReturnValue, Color CallFunc_Conv_LinearColorToColor_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult1, bool CallFunc_IsValid_ReturnValue1, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FMax_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue1);// 0x33e07d0
	void SetNightParameters(float CallFunc_BreakColor_R, float CallFunc_BreakColor_G, float CallFunc_BreakColor_B, float CallFunc_BreakColor_A, LinearColor CallFunc_Multiply_LinearColorFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue1, Vector CallFunc_Multiply_VectorFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0x33e07d0
	void SetSunParameters(int CallFunc_GetDeviceDefaultLevel_ReturnValue, int CallFunc_GetDeviceLevel_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue1, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_GetValidValue_ReturnValue1, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum1_CmpSuccess, bool K2Node_SwitchEnum2_CmpSuccess, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakColor_R, float CallFunc_BreakColor_G, float CallFunc_BreakColor_B, float CallFunc_BreakColor_A, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue1, bool CallFunc_Greater_FloatFloat_ReturnValue1, bool CallFunc_BooleanAND_ReturnValue);// 0x33e07d0
	void SetCloudsParameters(float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_BreakColor_R, float CallFunc_BreakColor_G, float CallFunc_BreakColor_B, float CallFunc_BreakColor_A, LinearColor K2Node_MakeStruct_LinearColor, float CallFunc_Add_FloatFloat_ReturnValue, LinearColor CallFunc_Multiply_LinearColorLinearColor_ReturnValue, LinearColor CallFunc_Multiply_LinearColorFloat_ReturnValue, LinearColor CallFunc_Multiply_LinearColorFloat_ReturnValue1, float CallFunc_BreakColor_R1, float CallFunc_BreakColor_G1, float CallFunc_BreakColor_B1, float CallFunc_BreakColor_A1, LinearColor CallFunc_MakeColor_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Dot_VectorVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue1, Vector CallFunc_MakeVector_ReturnValue2, float CallFunc_Dot_VectorVector_ReturnValue1, Vector CallFunc_MakeVector_ReturnValue3, Vector CallFunc_VLerp_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_VLerp_ReturnValue1, LinearColor CallFunc_MakeColor_ReturnValue1, float CallFunc_BreakVector_X1, float CallFunc_BreakVector_Y1, float CallFunc_BreakVector_Z1, LinearColor CallFunc_MakeColor_ReturnValue2);// 0x33e07d0
	void SetHorizonParameters(Vector CallFunc_MakeVector_ReturnValue, float CallFunc_BreakColor_R, float CallFunc_BreakColor_G, float CallFunc_BreakColor_B, float CallFunc_BreakColor_A, float CallFunc_Dot_VectorVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue1, Vector CallFunc_MakeVector_ReturnValue2, float CallFunc_Dot_VectorVector_ReturnValue1, Vector CallFunc_MakeVector_ReturnValue3, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_VLerp_ReturnValue, Vector CallFunc_VLerp_ReturnValue1, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X1, float CallFunc_BreakVector_Y1, float CallFunc_BreakVector_Z1, LinearColor CallFunc_MakeColor_ReturnValue, LinearColor CallFunc_MakeColor_ReturnValue1, LinearColor CallFunc_Multiply_LinearColorFloat_ReturnValue, LinearColor CallFunc_Multiply_LinearColorFloat_ReturnValue1, float CallFunc_BreakColor_R1, float CallFunc_BreakColor_G1, float CallFunc_BreakColor_B1, float CallFunc_BreakColor_A1, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue1, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, LinearColor CallFunc_MakeColor_ReturnValue2, LinearColor CallFunc_Multiply_LinearColorFloat_ReturnValue2, LinearColor CallFunc_Multiply_LinearColorLinearColor_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_MakeVector_ReturnValue4, Vector CallFunc_Multiply_VectorFloat_ReturnValue1, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, LinearColor CallFunc_MakeColor_ReturnValue3);// 0x33e07d0
	void BP_UpdateLayersParameters(float DeltaTime, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, LinearColor CallFunc_Multiply_LinearColorFloat_ReturnValue, float CallFunc_BreakColor_R, float CallFunc_BreakColor_G, float CallFunc_BreakColor_B, float CallFunc_BreakColor_A, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue1, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, LinearColor CallFunc_Multiply_LinearColorFloat_ReturnValue1, LinearColor CallFunc_Multiply_LinearColorFloat_ReturnValue2, float CallFunc_BreakColor_R1, float CallFunc_BreakColor_G1, float CallFunc_BreakColor_B1, float CallFunc_BreakColor_A1, float CallFunc_Add_FloatFloat_ReturnValue4, float CallFunc_Add_FloatFloat_ReturnValue5, float CallFunc_Add_FloatFloat_ReturnValue6, float CallFunc_Add_FloatFloat_ReturnValue7, LinearColor CallFunc_MakeColor_ReturnValue1, float CallFunc_Multiply_FloatFloat_ReturnValue1, float CallFunc_DegCos_ReturnValue, float CallFunc_DegSin_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_DegCos_ReturnValue1, float CallFunc_DegSin_ReturnValue1, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3, LinearColor CallFunc_Multiply_LinearColorFloat_ReturnValue3, float CallFunc_Multiply_FloatFloat_ReturnValue4, float CallFunc_Multiply_FloatFloat_ReturnValue5, float CallFunc_Multiply_FloatFloat_ReturnValue6, float CallFunc_Add_FloatFloat_ReturnValue8, float CallFunc_Subtract_FloatFloat_ReturnValue1, float CallFunc_BreakVector2D_X1, float CallFunc_BreakVector2D_Y1, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue7, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue1, float CallFunc_Multiply_FloatFloat_ReturnValue8, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_Multiply_FloatFloat_ReturnValue9, float CallFunc_Multiply_FloatFloat_ReturnValue10, float CallFunc_Add_FloatFloat_ReturnValue9, float CallFunc_Subtract_FloatFloat_ReturnValue2, Vector2D CallFunc_MakeVector2D_ReturnValue1, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue2, float CallFunc_BreakVector2D_X3, float CallFunc_BreakVector2D_Y3, LinearColor K2Node_MakeStruct_LinearColor, LinearColor CallFunc_Multiply_LinearColorFloat_ReturnValue4);// 0x33e07d0
	void UpdateDeviceHigh();// 0x33e07d0
	void LerpLightLow(LightLowStruct A, LightLowStruct B, float Alpha, out LightLowStruct StructOut, LightLowStruct LocalData, float CallFunc_Lerp_ReturnValue, LinearColor CallFunc_LinearColorLerp_ReturnValue, float CallFunc_Lerp_ReturnValue1, LinearColor CallFunc_LinearColorLerp_ReturnValue1);// 0x33e07d0
	void UpdateLightLow(float DeltaTime, LightLowStruct CallFunc_LerpLightLow_StructOut, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue);// 0x33e07d0
	void SetLightLowExternal(int CallFunc_GetDeviceLevel_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x33e07d0
	void LerpFogLow(FogStruct A, FogStruct B, float Alpha, out FogStruct StructOut, FogStruct LocalData, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue1, float CallFunc_Lerp_ReturnValue2, float CallFunc_Lerp_ReturnValue3, float CallFunc_Lerp_ReturnValue4, LinearColor CallFunc_LinearColorLerp_ReturnValue);// 0x33e07d0
	void SetDeviceLow(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue1, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Subtract_FloatFloat_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, float CallFunc_Multiply_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult1, bool CallFunc_IsValid_ReturnValue2, float CallFunc_FMax_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x33e07d0
	void UpdateFogLow(bool CallFunc_Less_FloatFloat_ReturnValue, FogStruct CallFunc_LerpFogLow_StructOut);// 0x33e07d0
	void -------对齐Fog高度-------                                                                       (bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsBPI_Weather, bool K2Node_DynamicCast_bSuccess);// 0x33e07d0
	void EditorFindID(FString RegionNum, FString WeatherNum, FString TODNum, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, Lab_RegionLeveMap_C* K2Node_DynamicCast_AsLab_Region_Leve_Map, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue1, bool K2Node_SwitchEnum1_CmpSuccess, bool K2Node_SwitchEnum2_CmpSuccess, bool K2Node_SwitchEnum3_CmpSuccess, bool K2Node_SwitchEnum4_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue1);// 0x33e07d0
	void FindData(FString WeatherIDint, bool NoError, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue1, bool CallFunc_FindDataInternal_WeatherRowFound, WeatherIdStruct CallFunc_FindDataInternal_WeatherRow, bool CallFunc_FindDataInternal_WeatherRowFound1, WeatherIdStruct CallFunc_FindDataInternal_WeatherRow1, bool CallFunc_FindDataInternal_WeatherRowFound2, WeatherIdStruct CallFunc_FindDataInternal_WeatherRow2);// 0x33e07d0
	void UpdateAmbient(PG_Water CallFunc_LerpPgWater_StructOut, AmbientStruct CallFunc_LerpAmbient_StructOut);// 0x33e07d0
	void SetAmbientExternal(int CallFunc_GetDeviceLevel_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x33e07d0
	void UpdatePostProcess(bool CallFunc_IsValid_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0x33e07d0
	void SetPostExternal();// 0x33e07d0
	void -后期面板-                                                                                      ();// 0x33e07d0
	void RefreshSkyLowerColor(bool CallFunc_IsValid_ReturnValue);// 0x33e07d0
	void SetAmbientColor(int CallFunc_GetDeviceLevel_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, float CallFunc_FClamp_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0x33e07d0
	void |填写参数|                                                                                      (interface classNone K2Node_DynamicCast_AsBPI_Weather, bool K2Node_DynamicCast_bSuccess);// 0x33e07d0
	void UpdateSkyBox(float CallFunc_Ease_ReturnValue, SkyBoxStruct CallFunc_LerpSkybox_StructOut);// 0x33e07d0
	Vector LightningPosition(Vector B, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue1, float CallFunc_RandomFloatInRange_ReturnValue2, Pawn* CallFunc_GetPlayerPawn_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, Rotator CallFunc_ComposeRotators_ReturnValue, Vector CallFunc_Conv_RotatorToVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_BreakVector_X1, float CallFunc_BreakVector_Y1, float CallFunc_BreakVector_Z1, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue1, Vector CallFunc_MakeVector_ReturnValue1, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x33e07d0
	void SetSkyTexExternal();// 0x33e07d0
	void UpdateMaterialSwitch(float CallFunc_BreakColor_R, float CallFunc_BreakColor_G, float CallFunc_BreakColor_B, float CallFunc_BreakColor_A, int CallFunc_GetDeviceLevel_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x33e07d0
	void UpdateSkyTexture(int CallFunc_GetDeviceLevel_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue1, float CallFunc_FMin_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue1, float CallFunc_FMin_ReturnValue1, float CallFunc_Divide_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_FMin_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0x33e07d0
	void DisplayWeather(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue1, FString CallFunc_Right_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue1, bool CallFunc_EqualEqual_StrStr_ReturnValue2, bool CallFunc_EqualEqual_StrStr_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue1, bool CallFunc_BooleanOR_ReturnValue2, int CallFunc_SelectInt_ReturnValue);// 0x33e07d0
	void SetFogExternal();// 0x33e07d0
	void UpdateFogPreset(FogStruct CallFunc_LerpFog_StructOut);// 0x33e07d0
	void SetLightExternal(bool K2Node_SwitchEnum_CmpSuccess);// 0x33e07d0
	void UpdateLightning(class LightningPreset_C Preset, CurveFloat* Scale, float Intensity, int CallFunc_GetDeviceLevel_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, float CallFunc_FClamp_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_Conv_BoolToFloat_ReturnValue, float CallFunc_GetPlaybackPosition_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, LinearColor CallFunc_Multiply_LinearColorFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue1, float CallFunc_Multiply_FloatFloat_ReturnValue2);// 0x33e07d0
	void SetLightning(class LightningPreset_C Preset, CurveFloat* Scale, int Iterations, Vector Epicenter, ParticleSystem* CallFunc_Array_Get_Item, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector CallFunc_LightningPosition_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, float CallFunc_BreakVector2D_X1, float CallFunc_BreakVector2D_Y1, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_RandomFloatInRange_ReturnValue1, float CallFunc_RandomFloatInRange_ReturnValue2, Vector CallFunc_LightningPosition_ReturnValue1, Pawn* CallFunc_GetPlayerPawn_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, ParticleSystem*[] K2Node_MakeArray_Array, Pawn* CallFunc_GetPlayerPawn_ReturnValue1, Vector CallFunc_GetActorForwardVector_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue3, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_RandomBool_ReturnValue, Rotator CallFunc_ComposeRotators_ReturnValue, Vector CallFunc_Conv_RotatorToVector_ReturnValue, int CallFunc_SelectInt_ReturnValue, Vector CallFunc_Normal_ReturnValue, ParticleSystem* CallFunc_Array_Get_Item1, Vector CallFunc_Multiply_VectorFloat_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue1, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, LinearColor K2Node_MakeStruct_LinearColor, bool CallFunc_NotEqual_IntInt_ReturnValue, ParticleSystem*[] K2Node_MakeArray_Array1, ParticleSystem*[] K2Node_MakeArray_Array2, int CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_Right_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x33e07d0
	void UpdateLightData(LightLowStruct CallFunc_LerpLightLow_StructOut, float CallFunc_Ease_ReturnValue, LightStruct CallFunc_LerpLight_StructOut);// 0x33e07d0
	void SetDyCloudExternal();// 0x33e07d0
	void UpdateDyCloud(float CallFunc_Ease_ReturnValue, DyCloudSturct CallFunc_LerpDyCloud_StructOut);// 0x33e07d0
	void UserConstructionScript(bool CallFunc_IsValid_ReturnValue, DirectionalLightComponent* K2Node_DynamicCast_AsDirectional_Light_Component, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue1, int CallFunc_GetDeviceLevel_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue1, bool K2Node_SwitchEnum_CmpSuccess);// 0x33e07d0
	void LightningTimeline__FinishedFunc();// 0x33e07d0
	void LightningTimeline__UpdateFunc();// 0x33e07d0
	void OnLoaded_4A5BAE4A430DFFD6E36D5C933A7BFBBD(class Object Loaded);// 0x33e07d0
	void OnLoaded_4A5BAE4A430DFFD6E36D5C938C1D97AC(class Object Loaded);// 0x33e07d0
	void SyncHeightFog();// 0x33e07d0
	void SaveWeather(FString WeatherIndex);// 0x33e07d0
	void WeatherGlobalSwitch(bool Switch);// 0x33e07d0
	void OpenPPV();// 0x33e07d0
	void ReWrite();// 0x33e07d0
	void OpenWeatherSource();// 0x33e07d0
	void BPE_LoadAsset();// 0x33e07d0
	void Level(FName LevelName, bool isLoad, bool IsVisible);// 0x33e07d0
	void SwitchParticles();// 0x33e07d0
	void ReceiveBeginPlay();// 0x33e07d0
	void ReceiveTick(float DeltaSeconds);// 0x33e07d0
	void PlayLightning(class LightningPreset_C Preset, CurveFloat* Scale, float Delay, float Intensity);// 0x33e07d0
	void PostConstructionScript(bool NoError);// 0x33e07d0
	void GoToWeather(bool NoError);// 0x33e07d0
	void WeatherSelection(FString WeatherID);// 0x33e07d0
	void WeatherLogin(FString WeatherID, bool NoError);// 0x33e07d0
	void WeatherChangeImmediately(FString WeatherID, bool Sync);// 0x33e07d0
	void WeatherChange(FString WeatherID, bool Sync);// 0x33e07d0
	void recap();// 0x33e07d0
	void ProvisionalEvent();// 0x33e07d0
	void BindXDSelf();// 0x33e07d0
	void LeadingPlayerEnterAircraft();// 0x33e07d0
	void LeadingPlayerLeaveAircraft();// 0x33e07d0
	void LensFlareSwitch(bool Hidden);// 0x33e07d0
	void FinishedEvent();// 0x33e07d0
	void TransitioningEvent();// 0x33e07d0
	void ExecuteUbergraph_BP_XDWeather(int EntryPoint, bool CallFunc_IsValid_ReturnValue, class Object Temp_class_Variable, class WeatherLightClass_C K2Node_ClassDynamicCast_AsWeather_Light_Class, bool K2Node_ClassDynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, delegate K2Node_CreateDelegate_OutputDelegate, class Object K2Node_CustomEvent_Loaded, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue1, DirectionalLightComponent* K2Node_DynamicCast_AsDirectional_Light_Component, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_FloatFloat_ReturnValue1, bool CallFunc_IsValid_ReturnValue2, class Object Temp_class_Variable1, class WeatherLightClass_C K2Node_ClassDynamicCast_AsWeather_Light_Class1, bool K2Node_ClassDynamicCast_bSuccess1, class Object K2Node_CustomEvent_Loaded1, int CallFunc_GetDeviceLevel_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum1_CmpSuccess, FString CallFunc_Conv_SoftClassReferenceToString_ReturnValue, class Object CallFunc_LoadClassSync_ReturnValue, class WeatherLightClass_C K2Node_ClassDynamicCast_AsWeather_Light_Class2, bool K2Node_ClassDynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue3, FString CallFunc_Conv_SoftClassReferenceToString_ReturnValue1, bool Temp_bool_Has_Been_Initd_Variable, class Object CallFunc_LoadClassSync_ReturnValue1, class WeatherLightClass_C K2Node_ClassDynamicCast_AsWeather_Light_Class3, bool K2Node_ClassDynamicCast_bSuccess3, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable1, bool Temp_bool_IsClosed_Variable1, bool Temp_bool_Has_Been_Initd_Variable2, bool Temp_bool_IsClosed_Variable2, bool CallFunc_IsValid_ReturnValue4, int CallFunc_GetDeviceLevel_ReturnValue1, byte CallFunc_Conv_IntToByte_ReturnValue1, byte CallFunc_GetValidValue_ReturnValue1, bool K2Node_SwitchEnum2_CmpSuccess, bool CallFunc_IsValid_ReturnValue5, int CallFunc_GetDeviceLevel_ReturnValue2, byte CallFunc_Conv_IntToByte_ReturnValue2, byte CallFunc_GetValidValue_ReturnValue2, int CallFunc_GetDeviceLevel_ReturnValue3, bool K2Node_SwitchEnum3_CmpSuccess, byte CallFunc_Conv_IntToByte_ReturnValue3, byte CallFunc_GetValidValue_ReturnValue3, bool K2Node_SwitchEnum4_CmpSuccess, bool K2Node_SwitchEnum5_CmpSuccess, int CallFunc_GetDeviceLevel_ReturnValue4, byte CallFunc_Conv_IntToByte_ReturnValue4, byte CallFunc_GetValidValue_ReturnValue4, bool K2Node_SwitchEnum6_CmpSuccess, FString K2Node_Event_WeatherIndex, bool K2Node_Event_Switch, FName K2Node_Event_LevelName, bool K2Node_Event_isLoad, bool K2Node_Event_isVisible, float K2Node_Event_DeltaSeconds, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue1, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue1, float CallFunc_FClamp_ReturnValue, float CallFunc_FClamp_ReturnValue1, class LightningPreset_C K2Node_CustomEvent_Preset, CurveFloat* K2Node_CustomEvent_Scale, float K2Node_CustomEvent_Delay, float K2Node_CustomEvent_Intensity, float CallFunc_GetTimeRange_MinTime, float CallFunc_GetTimeRange_MaxTime, bool K2Node_CustomEvent_NoError1, bool K2Node_CustomEvent_NoError, FString K2Node_Event_WeatherID1, FString K2Node_Event_WeatherID, bool K2Node_Event_NoError, bool CallFunc_NotEqual_StrStr_ReturnValue, FString K2Node_CustomEvent_WeatherID1, bool K2Node_CustomEvent_Sync1, FString K2Node_CustomEvent_WeatherID, bool K2Node_CustomEvent_Sync, bool CallFunc_IsValid_ReturnValue6, interface classNone CallFunc_WeatherLogin_self_CastInput, FString CallFunc_Right_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue1, bool CallFunc_EqualEqual_StrStr_ReturnValue2, bool CallFunc_EqualEqual_StrStr_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue1, bool CallFunc_BooleanOR_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate1, float CallFunc_Divide_FloatFloat_ReturnValue2, class Object CallFunc_GetWeatherLightSetSync_ReturnValue, class WeatherLightClass_C K2Node_ClassDynamicCast_AsWeather_Light_Class4, bool K2Node_ClassDynamicCast_bSuccess4, BP_LightManage_C*[] CallFunc_GetAllActorsOfClass_OutActors, BP_LightManage_C* CallFunc_Array_Get_Item, int CallFunc_GetDeviceLevel_ReturnValue5, byte CallFunc_Conv_IntToByte_ReturnValue5, byte CallFunc_GetValidValue_ReturnValue5, delegate K2Node_CreateDelegate_OutputDelegate2, bool K2Node_SwitchEnum7_CmpSuccess, bool K2Node_CustomEvent_Hidden, bool CallFunc_EqualEqual_StrStr_ReturnValue4, float CallFunc_Divide_FloatFloat_ReturnValue3, int CallFunc_SelectInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue4);// 0x33e07d0
	void TestUI__DelegateSignature();// 0x33e07d0
	void LoginDispatcher__DelegateSignature();// 0x33e07d0
	void WeatherChangeDispatcher__DelegateSignature();// 0x33e07d0
	StaticMeshComponent* SunPlane;//[Offset: 0x3e0, Size: 0x8]
	ChildActorComponent* BP_Sun_LensFlare;//[Offset: 0x3e8, Size: 0x8]
	StaticMeshComponent* SumoonPlane;//[Offset: 0x3f0, Size: 0x8]
	SceneComponent* MoonRoot;//[Offset: 0x3f8, Size: 0x8]
	PostProcessComponent* PostProcessFrom;//[Offset: 0x400, Size: 0x8]
	StaticMeshComponent* StarsSphere;//[Offset: 0x408, Size: 0x8]
	StaticMeshComponent* SkyMesh;//[Offset: 0x410, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x418, Size: 0x8]
	byte LightningTimeline__Direction_F96B14EF4E637E770014A3B52D13E35A;//[Offset: 0x420, Size: 0x1]
	TimelineComponent* LightningTimeline;//[Offset: 0x428, Size: 0x8]
	float WeatherChangeDuration;//[Offset: 0x430, Size: 0x4]
	bool 始终对齐Fog高度                                                                               ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 0x1]
	AIRequestID ================;//[Offset: 0x438, Size: 0x4]
	byte 副本名称                                                                                        ;//[Offset: 0x43c, Size: 0x1]
	LightStruct Light0;//[Offset: 0x440, Size: 0x100]
	DataTable*[] DataTable_Array;//[Offset: 0x540, Size: 0x10]
	DataTable*[] DataTable_Array_Caves;//[Offset: 0x550, Size: 0x10]
	DataTable*[] DataTable_Array_SubRegion;//[Offset: 0x560, Size: 0x10]
	MaterialInstanceConstant* SkydomeMaterial;//[Offset: 0x570, Size: 0x8]
	MaterialInterface* StarsMaterial;//[Offset: 0x578, Size: 0x8]
	DirectionalLight* SunLightSource;//[Offset: 0x580, Size: 0x8]
	DirectionalLight* SunCsBuilding;//[Offset: 0x588, Size: 0x8]
	ExponentialHeightFog* HeightFog;//[Offset: 0x590, Size: 0x8]
	SkyLight* SkyLight;//[Offset: 0x598, Size: 0x8]
	float Saturation;//[Offset: 0x5a0, Size: 0x4]
	float UVHorizon;//[Offset: 0x5a4, Size: 0x4]
	float UVScale;//[Offset: 0x5a8, Size: 0x4]
	None* BPE_Ref;//[Offset: 0x5b0, Size: 0x8]
	Texture* CloudsLayer1;//[Offset: 0x5b8, Size: 0x8]
	Texture* CloudsLayer2;//[Offset: 0x5c0, Size: 0x8]
	Vector2D WindForce;//[Offset: 0x5c8, Size: 0x8]
	float SunShine;//[Offset: 0x5d0, Size: 0x4]
	Rotator SunDirection;//[Offset: 0x5d4, Size: 0xc]
	float StarsBrightness;//[Offset: 0x5e0, Size: 0x4]
	DyCloudSturct DyCloudFrom;//[Offset: 0x5e4, Size: 0x64]
	DyCloudSturct DyCloudTo;//[Offset: 0x648, Size: 0x64]
	LinearColor WorldLayerColor;//[Offset: 0x6ac, Size: 0x10]
	float SkyLightRecaptureTime;//[Offset: 0x6bc, Size: 0x4]
	float TimeOfDayFrom;//[Offset: 0x6c0, Size: 0x4]
	float TimeOfDayTo;//[Offset: 0x6c4, Size: 0x4]
	float TimeOfDayTransitionDuration;//[Offset: 0x6c8, Size: 0x4]
	XDWeatherLightStruct LightFrom;//[Offset: 0x6d0, Size: 0xb8]
	XDWeatherLightStruct LightTo;//[Offset: 0x788, Size: 0xb8]
	float WeatherInterp;//[Offset: 0x840, Size: 0x4]
	int LightningIterations;//[Offset: 0x844, Size: 0x4]
	FogStruct Fog0;//[Offset: 0x848, Size: 0xcc]
	float ChangeDuration;//[Offset: 0x914, Size: 0x4]
	FogStruct FogFrom;//[Offset: 0x918, Size: 0xcc]
	FogStruct FogTo;//[Offset: 0x9e4, Size: 0xcc]
	bool isDyCouldy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab0, Size: 0x1]
	float SkyTexInterp;//[Offset: 0xab4, Size: 0x4]
	float DyCloudyAlpha;//[Offset: 0xab8, Size: 0x4]
	bool isRainy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xabc, Size: 0x1]
	float RainRoughParam;//[Offset: 0xac0, Size: 0x4]
	ParticleSystem*[] LightningParticle;//[Offset: 0xac8, Size: 0x10]
	SkyBoxStruct Skybox0;//[Offset: 0xad8, Size: 0xdc]
	DyCloudSturct DyCloud0;//[Offset: 0xbb4, Size: 0x64]
	class WeatherLightClass_C* LightDataTarget;//[Offset: 0xc18, Size: 0x8]
	class PostProcessClass_C* PostProcessTarget;//[Offset: 0xc20, Size: 0x8]
	class AmbientClass_C* AmbientTarget;//[Offset: 0xc28, Size: 0x8]
	class DyCloudClass_C* DyCloudTarget;//[Offset: 0xc30, Size: 0x8]
	SkyBoxStruct SkyboxForm;//[Offset: 0xc38, Size: 0xdc]
	SkyBoxStruct SkyboxTo;//[Offset: 0xd14, Size: 0xdc]
	FString WeatherIndex;//[Offset: 0xdf0, Size: 0x10]
	<int,class DyCloudClass_C> DyCloudList;//[Offset: 0xe00, Size: 0x50]
	Texture* SkyTextureTarget;//[Offset: 0xe50, Size: 0x8]
	Texture* SkyTextureFrom;//[Offset: 0xe58, Size: 0x8]
	bool isLightning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe60, Size: 0x1]
	PostProcessVolume* PPVolume;//[Offset: 0xe68, Size: 0x8]
	float DurationTime;//[Offset: 0xe70, Size: 0x4]
	<int,class PostProcessClass_C> PostProcessList;//[Offset: 0xe78, Size: 0x50]
	float PostPresetInterp;//[Offset: 0xec8, Size: 0x4]
	PostProcessSettings PostSetting;//[Offset: 0xed0, Size: 0x570]
	delegate WeatherChangeDispatcher;//[Offset: 0x1440, Size: 0x10]
	<int,class AmbientClass_C> AmbientList;//[Offset: 0x1450, Size: 0x50]
	AmbientStruct Ambient0;//[Offset: 0x14a0, Size: 0x8c]
	AmbientStruct AmbientTo;//[Offset: 0x152c, Size: 0x8c]
	AmbientStruct AmbientFrom;//[Offset: 0x15b8, Size: 0x8c]
	TextureCube* SkyCubeFrom;//[Offset: 0x1648, Size: 0x8]
	TextureCube* SkyCubeTo;//[Offset: 0x1650, Size: 0x8]
	TextureCube* SkyCubePrev;//[Offset: 0x1658, Size: 0x8]
	delegate LoginDispatcher;//[Offset: 0x1660, Size: 0x10]
	bool isEditorTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1670, Size: 0x1]
	WeatherIdStruct TargetRow;//[Offset: 0x1678, Size: 0x60]
	byte 区域/副本                                                                                       ;//[Offset: 0x16d8, Size: 0x1]
	PrimaryDataAsset* 编辑器子区域配置                                                                            ;//[Offset: 0x16e0, Size: 0x8]
	byte 区域级别                                                                                        ;//[Offset: 0x16e8, Size: 0x1]
	AIRequestID ----;//[Offset: 0x16ec, Size: 0x4]
	int 三级区域号（回车进入）                                                                   ;//[Offset: 0x16f0, Size: 0x4]
	<int,FString> 三级区域号码表                                                                               ;//[Offset: 0x16f8, Size: 0x50]
	AIRequestID -----;//[Offset: 0x1748, Size: 0x4]
	byte #_昼夜_#                                                                                          ;//[Offset: 0x174c, Size: 0x1]
	byte %_天气_%                                                                                          ;//[Offset: 0x174d, Size: 0x1]
	AIRequestID ===============;//[Offset: 0x1750, Size: 0x4]
	FString EditorWeatherID;//[Offset: 0x1758, Size: 0x10]
	FString ManualID;//[Offset: 0x1768, Size: 0x10]
	bool 调试当前天气？                                                                               ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1778, Size: 0x1]
	AmbientStruct AmbientFrom;//[Offset: 0x177c, Size: 0x8c]
	AmbientStruct AmbientTo;//[Offset: 0x1808, Size: 0x8c]
	FogStruct FogFrom;//[Offset: 0x1894, Size: 0xcc]
	FogStruct FogTo;//[Offset: 0x1960, Size: 0xcc]
	bool TestBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a2c, Size: 0x1]
	class LightLowClass_C* DeviceLowTarget;//[Offset: 0x1a30, Size: 0x8]
	LightLowStruct LightLowFrom;//[Offset: 0x1a38, Size: 0xc4]
	LightLowStruct LightLowTo;//[Offset: 0x1afc, Size: 0xc4]
	LightLowStruct LightLow0;//[Offset: 0x1bc0, Size: 0xc4]
	float DeviceLowInterp;//[Offset: 0x1c84, Size: 0x4]
	FString[] 高低配切换的命令                                                                            ;//[Offset: 0x1c88, Size: 0x10]
	LinearColor FinalBaseLayerScale;//[Offset: 0x1c98, Size: 0x10]
	LinearColor FinalSecondLayerScale;//[Offset: 0x1ca8, Size: 0x10]
	LinearColor FinalBaseLayerSpeed;//[Offset: 0x1cb8, Size: 0x10]
	LinearColor FinalSecondLayerSpeed;//[Offset: 0x1cc8, Size: 0x10]
	LightStruct Light_From;//[Offset: 0x1cd8, Size: 0x100]
	LightStruct Light_To;//[Offset: 0x1dd8, Size: 0x100]
	DirectionalLightComponent* DirLitComp;//[Offset: 0x1ed8, Size: 0x8]
	bool PlayInP4V;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ee0, Size: 0x1]
	Rotator SunAnglePreset;//[Offset: 0x1ee4, Size: 0xc]
	delegate TestUI;//[Offset: 0x1ef0, Size: 0x10]
	int LightningInt;//[Offset: 0x1f00, Size: 0x4]
	float SpecialInterp;//[Offset: 0x1f04, Size: 0x4]
	float SpecialDurationTime;//[Offset: 0x1f08, Size: 0x4]
	bool SetTargetTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0c, Size: 0x1]
	BP_LightManage_C* LitManageRef;//[Offset: 0x1f10, Size: 0x8]
	Vector Ls_Direct;//[Offset: 0x1f18, Size: 0xc]
	bool isSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f24, Size: 0x1]
	int ServerID Holder;//[Offset: 0x1f28, Size: 0x4]
	bool ChangeFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2c, Size: 0x1]
	MaterialInstanceConstant* SkyMaterialSimplified;//[Offset: 0x1f30, Size: 0x8]
	MaterialInstanceDynamic* SkyMatSimplified;//[Offset: 0x1f38, Size: 0x8]
	MaterialInstanceDynamic* SkyMat;//[Offset: 0x1f40, Size: 0x8]
	PG_Water PgWater0;//[Offset: 0x1f48, Size: 0x4a8]
	PG_Water PgWaterTo;//[Offset: 0x23f0, Size: 0x4a8]
	PG_Water PgWaterFrom;//[Offset: 0x2898, Size: 0x4a8]
	TextureCube* SkyCubeFrom;//[Offset: 0x2d40, Size: 0x8]
	TextureCube* SkyCubeTo;//[Offset: 0x2d48, Size: 0x8]
	TextureCube* SkyCubePrev;//[Offset: 0x2d50, Size: 0x8]
	bool isDs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d58, Size: 0x1]
	bool isSubRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d59, Size: 0x1]
	int WDT_ArrayID;//[Offset: 0x2d5c, Size: 0x4]
	float NextSetCubemapBlendAvailableInterp;//[Offset: 0x2d60, Size: 0x4]

--------------------------------
Class: XDWeather.Actor.Object
	MaterialInstanceDynamic* SkyMaterialInst;//[Offset: 0x340, Size: 0x8]
	MaterialInstanceDynamic* StarsMaterialInst;//[Offset: 0x348, Size: 0x8]
	float UVHorizon;//[Offset: 0x350, Size: 0x4]
	Vector2D WindForce;//[Offset: 0x354, Size: 0x8]
	float UVScale;//[Offset: 0x35c, Size: 0x4]
	float Saturation;//[Offset: 0x360, Size: 0x4]
	Rotator SunDirection;//[Offset: 0x364, Size: 0xc]
	LinearColor WorldLayerColor;//[Offset: 0x370, Size: 0x10]
	float SunShine;//[Offset: 0x380, Size: 0x4]
	float StarsBrightness;//[Offset: 0x384, Size: 0x4]
	LinearColor UVBaseLayerPosition;//[Offset: 0x388, Size: 0x10]
	LinearColor UVSecondLayerPosition;//[Offset: 0x398, Size: 0x10]
	LinearColor UVBaseLayerSize;//[Offset: 0x3a8, Size: 0x10]
	LinearColor UVSecondLayerSize;//[Offset: 0x3b8, Size: 0x10]
	float HorizonTilt;//[Offset: 0x3c8, Size: 0x4]
	float CloudsBloom;//[Offset: 0x3cc, Size: 0x4]
	float LightningIntensity;//[Offset: 0x3d0, Size: 0x4]
	void ReleasePreviousWeatherTex(MaterialInstanceDynamic* MatSky, Texture* TexSkyFrom, Texture* TexSkyTo, SkyLightComponent* SkyLight, TextureCube* CubemapFrom, TextureCube* CubemapTo);// 0x3024f90
	void ReleasePreviousWeatherLight(class Object LightSet);// 0x3024ec4
	class Object GetWeatherLightSetSync(class Object ClassName);// 0x3024de8
	int GetWeatherLevel();// 0x3024db4

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8]
	bool bStripFromClientBuilds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: WeatherIdStruct
	FString WeatherName_21_28B751D645CBC94D58932090BF2BC212;//[Offset: 0x0, Size: 0x10]
	bool isValid_16_755F305341F773AC6383FA9FDC3E7C89;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	class WeatherLightClass_C* LightSet_43_72529BB148C5DA4A8CE308B9D4FC84B0;//[Offset: 0x18, Size: 0x28]
	class PostProcessClass_C* PostProcess_30_B170377447D764917478139D5B47240A;//[Offset: 0x40, Size: 0x8]
	class DyCloudClass_C* DyCloud_31_0EE640744CC6CF100A3682926B09E02A;//[Offset: 0x48, Size: 0x8]
	class AmbientClass_C* Ambient_32_5D945A774B375B36E90AD3A4867D87C0;//[Offset: 0x50, Size: 0x8]
	class LightLowClass_C* LightLow_35_CDB8674940EACA657A81F38B7E21DA69;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: WeatherLightClass_C.Object
	LightStruct Light;//[Offset: 0x28, Size: 0x100]
	FogStruct Fog;//[Offset: 0x128, Size: 0xcc]
	SkyBoxStruct SkyBox;//[Offset: 0x1f4, Size: 0xdc]

--------------------------------
Class: LightStruct
	float SunIntensity_8_1FF8914C4148BC1391C34F903EB92A0C;//[Offset: 0x0, Size: 0x4]
	LinearColor SunLightColor_9_B19BF2624E32A2A369329BA76007AD4E;//[Offset: 0x4, Size: 0x10]
	LinearColor SunShadowColor_18_B13B61B14E758D857AD40F81F6AAB82B;//[Offset: 0x14, Size: 0x10]
	LinearColor SunShadowColorFar_43_9D1B617940FCDA55D3BD91871346FC2E;//[Offset: 0x24, Size: 0x10]
	float ShadowColorTransition_46_C5232B6B4BDC9A92412E27AF02B02D79;//[Offset: 0x34, Size: 0x4]
	TextureCube* SkyLitHDR_40_1C0323964722FD39BE0B2397BB63CE9C;//[Offset: 0x38, Size: 0x8]
	float SkyLitIntensity_12_1B4CF4A748DD0FBC620167B88F365C45;//[Offset: 0x40, Size: 0x4]
	LinearColor SkyLitColor_13_CCCAB5A549E46D49B4672EA64CF9C1CA;//[Offset: 0x44, Size: 0x10]
	LinearColor LowerHemisphereColor_16_1CB9CA9546327B63298B978BDE7F68E6;//[Offset: 0x54, Size: 0x10]
	Texture* SkyTexture_25_147D6D2A440B41DDBD142581D85F6A38;//[Offset: 0x68, Size: 0x8]
	float SkyTextureRotation_49_FD15C9F3461A85C28FF7889B26FA384C;//[Offset: 0x70, Size: 0x4]
	LinearColor CBD_GI_32_87D3E9184500097B56F676ADFF04E4DE;//[Offset: 0x74, Size: 0x10]
	LinearColor CBD_Sun_33_6F6927784823D7A035381AB7B46BBA53;//[Offset: 0x84, Size: 0x10]
	LinearColor CBD_Sky_35_27C83A434462F1851402FBAE50F61E47;//[Offset: 0x94, Size: 0x10]
	LinearColor CBD_LF_37_01CC605F49C840894F54428F6CA2247B;//[Offset: 0xa4, Size: 0x10]
	bool -----建造-----_62_91C7B0FA4F19A5FA156057B521A225AF                                                ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	float SunIntensity_2_68_C93A378B4C362923708CC586156D0FE3;//[Offset: 0xb8, Size: 0x4]
	LinearColor SunLightColor_2_71_EE828B594FCB6D4E474E8883880605CD;//[Offset: 0xbc, Size: 0x10]
	TextureCube* SkyLitHDR_2_52_3ED180D24D0D45F624EB94AB5AD7EE31;//[Offset: 0xd0, Size: 0x8]
	float SkyLitIntensity_2_58_4BC8F5D94354FEDB9E0369B9200BD2B3;//[Offset: 0xd8, Size: 0x4]
	LinearColor SkyLitColor_2_61_59D8332B4D8F6CE34D867F918934D7B3;//[Offset: 0xdc, Size: 0x10]
	LinearColor LowerHemisphereColor_2_64_9CAC4D5C43493AAC14A0EB882D6C619C;//[Offset: 0xec, Size: 0x10]

--------------------------------
Class: FogStruct
	bool -----------1-------------_84_AD6A29434955F0B6518C0199513CC87A;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float FogDensity_3_1FF8914C4148BC1391C34F903EB92A0C;//[Offset: 0x4, Size: 0x4]
	LinearColor FogColor_6_ACBA930A4026FC7499D6FFB27B3EA1FF;//[Offset: 0x8, Size: 0x10]
	float FogFalloff_9_2A29AF0244C90ABA5ED1D1A066B2E4AC;//[Offset: 0x18, Size: 0x4]
	float FogOpacity_11_2265F5E4444A97EC390C55B2D8E6D339;//[Offset: 0x1c, Size: 0x4]
	float FogStartDistance_13_97413C0C4D40FEE5A3FFDC805598FFEF;//[Offset: 0x20, Size: 0x4]
	bool -----------2-------------_86_1D37C40041D3DAF7C40B91B169B653C5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	float FogDensity_1_28_2DC8C803462FC91D726E519DC20C2810;//[Offset: 0x28, Size: 0x4]
	LinearColor FogColor_1_31_E72658E440F1BDC3DAE2CBA3C564D560;//[Offset: 0x2c, Size: 0x10]
	float FogFalloff_1_32_2FC81E0F446E827D73267C9ED200ED8E;//[Offset: 0x3c, Size: 0x4]
	float FogOpacity_1_37_9EFFC9A24133544A81713FAAAC98D9EB;//[Offset: 0x40, Size: 0x4]
	float FogDistance_1_38_6F8549DE4FDDF2B42FD2C7AB0AC779DE;//[Offset: 0x44, Size: 0x4]
	bool -----------3-------------_88_0659DFC649AF37AEA0BD678796558007;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	float FogDensity_2_44_88AC4AAB428887B174FD808C1A40AFDD;//[Offset: 0x4c, Size: 0x4]
	LinearColor FogColor_2_49_3AD4B4794AF56946A5825E8BAEED0E0C;//[Offset: 0x50, Size: 0x10]
	float FogFalloff_2_46_FB575B66490553F2CF41478CA04574CB;//[Offset: 0x60, Size: 0x4]
	float FogOpacity_2_47_D00E0ACE4DD0FFCDA29439963AF4DF36;//[Offset: 0x64, Size: 0x4]
	float FogDistance_2_48_305D0E10444C0FFF3DA6CE9A9C0D6DB6;//[Offset: 0x68, Size: 0x4]
	float Ins_Exponent_55_F2FD97D54FA046D9E7B59586CF592A26;//[Offset: 0x6c, Size: 0x4]
	float Ins_StartDistance_57_12A962024210BCC084FB039828AD1C04;//[Offset: 0x70, Size: 0x4]
	LinearColor Ins_Color_60_A047F3B544B5C40BE670908D4C5EDEFB;//[Offset: 0x74, Size: 0x10]
	bool None_91_B44AB0414703A185F88B14AEA9211AAD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	bool DyCloud_15_4FAC79254BCD47CDC9CBB5913C563D9F;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	bool Rain_17_77F881E34C76B364730432ACDEE0D562;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 0x1]
	float WindParam_23_1FF64DBB4F7F0915CAA6A6A91706641B;//[Offset: 0x88, Size: 0x4]
	bool Lightning_21_C883D3244E02EA10386AF7ABAD356718;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	float FL_Density_72_48F473D44C40E9C792FB75B8A3FA2659;//[Offset: 0x90, Size: 0x4]
	LinearColor FL_Color_77_A09FDB1E4C85090F57A2EEB83DBD6489;//[Offset: 0x94, Size: 0x10]
	float FL_Falloff_74_5626E3664606E4668B51ED90C0A023E8;//[Offset: 0xa4, Size: 0x4]
	float FL_Distance_76_621C3CF74C783A5E1DC492A78A47DED4;//[Offset: 0xa8, Size: 0x4]
	float FL_EndDistance_82_4DBA95C44B4B857C9435EB99D6FFA15D;//[Offset: 0xac, Size: 0x4]
	LinearColor PPR_Color_81_A0FC00F84EFB479BE459F0862986F0E9;//[Offset: 0xb0, Size: 0x10]
	float DyCloudyAlpha_94_5245A54A43047D558C7C73ABB3991A59;//[Offset: 0xc0, Size: 0x4]
	float RainRoughParam_96_E53143094B2C39137D6A6593735DCCBF;//[Offset: 0xc4, Size: 0x4]
	float Ripples_99_5CB700E645BC85AE54B18F91D9ECD9AE;//[Offset: 0xc8, Size: 0x4]

--------------------------------
Class: SkyBoxStruct
	bool ---------SunMoon----------_36_762633AA4BFA407E23228B82BB7A8AD3;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float LitShaft_Scale_42_7D5BEDD64E399C8F35850E859213DBAA;//[Offset: 0x4, Size: 0x4]
	LinearColor LitShaft_Tint_90_B838AFA94A3EAB02518FAF9E58ABB6B5;//[Offset: 0x8, Size: 0x10]
	LinearColor SunColor_6_1669F2914B1618EA07D76AB6D6684DA2;//[Offset: 0x18, Size: 0x10]
	float SunSize_104_F2740AAE4AB69A74BF03A0B9C5135087;//[Offset: 0x28, Size: 0x4]
	LinearColor MoonColor_8_5924A1F64BD1600FFCA93BA38899D542;//[Offset: 0x2c, Size: 0x10]
	float MoonSize_105_39B24A5D479FEE089340E4865638B2E7;//[Offset: 0x3c, Size: 0x4]
	LinearColor StartColor_28_7CAC6E9F40F94817673D92A13454ADCC;//[Offset: 0x40, Size: 0x10]
	Rotator SunRotation_2_E828809B49646FC88084F4A7751B0B08;//[Offset: 0x50, Size: 0xc]
	byte SunAnglePreset_97_57F8BC5D433624C4D8E10BAD611B8E5A;//[Offset: 0x5c, Size: 0x1]
	Rotator MoonRotation_11_36552E0946BD1230968797BAED437802;//[Offset: 0x60, Size: 0xc]
	float Sun_LensFlareIntensity_107_F9628D9A407A2AB9471ABFA2A524775C;//[Offset: 0x6c, Size: 0x4]
	bool ---------Skybox------------_35_49747E0248A1E0A08A2DF8BE1EB9BF79;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	LinearColor SkyUpperColor_16_171EB71644A9C08E5CF8009332FD0D73;//[Offset: 0x74, Size: 0x10]
	LinearColor SkyLowerColor_18_97BCD0D2441A92293D10F4BEA7EAD15A;//[Offset: 0x84, Size: 0x10]
	LinearColor CloudsUpperColor_20_134B88C3494183F9C80B3F8E39404E34;//[Offset: 0x94, Size: 0x10]
	LinearColor CloudsLowerColor_22_E94AB8C54FDCF56803B74FADB14C4316;//[Offset: 0xa4, Size: 0x10]
	LinearColor CloudsSecondaryColor_27_0252190540182FA041C5B2BFE493B69E;//[Offset: 0xb4, Size: 0x10]
	LinearColor CloudsBackground_24_30A497F94FA2097F6E32DBA65F043590;//[Offset: 0xc4, Size: 0x10]
	float Galaxy_93_03FE548A4D953D92013A139A9415B44C;//[Offset: 0xd4, Size: 0x4]
	float Aurora_100_E52974C54D18AF0A578AD68990546960;//[Offset: 0xd8, Size: 0x4]

--------------------------------
Class: PostProcessClass_C.Object
	PostProcessSettings Post;//[Offset: 0x30, Size: 0x570]

--------------------------------
Class: DyCloudClass_C.Object
	DyCloudSturct DyCloudData;//[Offset: 0x28, Size: 0x64]

--------------------------------
Class: DyCloudSturct
	float CloudsScale_6_46BD2FFD4101E62C58B396AE3DAA8046;//[Offset: 0x0, Size: 0x4]
	float CloudsDensity_8_C959F15B494C31785AB9BDA43B1D7D13;//[Offset: 0x4, Size: 0x4]
	float CloudsHarness_10_C035BB69421FE083D844959BBFE947D1;//[Offset: 0x8, Size: 0x4]
	float CloudsTranslucent_18_6BF1A8914FAA8F67988B9DADC914CBC6;//[Offset: 0xc, Size: 0x4]
	float CloudsBlend_17_0B0902B849FFF532D0FA73AD750162A7;//[Offset: 0x10, Size: 0x4]
	float CloudsDistotion_19_FF8260554CA3B701D6C62A87A392E3BA;//[Offset: 0x14, Size: 0x4]
	float CloudsScattering_20_EA03A384445C04BBBC4EA2A3A28674D9;//[Offset: 0x18, Size: 0x4]
	float CloudsUpperBrightness_47_80E6F59C44C0E63FF352E1ACA405DEAD;//[Offset: 0x1c, Size: 0x4]
	float CloudsLowerBrightness_48_C275CDC444671D9809D344A043817F24;//[Offset: 0x20, Size: 0x4]
	float CloudsAmbient_26_B3DE5189457AF2F2C9061DAE095629E4;//[Offset: 0x24, Size: 0x4]
	float CloudsShadowSize_32_30070F544C29A5175B4905A3CAA43C9B;//[Offset: 0x28, Size: 0x4]
	float CloudsShadowSoft_33_242397844998748E4CE442A82FABD76E;//[Offset: 0x2c, Size: 0x4]
	float CloudsBackground_34_81AB1CD743507906283E26BC8179CD02;//[Offset: 0x30, Size: 0x4]
	float CloudsHorizonDensity_35_A9DA12E04BD1ACCE877556A07AFC0A81;//[Offset: 0x34, Size: 0x4]
	float CloudsHorizonAlpha_36_B5FE09604EE51B66C6109689DD26A633;//[Offset: 0x38, Size: 0x4]
	float CloudsHorizonScattering_38_96C12A72485C8C653890E983ADECA031;//[Offset: 0x3c, Size: 0x4]
	float HorizonFalloff_41_7ADEA15D4BAFCED09051BDAAB67D0E6E;//[Offset: 0x40, Size: 0x4]
	float WindForceScale_42_494196B04350B9CE2B731E97799FE070;//[Offset: 0x44, Size: 0x4]
	float WindDynamic_45_4BD5C5EC4B00477CD0BAC8857B6087F7;//[Offset: 0x48, Size: 0x4]
	float WindDispersing_46_747C4F2B40612E5FE76792B0CB7C4E90;//[Offset: 0x4c, Size: 0x4]
	float SkylightBrightness_52_D0DC0C2C48095A9468CA2A8ECC6B512B;//[Offset: 0x50, Size: 0x4]
	float SecondLayerColor_71_16427994489B87788D8B02B67E7E863B;//[Offset: 0x54, Size: 0x4]
	float SecondLayerAlpha_72_8759E297465AF80FD8856791526E7414;//[Offset: 0x58, Size: 0x4]
	float SecondLayerScale_77_6F5F9AE84D7C8132AF2BD68DD7F5A018;//[Offset: 0x5c, Size: 0x4]
	float SecondLayerWind_73_58F8ABAE4AE471692F3D53A832B70EC0;//[Offset: 0x60, Size: 0x4]

--------------------------------
Class: AmbientClass_C.Object
	AmbientStruct AmbData;//[Offset: 0x28, Size: 0x8c]
	PG_Water PgWater;//[Offset: 0xb8, Size: 0x4a8]

--------------------------------
Class: AmbientStruct
	bool ------Effects------_35_C52ADF0D42E9BD9303DA7D9A682283A7;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	LinearColor Effect01_2_CC62FCAF47B76B14458AEFBAB7E7175C;//[Offset: 0x4, Size: 0x10]
	LinearColor Effect02_4_6FFA27A943E28A1E6BD8BB88027F2ED5;//[Offset: 0x14, Size: 0x10]
	LinearColor Effect03_6_44B43109493D1674685A4B9BB9E6B306;//[Offset: 0x24, Size: 0x10]
	bool -------Character---------_21_4388AB0042DB251C8DBFEBA1DEE70689;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	float Ch_SkyIntensity_28_6A0C43C148EE1A7F3A7102982AAB8677;//[Offset: 0x38, Size: 0x4]
	float Ch_SunLimit_30_0E4F850E4144CD3C38C423B373AC9004;//[Offset: 0x3c, Size: 0x4]
	float Ch_DiffuseIntensity_47_B16FD56845C3175A621CBA874B6A1C28;//[Offset: 0x40, Size: 0x4]
	LinearColor Ch_SkyUpper_31_37BB2701493A8C7052D232B69CBDE09D;//[Offset: 0x44, Size: 0x10]
	LinearColor Ch_SkyLower_33_F0BC14AD42D96BAA42BEC09038D31A4D;//[Offset: 0x54, Size: 0x10]
	LinearColor Ch_CameraLightColor_48_427D001542CDC064459E10AF2F026F03;//[Offset: 0x64, Size: 0x10]
	bool ---Scene---_37_7EBD53B847485B1E88B05F9DD8F9EE51;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	LinearColor Sc_IBLColor_40_8F1D079043083A1CEEAE81A056726860;//[Offset: 0x78, Size: 0x10]
	float SpecialEmissive_51_067D947B4AB89A20ADD762BC765CA5A8;//[Offset: 0x88, Size: 0x4]

--------------------------------
Class: PG_Water
	AssetData ---VertexAnimation---------------------------------------------_134_5982033547FB839B7B6DE6A074EBA2B6;//[Offset: 0x0, Size: 0x50]
	LinearColor Amplitude1234_68_B8AA23084CAA8DF9BA06A7A572FDDB9C;//[Offset: 0x50, Size: 0x10]
	LinearColor Direction12_70_31CCF740470C2C6455D7688A4A72A168;//[Offset: 0x60, Size: 0x10]
	LinearColor Direction34_72_7F234BE54C89CB1D92F9C1805631A9B9;//[Offset: 0x70, Size: 0x10]
	LinearColor Frequency1234_74_711C4EB24953CBB8C59B268F7907D543;//[Offset: 0x80, Size: 0x10]
	LinearColor Speed1234_242_66916BA04C1E44FCA2BA5DB0C1E70D6D;//[Offset: 0x90, Size: 0x10]
	LinearColor Steepness1234_78_926831E4416945D273BF1FA55298E85E;//[Offset: 0xa0, Size: 0x10]
	AssetData ---VTF----------------------------------------------_139_7CFE374944EA02ACEB305A938A5BE1F1;//[Offset: 0xb0, Size: 0x50]
	LinearColor DetailNormalSpeed_84_F8648E6747FC0EA888C11282592065A8;//[Offset: 0x100, Size: 0x10]
	float VTFIntensity_95_80B15DE2458184C9E76F6FB48FBE4D14;//[Offset: 0x110, Size: 0x4]
	float VTFUV1_87_C7DF57024A4A942D41ADBB91A30B8C4F;//[Offset: 0x114, Size: 0x4]
	float VTFUV2_89_EFBEC43C4FFE147839EF13A3991FFC7E;//[Offset: 0x118, Size: 0x4]
	AssetData ---BaseColor--------------------------------------------------------------_140_C3409A54481966B97EE60C8A55625BA1;//[Offset: 0x120, Size: 0x50]
	LinearColor BaseColor_Far_168_15A3D5824E46C3A25F1A139D289CB16A;//[Offset: 0x170, Size: 0x10]
	LinearColor BaseColor_Near_169_C294BD154C5BE0C472A4FB86E9EE4564;//[Offset: 0x180, Size: 0x10]
	LinearColor BaseColor_Shallow_170_293E32EA41A8C7A697FC4384E8D2370B;//[Offset: 0x190, Size: 0x10]
	AssetData ---Normal---------------------------------------------------------------------------------------------------_144_977948544CB16527A680B19B2291E3AA;//[Offset: 0x1a0, Size: 0x50]
	float NormalMapIntensity_177_4D8ABE384650F442B144F4A3BCD34578;//[Offset: 0x1f0, Size: 0x4]
	AssetData ---IBL-----------------------------------------------------------------------------------_155_A312C1184FA3D2912C35B0A09170C302;//[Offset: 0x1f8, Size: 0x50]
	LinearColor Water_ReflectionTintColor_180_57FB55AB42F9DDE6274CE3A6549DECEA;//[Offset: 0x248, Size: 0x10]
	float Water_ReflectionIntensity_183_EBDD68A4433E94EA76BE5E91699D69EB;//[Offset: 0x258, Size: 0x4]
	float Water_ReflectionAddPower_240_FEC886AA4EEEA9F4BE8827A7DD1F9CBE;//[Offset: 0x25c, Size: 0x4]
	float Water_ReflectionAddIntensity_241_0871E1F14E170C32DEB76B9B237ED1B0;//[Offset: 0x260, Size: 0x4]
	AssetData ---SSS--------------------------------------------------------------------------------------------------------------_151_59F656C14148FD5EF25426A2F527F27D;//[Offset: 0x268, Size: 0x50]
	float SSS_Top_210_EDFEBA1745F2B6B2D827C2B6351C1E44;//[Offset: 0x2b8, Size: 0x4]
	float SSS_Threshold_215_1AACF0404FD21001443032A1EFF2F31B;//[Offset: 0x2bc, Size: 0x4]
	float SSS_WorldNormalYMaskPower_216_716C8FBD4B45677E61F9D9BAD6D19551;//[Offset: 0x2c0, Size: 0x4]
	float SSS_SunPower_217_AB09A51042490CDD0C558E9612EB108D;//[Offset: 0x2c4, Size: 0x4]
	LinearColor SSS_SunColor_218_307FD1A6418EE7C9236FDCB9A15BF1F0;//[Offset: 0x2c8, Size: 0x10]
	LinearColor SSS_SkyColor_219_B70BB6FA410BFF00232BDEA13002279D;//[Offset: 0x2d8, Size: 0x10]
	float SSS_Style_CameraHeight_220_5048B2AF4915764E2DF72BB77EEB39E0;//[Offset: 0x2e8, Size: 0x4]
	float SSS_Style_Power_221_7D0EDBD640C7FE55714D6190E5FABEF8;//[Offset: 0x2ec, Size: 0x4]
	LinearColor SSS_Style_Color_222_141D108445EBEEE18DFDAFBB804BA3F2;//[Offset: 0x2f0, Size: 0x10]
	AssetData ---Foam-----------------------------------------------------------------------------------------------------_141_9B3502B04ED9B5A4CC076FA1C9132614;//[Offset: 0x300, Size: 0x50]
	float Foam_Top_223_F6EDA3FE4D214745A419E7AC8C92B5B0;//[Offset: 0x350, Size: 0x4]
	float Foam_Threshold_224_502B0D444A7CF354DCFD94BFD200137C;//[Offset: 0x354, Size: 0x4]
	float Foam_WorldNormalYMaskPower_225_8B4C9689496EC4F20AD5A2A7ED23547E;//[Offset: 0x358, Size: 0x4]
	LinearColor Foam_Color_226_583832AD4D2602340FEEA5905F3D5C3E;//[Offset: 0x35c, Size: 0x10]
	float Foam_Tilling_211_C86D20C64EA89D386B74C293BFA39A46;//[Offset: 0x36c, Size: 0x4]
	AssetData ---HorizonLight-----------------------------------------------------------------------------_156_87657CC14DCAE6C73F575983E866D3C7;//[Offset: 0x370, Size: 0x50]
	float HorizonLight_Power_227_877DD4F44A5F4D003AD7438C31ECE7E3;//[Offset: 0x3c0, Size: 0x4]
	LinearColor HorizonLight_Color_228_5F9E314D4BA96A8E98F7A7981604F263;//[Offset: 0x3c4, Size: 0x10]
	AssetData ---FakeSpecular----------------------------------------------------------------------------_157_95811ED44AE4261E16A694BEE0E6ADBC;//[Offset: 0x3d8, Size: 0x50]
	float FakeLightSpec_Intensity_229_D8F9137F42B3A49F5E43C99EA4336EB4;//[Offset: 0x428, Size: 0x4]
	LinearColor FakeLightSpec_Color_230_502D10A24F487EDB403500A1DE08D6CE;//[Offset: 0x42c, Size: 0x10]
	float FakeLightSpec_Roughness_231_1E4A4CC3444A8DC0FDA7AA91927BB81A;//[Offset: 0x43c, Size: 0x4]
	float FakeLightSpec_DIrOffset_232_CEFE436B4797A29155D2F292F02805F5;//[Offset: 0x440, Size: 0x4]
	float FakeLightSpec_NormalMapIntensity_233_DBA0863443FCFC7ED5637790DB7B4056;//[Offset: 0x444, Size: 0x4]
	AssetData ---Misc-----------------------------------------------------------------------------------_174_40FC255D40059A41A43C8CBDB68EE338;//[Offset: 0x448, Size: 0x50]
	float Specular_234_0E1CF90D46AEF32038E907A528CAC158;//[Offset: 0x498, Size: 0x4]
	float Roughness_235_2A9D80BA4A18FD9C453F02ADACDA0ACF;//[Offset: 0x49c, Size: 0x4]
	float BaseColorToEmissive_236_51089F4F4292DD46EBBBB98BC5C41CC2;//[Offset: 0x4a0, Size: 0x4]

--------------------------------
Class: AssetData
	FName objectPath;//[Offset: 0x0, Size: 0x8]
	FName PackageName;//[Offset: 0x8, Size: 0x8]
	FName PackagePath;//[Offset: 0x10, Size: 0x8]
	FName AssetName;//[Offset: 0x18, Size: 0x8]
	FName AssetClass;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: LightLowClass_C.Object
	LightLowStruct DeviceLowData;//[Offset: 0x28, Size: 0xc4]

--------------------------------
Class: LightLowStruct
	float SunIntensity_8_1FF8914C4148BC1391C34F903EB92A0C;//[Offset: 0x0, Size: 0x4]
	LinearColor SunLightColor_9_B19BF2624E32A2A369329BA76007AD4E;//[Offset: 0x4, Size: 0x10]
	float SkyLitIntensity_12_1B4CF4A748DD0FBC620167B88F365C45;//[Offset: 0x14, Size: 0x4]
	LinearColor SkyLitColor_13_CCCAB5A549E46D49B4672EA64CF9C1CA;//[Offset: 0x18, Size: 0x10]
	float SunIntensity_2_61_5A33D52C4E265D40E832D69FE7C257AF;//[Offset: 0x28, Size: 0x4]
	LinearColor SunLightColor_2_63_48D2BEFF4428037390FD34A1406265DB;//[Offset: 0x2c, Size: 0x10]
	float SkyLitIntensity_2_62_E7DA84EB4B124FB0F6257BBDF0FC83FC;//[Offset: 0x3c, Size: 0x4]
	LinearColor SkyLitColor_2_64_ABC527D6405EE3B21E6633A5F8BC50E3;//[Offset: 0x40, Size: 0x10]
	AIRequestID -------Fog--------_71_1EAE46794AC6312DB9CF53BC95B0897A;//[Offset: 0x50, Size: 0x4]
	bool UseSeparateFog_67_4EF5B1D649E253A6479C5DB2C62DE7D9;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	AIRequestID ------1-------_90_0CCDAF9941D7662E7E236FAEDFB09D18;//[Offset: 0x58, Size: 0x4]
	float FogDensity_00_94_8C0F960846A95D90E8CA19A06447C204;//[Offset: 0x5c, Size: 0x4]
	LinearColor FogColor_00_95_F738C4674FC846B15EA330B0A8AB8131;//[Offset: 0x60, Size: 0x10]
	float FogFalloff_00_96_581564EA46919C35FC53708F2D0EC034;//[Offset: 0x70, Size: 0x4]
	float FogOpacity_00_97_96F70833415F7278B78A07A08FF54E5A;//[Offset: 0x74, Size: 0x4]
	float FogStartDistance_00_98_8AC353F94D7A0F2D38FB43B3ECC2D63D;//[Offset: 0x78, Size: 0x4]
	AIRequestID ------2-------_93_E6C04FF7479DD6EC17864298472A9A25;//[Offset: 0x7c, Size: 0x4]
	float FogDensity_01_101_FE45FE894E118BE9ED290CA776CF75B1;//[Offset: 0x80, Size: 0x4]
	LinearColor FogColor_01_110_B530F472486DC9EBEE4C4A8E3EBB91F5;//[Offset: 0x84, Size: 0x10]
	float FogFalloff_01_105_5EFED21945501310751A2BAB3FE31160;//[Offset: 0x94, Size: 0x4]
	float FogOpacity_01_107_B06A8F66498EC6A0AC4A05B3A4C02500;//[Offset: 0x98, Size: 0x4]
	float FogStartDistance_01_109_BF3FFFC54D83594A85B88AA2D918F9D5;//[Offset: 0x9c, Size: 0x4]
	AIRequestID ------3-------_125_A5E25B36488CF381CFB0209F071646EF;//[Offset: 0xa0, Size: 0x4]
	float FogDensity_02_119_1C81C3D543250AAB42D5B0A4BD7D7DE6;//[Offset: 0xa4, Size: 0x4]
	LinearColor FogColor_02_124_C0A42A1C43ED27FC227998A68B5B4BD9;//[Offset: 0xa8, Size: 0x10]
	float FogFalloff_02_121_1D5AA72546C3DC8282BC34B0ABC5A9AA;//[Offset: 0xb8, Size: 0x4]
	float FogOpacity_02_122_74703A524C6679B8AE863980E68D0355;//[Offset: 0xbc, Size: 0x4]
	float FogStartDistance_02_123_BE1550424FF3FCE64EC459B5C2AB0C9B;//[Offset: 0xc0, Size: 0x4]

--------------------------------
Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 0x4]

--------------------------------
Class: Lab_RegionLeveMap_C.PrimaryDataAsset.DataAsset.Object
	<int,FString> Map;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	byte SourceType;//[Offset: 0x26c, Size: 0x1]
	TextureCube* CubeMap;//[Offset: 0x270, Size: 0x8]
	float SourceCubemapAngle;//[Offset: 0x278, Size: 0x4]
	int CubemapResolution;//[Offset: 0x27c, Size: 0x4]
	float SkyDistanceThreshold;//[Offset: 0x280, Size: 0x4]
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284, Size: 0x1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x285, Size: 0x1]
	LinearColor LowerHemisphereColor;//[Offset: 0x288, Size: 0x10]
	TextureCube* CubeMapSecond;//[Offset: 0x298, Size: 0x8]
	LinearColor LowerHemisphereColorSecond;//[Offset: 0x2a0, Size: 0x10]
	float IntensitySecond;//[Offset: 0x2b0, Size: 0x4]
	Color LightColorSecond;//[Offset: 0x2b4, Size: 0x4]
	LightingChannels LightingChannels;//[Offset: 0x2b8, Size: 0x1]
	float OcclusionMaxDistance;//[Offset: 0x2bc, Size: 0x4]
	float Contrast;//[Offset: 0x2c0, Size: 0x4]
	float OcclusionExponent;//[Offset: 0x2c4, Size: 0x4]
	float MinOcclusion;//[Offset: 0x2c8, Size: 0x4]
	Color OcclusionTint;//[Offset: 0x2cc, Size: 0x4]
	byte OcclusionCombineMode;//[Offset: 0x2d0, Size: 0x1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x418, Size: 0x8]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x47931e0
	void SetSourceCubemapAngle(float NewValue);// 0x4793164
	void SetOcclusionTint(out const Color InTint);// 0x47930dc
	void SetOcclusionExponent(float InOcclusionExponent);// 0x4793060
	void SetOcclusionContrast(float InOcclusionContrast);// 0x4792fe4
	void SetMinOcclusion(float InMinOcclusion);// 0x4792f68
	void SetLowerHemisphereColorSecond(out const LinearColor InLowerHemisphereColor);// 0x4792ee0
	void SetLowerHemisphereColor(out const LinearColor InLowerHemisphereColor);// 0x4792e58
	void SetLightColorSecond(LinearColor NewLightColor);// 0x4792ddc
	void SetLightColor(LinearColor NewLightColor);// 0x4792d60
	void SetIntensitySecond(float NewIntensity);// 0x4792ce4
	void SetIntensity(float NewIntensity);// 0x4792c68
	void SetIndirectLightingIntensity(float NewIntensity);// 0x4792bec
	void SetCubemapSecond(TextureCube* NewCubemap);// 0x4792b70
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction);// 0x4792a80
	void SetCubemap(TextureCube* NewCubemap);// 0x4792a04
	void RecaptureSky();// 0x47929f0

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x248, Size: 0x10]
	float Intensity;//[Offset: 0x258, Size: 0x4]
	Color LightColor;//[Offset: 0x25c, Size: 0x4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x260, Size: 0x1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x260, Size: 0x1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x260, Size: 0x1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x260, Size: 0x1]
	float IndirectLightingIntensity;//[Offset: 0x264, Size: 0x4]
	float VolumetricScatteringIntensity;//[Offset: 0x268, Size: 0x4]
	void SetCastShadows(bool bNewValue);// 0x46d7c64
	LinearColor GetLightColor();// 0x46d7c2c

--------------------------------
Class: LightningPreset_C.Object
	void ApplyOnMaterial();// 0x33e07d0
	Vector2D PositionMin;//[Offset: 0x28, Size: 0x8]
	Vector2D PositionMax;//[Offset: 0x30, Size: 0x8]
	Vector2D RadiusMinMax;//[Offset: 0x38, Size: 0x8]
	Vector2D IntensityMinMax;//[Offset: 0x40, Size: 0x8]
	LinearColor Color;//[Offset: 0x48, Size: 0x10]
	float Clouds;//[Offset: 0x58, Size: 0x4]
	float Scattering;//[Offset: 0x5c, Size: 0x4]
	float SkyLight;//[Offset: 0x60, Size: 0x4]
	Vector2D DelayMinMax;//[Offset: 0x64, Size: 0x8]

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x331, Size: 0x1]
	float OcclusionMaskDarkness;//[Offset: 0x334, Size: 0x4]
	float OcclusionDepthRange;//[Offset: 0x338, Size: 0x4]
	Vector LightShaftOverrideDirection;//[Offset: 0x33c, Size: 0xc]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x348, Size: 0x4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x34c, Size: 0x4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x350, Size: 0x4]
	int DynamicShadowCascades;//[Offset: 0x354, Size: 0x4]
	float[] EachShadowCascadesDistance;//[Offset: 0x358, Size: 0x10]
	float[] EachShadowCascadesClipThreshold;//[Offset: 0x368, Size: 0x10]
	float CascadeDistributionExponent;//[Offset: 0x378, Size: 0x4]
	float CascadeTransitionFraction;//[Offset: 0x37c, Size: 0x4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x380, Size: 0x4]
	bool bCloseFitShadowBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x384, Size: 0x1]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x384, Size: 0x1]
	int FarShadowCascadeCount;//[Offset: 0x388, Size: 0x4]
	float FarShadowDistance;//[Offset: 0x38c, Size: 0x4]
	float MobileCSMShadowFrustumScale;//[Offset: 0x390, Size: 0x4]
	Color CustomShadowColor;//[Offset: 0x394, Size: 0x4]
	Color CustomShadowColorFar;//[Offset: 0x398, Size: 0x4]
	float CustomShadowColorTransition;//[Offset: 0x39c, Size: 0x4]
	float SpecularInShadow;//[Offset: 0x3a0, Size: 0x4]
	float SpecularMultiplier;//[Offset: 0x3a4, Size: 0x4]
	float LightSourceAngle;//[Offset: 0x3a8, Size: 0x4]
	float LightSourceSoftAngle;//[Offset: 0x3ac, Size: 0x4]
	float TraceDistance;//[Offset: 0x3b0, Size: 0x4]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b4, Size: 0x1]
	int AtmosphereSunLightIndex;//[Offset: 0x3b8, Size: 0x4]
	LinearColor AtmosphereSunDiskColorScale;//[Offset: 0x3bc, Size: 0x10]
	bool bPerPixelAtmosphereTransmittance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3cc, Size: 0x1]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3cc, Size: 0x1]
	Color ModulatedShadowColor;//[Offset: 0x3d0, Size: 0x4]
	ACESParameter[] ACESParameters;//[Offset: 0x3d8, Size: 0x10]
	float PCFShadowBias;//[Offset: 0x3e8, Size: 0x4]
	void SetSpecularMultiplier(float NewValue);// 0x4609814
	void SetSpecularInShadow(float NewValue);// 0x4609798
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x460971c
	void SetOcclusionMaskDarkness(float NewValue);// 0x46096a0
	void SetMobileCSMShadowFrustumScale(float NewValue);// 0x4609624
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x46095a8
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x4609524
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x46094a8
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x460942c
	void SetDynamicShadowCascades(int NewValue);// 0x46093b0
	void SetCustomShadowColorTransition(float NewValue);// 0x4609334
	void SetCustomShadowColorFar(LinearColor NewCustomShadowColorFar, bool srgb);// 0x4609274
	void SetCustomShadowColor(LinearColor NewCustomShadowColor, bool srgb);// 0x46091b4
	void SetCascadeTransitionFraction(float NewValue);// 0x4609138
	void SetCascadeDistributionExponent(float NewValue);// 0x46090bc
	void SetAtmosphereSunLightIndex(int NewValue);// 0x4609040
	void SetAtmosphereSunLight(bool bNewValue);// 0x4608fbc
	float GetSpecularMultiplier();// 0x4608f88
	float GetSpecularInShadow();// 0x4608f54
	float GetCustomShadowColorTransition();// 0x4608f20
	LinearColor GetCustomShadowColorFar();// 0x4608ee8
	LinearColor GetCustomShadowColor();// 0x4608eb0

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x26c, Size: 0x4]
	float MaxDrawDistance;//[Offset: 0x270, Size: 0x4]
	float MaxDistanceFadeRange;//[Offset: 0x274, Size: 0x4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 0x1]
	float SpecularScale;//[Offset: 0x280, Size: 0x4]
	float DistanceAttenuationCoef;//[Offset: 0x284, Size: 0x4]
	float DiffuseScale;//[Offset: 0x288, Size: 0x4]
	float ShadowResolutionScale;//[Offset: 0x28c, Size: 0x4]
	float ShadowBias;//[Offset: 0x290, Size: 0x4]
	float ShadowSharpen;//[Offset: 0x294, Size: 0x4]
	int LightPriority;//[Offset: 0x298, Size: 0x4]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29c, Size: 0x1]
	bool bForceCachedShadowsForMovablePrimitives;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x29c, Size: 0x1]
	bool bForceDisableCSMShadowCache;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x29c, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x29d, Size: 0x1]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29e, Size: 0x1]
	float BloomScale;//[Offset: 0x2a0, Size: 0x4]
	float BloomThreshold;//[Offset: 0x2a4, Size: 0x4]
	Color BloomTint;//[Offset: 0x2a8, Size: 0x4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x46d6b8c
	void SetTemperature(float NewTemperature);// 0x46d6b10
	void SetShadowBias(float NewValue);// 0x46d6a94
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x46d69d4
	void SetIntensity(float NewIntensity);// 0x46d6958
	void SetIndirectLightingIntensity(float NewIntensity);// 0x46d68dc
	void SetForceDisableCSMShadowCache(bool bNewValue);// 0x46d6858
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);// 0x46d67d4
	void SetEnableLightShaftBloom(bool bNewValue);// 0x46d6750
	void SetBloomTint(Color NewValue);// 0x46d66d8
	void SetBloomThreshold(float NewValue);// 0x46d665c
	void SetBloomScale(float NewValue);// 0x46d65e0

--------------------------------
Class: ACESParameter
	LinearColor TintColor;//[Offset: 0x0, Size: 0x10]
	float Bright;//[Offset: 0x10, Size: 0x4]
	float Gray;//[Offset: 0x14, Size: 0x4]
	float ShoulderStrength;//[Offset: 0x18, Size: 0x4]
	float ToeStrength;//[Offset: 0x1c, Size: 0x4]
	float LinearStrength;//[Offset: 0x20, Size: 0x4]
	float LinearAngle;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: BP_LightManage_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x340, Size: 0x8]
	void UserConstructionScript();// 0x33e07d0
	void WeatherSelection(FString WeatherID);// 0x33e07d0
	void SyncHeightFog();// 0x33e07d0
	void SaveWeather(FString WeatherIndex);// 0x33e07d0
	void WeatherLogin(FString WeatherID, bool NoError);// 0x33e07d0
	void OpenPPV();// 0x33e07d0
	void ReWrite();// 0x33e07d0
	void OpenWeatherSource();// 0x33e07d0
	void BPE_LoadAsset();// 0x33e07d0
	void SwitchParticles();// 0x33e07d0
	void ReceiveBeginPlay();// 0x33e07d0
	void ReceiveTick(float DeltaSeconds);// 0x33e07d0
	void WeatherGlobalSwitch(bool Switch);// 0x33e07d0
	void SkyLightControl(bool IsOpen);// 0x33e07d0
	void WhenLogin();// 0x33e07d0
	void EnterAircraft();// 0x33e07d0
	void LeaveAircraft();// 0x33e07d0
	void Level(FName LevelName, bool isLoad, bool IsVisible);// 0x33e07d0
	void ExecuteUbergraph_BP_LightManage(int EntryPoint, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable1, bool Temp_bool_Variable, int CallFunc_Add_IntInt_ReturnValue1, int Temp_int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int Temp_int_Array_Index_Variable1, FString K2Node_Event_WeatherID1, FString K2Node_Event_WeatherIndex, FString K2Node_Event_WeatherID, bool K2Node_Event_NoError, DirectionalLight*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, SkyLight*[] CallFunc_GetAllActorsOfClass_OutActors1, bool CallFunc_Less_IntInt_ReturnValue, SkyLight* CallFunc_Array_Get_Item, bool CallFunc_ActorHasTag_ReturnValue, int CallFunc_Array_Length_ReturnValue1, int Temp_int_Array_Index_Variable2, bool CallFunc_Less_IntInt_ReturnValue1, DirectionalLight* CallFunc_Array_Get_Item1, bool CallFunc_ActorHasTag_ReturnValue1, bool CallFunc_ActorHasTag_ReturnValue2, Pawn* CallFunc_GetPlayerPawn_ReturnValue, float K2Node_Event_DeltaSeconds, bool CallFunc_IsValid_ReturnValue1, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool K2Node_Event_Switch, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool K2Node_CustomEvent_IsOpen, ExponentialHeightFog*[] CallFunc_GetAllActorsOfClass_OutActors2, ExponentialHeightFog* CallFunc_Array_Get_Item2, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_ActorHasTag_ReturnValue3, float K2Node_Select_Default, FName K2Node_Event_LevelName, bool K2Node_Event_isLoad, bool K2Node_Event_isVisible, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult1, bool CallFunc_K2_SetActorLocation_ReturnValue1, bool CallFunc_IsValid_ReturnValue2);// 0x33e07d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x348, Size: 0x8]
	ExponentialHeightFog* Fogs;//[Offset: 0x350, Size: 0x8]
	bool isvol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	DirectionalLight* SunActor;//[Offset: 0x360, Size: 0x8]
	SkyLight* SkyLightActor;//[Offset: 0x368, Size: 0x8]
	float FogDensityPev;//[Offset: 0x370, Size: 0x4]
	float AddFogDensity;//[Offset: 0x374, Size: 0x4]
	BP_XDWeather_C* XdwREF;//[Offset: 0x378, Size: 0x8]
	PostProcessVolume* PostVolume;//[Offset: 0x380, Size: 0x8]
	ExponentialHeightFog* TickFog02;//[Offset: 0x388, Size: 0x8]
	bool InAircraft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	DirectionalLight* SunActor_CsBuilding;//[Offset: 0x398, Size: 0x8]

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x340, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1]
	void ToggleEnabled();// 0x46d5dac
	void SetLightColor(LinearColor NewLightColor);// 0x46d5d30
	void SetEnabled(bool bSetEnabled);// 0x46d5cac
	void SetCastShadows(bool bNewValue);// 0x46d5c28
	void SetBrightness(float NewBrightness);// 0x46d5bac
	void OnRep_bEnabled();// 0x46d5b90
	bool IsEnabled();// 0x46d5b58
	LinearColor GetLightColor();// 0x46d5b20
	float GetBrightness();// 0x46d5aec

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x340, Size: 0x8]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1]
	void OnRep_bEnabled();// 0x4792414

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x380, Size: 0x570]
	float Priority;//[Offset: 0x8f0, Size: 0x4]
	float BlendRadius;//[Offset: 0x8f4, Size: 0x4]
	float BlendWeight;//[Offset: 0x8f8, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8fc, Size: 0x1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8fc, Size: 0x1]
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x474e560

--------------------------------
Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x250, Size: 0x570]
	float Priority;//[Offset: 0x7c0, Size: 0x4]
	float BlendRadius;//[Offset: 0x7c4, Size: 0x4]
	float BlendWeight;//[Offset: 0x7c8, Size: 0x4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cc, Size: 0x1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cc, Size: 0x1]
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x474de54

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xf0, Size: 0x98]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x188, Size: 0x1]
	void Stop();// 0x47b6108
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x47b6054
	void SetTimelineLengthMode(byte NewLengthMode);// 0x47b5fd8
	void SetTimelineLength(float NewLength);// 0x47b5f5c
	void SetPlayRate(float NewRate);// 0x47b5ee0
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x47b5dd4
	void SetNewTime(float NewTime);// 0x47b5d58
	void SetLooping(bool bNewLooping);// 0x47b5cd4
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x47b5c20
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x47b5b9c
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x47b5ae8
	void ReverseFromEnd();// 0x47b5ad4
	void Reverse();// 0x47b5ac0
	void PlayFromStart();// 0x47b5aac
	void Play();// 0x47b5a98
	void OnRep_Timeline();// 0x47b5a84
	bool IsReversing();// 0x47b5a4c
	bool IsPlaying();// 0x47b5a14
	bool IsLooping();// 0x47b59dc
	float GetTimelineLength();// 0x47b59a8
	float GetPlayRate();// 0x47b5974
	float GetPlaybackPosition();// 0x47b5940
	bool GetIgnoreTimeDilation();// 0x47b5908

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	float Length;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0x10]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0x10]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 0x10]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 0x10]
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 0x10]
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 0x10]
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8]
	Property* DirectionProperty;//[Offset: 0x90, Size: 0x8]

--------------------------------
Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4]
	delegate EventFunc;//[Offset: 0x4, Size: 0x10]

--------------------------------
Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8]
	StructProperty* VectorProperty;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8]
	FloatProperty* FloatProperty;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: FloatProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: NumericProperty.Property.Field.Object

--------------------------------
Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8]
	StructProperty* LinearColorProperty;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: XDWeatherLightStruct
	float SunIntensity;//[Offset: 0x0, Size: 0x4]
	LinearColor SunLightColor;//[Offset: 0x4, Size: 0x10]
	LinearColor SunShadowColor;//[Offset: 0x14, Size: 0x10]
	LinearColor SunShadowColorFar;//[Offset: 0x24, Size: 0x10]
	float ShadowColorTransition;//[Offset: 0x34, Size: 0x4]
	TextureCube* SkyLitHDR;//[Offset: 0x38, Size: 0x8]
	float SkyLitIntensity;//[Offset: 0x40, Size: 0x4]
	LinearColor SkyLitColor;//[Offset: 0x44, Size: 0x10]
	LinearColor LowerHemisphereColor;//[Offset: 0x54, Size: 0x10]
	Texture* SkyTexture;//[Offset: 0x68, Size: 0x8]
	float SkyTextureRotation;//[Offset: 0x70, Size: 0x4]
	LinearColor CBD_GI;//[Offset: 0x74, Size: 0x10]
	LinearColor CBD_Sun;//[Offset: 0x84, Size: 0x10]
	LinearColor CBD_Sky;//[Offset: 0x94, Size: 0x10]
	LinearColor CBD_LF;//[Offset: 0xa4, Size: 0x10]

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
Class: NavigationData.Actor.Object
	NavDataConfig NavDataConfig;//[Offset: 0x348, Size: 0x68]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b0, Size: 0x1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3b0, Size: 0x1]
	enum RuntimeGeneration;//[Offset: 0x3b1, Size: 0x1]
	float ObservedPathsTickInterval;//[Offset: 0x3b4, Size: 0x4]
	uint32 DataVersion;//[Offset: 0x3b8, Size: 0x4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x480, Size: 0x10]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8]
	Color Color;//[Offset: 0x38, Size: 0x4]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x8]
	SoftClassPath NavigationDataClassName;//[Offset: 0x50, Size: 0x18]

--------------------------------
Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10]
	int AreaId;//[Offset: 0x10, Size: 0x4]
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8]

--------------------------------
Class: BP_ToaaPlayerController_C.ToaaPlayerController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x930, Size: 0x8]
	void GetParbolaFixX(Vector InStartPoint, Vector InTargetPoint, float InSpeedX, out float A, out float B, out float C, out float Time, out float OutSpeedY, float EqB, float EqA, float Speed, float Gravity, float SpeedY, Vector DeltaVector, float TotalTime, float DeltaLength, float DeltaHeight, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_VSize_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue1, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue, float K2Node_MathExpression_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue1, float CallFunc_Sqrt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue5, float K2Node_MathExpression_ReturnValue1);// 0x33e07d0
	void GetParbola(Vector InStartPoint, Vector InTargetPoint, float Speed, float InputG, out float A, out float B, out float C, out float Time, out float OutSpeedX, float FlyTime, float SpeedX, float TmpB2, float TmpB1, float gl, float sq, float v2, float G, float EqB, float EqA, float DeltaHeight, float DeltaLength, Vector DeltaVector, Vector TargetPoint, Vector CallFunc_Subtract_VectorVector_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float K2Node_MathExpression_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Vector CallFunc_GreaterGreater_VectorRotator_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_DegAtan_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_DegCos_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue1, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Square_ReturnValue, float K2Node_MathExpression_ReturnValue1, float K2Node_MathExpression_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3, float CallFunc_Square_ReturnValue1, float CallFunc_Square_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue4, float CallFunc_MultiplyMultiply_FloatFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue5, float CallFunc_DegTan_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float K2Node_MathExpression_ReturnValue3, float K2Node_MathExpression_ReturnValue4, float CallFunc_Multiply_FloatFloat_ReturnValue6, float CallFunc_Square_ReturnValue3, float K2Node_MathExpression_ReturnValue5, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float K2Node_MathExpression_ReturnValue6, float CallFunc_Square_ReturnValue4, float CallFunc_Multiply_FloatFloat_ReturnValue8, float K2Node_MathExpression_ReturnValue7, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue1, float CallFunc_Sqrt_ReturnValue);// 0x33e07d0
	void SetTouchInterfaceEnable(bool Enable);// 0x33e07d0
	void CheckPointPath(out Vector[] Points, float Radius, float HalfHeight, out bool Result, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue1, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, Vector CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue1, bool CallFunc_BooleanAND_ReturnValue, const Actor*[] Temp_object_Variable, HitResult CallFunc_CapsuleTraceSingleByProfile_OutHit, bool CallFunc_CapsuleTraceSingleByProfile_ReturnValue);// 0x33e07d0
	void DrawPointPath(out Vector[] Points, LinearColor LineColor, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue1, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, Vector CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue1, bool CallFunc_BooleanAND_ReturnValue);// 0x33e07d0
	void GetPointPath(Vector Start, Vector End, Vector A, Vector B, Vector C, Vector D, out Vector[] Result1, out Vector[] Result2, Vector[] Result2Path, Vector[] Result1Path, int Mask, Vector[] K2Node_MakeArray_Array, Vector[] K2Node_MakeArray_Array1, Vector[] K2Node_MakeArray_Array2, Vector[] K2Node_MakeArray_Array3, Vector[] K2Node_MakeArray_Array4, Vector[] K2Node_MakeArray_Array5, Vector[] K2Node_MakeArray_Array6, Vector[] K2Node_MakeArray_Array7, Vector[] K2Node_MakeArray_Array8, Vector[] K2Node_MakeArray_Array9, Vector[] K2Node_MakeArray_Array10, Vector[] K2Node_MakeArray_Array11, Vector[] K2Node_MakeArray_Array12, Vector[] K2Node_MakeArray_Array13, Vector[] K2Node_MakeArray_Array14, Vector[] K2Node_MakeArray_Array15, bool K2Node_SwitchInteger_CmpSuccess, Vector[] K2Node_MakeArray_Array16, Vector[] K2Node_MakeArray_Array17, Vector[] K2Node_MakeArray_Array18, Vector[] K2Node_MakeArray_Array19, Vector[] K2Node_MakeArray_Array20, Vector[] K2Node_MakeArray_Array21, Vector[] K2Node_MakeArray_Array22, Vector[] K2Node_MakeArray_Array23, Vector[] K2Node_MakeArray_Array24, bool K2Node_SwitchInteger1_CmpSuccess, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue1, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue3, float CallFunc_PointOfLineSide_result, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_PointOfLineSide_result1, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_PointOfLineSide_result2, bool CallFunc_Less_FloatFloat_ReturnValue1, float CallFunc_PointOfLineSide_result3, bool CallFunc_Greater_FloatFloat_ReturnValue1);// 0x33e07d0
	void PointOfLineSide(Vector P0, Vector LineP1, Vector LineP2, out float Result, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X1, float CallFunc_BreakVector_Y1, float CallFunc_BreakVector_Z1, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue1, float CallFunc_Subtract_FloatFloat_ReturnValue1, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue1, float CallFunc_Subtract_FloatFloat_ReturnValue2);// 0x33e07d0
	void ToWorldBound(Transform LocalToWorldTransform, Vector LocalOrigin, Vector LocalExtent, float Radius, float Z, out Vector Center, out Vector Extent, out Rotator Rotation, out Vector A, out Vector B, out Vector C, out Vector D, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_TransformLocation_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_Multiply_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue1, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue1, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue1, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue1, Vector CallFunc_TransformLocation_ReturnValue1, Vector CallFunc_TransformLocation_ReturnValue2, float CallFunc_BreakVector_X1, float CallFunc_BreakVector_Y1, float CallFunc_BreakVector_Z1, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_MakeVector_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue3, Vector CallFunc_MakeVector_ReturnValue4, Vector CallFunc_MakeVector_ReturnValue5, Vector CallFunc_Add_VectorVector_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue3, Vector CallFunc_TransformLocation_ReturnValue3, Vector CallFunc_TransformLocation_ReturnValue4, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, Vector CallFunc_MakeVector_ReturnValue6, Vector CallFunc_MakeVector_ReturnValue7);// 0x33e07d0
	void MoveToTest(Vector LocalEnd, Vector LocalStart, Vector LocalExtent, Vector LocalOrigin, Transform LocalToWorldTransform, float VaultHeight, const Actor*[] Temp_object_Variable, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, CapsuleComponent* K2Node_DynamicCast_AsCapsule_Collision, bool K2Node_DynamicCast_bSuccess, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_GetScaledCapsuleHalfHeight_ReturnValue, float CallFunc_GetScaledCapsuleRadius_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_ToWorldBound_Center, Vector CallFunc_ToWorldBound_Extent, Rotator CallFunc_ToWorldBound_Rotation, Vector CallFunc_ToWorldBound_A, Vector CallFunc_ToWorldBound_B, Vector CallFunc_ToWorldBound_C, Vector CallFunc_ToWorldBound_D, Vector[] CallFunc_GetPointPath_Result1, Vector[] CallFunc_GetPointPath_Result2, Vector CallFunc_GetActorForwardVector_ReturnValue, bool CallFunc_CheckPointPath_Result, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue1, bool CallFunc_CheckPointPath_Result1, HitResult CallFunc_CapsuleTraceSingleByProfile_OutHit, bool CallFunc_CapsuleTraceSingleByProfile_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, InstancedStaticMeshComponent* K2Node_DynamicCast_AsInstanced_Static_Mesh_Component, bool K2Node_DynamicCast_bSuccess1, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess2, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, BoxSphereBounds CallFunc_GetBounds_ReturnValue, BoxSphereBounds CallFunc_GetImportedBounds_ReturnValue, Transform CallFunc_GetInstanceTransform_OutInstanceTransform, bool CallFunc_GetInstanceTransform_ReturnValue, StaticMeshComponent* K2Node_DynamicCast_AsStatic_Mesh_Component, bool K2Node_DynamicCast_bSuccess3, Transform CallFunc_K2_GetComponentToWorld_ReturnValue1, BoxSphereBounds CallFunc_GetBounds_ReturnValue1);// 0x33e07d0
	void UserConstructionScript();// 0x33e07d0
	void ExecuteUbergraph_BP_ToaaPlayerController(int EntryPoint);// 0x33e07d0

--------------------------------
Class: ToaaPlayerController.PlayerController.Controller.Actor.Object
	delegate OnTakeDamagedDelegate;//[Offset: 0x680, Size: 0x10]
	delegate OnActivateTouchInterface;//[Offset: 0x690, Size: 0x10]
	delegate OnUpdateVirtualJoystick;//[Offset: 0x6a0, Size: 0x10]
	delegate OnTimesOfDayChangeDelegate;//[Offset: 0x6b0, Size: 0x10]
	delegate OnTiggerFastClimbDownArea;//[Offset: 0x6c0, Size: 0x10]
	delegate OnJoystickTouchStartDelegate;//[Offset: 0x700, Size: 0x10]
	delegate OnJoystickTouchMovedDelegate;//[Offset: 0x710, Size: 0x10]
	delegate OnJoystickTouchEndedDelegate;//[Offset: 0x720, Size: 0x10]
	delegate OnUpdateMusicPeekValue;//[Offset: 0x730, Size: 0x10]
	byte CameraMode;//[Offset: 0x770, Size: 0x1]
	byte CameraExtraMode;//[Offset: 0x771, Size: 0x1]
	float AimPitchFactor;//[Offset: 0x774, Size: 0x4]
	float AimYawFactor;//[Offset: 0x778, Size: 0x4]
	float AutoAimFactor;//[Offset: 0x77c, Size: 0x4]
	float NoRespondArea;//[Offset: 0x780, Size: 0x4]
	float JoystickSprintDistanceThreshold;//[Offset: 0x784, Size: 0x4]
	float JoystickSprintAngleThreshold;//[Offset: 0x788, Size: 0x4]
	float JoystickShowAutoSprintDistanceThreshold;//[Offset: 0x78c, Size: 0x4]
	float JoystickShowAutoSprintAngleThreshold;//[Offset: 0x790, Size: 0x4]
	float JoystickSprintBtnHeight;//[Offset: 0x794, Size: 0x4]
	float JoystickSprintBtnSize;//[Offset: 0x798, Size: 0x4]
	float JoystickFastClimbDownDis;//[Offset: 0x79c, Size: 0x4]
	float JoystickFastClimbDownAngle;//[Offset: 0x7a0, Size: 0x4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveDis;//[Offset: 0x7a8, Size: 0x8]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveSpeed;//[Offset: 0x7b0, Size: 0x8]
	float MaxCacheTouchDeltaCount;//[Offset: 0x7b8, Size: 0x4]
	float AngleSmoothSpeed;//[Offset: 0x7bc, Size: 0x4]
	float MaxRotationPitch;//[Offset: 0x7c0, Size: 0x4]
	float MaxRotationYaw;//[Offset: 0x7c4, Size: 0x4]
	float FilterSmallTouchDeltaThreshold;//[Offset: 0x7c8, Size: 0x4]
	int UseMotionControlType;//[Offset: 0x7cc, Size: 0x4]
	SensibilityConfig SensibilityConfig;//[Offset: 0x7d0, Size: 0x6c]
	SensibilityConfig SensibilityConfig_PC;//[Offset: 0x83c, Size: 0x6c]
	bool bDebugCameraAutoRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8a8, Size: 0x1]
	bool SetControllerRotationByActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x928, Size: 0x1]
	void StartListenMusicPeek();// 0x2f9ef74
	void SetVirtualJoystickVisualSize(out const Vector2D VisualSize);// 0x2f9eeec
	void SetVirtualJoystickThumbSize(out const Vector2D ThumbSize);// 0x2f9ee64
	void SetVirtualJoystickInteractionSize(out const Vector2D InteractionSize);// 0x2f9eddc
	void SetVirtualJoystickEnableAllLeftTouch(bool bEnable);// 0x2f9ed58
	void SetVirtualJoystickCenter(out const Vector2D Center);// 0x2f9ecd0
	void SetControlRotationYaw(float NewYaw);// 0x2f9ec54
	void SetControlRotationPitch(float NewPitch);// 0x2f9ebd8
	void SetAspectRatioAxisConstraint(out const FName InReason, int InPriority, byte InAspectRatioAxisConstraint);// 0x2f9eac4
	void ResetAspectRatioAxisConstraint(out const FName InReason, bool InImmeDo);// 0x2f9e9e4
	void OnUpdateVirtualJoystick__DelegateSignature(float CurThumbCenterDis, bool bIsTriggerSprint, bool bIsTriggerAutoSprintTips, bool bIsInTriggerRange);// 0x33e07d0
	void OnUpdateMusicPeekValue__DelegateSignature(float Peek);// 0x33e07d0
	void OnTimesOfDayChangeDelegate__DelegateSignature(int TimesOfDay);// 0x33e07d0
	void OnTimesOfDayChange(int TimesOfDay);// 0x2f9e968
	void OnTiggerFastClimbDownArea__DelegateSignature(bool bTriggerIn);// 0x33e07d0
	void OnTakeDamaged__DelegateSignature(float DamageAngel);// 0x33e07d0
	void OnSwitchCameraModeStartDelegate__DelegateSignature(byte CameraMode);// 0x33e07d0
	void OnSwitchCameraModeEndDelegate__DelegateSignature(byte CameraMode);// 0x33e07d0
	void OnJoystickTouchStartDelegate__DelegateSignature();// 0x33e07d0
	void OnJoystickTouchMovedDelegate__DelegateSignature();// 0x33e07d0
	void OnJoystickTouchEndedDelegate__DelegateSignature();// 0x33e07d0
	void OnActivateTouchInterface__DelegateSignature();// 0x33e07d0
	bool IsTouching();// 0x2f9e930
	Vector2D GetVirtualJoystickVisualSize();// 0x2f9e8fc
	Vector2D GetVirtualJoystickVisualCenter();// 0x2f9e8c8
	bool GetVirtualJoystickVisibility();// 0x2f9e890
	float GetVirtualJoystickSinAngle();// 0x2f9e85c
	Vector2D GetVirtualJoyStickRawDirect();// 0x2f9e828
	Vector2D GetVirtualJoystickInteractionSize();// 0x2f9e7f4
	Vector2D GetVirtualJoystickCenter();// 0x2f9e7c0
	bool GetUseMotionControlEnable();// 0x2f9e788
	Rotator GetSensibilityRate_PC();// 0x2f9e750
	Rotator GetSensibilityRate(bool bIsMotionControl);// 0x2f9e6c0
	void FireTakeDamagedEvent(out const Vector CauserLocation);// 0x2f9e638
	void EndListenMusicPeek();// 0x2f9e624
	void AddHitDamage(float Damage, bool IsHeadShot);// 0x2f9e564

--------------------------------
Class: SensibilityConfig
	SensibilityMode NormalMode;//[Offset: 0x0, Size: 0x20]
	SensibilityMode FireMode;//[Offset: 0x20, Size: 0x20]
	SensibilityMode MotionMode;//[Offset: 0x40, Size: 0x20]
	float VehicleEye;//[Offset: 0x60, Size: 0x4]
	float ParachuteEye;//[Offset: 0x64, Size: 0x4]
	float FPPEye;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: SensibilityMode
	float NoAim;//[Offset: 0x0, Size: 0x4]
	float Sight1X;//[Offset: 0x4, Size: 0x4]
	float Sight2X;//[Offset: 0x8, Size: 0x4]
	float Sight3X;//[Offset: 0xc, Size: 0x4]
	float Sight4X;//[Offset: 0x10, Size: 0x4]
	float Sight6X;//[Offset: 0x14, Size: 0x4]
	float Sight8X;//[Offset: 0x18, Size: 0x4]
	float FPPNoAim;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: BP_ToaaPlayerCameraManager_C.ToaaPlayerCameraManager.PlayerCameraManager.Actor.Object

--------------------------------
Class: ToaaPlayerCameraManager.PlayerCameraManager.Actor.Object
	delegate OnBecomeViewTarget;//[Offset: 0x29f8, Size: 0x10]
	delegate OnEndViewTarget;//[Offset: 0x2a08, Size: 0x10]
	PGWaterVirtualViewComponent* PGWaterVirtualViewComponent;//[Offset: 0x2a48, Size: 0x8]
	void ToggleCameraShakes();// 0x2f9cb1c
	void ToaaPlayWorldCameraShakeByPath(FString ShakePath, out const Vector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter, float ScopeScale);// 0x2f9c904
	void ToaaPlayWorldCameraShake(class CameraShake Shake, out const Vector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter, float ScopeScale);// 0x2f9c6fc
	void PrintAllCameraShakes();// 0x2f9c6e8
	PGWaterVirtualViewComponent* GetPGWaterVC();// 0x2f9c6b4
	float GetFOV();// 0x2f9c680
	void EnableCameraShakes();// 0x2f9c66c
	void DisableCameraShakes(bool bImmediate);// 0x2f9c5e8

--------------------------------
Class: PGWaterVirtualViewComponent.SceneComponent.ActorComponent.Object
	float minHeight;//[Offset: 0x248, Size: 0x4]
	float MaxPitch;//[Offset: 0x24c, Size: 0x4]
	float MinPitch;//[Offset: 0x250, Size: 0x4]
	float BackOffset;//[Offset: 0x254, Size: 0x4]
	float ExtraFOV;//[Offset: 0x258, Size: 0x4]
	float SpecialExtraFOV;//[Offset: 0x25c, Size: 0x4]
	float FOVThreshold;//[Offset: 0x260, Size: 0x4]
	float MinFOV;//[Offset: 0x264, Size: 0x4]
	float DefaultFOV;//[Offset: 0x268, Size: 0x4]
	float SpecialFOVThreshold;//[Offset: 0x26c, Size: 0x4]
	float SpecialMinFOV;//[Offset: 0x270, Size: 0x4]
	float DefaultDesiredFOV;//[Offset: 0x274, Size: 0x4]
	void SetUseDefaultFOV(FString InReason);// 0x2f21e0c
	void RemoveUseDefaultFOV(FString InReason);// 0x2f21d2c

--------------------------------
Class: BP_ToaaHUD_C.ToaaHUD.HUD.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x4c8, Size: 0x8]

--------------------------------
Class: ToaaHUD.HUD.Actor.Object
	HitPerformData HitPerform;//[Offset: 0x430, Size: 0x80]
	Texture2D* HUDMainTexture;//[Offset: 0x4b0, Size: 0x8]
	Texture2D* CrossHairDisableTexture;//[Offset: 0x4b8, Size: 0x8]
	Texture2D* SprintCrossHairTexture;//[Offset: 0x4c0, Size: 0x8]
	void SetCurrentDebugTargetActor(Actor* Target);// 0x2f95348
	void DebugDrawBoxSvrLoc(float InSvrLocX, float InSvrLocY, float InSvrLocZ, float InDuration, float InSizeScale);// 0x2f951e4

--------------------------------
Class: HitPerformData
	WeaponCrossHairIconData[] HitBodyIconList;//[Offset: 0x0, Size: 0x10]
	WeaponCrossHairIconData[] HitHeadIconList;//[Offset: 0x10, Size: 0x10]
	float DefaultSpread;//[Offset: 0x20, Size: 0x4]
	float DefaultOffset;//[Offset: 0x24, Size: 0x4]
	float DefaultAlpha;//[Offset: 0x28, Size: 0x4]
	float MaxSpread;//[Offset: 0x2c, Size: 0x4]
	float AddSpreadScale;//[Offset: 0x30, Size: 0x4]
	float SpreadIncreaseSpeed;//[Offset: 0x34, Size: 0x4]
	float AlphaIncreaseSpeed;//[Offset: 0x38, Size: 0x4]
	float AlphaIncreaseSpeedScale;//[Offset: 0x3c, Size: 0x4]
	float SpreadDecreaseSpeed;//[Offset: 0x40, Size: 0x4]
	float AlphaDecreaseSpeed;//[Offset: 0x44, Size: 0x4]
	float AlphaDecreaseSpeedScale;//[Offset: 0x48, Size: 0x4]
	LinearColor HitBodyDrawColor;//[Offset: 0x4c, Size: 0x10]
	LinearColor HitHeadDrawColor;//[Offset: 0x5c, Size: 0x10]
	float CurCrosshairSpread;//[Offset: 0x6c, Size: 0x4]
	float CurDrawAlpha;//[Offset: 0x70, Size: 0x4]
	float TargetCrosshairSpread;//[Offset: 0x74, Size: 0x4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool IsIncrease;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]

--------------------------------
Class: WeaponCrossHairIconData
	CanvasIcon2D icon;//[Offset: 0x0, Size: 0x18]
	float Alpha;//[Offset: 0x18, Size: 0x4]
	float Rotate;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: CanvasIcon2D
	Texture2D* Texture;//[Offset: 0x0, Size: 0x8]
	float U;//[Offset: 0x8, Size: 0x4]
	float V;//[Offset: 0xc, Size: 0x4]
	float UL;//[Offset: 0x10, Size: 0x4]
	float VL;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: IdeaDecalManager.Actor.Object
	<DecalBlock,MaterialInstanceDynamic*> DecalMaterialsLookupTable;//[Offset: 0x340, Size: 0x50]
	IdeaDecalRenderComponent*[] DecalComponents;//[Offset: 0x390, Size: 0x10]

--------------------------------
Class: DecalBlock
	MaterialInterface* DecalMaterial;//[Offset: 0x0, Size: 0x8]
	Texture* DecalTexure;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: IdeaDecalRenderComponent.RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: PlayerCharacter_C.LeadingPlayerCharacter.PlayerCharacter.BaseCharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x15a0, Size: 0x8]
	void UpdateWeatherPostFx(Object* Material, bool CallFunc_IsValid_ReturnValue, WeightedBlendable K2Node_MakeStruct_WeightedBlendable);// 0x33e07d0
	void __Test2(float CallFunc_GetImmersionDepth_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x33e07d0
	void __TestGetImmersionDepth(float InMaxDistance, out float OutImmersionDepth, out float OutDistanceUnderFeet, byte NewLocalVar, float RetDistanceUnderFeet, float RetImmersionDepth, const Actor*[] Temp_object_Variable, Vector CallFunc_MakeVector_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue1, float CallFunc_GetCapsuleHalfHeight_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue1, const byte[] K2Node_MakeArray_Array, FString CallFunc_Concat_StrStr_ReturnValue2, float CallFunc_GetCapsuleHalfHeight_ReturnValue1, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_MakeVector_ReturnValue1, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingleForObjects_OutHit, bool CallFunc_LineTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, FString CallFunc_Conv_FloatToString_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue1, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue1);// 0x33e07d0
	void UpdateWaterDropPostFx(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, WeightedBlendable K2Node_MakeStruct_WeightedBlendable);// 0x33e07d0
	WidgetComponent* GetBackUIComponent();// 0x33e07d0
	DirectionalLightComponent* GetDirLightComponent();// 0x33e07d0
	WidgetComponent* GetLeftUIComponent();// 0x33e07d0
	WidgetComponent* GetRightUIComponent();// 0x33e07d0
	SceneCaptureComponent2D* GetSceneCapture2D();// 0x33e07d0
	SpringArmComponent* GetCameraBoom();// 0x33e07d0
	CameraComponent* GetFollowCamera();// 0x33e07d0
	CameraComponent* GetFirstPersonCamera();// 0x33e07d0
	SpringArmComponent* GetFirstPersonSpringArm();// 0x33e07d0
	CameraComponent* GetScopeCamera();// 0x33e07d0
	SpringArmComponent* GetScopeSpringArm();// 0x33e07d0
	AkAudioEvent* GetSwitchWeaponSound(byte WeaponType, bool IsEquip, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum1_CmpSuccess);// 0x33e07d0
	void CreateTestWeapon();// 0x33e07d0
	void UserConstructionScript();// 0x33e07d0
	void Timeline_0__FinishedFunc();// 0x33e07d0
	void Timeline_0__UpdateFunc();// 0x33e07d0
	void ScopeTimeLine__FinishedFunc();// 0x33e07d0
	void ScopeTimeLine__UpdateFunc();// 0x33e07d0
	void TANodeTick(float Delta);// 0x33e07d0
	void TABeginPlay();// 0x33e07d0
	void ResetTimeline();// 0x33e07d0
	void ScopeInStop();// 0x33e07d0
	void PlayScopeInTimeLine(float Rate);// 0x33e07d0
	void OnUpdateAcceleration();// 0x33e07d0
	void ProgrammerBeginPlay();// 0x33e07d0
	void ReceiveTick(float DeltaSeconds);// 0x33e07d0
	void ReceiveBeginPlay();// 0x33e07d0
	void ExecuteUbergraph_PlayerCharacter(int EntryPoint, float CallFunc_RandomFloatInRange_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, int CallFunc_FTrunc_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue1, float K2Node_CustomEvent_Delta, float CallFunc_GetRMS_ReturnValue, float CallFunc_fn_MusicParaNormalize__maxRecordedVol_Out, float CallFunc_fn_MusicParaNormalize_NormalizedVolume, float K2Node_Event_rate, float K2Node_Event_DeltaSeconds);// 0x33e07d0
	OptimizeViewRotationComponent* OptimizeViewRotation;//[Offset: 0x15a8, Size: 0x8]
	CameraComponent* SelfieCamera;//[Offset: 0x15b0, Size: 0x8]
	AutoFireCrossHairCtrlComp* AutoFireCrossHairCtrlComp1;//[Offset: 0x15b8, Size: 0x8]
	BP_AvatarAudioComponent_C* AvatarAudioComponent;//[Offset: 0x15c0, Size: 0x8]
	WeaponCollisionComponent* WeaponCollision;//[Offset: 0x15c8, Size: 0x8]
	CameraComponent* ScopingCamera;//[Offset: 0x15d0, Size: 0x8]
	CameraComponent* FPPCamera;//[Offset: 0x15d8, Size: 0x8]
	BaseCustomSpringArmComponent* ScopingSpringArm;//[Offset: 0x15e0, Size: 0x8]
	BaseCustomSpringArmComponent* FPPCustomSpringArm;//[Offset: 0x15e8, Size: 0x8]
	PostProcessComponent* PostProcessWeather;//[Offset: 0x15f0, Size: 0x8]
	BlockingVolumeCheckComponent* BlockingVolumeCheck;//[Offset: 0x15f8, Size: 0x8]
	PostProcessComponent* PostProcessWaterDrop;//[Offset: 0x1600, Size: 0x8]
	XCameraUnderWaterFXComponent* XCameraUnderWaterFX;//[Offset: 0x1608, Size: 0x8]
	CameraComponent* TPPCamera;//[Offset: 0x1610, Size: 0x8]
	CustomSpringArmComponent* TPPSpringArm;//[Offset: 0x1618, Size: 0x8]
	SceneCaptureComponent2D* SceneCapture2D;//[Offset: 0x1620, Size: 0x8]
	DirectionalLightComponent* dirLightComponent;//[Offset: 0x1628, Size: 0x8]
	AutoAimComponent* AutoAim;//[Offset: 0x1630, Size: 0x8]
	Vault_C* Vault;//[Offset: 0x1638, Size: 0x8]
	UAECharacterAnimListComponent* CharacterAnimList_Skill;//[Offset: 0x1640, Size: 0x8]
	BaseFPPComponent* BaseFPP;//[Offset: 0x1648, Size: 0x8]
	UAECharacterAnimListComponent* CharacterAnimList_Base;//[Offset: 0x1650, Size: 0x8]
	WeaponManager* WeaponManager;//[Offset: 0x1658, Size: 0x8]
	byte Timeline_0__Direction_931661B6440BBC0B71358785F5EF75E8;//[Offset: 0x1660, Size: 0x1]
	TimelineComponent* Timeline;//[Offset: 0x1668, Size: 0x8]
	float ScopeTimeLine_NewTrack_0_FCEF32E14C8B6BF08BDE618D09DB48E7;//[Offset: 0x1670, Size: 0x4]
	byte ScopeTimeLine__Direction_FCEF32E14C8B6BF08BDE618D09DB48E7;//[Offset: 0x1674, Size: 0x1]
	TimelineComponent* ScopeTimeLine;//[Offset: 0x1678, Size: 0x8]
	GSTWeaponBase* GunTest;//[Offset: 0x1680, Size: 0x8]
	float RunningAcceleration;//[Offset: 0x1688, Size: 0x4]
	float RunningDeceleration;//[Offset: 0x168c, Size: 0x4]
	float RunningGroundFriction;//[Offset: 0x1690, Size: 0x4]
	bool IsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1694, Size: 0x1]
	Rotator LastVelocityRotation;//[Offset: 0x1698, Size: 0xc]
	Rotator LastMovementInputRotation;//[Offset: 0x16a4, Size: 0xc]
	bool HasMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b0, Size: 0x1]
	Vector MovementInput;//[Offset: 0x16b4, Size: 0xc]
	float MovementInput/VelocityDifference;//[Offset: 0x16c0, Size: 0x4]
	bool bLeftFoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c4, Size: 0x1]
	float BarrelTemperatureTempVar;//[Offset: 0x16c8, Size: 0x4]
	float BarrelTemperatureVar;//[Offset: 0x16cc, Size: 0x4]
	AkAudioBank*[] CharacterBankRefList;//[Offset: 0x16d0, Size: 0x10]
	float MaxRecordedVolOut;//[Offset: 0x16e0, Size: 0x4]
	float NormalizedVolume;//[Offset: 0x16e4, Size: 0x4]
	float MaxValue;//[Offset: 0x16e8, Size: 0x4]
	float ClothParaExp;//[Offset: 0x16ec, Size: 0x4]
	bool NeedGetRMS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f0, Size: 0x1]
	float TempRandom;//[Offset: 0x16f4, Size: 0x4]
	float SnowRenderCheckerTimer;//[Offset: 0x16f8, Size: 0x4]
	Actor*[] AllSnowRender;//[Offset: 0x1700, Size: 0x10]

--------------------------------
Class: LeadingPlayerCharacter.PlayerCharacter.BaseCharacter.Character.Pawn.Actor.Object
	SkeletalMeshComponent* UIMeshComponent;//[Offset: 0x1380, Size: 0x8]
	StaticMeshComponent* UISTMeshComponent;//[Offset: 0x1388, Size: 0x8]
	bool bIsGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1390, Size: 0x1]
	delegate OnEquipZoomScope;//[Offset: 0x1398, Size: 0x10]
	BaseFPPComponent* FPPComp;//[Offset: 0x13b0, Size: 0x8]
	PlayerGunCollosionComp* PlayerGunCollosionComp;//[Offset: 0x13b8, Size: 0x8]
	float LeavePronePowerStorageBlockTime;//[Offset: 0x13c0, Size: 0x4]
	float ScopeInAndHandFoldPitchMax;//[Offset: 0x13c4, Size: 0x4]
	float ScopeInAndHandFoldPitchMin;//[Offset: 0x13c8, Size: 0x4]
	class NavigationQueryFilter* FilterClass;//[Offset: 0x13d0, Size: 0x8]
	AutoAimComponent* AutoAimComponent;//[Offset: 0x13d8, Size: 0x8]
	OptimizeViewRotationComponent* OptimizeViewRotationComponent;//[Offset: 0x13e0, Size: 0x8]
	bool bIsUseArtCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1400, Size: 0x1]
	bool bIsUseCodeCamera;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1400, Size: 0x1]
	ToaaPredictProjectilePathActor* PredictProjectilePathActor;//[Offset: 0x1408, Size: 0x8]
	Actor* NightLightActor;//[Offset: 0x1410, Size: 0x8]
	SceneCapture2D* SceneCaptureActor;//[Offset: 0x1418, Size: 0x8]
	CustomSpringArmComponent* TPPSpringArmComponent;//[Offset: 0x1590, Size: 0x8]
	AutoFireCrossHairCtrlComp* AutoFireCrossHairCtrlComp;//[Offset: 0x1598, Size: 0x8]
	void UpdateCameraControlType(bool InUseArtCamera, bool InUseCodeCamera);// 0x2ed7fe4
	void ShoulderScoping();// 0x2ed7fd0
	void ShoulderScopeOut();// 0x2ed7fbc
	void ShoulderScopeIn();// 0x2ed7fa8
	void SetUISeneCapture2DBP(bool bValue, FString path);// 0x2ed7e84
	void SetTreeMineCapsule(Vector DeltaVector, Vector RamdomDeltaVector, float CapsuleRadius, float CapsuleRandomRadius, float CapsuleHeight, bool bCapsuleDebug, bool bRandomCapsuleDebug);// 0x2ed7c84
	void SetTextureTarget(bool bValue);// 0x2ed7c00
	void SetSeneCapture2DSize(uint32 X, int Y);// 0x2ed7b4c
	bool SetPeekState(bool Enable, bool IsLeft);// 0x2ed7a70
	void SetMoveEnable(FName Reason, int InPriority, enum InValue);// 0x2ed797c
	void SetIsFreeCamera(bool Enabled);// 0x2ed78f8
	void SetHeadWithViewPortRotationEnable(FName Reason, int InPriority, bool InValue);// 0x2ed7800
	void SetCurrentControllableID(const uint64 InID);// 0x2ed7788
	void SetCaptureRenderTarget2D(TextureRenderTarget2D* InCaptureRenderTarget2D);// 0x2ed770c
	void Scoping(byte NewType);// 0x2ed7690
	void ScopeOut(byte NewType);// 0x2ed7614
	void ScopeInterrupt(byte NewType);// 0x2ed7598
	void ScopeInStop();// 0x33e07d0
	void ScopeIn(byte NewType);// 0x2ed751c
	void ResizeCaptureRenderTarget2D(int InSizeX, int InSizeY);// 0x2ed7468
	void ResetMoveEnable(FName Reason);// 0x2ed73ec
	void ResetHeadWithViewPortRotationEnable(FName Reason);// 0x2ed7370
	void RemoveBuilderTrigger(BuilderCylinderTriggerComponent* TriggerComp);// 0x2ed72f4
	void ReleaseCaptureRenderTarget2D();// 0x2ed72e0
	void RefreshRandomSeed();// 0x2ed72cc
	void RecycleSceneCaptureActor();// 0x2ed72b8
	void RecycleNightLightActor();// 0x2ed72a4
	void PlayScopeInTimeLine(float Rate);// 0x33e07d0
	void PhotographScopeOut();// 0x2ed7290
	void PhotographScopeIn();// 0x2ed727c
	void OnUpdateAcceleration();// 0x33e07d0
	void MarkRenderTargetValid(bool InIsRenderTargetValid);// 0x2ed71f8
	void MarkRenderTargetChanged(bool InIsRenderTargetChanged);// 0x2ed7174
	SkeletalMeshComponent* MakeUIMeshComponent(FName sname);// 0x2ed70f0
	StaticMeshComponent* MakeSTUIMeshComponent(FName Name);// 0x2ed706c
	SceneCapture2D* LoadSceneCaptureActor(FString SceneCaptureActorClassPath);// 0x2ed6fd0
	Actor* LoadNightLightActor(FString NightLightActorClassPath, out const Vector Postion, out const Rotator Rotation);// 0x2ed6ea0
	void JumpByParam(float ForwardVelocityZ, float StandVelocityZ, float FallUpGScale, float FallDownGScale);// 0x2ed6d78
	bool IsRenderTargetValid();// 0x2ed6d40
	bool IsRenderTargetChanged();// 0x2ed6d20
	bool IsEnbaleMove();// 0x2ed6ce8
	void InitTreeMineConfig();// 0x2ed6cd4
	bool InFrontOfSelf(Vector pVec);// 0x2ed6c44
	StaticMeshComponent* GetUISTMeshComponent();// 0x2ed6c28
	SkeletalMeshComponent* GetUIMeshComponent();// 0x2ed6c0c
	StaticMesh* GetSTUIMesh(FString path);// 0x2ed6b24
	SkeletalMesh* GetSKUIMesh(FString path);// 0x2ed6a3c
	SpringArmComponent* GetScopeSpringArm();// 0x33e07d0
	CameraComponent* GetScopeCamera();// 0x33e07d0
	SceneCaptureComponent2D* GetSceneCaptureComponent();// 0x2ed6a08
	SceneCapture2D* GetSceneCaptureActor();// 0x2ed69d4
	SceneCaptureComponent2D* GetSceneCapture2D();// 0x33e07d0
	WidgetComponent* GetRightUIComponent();// 0x33e07d0
	ToaaPredictProjectilePathActor* GetPredictProjectileActor();// 0x2ed69a0
	Actor* GetNightLightActor();// 0x2ed696c
	WidgetComponent* GetLeftUIComponent();// 0x33e07d0
	BaseFPPComponent* GetFPPComp();// 0x2ed6938
	CameraComponent* GetFollowCamera();// 0x33e07d0
	SpringArmComponent* GetFirstPersonSpringArm();// 0x33e07d0
	CameraComponent* GetFirstPersonCamera();// 0x33e07d0
	DirectionalLightComponent* GetDirLightComponent();// 0x33e07d0
	CustomSpringArmComponent* GetCustomSpringArm();// 0x2ed6898
	uint64 GetCurrentControllableID();// 0x2ed687c
	uint64 GetCloestClimbBuilderServerID(enum ClimbTriggerType);// 0x2ed67f8
	TextureRenderTarget2D* GetCaptureRenderTarget2D();// 0x2ed67c4
	SpringArmComponent* GetCameraBoom();// 0x33e07d0
	WidgetComponent* GetBackUIComponent();// 0x33e07d0
	AutoFireCrossHairCtrlComp* GetAutoFireCrossHairCtrlComp();// 0x2ed6790
	uint64 GetAimedTreeMineServerID();// 0x2ed675c
	Vector GetAimedTreeMineRandomPosition();// 0x2ed6724
	Vector GetAimedTreeMinePosition();// 0x2ed66ec
	float GetAimedTreeMinDistance();// 0x2ed66b8
	bool ExitPeek();// 0x2ed6680
	void ExitFastClimbMode();// 0x2ed666c
	bool EnterPeek(bool IsLeft);// 0x2ed65dc
	void EnterFastClimbMode();// 0x2ed65c8
	bool EnableFastClimbDown();// 0x2ed6590
	void DoSetDirectionalLightToPlayer(GSTWeaponBase* weapon, bool bValue);// 0x2ed64d0
	void DetachPredictProjectileActor();// 0x2ed64bc
	void DebugMoveEnable();// 0x2ed64a8
	FString DebugHeadWithViewPortRotationEnable();// 0x2ed6424
	bool CanImmediatetShoot();// 0x2ed63ec
	void AttachPredictProjectileActor();// 0x2ed63d8
	void AddBuilderTrigger(BuilderCylinderTriggerComponent* TriggerComp);// 0x2ed635c

--------------------------------
Class: PlayerCharacter.BaseCharacter.Character.Pawn.Actor.Object
	AkAudioEvent* SwitchFireModeSound;//[Offset: 0xe28, Size: 0x8]
	AkAudioEvent* SwitchSightSound;//[Offset: 0xe30, Size: 0x8]
	float PeekCheckAdditionalLen;//[Offset: 0xe38, Size: 0x4]
	bool IsDrawPeekCheckCollisionDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe3c, Size: 0x1]
	float PeekCheckCollisionTimer;//[Offset: 0xe40, Size: 0x4]
	float PeekCheckCollisionTimerFPP;//[Offset: 0xe44, Size: 0x4]
	float AutoScopeDelayTimeWhenPeek;//[Offset: 0xe4c, Size: 0x4]
	int IsEnableReportPlayerBehavior;//[Offset: 0xe50, Size: 0x4]
	delegate OnCharacterStateChange;//[Offset: 0xe60, Size: 0x10]
	delegate OnCharacterRealMoveChange;//[Offset: 0xe70, Size: 0x10]
	delegate OnPlayerHandFoldedChanged;//[Offset: 0xe80, Size: 0x10]
	delegate OnCharacterJump;//[Offset: 0xe90, Size: 0x10]
	delegate OnScopeInEndDelegate;//[Offset: 0xea0, Size: 0x10]
	delegate OnScopeOutEndDelegate;//[Offset: 0xeb0, Size: 0x10]
	delegate OnCharacterMouseDown;//[Offset: 0xec0, Size: 0x10]
	delegate OnLadderEffectVisibilityChange;//[Offset: 0xed0, Size: 0x10]
	delegate OnBecomeViewTarget;//[Offset: 0xee0, Size: 0x10]
	delegate OnEndViewTarget;//[Offset: 0xef0, Size: 0x10]
	delegate OnEntityControlledBySelfBecomeViewTarget;//[Offset: 0xf00, Size: 0x10]
	delegate OnEntityControlledBySelfEndViewTarget;//[Offset: 0xf10, Size: 0x10]
	delegate OnPlayerTriggeredByInteractiveObj;//[Offset: 0xf20, Size: 0x10]
	BaseUXActionComponent*[] UXActionComponentList;//[Offset: 0xf30, Size: 0x10]
	uint64 mCurrInteractiveEntityID;//[Offset: 0xf40, Size: 0x8]
	enum DefaultHoldGunState;//[Offset: 0xf48, Size: 0x1]
	<byte,float> HoldGunBackToIdleTimeMap;//[Offset: 0xf50, Size: 0x50]
	float BlockScopeTimeHeavyLanding;//[Offset: 0xfa0, Size: 0x4]
	float BlockScopeTimeForwardLanding;//[Offset: 0xfa4, Size: 0x4]
	float BlockScopeTimeStandLanding;//[Offset: 0xfa8, Size: 0x4]
	float BlockScopeTimeHorziLanding;//[Offset: 0xfac, Size: 0x4]
	float SprintRotateSpeed;//[Offset: 0xfb0, Size: 0x4]
	float CheckProneCoolDownTime;//[Offset: 0xfb4, Size: 0x4]
	Vector MoveInput;//[Offset: 0xfb8, Size: 0xc]
	ToaaVaultComponent* VaultComp;//[Offset: 0x1210, Size: 0x8]
	XGUEVehicleUserComponent* VehicleUserComponent;//[Offset: 0x1218, Size: 0x8]
	CarrierUserComponent* CarrierUserComponent;//[Offset: 0x1220, Size: 0x8]
	GliderUserComponent* GliderUserComponent;//[Offset: 0x1228, Size: 0x8]
	XCameraUnderWaterFXComponent* CameraUnderWaterFXComp;//[Offset: 0x1230, Size: 0x8]
	WeaponCollisionComponent* WeaponCollisionComp;//[Offset: 0x12d0, Size: 0x8]
	bool bIsProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12d8, Size: 0x1]
	bool IsRobot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12f9, Size: 0x1]
	int DynamicProjectileID;//[Offset: 0x1370, Size: 0x4]
	ClimbGlobalConfig* ClimbConfigData;//[Offset: 0x1378, Size: 0x8]
	void UnRegisterUXActionComponent(BaseUXActionComponent* Target);// 0x2f2d30c
	void UnInitVehicleUserComponent();// 0x2f2d2f8
	void UnInitGliderUserComponent();// 0x2f2d2e4
	void UnInitCarrierUserComponent();// 0x2f2d2d0
	bool ToBeDying();// 0x2f2d298
	bool SwitchPoseLocal(enum InPoseState);// 0x2f2d210
	void StopPrintInfo();// 0x2f2d1fc
	void StartPrintInfo();// 0x2f2d1e8
	void StartJumpLeaveLand();// 0x2f2d1cc
	bool StartClimbingLadder(enum TriggerType);// 0x2f2d144
	void Stand(bool bClientSimulation);// 0x2f2d0b8
	float SetWeaponMaterialsRoughnessBias(float Value);// 0x2f2d034
	void SetTwoHandAttachTarget(enum AttachType, uint64 EntityID, out const FName LeftHandTargetSocket, out const FName RightHandTargetSocket);// 0x2f2ced8
	void SetTwoHandAttachLocation(enum AttachType, Vector RightHandLoc, Vector LeftHandLoc);// 0x2f2cddc
	void SetTwoFootAttachTarget(uint64 EntityID, out const FName LeftFootTargetSocket, out const FName RightFootTargetSocket);// 0x2f2ccc0
	void SetTwoFootAttachLocation(Vector LeftFootLoc, Vector RightFootLoc);// 0x2f2cc04
	bool SetSwimPosePitch(float InPitch);// 0x2f2cb74
	void SetStagnantInAirFire(bool IsStagnantInAirFire);// 0x2f2caf0
	void SetSlotNameMatParamValue(out const enum slotType, out const FName SlotName, out const FName ParamName, float Value);// 0x2f2c974
	void SetRotateToTarget(Vector TargetPos);// 0x2f2c8f8
	void SetNearLadderEffectVisibility(bool bVisible);// 0x2f2c874
	void SetMovementInput(Vector InputVector);// 0x2f2c7f0
	void SetMaterialVectorParamValue(out const enum slotType, int Index, out const FName ParamName, LinearColor Value);// 0x2f2c690
	void SetJumpGotoFallingAnim();// 0x2f2c670
	bool SetIsRescueing(bool InValue);// 0x2f2c5e0
	void SetHandFoldRatio(int Ratio);// 0x2f2c55c
	void SetGravity(float Value);// 0x2f2c4e0
	void SetGlobalMaterialParamValue(out const enum slotType, out const FName ParamName, float Value);// 0x2f2c3bc
	void SetCurrentWeaponVisiblity(enum Visibility, FName Reason, int Priority);// 0x2f2c2c8
	void SetCapsuleIgnoreCollsion(int[] CollisionChannels);// 0x2f2c1e8
	void RevertCapsuleCollsion();// 0x2f2c1d4
	void ResetStandAfterRevive();// 0x2f2c1c0
	void ResetCurrentWeaponVisiblity(FName Reason);// 0x2f2c144
	void RegisterUXActionComponent(BaseUXActionComponent* Target);// 0x2f2c0c8
	void RegisterMouseDownBroadCast(bool isRegister);// 0x2f2c044
	bool Recover();// 0x2f2c00c
	void Prone(bool bClientSimulation);// 0x2f2bf80
	bool ProcessUXAction(int inputCode);// 0x2f2bef8
	void PlayOperateSound(AkAudioEvent* OperateSound);// 0x2f2be7c
	bool Pickup(float InTargetLocZ);// 0x2f2bdf4
	void OnScopeOutEndDelegate__DelegateSignature();// 0x33e07d0
	void OnScopeInEndDelegate__DelegateSignature();// 0x33e07d0
	void OnRsp_WeaponHoldMode(enum HoldMode);// 0x2f2bd78
	void OnMouseDown__DelegateSignature(Vector2D Location);// 0x33e07d0
	void OnLadderEffectVisibilityChange__DelegateSignature(bool bVisibility);// 0x33e07d0
	void OnHoldGunState(enum FromState, enum toState);// 0x2f2bcc0
	void OnHitTreeMine();// 0x2f2bcac
	void OnEntityControlledBySelfEndViewTarget__DelegateSignature(PlayerController* PC);// 0x33e07d0
	void OnEntityControlledBySelfBecomeViewTarget__DelegateSignature(PlayerController* PC);// 0x33e07d0
	void OnEndViewTarget__DelegateSignature(PlayerController* PC);// 0x33e07d0
	void OnCharacterStateChange__DelegateSignature(int InLayer, int InOldState, int InNewState);// 0x33e07d0
	void OnCharacterSpeedChange__DelegateSignature(bool IsMove);// 0x33e07d0
	void OnCharacterJump__DelegateSignature();// 0x33e07d0
	void OnBecomeViewTarget__DelegateSignature(PlayerController* PC);// 0x33e07d0
	bool Move(float InForward, float InRight, float InUp, bool InLog);// 0x2f2bb58
	bool IsSwimUpWater();// 0x2f2bb18
	bool IsStagnantInAirFire();// 0x2f2baf8
	bool IsSkiing();// 0x2f2bac0
	bool IsPeekLeft();// 0x2f2ba80
	bool IsOnVehicle();// 0x2f2ba40
	bool IsOnMachineGun();// 0x2f2ba00
	bool IsOnCarrier();// 0x2f2b9c0
	bool IsJumping();// 0x2f2b968
	bool IsInState(enum inState);// 0x2f2b8d8
	bool IsHandleInFold();// 0x2f2b898
	bool IsFiredThisTick();// 0x2f2b858
	bool IsCloseLadder();// 0x2f2b820
	void InteractiveObjTriggered__DelegateSignature(bool InOrExit, Actor* SceneObj, Vector InterStartPos, Rotator InterStartRot);// 0x33e07d0
	static void InitMoveConfigParam(float DivingDepth, float VehicleDivingDepth);// 0x2f2b778
	bool HasPeekCollision();// 0x2f2b738
	WeaponCollisionComponent* GetWeaponCollisionComp();// 0x2f2b6d8
	XGUEVehicleUserComponent* GetVehicleUserComponent();// 0x2f2b6a4
	ToaaVaultComponent* GetVaultComp();// 0x2f2b688
	AkAudioEvent* GetSwitchWeaponSound(byte WeaponType, bool IsEquip);// 0x33e07d0
	float GetSwimPosePitch();// 0x2f2b64c
	float GetSlotNameMatParamValue(out const enum slotType, out const FName SlotName, out const FName ParamName, float defaultVaule);// 0x2f2b4c8
	enum GetScopeState();// 0x2f2b494
	enum GetPoseState();// 0x2f2b458
	XPlayerMotionComponent* GetPlayerMotionComp();// 0x2f2b41c
	enum GetMovingState();// 0x2f2b3e0
	Vector GetMoveInput();// 0x2f2b3a0
	float GetMaterialsRoughnessMultiplier(out const enum slotType);// 0x2f2b30c
	enum GetLayerState(enum CharacterStateLayer);// 0x2f2b288
	float GetLastSprintRotation();// 0x2f2b26c
	byte GetLastJumpSubType();// 0x2f2b250
	Vector GetLastFallingVelocity();// 0x2f2b22c
	bool GetIsRescueing();// 0x2f2b1f4
	enum GetHealthState();// 0x2f2b1b8
	float GetGlobalMaterialParamValue(out const enum slotType, out const FName ParamName);// 0x2f2b0cc
	GliderUserComponent* GetGliderUserComponent();// 0x2f2b098
	GSTMeleeWeapon* GetDynamicMeleeWeapon();// 0x2f2b064
	enum GetCurState(enum InLayer);// 0x2f2afd8
	XGUEVehicle* GetCurrentVehicle();// 0x2f2afa4
	enum GetCurrentClimbType();// 0x2f2af70
	ClimbTriggerComponent* GetCurrentClimbTriggerComp();// 0x2f2af3c
	Object* GetCurrentCarrier();// 0x2f2af08
	int GetCur8DirMoveIdx();// 0x2f2aecc
	ClimbTriggerComponent* GetClosestClimbTriggerComp();// 0x2f2ae98
	enum GetCloestClimbType(enum TriggerType);// 0x2f2ae14
	enum GetCloestClimbTriggerType();// 0x2f2ade0
	enum GetCloestClimbDir(enum TriggerType);// 0x2f2ad5c
	enum GetClimbMoveMode();// 0x2f2ad28
	Rotator GetClimbLadderStartRot();// 0x2f2acf0
	Vector GetClimbLadderStartPos();// 0x2f2acb8
	enum GetClimbingState();// 0x2f2ac84
	byte GetCharacterPoseType();// 0x2f2ac48
	CarrierUserComponent* GetCarrierUserComponent();// 0x2f2ac14
	enum GetActionState();// 0x2f2abd8
	GSTMeleeWeapon* GeCastingMeleeWeapon();// 0x2f2aba4
	void ForbiddenIKByReason(FName Reason, int Priority, bool Value);// 0x2f2aaac
	void ForbiddenIK(bool State);// 0x2f2aa28
	void ExitLadderTrigger(SceneComponent* StartClimbComponent);// 0x2f2a9ac
	void EnterLadderTrigger(SceneComponent* StartClimbComponent);// 0x2f2a930
	bool EndPickup();// 0x2f2a8f8
	void EnableWeaponCollision();// 0x2f2a8e4
	void DisableWeaponCollision();// 0x2f2a8d0
	void ClearMoveInput();// 0x2f2a8b4
	bool CheckStateMachineEvent(byte InEvent);// 0x2f2a82c
	void ChangeAutoClimbMoveDir();// 0x2f2a818
	bool CanUseHairAnimDynamic();// 0x2f2a7d8
	void BreakClimbingStrop();// 0x2f2a7c4
	void BreakClimbingLadder();// 0x2f2a7b0
	void AddHurtValue(int hrut);// 0x2f2a734
	void AddCallbacktoSetClimbRopeInfo(AvatarCommonBase* AvatarCommonBase);// 0x2f2a6b8

--------------------------------
Class: BaseCharacter.Character.Pawn.Actor.Object
	AvatarComponent* Avatar;//[Offset: 0xa60, Size: 0x8]
	XMotionComponent* MotionComp;//[Offset: 0xa68, Size: 0x8]
	XStateMachine* StateMachineComp;//[Offset: 0xa70, Size: 0x8]
	Vector RawMoveInput;//[Offset: 0xa78, Size: 0xc]
	float BaseTurnRate;//[Offset: 0xa88, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0xa8c, Size: 0x4]
	uint64 serverID;//[Offset: 0xa90, Size: 0x8]
	int EntityType;//[Offset: 0xa98, Size: 0x4]
	int ResID;//[Offset: 0xa9c, Size: 0x4]
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa0, Size: 0x1]
	bool IsInsideWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa1, Size: 0x1]
	bool IsUnderWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa2, Size: 0x1]
	bool bIsLeadingCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa3, Size: 0x1]
	bool HeadShotState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaa4, Size: 0x1]
	enum Gender;//[Offset: 0xab0, Size: 0x1]
	ParticleSystem* ChooseEffect;//[Offset: 0xab8, Size: 0x8]
	float YawSpeed;//[Offset: 0xac0, Size: 0x4]
	delegate OnCharacterUnderWaterChange;//[Offset: 0xde8, Size: 0x10]
	void TurnAtRate(float Rate);// 0x2e0a21c
	void StopWithAnimMontageWithAssetBlendTime(FString AnimMontageRef);// 0x2e0a13c
	void StopWithAnimMontage(FString AnimMontageRef, float InBlendOutTime);// 0x2e0a020
	void StopWithAnimAliasMontage(FString AliasMontage);// 0x2e09f40
	void StopNavigate();// 0x2e09f2c
	void StopMontageInMain(FString MontagePath, float InBlendOutTime);// 0x2e09e64
	void StopMontageForclyInMain(FString MontagePath, float InBlendOutTime);// 0x2e09d9c
	void StopCustomAnim();// 0x2e09d80
	void StopActiveMontageWithBlendOutTime(float BlendOutTime);// 0x2e09d04
	void StopActiveMontage();// 0x2e09cf0
	void SetUseControllerRotationYaw(out const FName ModifyReason, int InPriority, bool InUseControllerRotationYaw);// 0x2e09be0
	void SetUseControllerRotationPitch(out const FName ModifyReason, int InPriority, bool InUseControllerRotationPitch);// 0x2e09ad0
	void SetRawMoveInput(float InForward, float InRight, float InUp);// 0x2e099e0
	void SetNavigateMoveSpeed(float Speed);// 0x2e09964
	void SetLastHeadShotTime(float pTime);// 0x2e098e8
	void SetIsUnderWater(bool UnderWater);// 0x2e09864
	void SetIsInWater(out const FName ModifyReason, int InPriority, bool InWater);// 0x2e09754
	void SetIsInsideWater(out const FName ModifyReason, int InPriority, bool InsideWater);// 0x2e09644
	void SetHeadShotIntervalTime(float pTime);// 0x2e095c8
	void SetHeadShot(bool pstate);// 0x2e09544
	void SetAvatarRelativeRotation(out const FName InReason, int InPriority, out const Rotator InRelativeRotation);// 0x2e0942c
	void SetAvatarRelativeLocation(out const FName InReason, int InPriority, out const Vector InRelativeLocation);// 0x2e09314
	void ResetUseControllerRotationYaw();// 0x2e09300
	void ResetUseControllerRotationPitch();// 0x2e092ec
	void ResetIsInWater();// 0x2e092d8
	void ResetInsideWater();// 0x2e092c4
	void Reset();// 0x2e092a8
	bool ReplaceMovementComponent(class Object InMovementClass);// 0x2e09220
	void RemoveDesignPaperComponent();// 0x2e0920c
	void ReceiveResume();// 0x33e07d0
	void ReceiveOnRecycle();// 0x33e07d0
	void PlayWithAnimMontageOnBorn(FString AnimMontageRef, float InPlayRate, FString StartSectionName, float InStartTime);// 0x2e090bc
	void PlayWithAnimMontageByTime(FString AnimMontageRef, float InPlayRate, FString StartSectionName, float StartTime, bool IsLoop);// 0x2e08f28
	void PlayWithAnimMontage(FString AnimMontageRef, float InPlayRate, FString StartSectionName);// 0x2e08d68
	void PlayWithAnimAliasMontage(FString AliasMontage, float InPlayRate, FString StartSectionName);// 0x2e08ba8
	void PlayMontageInMain(FString MontagePath, float InPlayRate, FName StartSectionName);// 0x2e08aa4
	void PlayFaceFx(FString AnimPath);// 0x33e07d0
	void PlayCustomAnimByPath(FString AnimPath, enum AnimPoseType);// 0x2e089d4
	void PlayCustomAnim(FName AnimKey);// 0x2e08950
	void OnUnderWaterChange__DelegateSignature(bool active);// 0x33e07d0
	void OnTriggeredEvent(XStateMachine* InStateMachine, byte InEvent, out const <byte,byte> InPreStateMap, out const <byte,byte> InPostStateMap);// 0x2e086ec
	void OnStateMachineStop(XStateMachine* InStateMachine);// 0x2e08668
	void OnStateMachineStart(XStateMachine* InStateMachine);// 0x2e085e4
	void OnStateChange(XStateMachine* InStateMachine, byte InLayer, byte InOldState, byte InNewState);// 0x2e084ac
	void OnRsp_ThirdPlayerRotation(Rotator Rotation, bool bSyncController);// 0x2e083e4
	void OnRsp_ThirdPlayerControllerPitch(float Pitch);// 0x2e08360
	void OnPlayerCreated();// 0x2e08344
	void OnCheckStateChange(XStateMachine* InStateMachine, byte InEvent, byte InOldState, byte InNewState, out bool OutResult);// 0x2e081c0
	void OnCheckEvent(const XStateMachine* InStateMachine, byte InEvent, out bool OutResult, out FName Reason);// 0x2e08060
	void OnBeforeStateChange(XStateMachine* InStateMachine, byte InLayer, byte InOldState, byte InNewState);// 0x2e07f28
	void OnAvatarLoadFinish(AvatarCommonBase* AvatarCommonBase);// 0x2e07ea4
	void NavigateToWorldCompositionLocation(float X, float Y, float Z, float InAcceptanceRadius);// 0x2e07d7c
	void NavigateFollowSpecificActor(Actor* Actor);// 0x2e07d00
	void NavigateAlongPointList(out Vector[] PointList, float InAcceptanceRadius);// 0x2e07c1c
	bool MoveToWorldCompositionLocation(out const Vector Location);// 0x2e07b80
	void LookUpAtRate(float Rate);// 0x2e07b04
	bool IsLeadingCharacter();// 0x2e07acc
	void InitAvatarRelativeRotation(out const Rotator InRelativeRotation);// 0x2e07a44
	void InitAvatarRelativeLocation(out const Vector InRelativeLocation);// 0x2e079bc
	bool HandleHitByNear(Vector HurtDir, enum BeHitShakeLevel);// 0x2e078f0
	bool HandleHitByBullet(Vector HurtDir, enum BeHitShakeLevel);// 0x2e07824
	Vector GetWorldCompositionLocation();// 0x2e077e4
	float GetWaterUnderFootDistance(float InMaxDistance);// 0x2e07760
	Vector GetVelocityLocal();// 0x2e07728
	float GetUnscaledCapsuleRadius();// 0x2e076ec
	Rotator GetThirdPlayerRotation();// 0x2e076ac
	AnimInstance* GetSubAnimInstanceByName(FName InName);// 0x2e07628
	XStateMachine* GetStateMachineComp();// 0x2e0760c
	Vector GetSocketLocation(FName SocketName);// 0x2e07584
	Vector2D GetSimpleCollisionCylinderLua();// 0x2e07550
	float GetScaledCapsuleRadius();// 0x2e07514
	float GetScaledCapsuleHalfHeight();// 0x2e074e0
	Vector GetRelativeLocation();// 0x2e074a0
	Vector GetRawMoveInput();// 0x2e0747c
	ParticleSystemComponent* GetPracticalSystemComponent(int dynamicType);// 0x2e073f8
	XMotionComponent* GetMotionComp();// 0x2e073dc
	Vector GetLocalCompositionLocation();// 0x2e073a4
	float GetImmersionRate();// 0x2e07370
	float GetImmersionDepthByProfilerName(out const FName ProfilerName);// 0x2e072dc
	float GetImmersionDepth(float InMaxDepth);// 0x2e07258
	enum GetHitBodyTypeByBoneName(out const FName InBoneName);// 0x2e071bc
	SceneComponent* GetDynamicComponent(FName SocketName);// 0x2e07138
	TOAAMovementComponent* GetCharacterMovement();// 0x2e07104
	float GetCapsuleHalfHeight();// 0x2e070c8
	BaseAnimInstance* GetBaseAnimInstance();// 0x2e07094
	Rotator GetAvatarRelativeRotation();// 0x2e0705c
	Vector GetAvatarRelativeLocation();// 0x2e07024
	MeshComponent* GetAvatarMeshComponent(int avatarSlotTypeIn);// 0x2e06fa0
	SceneComponent* GetAvatarMasterBoneComp();// 0x2e06f6c
	AvatarComponent* GetAvatarComponent();// 0x2e06f50
	AnimInstance* GetAnimInstance();// 0x2e06f1c
	STExtraAnimInstance* GetAnimInst();// 0x2e06ee8
	void FreezeActor(float Time, float interpolation);// 0x2e06e34
	void DoWaterQuery();// 0x2e06e20
	bool DoesSocketExist(FName SocketName);// 0x2e06d98
	bool Die(bool bInStaticPose, bool bForcedly);// 0x2e06cb4
	void ClearAvatarRelativeRotation(out const FName InReason);// 0x2e06c28
	void ClearAvatarRelativeLocation(out const FName InReason);// 0x2e06b9c
	void CancelNavigate();// 0x2e06b88
	void AttachComponentToAvatar(SceneComponent* child, FName SocketName);// 0x2e06ad4
	void AttachActorToAvatar(Actor* child, FName SocketName, enum AttachmentRule);// 0x2e069e4
	void ApplyStateMap(out const <byte,byte> InStateMap);// 0x2e068d8
	void ApplyStateBits(uint64 InStateBits);// 0x2e0685c
	void ApplyDefaultStateEvent();// 0x2e06848
	int AddDynamicComponentToAvatar(SceneComponent* Component, FName SocketName);// 0x2e06784
	int AddDynamicActorToAvatar(Actor* Actor, FName SocketName);// 0x2e066c0

--------------------------------
Class: AkAudioEvent.Object
	AkAudioBank* RequiredBank;//[Offset: 0x28, Size: 0x8]
	float MaxAttenuationRadius;//[Offset: 0x30, Size: 0x4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	float MinimumDuration;//[Offset: 0x38, Size: 0x4]
	float MaximumDuration;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: AkAudioBank.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]

--------------------------------
Class: BaseUXActionComponent.ActorComponent.Object
	enum ActionType;//[Offset: 0xf0, Size: 0x1]
	bool NeedSetInterActTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]
	enum[] SupportInputCodes;//[Offset: 0xf8, Size: 0x10]
	void OnEndTriggerOverlap(Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x2e1e880
	void OnBeginTriggerOverlap(Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2e1e6e0

--------------------------------
Class: ToaaVaultComponent.BaseVaultComponent.ActorComponent.Object
	PlayerCharacter* PlayerCharacter;//[Offset: 0x460, Size: 0x8]
	LeadingPlayerCharacter* LeadingCharacter;//[Offset: 0x468, Size: 0x8]
	void OnStateChangeWithEvent(XStateMachine* InStateMachine, byte InEvent, byte OldState, byte NewState);// 0x2fab988

--------------------------------
Class: BaseVaultComponent.ActorComponent.Object
	VaultConfigData* VaultConfigData;//[Offset: 0xf0, Size: 0x8]
	<FString,VaultData> vaultDataallMap;//[Offset: 0x1e0, Size: 0x50]
	VaultData[] vaultDataallArray;//[Offset: 0x230, Size: 0x10]
	VaultCheckRule[] checkRuleList;//[Offset: 0x240, Size: 0x10]
	float HalfHeight;//[Offset: 0x250, Size: 0x4]
	float MaxCheckHeight;//[Offset: 0x254, Size: 0x4]
	float OffsetSpeed;//[Offset: 0x258, Size: 0x4]
	float MaxCheckDis;//[Offset: 0x25c, Size: 0x4]
	float MaxCheckOppSiteDis;//[Offset: 0x260, Size: 0x4]
	float UnActiveMaxAngle;//[Offset: 0x264, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x268, Size: 0x4]
	float MaxJumpLength;//[Offset: 0x26c, Size: 0x4]
	float heightoffsetcheck;//[Offset: 0x270, Size: 0x4]
	float HeightFowardCheck;//[Offset: 0x274, Size: 0x4]
	float minVaultHeight;//[Offset: 0x278, Size: 0x4]
	float MaxSlopeForJump;//[Offset: 0x27c, Size: 0x4]
	float OppsiteObstacleTestDis;//[Offset: 0x280, Size: 0x4]
	int debugTrace;//[Offset: 0x284, Size: 0x4]
	AnimMontage* Montage;//[Offset: 0x288, Size: 0x8]
	float CheckWindowRadius;//[Offset: 0x290, Size: 0x4]
	float WindowBrokenOffset;//[Offset: 0x294, Size: 0x4]
	Character* CharacterActor;//[Offset: 0x298, Size: 0x8]
	Actor* CheckActor;//[Offset: 0x2b8, Size: 0x8]
	PrimitiveComponent* HitComponent;//[Offset: 0x2d0, Size: 0x8]
	PrimitiveComponent* UpHitComponent;//[Offset: 0x2d8, Size: 0x8]
	PrimitiveComponent*[] HitComponentArray;//[Offset: 0x2e0, Size: 0x10]
	Actor* WindowActor;//[Offset: 0x3d8, Size: 0x8]
	bool UseNewVaultFlow();// 0x49617e4
	bool TryVault();// 0x49617ac
	void SyncPositionBeforeVault();// 0x4961798
	void StopVaultThridCharacter(FString CurveName);// 0x4961704
	void StopVault();// 0x49616f0
	void StartVaultThridCharacter(FString CurveName);// 0x496165c
	void StartVaultNew();// 0x4961640
	void StartVault();// 0x496162c
	void SetVaultParam(int64 Param0, int64 param1, int64 param2, int64 Param3, int64 Param4, int64 Param5, int64 Param6, int64 Param7);// 0x4961414
	int64[] GetVaultParam();// 0x4961390
	enum GetVaultFailReason();// 0x4961374
	float GetBeforeBlockHeight();// 0x4961358
	void CheckVaultFalling();// 0x4961344
	bool CheckCanVaultWithParams(float LimitHeight, float LimitSwimHeight, float LimitAngle);// 0x496123c
	bool CheckCanVault();// 0x49611fc

--------------------------------
Class: XStateMachine.ActorComponent.Object
	delegate StateMachineStartBroadcast;//[Offset: 0xf0, Size: 0x10]
	delegate StateMachineStopBroadcast;//[Offset: 0x100, Size: 0x10]
	delegate BeforeStateChangeBroadcastDynamic;//[Offset: 0x110, Size: 0x10]
	delegate StateChangeBroadcastDynamic;//[Offset: 0x120, Size: 0x10]
	delegate StateBlockEndBroadcast;//[Offset: 0x130, Size: 0x10]
	delegate EventBlockEndBroadcast;//[Offset: 0x140, Size: 0x10]
	delegate StateChangeWithEventDynamic;//[Offset: 0x150, Size: 0x10]
	delegate StateChangeAllInfoBroadcastDynamic;//[Offset: 0x160, Size: 0x10]
	void StateMachineStopBroadcast__DelegateSignature(XStateMachine* InStateMachine);// 0x33e07d0
	void StateMachineStartBroadcast__DelegateSignature(XStateMachine* InStateMachine);// 0x33e07d0
	void StateChangeByEventDynamic__DelegateSignature(XStateMachine* InStateMachine, byte InEvent, byte InOldState, byte InNewState);// 0x33e07d0
	void StateChangeBraodcastDynamic__DelegateSignature(XStateMachine* InStateMachine, byte InLayer, byte InOldState, byte InNewState);// 0x33e07d0
	void StateChangeAllBraodcast__DelegateSignature(XStateMachine* InStateMachine, byte InLayer, byte InEvent, byte InOldState, byte InNewState, bool bNetSync);// 0x33e07d0
	void StateBlockEndBraodcast__DelegateSignature(XStateMachine* InStateMachine, byte InLayer, byte InBlockTimeOutState);// 0x33e07d0
	void SetLayerBasicState(byte InLayer);// 0x3058128
	void RemoveWhiteState(FName Reason);// 0x30580ac
	void RemoveWhiteEvent(FName Reason);// 0x3058030
	void RemoveBlackState(FName Reason);// 0x3057fb4
	void RemoveBlackEvent(FName Reason);// 0x3057f38
	bool NeedCheckStand(byte StateEvent);// 0x3057eb0
	bool IsStateBlocking(byte StateGoingTo);// 0x3057e28
	bool IsPlaying();// 0x3057e0c
	bool IsInState(byte inState);// 0x3057d84
	bool IsInBasicState(byte Layer);// 0x3057cfc
	bool IsEventBlocking(byte InEvent, bool bInLog);// 0x3057c30
	float GetStateBlockRemainTime(enum CharacterState, FName Reason);// 0x3057b68
	FString GetStateBlockingDecription();// 0x3057ae4
	float GetEventBlockRemainTime(enum Event);// 0x3057a60
	byte GetCurrentState(byte InLayer);// 0x30579dc
	void EventBlockEndBraodcast__DelegateSignature(XStateMachine* InStateMachine, byte Event);// 0x33e07d0
	void DoExitEvent(byte InEvent);// 0x3057960
	bool ContainsState(byte InLayer, byte inState);// 0x305789c
	bool ContainsLayer(byte InLayer);// 0x3057814
	bool CheckEventDetail(byte InEvent, out XSMErrorInfo OutInfo, bool InLog);// 0x30576e8
	bool CheckEvent(byte InEvent, bool InLog);// 0x305761c

--------------------------------
Class: XSMErrorInfo

--------------------------------
Class: VaultConfigData.DataAsset.Object
	float CheckForwardHeightOffset;//[Offset: 0x30, Size: 0x4]
	float InactiveMaxAngle;//[Offset: 0x34, Size: 0x4]
	float NormalAngleMaxDiff;//[Offset: 0x38, Size: 0x4]
	float CheckHeightBoxShortSize;//[Offset: 0x3c, Size: 0x4]
	float CheckHeightBoxLongSize;//[Offset: 0x40, Size: 0x4]
	float MaxCheckOppSiteDis;//[Offset: 0x44, Size: 0x4]
	float minVaultHeight;//[Offset: 0x48, Size: 0x4]
	float MaxVaultHeight;//[Offset: 0x4c, Size: 0x4]
	float MaxSwimVaultHeight;//[Offset: 0x50, Size: 0x4]
	float HeightScalingOnJumpOver;//[Offset: 0x54, Size: 0x4]
	float HeightScalingOnClimbOn;//[Offset: 0x58, Size: 0x4]
	float HalfHeightScaling;//[Offset: 0x5c, Size: 0x4]
	float RadiusScaling;//[Offset: 0x60, Size: 0x4]
	float RadiusScalingOnClimbOn;//[Offset: 0x64, Size: 0x4]
	float UpSurfaceForwardTestLength;//[Offset: 0x68, Size: 0x4]
	float UpSurfaceMaxAngle;//[Offset: 0x6c, Size: 0x4]
	float DownToUpCheckMaxHDis;//[Offset: 0x70, Size: 0x4]
	float CheckOppsiteHalfHeight;//[Offset: 0x74, Size: 0x4]
	float ClimbOnThickness;//[Offset: 0x78, Size: 0x4]
	float OppositeDownSweepDis;//[Offset: 0x7c, Size: 0x4]
	float IdleVaultMaxDis;//[Offset: 0x80, Size: 0x4]
	float MoveVaultMaxDis;//[Offset: 0x84, Size: 0x4]
	float FallSweepOffsetHeight;//[Offset: 0x88, Size: 0x4]
	float HandFallBoxShortLength;//[Offset: 0x8c, Size: 0x4]
	float FaceToOriginRotSpeed;//[Offset: 0x90, Size: 0x4]
	byte[] VaultTestChannels;//[Offset: 0x98, Size: 0x10]
	<enum,ActionTypeVaultData> GenderToVaultData;//[Offset: 0xa8, Size: 0x50]
	float[] ConfigHeightList;//[Offset: 0xf8, Size: 0x10]
	<enum,VaultCurveNameToData> GenderToCurveNameData;//[Offset: 0x108, Size: 0x50]

--------------------------------
Class: ActionTypeVaultData
	<enum,MovementTypeVaultData> ActionTypeToData;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: MovementTypeVaultData
	<enum,HeightVaultData> MovementTypeToData;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: HeightVaultData
	<float,VaultBaseCurveData*> HeightToData;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: VaultBaseCurveData.DataAsset.Object
	FString ArtAnimPath;//[Offset: 0x30, Size: 0x10]
	float OriginDistance;//[Offset: 0x40, Size: 0x4]
	float AfterHeightToClimbOn;//[Offset: 0x44, Size: 0x4]
	int MoveInputBreakFrame;//[Offset: 0x48, Size: 0x4]
	float BlendOutTimeToMove;//[Offset: 0x4c, Size: 0x4]
	float VaultSpeed;//[Offset: 0x50, Size: 0x4]
	float WaterVaultSpeed;//[Offset: 0x54, Size: 0x4]
	int StartRotateFrame;//[Offset: 0x58, Size: 0x4]
	float RotateToStartSpeed;//[Offset: 0x5c, Size: 0x4]
	bool bHideHandWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	VaultScalingData[] FrameScalingList;//[Offset: 0x68, Size: 0x10]
	int FrameOfMaxPosZ;//[Offset: 0x78, Size: 0x4]

--------------------------------
Class: VaultScalingData
	int BeginFrame;//[Offset: 0x0, Size: 0x4]
	int EndFrame;//[Offset: 0x4, Size: 0x4]
	enum ScalingStage;//[Offset: 0x8, Size: 0x1]

--------------------------------
Class: VaultCurveNameToData
	<FString,VaultBaseCurveData*> CurveNameToData;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: VaultData
	FString KeyName;//[Offset: 0x0, Size: 0x10]
	FString montageSectionName;//[Offset: 0x10, Size: 0x10]
	int netIntKey;//[Offset: 0x20, Size: 0x4]
	CurveFloat* upCurve;//[Offset: 0x28, Size: 0x8]
	CurveFloat* fowardCurve;//[Offset: 0x30, Size: 0x8]
	float blockdis;//[Offset: 0x38, Size: 0x4]
	float blockheight;//[Offset: 0x3c, Size: 0x4]
	float blokcThicklength;//[Offset: 0x40, Size: 0x4]
	bool IsJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool forceStartSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	bool cJLike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1]
	float maxStartSyncLength;//[Offset: 0x48, Size: 0x4]
	float CountTime;//[Offset: 0x4c, Size: 0x4]
	float BreakTime;//[Offset: 0x50, Size: 0x4]
	float playSpeed;//[Offset: 0x54, Size: 0x4]
	float speedChangeTime;//[Offset: 0x58, Size: 0x4]
	float changeSpeedRate;//[Offset: 0x5c, Size: 0x4]
	bool standState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool walkState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	bool SprintState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 0x1]
	bool isPutUpGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 0x1]
	float BreakWindowDelayTime;//[Offset: 0x64, Size: 0x4]

--------------------------------
Class: VaultCheckRule
	float checkHeight;//[Offset: 0x0, Size: 0x4]
	float standCheckDis;//[Offset: 0x4, Size: 0x4]
	float walkCheckDis;//[Offset: 0x8, Size: 0x4]
	float sprintCheckDis;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: XGUEVehicleUserComponent.ActorComponent.Object
	void TurnOnFrontLight(bool InIsTurnOn);// 0x3038f20
	void TryLeaveVehicle();// 0x3038f0c
	void TryEnterTargetVehicle(XGUEVehicle* targetVehicle, int SeatIdx);// 0x3038e54
	void TryChangeSeat(int SeatIdx);// 0x3038dd8
	void SetThrottleInput(float Value, bool IsJoyStickControlInput, bool IsSteeringInput);// 0x3038ccc
	void SetSteeringInput(float Value, bool IsJoyStickControlInput, bool IsSteeringInput);// 0x3038bc0
	void SetStartOffStuck(bool offStuck);// 0x3038b3c
	void SetIsUsingHorn(bool bIsUsingHorn);// 0x3038ab8
	void SetIsChangingSeat(bool bIsChanging);// 0x3038a34
	void SetIsCarRoofOpened(bool InIsOpened);// 0x30389b0
	void SetHandbrakeInput(float Value, bool IsSteeringInput);// 0x30388f0
	void SetBoostingInput(float Value);// 0x3038874
	void SetAirControlUpInput(float Value);// 0x30387f8
	void SetAirControlDownInput(float Value);// 0x303877c
	void OnClientLeaveVehicleLua(bool bUseInLeavePosition, Vector InLeavePosition);// 0x30386b4
	void OnClientEnterVehicleLua(uint64 vehicleID, int SeatIdx);// 0x30385fc
	void OnClientChangeSeatLua(int SeatIdx, bool success);// 0x3038540
	bool IsOnVehicle();// 0x3038508
	bool IsOnMachineGun();// 0x30384d0
	bool IsFrontLightOn();// 0x3038498
	bool IsCarRoofOpened();// 0x3038460
	int GetForwardSpeed();// 0x303842c

--------------------------------
Class: XGUEVehicle.BasePawn.Pawn.Actor.Object
	XGVehicleSkMeshComponent* Mesh;//[Offset: 0xa18, Size: 0x8]
	XGUEVehicleComponent* Vehicle;//[Offset: 0xa20, Size: 0x8]
	XGUEVehicleEffectComponent* EffectComponent;//[Offset: 0xa28, Size: 0x8]
	VehiclePlayerAnimLightComponent* PlayerAnimComponent;//[Offset: 0xa30, Size: 0x8]
	TrackComponent* VehicleTrack;//[Offset: 0xa40, Size: 0x8]
	enum VehicleType;//[Offset: 0xa58, Size: 0x1]
	bool bIsMonsterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa59, Size: 0x1]
	float VehicleLength;//[Offset: 0xa5c, Size: 0x4]
	float VehicleHeight;//[Offset: 0xa60, Size: 0x4]
	float VehicleWidth;//[Offset: 0xa64, Size: 0x4]
	float CallVehicleLocationZOffset;//[Offset: 0xa68, Size: 0x4]
	FName AutoMoveSocketBaseName;//[Offset: 0xa6c, Size: 0x8]
	VehicleAutoMoveEnvParam AutoMoveEnvParam;//[Offset: 0xa74, Size: 0x4c]
	void SetSpecialEffect(int EffectType, float Params1, float Params2, float Params3);// 0x33e07d0
	void SetFuel(float InFuel);// 0x3027988
	void OnVehicleDestroyed();// 0x33e07d0
	float GetVehicleHpPct();// 0x3027954
	XGUEVehicleComponent* GetUEVehicleComponent();// 0x3027938
	PrimitiveComponent* GetPhysicalRoot();// 0x30278fc
	SkeletalMeshComponent* GetMesh();// 0x30278c0
	float GetFuel();// 0x302788c
	CameraComponent* GetFollowCamera();// 0x33e07d0
	SpringArmComponent* GetCameraBoom();// 0x33e07d0
	void ExportOut();// 0x3027870
	bool CalcAutoMove(out const VehicleAutoMoveParamInput FAutoMoveParamInput, out VehicleAutoMoveParamOut AutoMoveParam);// 0x3027734

--------------------------------
Class: BasePawn.Pawn.Actor.Object
	AvatarComponent* Avatar;//[Offset: 0x6a0, Size: 0x8]
	ToaaPawnMovementComponent* MovementComponent;//[Offset: 0x6a8, Size: 0x8]
	TeleportMovementComponent* TeleportMovement;//[Offset: 0x6b0, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x6b8, Size: 0x8]
	XMotionComponent* MotionComp;//[Offset: 0x6c0, Size: 0x8]
	XStateMachine* StateMachineComp;//[Offset: 0x6c8, Size: 0x8]
	bool EnableRagdoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6fc, Size: 0x1]
	float MassScale;//[Offset: 0x700, Size: 0x4]
	float WeaponForceScale;//[Offset: 0x704, Size: 0x4]
	HitResult LastHitInfo;//[Offset: 0x708, Size: 0x88]
	float LastHitForce;//[Offset: 0x790, Size: 0x4]
	uint64 serverID;//[Offset: 0x818, Size: 0x8]
	int EntityType;//[Offset: 0x820, Size: 0x4]
	int ResID;//[Offset: 0x824, Size: 0x4]
	enum Gender;//[Offset: 0x828, Size: 0x1]
	Rotator XGetSocketRotator(FName SocketName);// 0x2e18b38
	Vector XGetSocketLocation(FName SocketName);// 0x2e18aa8
	Vector XGetLocation(const enum InType);// 0x2e18a18
	bool XDoesSocketExist(FName SocketName);// 0x2e18988
	void StopWithAnimMontageWithAssetBlendTime(FString AnimMontageRef);// 0x2e188a8
	void StopWithAnimMontage(FString AnimMontageRef);// 0x2e187c8
	void StopWithAnimAliasMontage(FString AliasMontage);// 0x2e186e8
	void StopRagdollSimulatePhysics();// 0x2e186d4
	void StopRagdoll();// 0x2e186c0
	void StopActiveMontage();// 0x2e186ac
	void SetUseControllerRotationYaw(out const FName ModifyReason, int InPriority, bool InUseControllerRotationYaw);// 0x2e1859c
	void SetTwoHandAttachTarget(enum AttachType, uint64 EntityID, out const FName LeftHandTargetSocket, out const FName RightHandTargetSocket);// 0x2e18440
	void SetTwoHandAttachLocation(enum AttachType, Vector LeftHandLoc, Vector RightHandLoc);// 0x2e18344
	void SetTwoFootAttachTarget(uint64 EntityID, out const FName LeftFootTargetSocket, out const FName RightFootTargetSocket);// 0x2e18228
	void SetTwoFootAttachLocation(Vector LeftFootLoc, Vector RightFootLoc);// 0x2e1816c
	void SetSlotNameMatParamValue(out const enum slotType, out const FName SlotName, out const FName ParamName, float Value);// 0x2e17ff0
	void SetShieldMeshComponent(MeshComponent* MeshComponent);// 0x2e17f74
	void SetRightHandAttachAlpha(float Alpha);// 0x2e17ef8
	void SetRightFootAttachAlpha(float Alpha);// 0x2e17e7c
	void SetMaterialVectorParamValue(enum slotType, int Index, FString ParamName, out const LinearColor Value);// 0x2e17d30
	void SetMaterialScalarParamValue(enum slotType, int Index, FString ParamName, float Value);// 0x2e17bf0
	void SetLeftHandAttachAlpha(float Alpha);// 0x2e17b74
	void SetLeftFootAttachAlpha(float Alpha);// 0x2e17af8
	void SetLastHitInfo(out const HitResult Hit, float Force, float Time);// 0x2e179d0
	void SetGlobalMaterialParamValue(out const enum slotType, out const FName ParamName, float Value);// 0x2e178ac
	void SetAvatarRelativeRotation(out const FName InReason, int InPriority, out const Rotator InRelativeRotation);// 0x2e17794
	void SetAvatarRelativeLocation(out const FName InReason, int InPriority, out const Vector InRelativeLocation);// 0x2e1767c
	void ResetUseControllerRotationYaw();// 0x2e17668
	void ResetShieldMeshComponent();// 0x2e17654
	void ResetBodyAttachIK();// 0x2e17640
	void Reset();// 0x2e17624
	bool Recover();// 0x2e175e4
	void ReceiveResume();// 0x33e07d0
	void ReceiveOnRecycle();// 0x33e07d0
	void PrintMonsterInfo();// 0x2e175c8
	void PlayWithAnimMontageOnBorn(FString AnimMontageRef, float InPlayRate, FString StartSectionName, float InStartTime);// 0x2e17478
	void PlayWithAnimMontageByTime(FString AnimMontageRef, float InPlayRate, FString StartSectionName, float StartTime, bool IsLoop);// 0x2e172e4
	void PlayWithAnimMontage(FString AnimMontageRef, float InPlayRate, FString StartSectionName);// 0x2e17124
	void PlayWithAnimAliasMontage(FString AliasMontage, float InPlayRate, FString StartSectionName);// 0x2e16f64
	void PlayRagdoll();// 0x2e16f50
	void PlayFaceFx(FString AnimPath);// 0x33e07d0
	void OnStateMachineStop(XStateMachine* InStateMachine);// 0x2e16ecc
	void OnStateMachineStart(XStateMachine* InStateMachine);// 0x2e16e48
	void OnRsp_UseThirdPlayerRotation(bool Use);// 0x2e16dbc
	void OnRsp_ThirdPlayerRotation(Rotator Rotation, bool bSyncController);// 0x2e16cf4
	void OnRsp_ThirdPlayerControllerPitch(float Pitch);// 0x2e16c70
	void OnRsp_ShoulderRotation(Rotator Rotation);// 0x2e16bec
	void OnRsp_HandRotation(Rotator Rotation);// 0x2e16b68
	bool IsInRagdoll();// 0x2e16b30
	bool IsInFreezedRagdoll();// 0x2e16af8
	bool IsDying();// 0x2e16ab8
	bool IsDead();// 0x2e16a78
	void InitAvatarRelativeRotation(out const Rotator InRelativeRotation);// 0x2e169f0
	void InitAvatarRelativeLocation(out const Vector InRelativeLocation);// 0x2e16968
	bool HandleHitByNear(Vector HurtDir, enum BeHitShakeLevel);// 0x2e1689c
	bool HandleHitByBullet(Vector HurtDir, enum BeHitShakeLevel);// 0x2e167d0
	Vector GetWorldCompositionLocation();// 0x2e16790
	Vector GetVelocityLocal();// 0x2e16758
	float GetUnscaledCapsuleRadius();// 0x2e1671c
	Rotator GetThirdPlayerRotation();// 0x2e166dc
	AnimInstance* GetSubAnimInstanceByName(FName InName);// 0x2e16650
	XStateMachine* GetStateMachineComp();// 0x2e16634
	Rotator GetSocketRotator(FName SocketName);// 0x2e165ac
	Vector GetSocketLocation(FName SocketName);// 0x2e16524
	Vector2D GetSimpleCollisionCylinderLua();// 0x2e164f0
	Rotator GetShoulderWeaponRotation();// 0x2e164b0
	MeshComponent* GetShieldMeshComponent();// 0x2e1647c
	float GetScaledCapsuleRadius();// 0x2e16440
	Vector GetRelativeLocation();// 0x2e16400
	ParticleSystemComponent* GetPracticalSystemComponent(int dynamicType);// 0x2e1637c
	XMotionComponent* GetMotionComp();// 0x2e16360
	LinearColor GetMaterialVectorParamValue(enum slotType, int Index, FString ParamName);// 0x2e16248
	float GetMaterialScalarParamValue(enum slotType, int Index, FString ParamName);// 0x2e16134
	enum GetHitBodyTypeByBoneName(out const FName InBoneName);// 0x2e16098
	Rotator GetHandWeaponRotation();// 0x2e16058
	float GetGlobalMaterialParamValue(out const enum slotType, out const FName ParamName);// 0x2e15f6c
	SceneComponent* GetDynamicComponent(FName SocketName);// 0x2e15ee8
	float GetCapsuleHalfHeight();// 0x2e15eac
	CapsuleComponent* GetCapsuleComponent();// 0x2e15e90
	BaseAnimInstance* GetBaseAnimInstance();// 0x2e15e54
	Rotator GetAvatarRelativeRotation();// 0x2e15e1c
	Vector GetAvatarRelativeLocation();// 0x2e15de4
	SceneComponent* GetAvatarMasterBoneComp();// 0x2e15db0
	AvatarCommonBase* GetAvatarComponent();// 0x2e15d94
	AnimInstance* GetAnimInstance();// 0x2e15d60
	STExtraAnimInstance* GetAnimInst();// 0x2e15d2c
	bool DoesSocketExist(FName SocketName);// 0x2e15ca4
	bool Die();// 0x2e15c64
	void ConditionalTurnOffRagdoll();// 0x2e15c50
	void ClearAvatarRelativeRotation(out const FName InReason);// 0x2e15bc4
	void ClearAvatarRelativeLocation(out const FName InReason);// 0x2e15b38
	void CheckShouldHideBeforeAnimInit();// 0x2e15b24
	void CheckFreezeRagdoll();// 0x2e15b10
	void CancelRagdoll();// 0x2e15afc
	void AttachComponentToAvatar(SceneComponent* child, FName SocketName);// 0x2e15a48
	void AttachActorToAvatar(Actor* child, FName SocketName, enum AttachmentRule);// 0x2e15958
	int AddDynamicComponentToAvatar(SceneComponent* Component, FName SocketName);// 0x2e15894
	int AddDynamicActorToAvatar(Actor* Actor, FName SocketName);// 0x2e157d0

--------------------------------
Class: XGVehicleSkMeshComponent.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float VehicleBoundsRadius;//[Offset: 0xadc, Size: 0x4]

--------------------------------
Class: XGUEVehicleComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	FString VehicleDataPath;//[Offset: 0x188, Size: 0x10]
	bool bAudioLogEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	VehicleAudioData Audio_Engine;//[Offset: 0x1a0, Size: 0x28]
	VehicleAudioData Audio_StartUp;//[Offset: 0x1f0, Size: 0x28]
	VehicleAudioData Audio_Horn;//[Offset: 0x218, Size: 0x28]
	VehicleAudioData Audio_Appearance;//[Offset: 0x240, Size: 0x28]
	VehicleAudioData Audio_Backfire;//[Offset: 0x268, Size: 0x28]
	VehicleAudioData Audio_Boost;//[Offset: 0x290, Size: 0x28]
	VehicleMultiSwitchAudioData Audio_Hit;//[Offset: 0x2b8, Size: 0x18]
	VehicleAudioData Audio_HitBody;//[Offset: 0x2d0, Size: 0x28]
	VehicleAudioData Audio_Raining;//[Offset: 0x2f8, Size: 0x28]
	VehicleAudioData Audio_StopRaining;//[Offset: 0x320, Size: 0x28]
	AkComponent* SoundComponent;//[Offset: 0x348, Size: 0x8]
	float NonePhysicsEmptyVehicleMaxMoveTime;//[Offset: 0x460, Size: 0x4]
	float NonePhysicsEmptyVehicleMoveTimeScale;//[Offset: 0x464, Size: 0x4]
	float NonePhysicsEmptyVehicleSimulateMinSpeed;//[Offset: 0x468, Size: 0x4]
	float HitBaseDamageAmount;//[Offset: 0x494, Size: 0x4]
	float HitDamageScaleBySpeed;//[Offset: 0x498, Size: 0x4]
	float MaxHitDamageAmount;//[Offset: 0x49c, Size: 0x4]
	float HitIgnoreImpulseThreshold;//[Offset: 0x4a0, Size: 0x4]
	<uint64> VehicleHitFinishEntities;//[Offset: 0x4c0, Size: 0x50]
	float AntiStuckImpulseThreshold;//[Offset: 0x560, Size: 0x4]
	float AntiStuckDetectTime;//[Offset: 0x564, Size: 0x4]
	float ContinuousStuckInterval;//[Offset: 0x568, Size: 0x4]
	float ContinuousStuckTimeBeforeResolving;//[Offset: 0x56c, Size: 0x4]
	int PlayHitAudioMinInterval;//[Offset: 0x670, Size: 0x4]
	bool bCheckValidLeaveLocationBySweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 0x1]
	void OnVehicleCollisionChanged(PrimitiveComponent* ChangedComponent);// 0x302ceb4
	void OnOverlapPhysicsVolumeChanged(PhysicsVolume* PhysicsVolume);// 0x302ce38
	void OnComponentHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x302cca8
	void OnComponentBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x302cad0
	Vector GetUpVector();// 0x302ca98
	Vector GetRightVector();// 0x302ca60
	Vector GetForwardVector();// 0x302ca28
	float GetForwardSpeed();// 0x302c9f4

--------------------------------
Class: VehicleAudioData
	AkAudioEvent* Event;//[Offset: 0x0, Size: 0x8]
	FString SwitchGroup;//[Offset: 0x8, Size: 0x10]
	FString SwitchState;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: VehicleMultiSwitchAudioData
	AkAudioEvent* Event;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: AkComponent.SceneComponent.ActorComponent.Object
	bool bUseSpatialAudio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x248, Size: 0x1]
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x250, Size: 0x8]
	FString EarlyReflectionAuxBusName;//[Offset: 0x258, Size: 0x10]
	int EarlyReflectionOrder;//[Offset: 0x268, Size: 0x4]
	float EarlyReflectionBusSendGain;//[Offset: 0x26c, Size: 0x4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x270, Size: 0x4]
	byte OcclusionCollisionChannel;//[Offset: 0x274, Size: 0x1]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27c, Size: 0x1]
	float roomReverbAuxBusGain;//[Offset: 0x280, Size: 0x4]
	int diffractionMaxEdges;//[Offset: 0x284, Size: 0x4]
	int diffractionMaxPaths;//[Offset: 0x288, Size: 0x4]
	float diffractionMaxPathLength;//[Offset: 0x28c, Size: 0x4]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x290, Size: 0x1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x290, Size: 0x1]
	bool DrawGeometricDiffraction;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x290, Size: 0x1]
	bool DrawSoundPropagation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x290, Size: 0x1]
	bool bMovingSound;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x290, Size: 0x1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 0x1]
	float AttenuationScalingFactor;//[Offset: 0x294, Size: 0x4]
	float OcclusionRefreshInterval;//[Offset: 0x298, Size: 0x4]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x2a0, Size: 0x8]
	FString EventName;//[Offset: 0x2a8, Size: 0x10]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x185f128
	void UseEarlyReflections(AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x185ef64
	void StopMIDIEvent(FString MIDIEventName);// 0x185eed8
	void Stop();// 0x185eec4
	void SetUseSpatialAudio(const bool bNewValue);// 0x185ee40
	void SetSwitch(FString SwitchGroup, FString SwitchState);// 0x185ecc8
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x185ec44
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x185eaec
	void SetOutputBusVolume(float BusVolume);// 0x185ea70
	void SetListeners(out const AkComponent*[] Listeners);// 0x185e9d4
	void SetAttenuationScalingFactor(float Value);// 0x185e958
	void PostTrigger(FString Trigger);// 0x185e878
	void PostMIDIEvent(byte KeyIndex, FString MIDIEventName);// 0x185e7b0
	int PostAssociatedAkEventMultiPosition(Transform[] Positions, enum MultiPositionType);// 0x185e688
	int PostAssociatedAkEventAndWaitForEnd(LatentActionInfo LatentInfo);// 0x185e5d4
	int PostAssociatedAkEvent(int CallbackMask, out const delegate PostEventCallback);// 0x185e4c8
	int PostAkEventMultiPosition(FString in_EventName, Transform[] Positions, enum MultiPositionType);// 0x185e354
	int PostAkEventByName(FString in_EventName);// 0x185e2b8
	int PostAkEventAndWaitForEnd(AkAudioEvent* AkEvent, FString in_EventName, LatentActionInfo LatentInfo);// 0x185e17c
	int PostAkEvent(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, FString in_EventName);// 0x185dfe8
	float GetAttenuationRadius();// 0x185dfb4

--------------------------------
Class: AkAuxBus.Object
	AkAudioBank* RequiredBank;//[Offset: 0x28, Size: 0x8]

--------------------------------
Class: XGUEVehicleEffectComponent.ActorComponent.Object
	float ShakeCameraColdDown;//[Offset: 0xf0, Size: 0x4]
	ParticleSystem* OnHitObstaclesParticleSystem;//[Offset: 0xf8, Size: 0x8]
	Actor*[] GroundLightActorArray;//[Offset: 0x350, Size: 0x10]

--------------------------------
Class: VehiclePlayerAnimLightComponent.Object
	XGUEVehicle* OwnerVehicleActor;//[Offset: 0x28, Size: 0x8]
	<enum,AnimationAsset*> DefaultDriverAnimAssets;//[Offset: 0x30, Size: 0x50]
	<enum,AnimationAsset*> DefaultPassengerAnimAssets;//[Offset: 0x80, Size: 0x50]
	PlayerAnimAssetsInfo LoadedDriverAnimAssets;//[Offset: 0xd0, Size: 0x50]
	PlayerAnimAssetsInfo[] LoadedPassengerAnimAssets;//[Offset: 0x120, Size: 0x10]

--------------------------------
Class: PlayerAnimAssetsInfo
	<enum,GenderToPlayerAnimAssetsInfo> Payload;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: GenderToPlayerAnimAssetsInfo
	<FName,AnimationAsset*> Payload;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: TrackComponent.SceneComponent.ActorComponent.Object
	TrailParams TrailParams;//[Offset: 0x248, Size: 0x28]
	Actor* TrackRootActor;//[Offset: 0x270, Size: 0x8]

--------------------------------
Class: TrailParams
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	float Width;//[Offset: 0x4, Size: 0x4]
	float Interval;//[Offset: 0x8, Size: 0x4]
	float MinDistance;//[Offset: 0xc, Size: 0x4]
	float LiftTime;//[Offset: 0x10, Size: 0x4]
	float DispearTime;//[Offset: 0x14, Size: 0x4]
	float LengthWidthRatio;//[Offset: 0x18, Size: 0x4]
	float PushDistance;//[Offset: 0x1c, Size: 0x4]
	float VerticalThreshold;//[Offset: 0x20, Size: 0x4]
	float HorizontalThreshold;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: VehicleAutoMoveEnvParam
	float ScalarSpeed;//[Offset: 0x0, Size: 0x4]
	Vector ServerPos;//[Offset: 0x4, Size: 0xc]
	int ForwardIndex;//[Offset: 0x10, Size: 0x4]
	float NextPointDist;//[Offset: 0x14, Size: 0x4]
	float HighSpeed;//[Offset: 0x18, Size: 0x4]
	float HighSpeedNextPointDist;//[Offset: 0x1c, Size: 0x4]
	float MaxDist;//[Offset: 0x20, Size: 0x4]
	float Cutoff;//[Offset: 0x24, Size: 0x4]
	float StopSpeed;//[Offset: 0x28, Size: 0x4]
	float MinSpeed;//[Offset: 0x2c, Size: 0x4]
	float AdditionalSpeed;//[Offset: 0x30, Size: 0x4]
	float FarToleranceFactor;//[Offset: 0x34, Size: 0x4]
	float MidDistBaseThrottle;//[Offset: 0x38, Size: 0x4]
	float MidDistBaseSteering;//[Offset: 0x3c, Size: 0x4]
	float BaseSteering;//[Offset: 0x40, Size: 0x4]
	float MidDistSteerScale;//[Offset: 0x44, Size: 0x4]
	float SteerScale;//[Offset: 0x48, Size: 0x4]

--------------------------------
Class: AvatarComponent.AvatarCommonBase.AvatarBase.SceneComponent.ActorComponent.Object
	SkeletalMeshComponent* VisiualComponent;//[Offset: 0x1370, Size: 0x8]
	CosResLoader* mCosHDModePreloader;//[Offset: 0x1378, Size: 0x8]
	<int,MeshComponent*> FakeShadowMeshComponentList;//[Offset: 0x1470, Size: 0x50]
	<enum,GFurComponent*> AttachedGFurMeshComponentList;//[Offset: 0x14c0, Size: 0x50]
	GFurComponent* MasterAttachedGFurComponent;//[Offset: 0x1510, Size: 0x8]
	SkeletalMesh* FaceMouldSkMesh;//[Offset: 0x1518, Size: 0x8]
	<enum,MeshData> ClothSwitchStateSkDataMap;//[Offset: 0x1520, Size: 0x50]
	BakeFaceRuntimeData BakeFaceRuntimeData;//[Offset: 0x1628, Size: 0x28]
	UAECharAnimListCompBase* MyAnimListComp;//[Offset: 0x1650, Size: 0x8]
	SkeletalMesh*[] AsyncBakePartsSkMesh;//[Offset: 0x16b0, Size: 0x10]
	void SwitchToHDMode(bool bUseHDMode, int iCopyPoseHead, int UseHDScene);// 0x2df4648
	bool SwitchAvatarSkMeshBySlot(out const enum AvatarSlotType, out const enum SwitchState, out const FName Reason, int Priority);// 0x2df44c0
	bool SwitchAvatarAnimState(out const FName SwitchState, out const FName Reason, int Priority);// 0x2df438c
	void SetUpdateRateOptimizations(bool enableFlag);// 0x2df4308
	void SetMeshOnlyTickPoseWhenRendered();// 0x2df42f4
	void SetMeshOnlyTickMontagesWhenNotRendered();// 0x2df42e0
	bool SetMeshComponentLightChannel(int Channel);// 0x2df4258
	void SetIsUseDynamicBone(bool Use);// 0x2df41d4
	void SetFashionShowSettings(bool bIsWearHat, bool bIsWearHood, out AvatarData InAvatarData);// 0x2df4014
	void SetAnimInstanceEnableBySlot(out const enum Slot, bool bEnabled);// 0x2df3f40
	void SetAlwaysTickPoseAndRefreshBones();// 0x2df3f2c
	void ResetAvatar(out AvatarData AvatarData);// 0x2df3dec
	void ReleasePreloadedHDMode(const int iCopyPoseHead);// 0x2df3d70
	void ReleaseAvatar();// 0x2df3d54
	void RefreshOnePartSlot(out const FName PartName, out const FName SocketName);// 0x2df3c74
	bool NoDynamicHair();// 0x2df3c3c
	FaceMakeupMatBase* LuaGetMatModifier();// 0x2df3c00
	bool IsDynamicBoneSlot(enum Slot);// 0x2df3b78
	bool IsCurrentWearHat();// 0x2df3b40
	bool IsCurrentWearClothWithHood();// 0x2df3b20
	bool IsBakeFaceRuntimeDataReleased();// 0x2df3ae8
	CopyPoseAnimInstance* GetCopyPoseAnimInst();// 0x2df3ab4
	GFurComponent* GetAttachedGFurComponentBySlot(out const enum AvatarSlotType);// 0x2df3a20
	void GetAllPSCs(out ParticleSystemComponent*[] OutPSCs);// 0x2df3984
	void GetAllPSCActors(out Actor*[] OutPSCs);// 0x2df38e8
	void ForceHairNotFirstRender();// 0x2df38d4
	void CosPreloadHDMode(const int iCopyPoseHead);// 0x2df3858
	void ChangeAvatarParentMat(enum Slot, FName matSlotName, FString ParentMatPath);// 0x2df3754

--------------------------------
Class: AvatarCommonBase.AvatarBase.SceneComponent.ActorComponent.Object
	delegate OnAvatarLoadFinishForCpp;//[Offset: 0x12d0, Size: 0x10]
	void OnAvatarLoadedDelegateForCpp__DelegateSignature(AvatarCommonBase* AvatarCommonBase);// 0x33e07d0
	STExtraAnimInstance* GetCoreAnimInst();// 0x2df3414

--------------------------------
Class: AvatarBase.SceneComponent.ActorComponent.Object
	float DefaultMeshCullDistance;//[Offset: 0x2f8, Size: 0x4]
	MeshComponent* MasterBoneComponent;//[Offset: 0x300, Size: 0x8]
	SphereComponent* DamageCollision;//[Offset: 0x308, Size: 0x8]
	delegate OnAvatarLoadFinishForLua;//[Offset: 0x318, Size: 0x10]
	delegate OnAvatarBaseLoadFinisheForCpp;//[Offset: 0x328, Size: 0x10]
	delegate OnAllMeshLoadedDelegate;//[Offset: 0x338, Size: 0x10]
	delegate OnAvatarAnimInitBeforeTick;//[Offset: 0x348, Size: 0x10]
	InitAvatarParams ToInitAvatarParams;//[Offset: 0x3e8, Size: 0x3b0]
	<SkeletalMesh*> UsingMeshes;//[Offset: 0xa18, Size: 0x50]
	MeshData OldMasterMeshData;//[Offset: 0xa68, Size: 0x1d8]
	AvatarData MyAvatarData;//[Offset: 0xc40, Size: 0x78]
	<enum,MeshData> AvatarMeshList;//[Offset: 0xcb8, Size: 0x50]
	<enum,MeshComponent*> MeshComponentList;//[Offset: 0xd08, Size: 0x50]
	<enum,ParentMatData> MatSelectMap;//[Offset: 0xd58, Size: 0x50]
	<FString,Object*> ExternalResourceRefCache;//[Offset: 0xda8, Size: 0x50]
	void UnRegisterAnimationBudgetTemporary();// 0x4a1cfb4
	void SetSlotMatGlobalVectorParams(enum Slot, out const FName ParamName, LinearColor Value);// 0x4a1cea4
	void SetSlotMatGlobalScalarParams(enum Slot, out const FName ParamName, float Value);// 0x4a1cd94
	void SetParentMatType(enum ParentMatType, FName Reason, int Priority);// 0x4a1cc98
	bool SetMeshVisibleBySlot(out const enum AvatarSlotType, bool bIsVisible, out const FName ReasonName, out const int Priority);// 0x4a1cb0c
	void SetForceLodBySlotEx(enum AvatarSlotType, int Lod);// 0x4a1ca44
	void SetAvatarTransparent(float Opacity, out const FName Reason, int Priority);// 0x4a1c934
	void SetAvatarRelativeRotation(out const FName InReason, int InPriority, out const Rotator InRelativeRotation);// 0x4a1c81c
	void SetAvatarRelativeLocation(out const FName InReason, int InPriority, out const Vector InRelativeLocation);// 0x4a1c704
	void RevertDefaultGlobalScalarParams(enum Slot, FName ParamName);// 0x4a1c64c
	void ResetParentMatType(FName Reason);// 0x4a1c5c8
	void ResetAvatarTransparent(out const FName Reason);// 0x4a1c53c
	void ResetAvatarOnePartByType(enum slotType, out const int PartIdx);// 0x4a1c46c
	void ResetAvatarOnePart(FString PartName, out const int PartIdx);// 0x4a1c38c
	bool ResetAvatarCacheDataParam(FName Reason);// 0x4a1c304
	void ReregisterAnimationBudget();// 0x4a1c2e8
	void OnAvatarLoadedDelegateForLua__DelegateSignature(uint64 entityServerID);// 0x33e07d0
	void OnAvatarBaseLoadedDelegateForCpp__DelegateSignature(AvatarBase* AvatarBase);// 0x33e07d0
	void OnAvatarAnimInitBeforeTick__DelegateSignature(AnimInstance* AnimInstance, uint64 entityServerID);// 0x33e07d0
	void OnAnimInstanceInitBeforeTick(AnimInstance* InAnimInstance);// 0x4a1c26c
	void OnAllMeshLoadedDelegate__DelegateSignature();// 0x33e07d0
	bool IsUseHDRes();// 0x4a1c22c
	bool IsUsedForFashionShow();// 0x4a1c20c
	bool IsNeedRefresh(out const enum AvatarSlotType, out const int charIdx, out const int PartIdx);// 0x4a1c0bc
	void InitAvatarRelativeRotation(out const Rotator InRelativeRotation);// 0x4a1c034
	void InitAvatarRelativeLocation(out const Vector InRelativeLocation);// 0x4a1bfac
	int GetUseHDScene();// 0x4a1bf90
	Vector GetTopUILocation(byte TransSpace);// 0x4a1bf08
	AnimInstance* GetSubAnimInstanceByName(FName InName);// 0x4a1be84
	Transform GetSocketTransformInSkMesh(FName SocketName);// 0x4a1bdc0
	Rotator GetSocketRotByNewTransform(out const Vector newRootPos, out const Rotator newRootRot, out const FName SocketName);// 0x4a1bc80
	Vector GetSocketLocByNewTransform(out const Vector newRootPos, out const Rotator newRootRot, out const FName SocketName);// 0x4a1bb40
	Vector GetSocketLocationOffsetByName(out const FName SocketName);// 0x4a1baa8
	Vector GetSocketLocationByNameInSpace(out const FName SocketName, byte TransSpace);// 0x4a1b9c8
	Vector GetSocketLocationByName(out const FName SocketName);// 0x4a1b930
	bool GetMeshVisibleBySlot(out const enum AvatarSlotType);// 0x4a1b898
	MeshComponent* GetMeshComponentBySlot(out const enum AvatarSlotType);// 0x4a1b804
	FName GetMasterBoneNearestSocketName(out const Vector Location, FName BoneName);// 0x4a1b72c
	MaterialInstance* GetAvatarSlotMaterialInstanceByMatSlotName(const enum Slot, out const FName matSlotName);// 0x4a1b654
	AvatarData GetAvatarData();// 0x4a1b46c
	AnimInstance* GetAnimInstance();// 0x4a1b438
	void ClearAvatarRelativeRotation(out const FName InReason);// 0x4a1b3ac
	void ClearAvatarRelativeLocation(out const FName InReason);// 0x4a1b320

--------------------------------
Class: STExtraAnimInstance.AnimInstance.Object
	Rotator OwnerAimRotation;//[Offset: 0xc40, Size: 0xc]
	byte AnimInstanceType;//[Offset: 0xc4c, Size: 0x1]
	float PeekFrameRate;//[Offset: 0xc50, Size: 0x4]
	float PeekSpeed;//[Offset: 0xc58, Size: 0x4]
	bool C_NoAimOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5c, Size: 0x1]
	bool C_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5d, Size: 0x1]
	bool C_IsCharacterMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5e, Size: 0x1]
	bool C_IsSwimUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5f, Size: 0x1]
	bool C_MovementChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc60, Size: 0x1]
	bool C_UseHairAnimDynamics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc61, Size: 0x1]
	bool C_Scoping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc62, Size: 0x1]
	bool C_IsObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc63, Size: 0x1]
	bool C_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc64, Size: 0x1]
	bool C_SightSlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc65, Size: 0x1]
	bool C_IsPistolPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc66, Size: 0x1]
	bool C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc67, Size: 0x1]
	bool C_IsGlidingInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc68, Size: 0x1]
	bool C_IsHoldGrenade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc69, Size: 0x1]
	bool C_IsLongWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6a, Size: 0x1]
	Rotator SwimRotate;//[Offset: 0xc6c, Size: 0xc]
	bool C_FreezedRagdoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc78, Size: 0x1]
	bool C_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc79, Size: 0x1]
	bool C_Hurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7a, Size: 0x1]
	int C_HitCount;//[Offset: 0xc7c, Size: 0x4]
	float C_DeadType;//[Offset: 0xc80, Size: 0x4]
	bool C_IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc84, Size: 0x1]
	bool C_ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc85, Size: 0x1]
	bool C_IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc86, Size: 0x1]
	bool C_IsStandJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc87, Size: 0x1]
	bool C_IsForwardJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc88, Size: 0x1]
	bool C_IsBackwardJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc89, Size: 0x1]
	bool C_IsHorizonalJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8a, Size: 0x1]
	bool C_IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8b, Size: 0x1]
	bool C_IsHealing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8c, Size: 0x1]
	bool C_IdleAddtiveValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8d, Size: 0x1]
	bool C_ForegripAnimValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8e, Size: 0x1]
	bool C_EnableForegripAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8f, Size: 0x1]
	float C_FireAlpha;//[Offset: 0xc90, Size: 0x4]
	float C_SwimSpeed;//[Offset: 0xc94, Size: 0x4]
	float C_ProneHandleAlpha;//[Offset: 0xc98, Size: 0x4]
	float C_MaxFallingSpeed;//[Offset: 0xc9c, Size: 0x4]
	float C_HandleFolderFactor;//[Offset: 0xca0, Size: 0x4]
	float C_CharacterYawRotateRate;//[Offset: 0xca4, Size: 0x4]
	float C_ForegripAnimParam;//[Offset: 0xca8, Size: 0x4]
	bool C_IsEnteringNearDeathAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcac, Size: 0x1]
	bool C_IsLeanOutVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcad, Size: 0x1]
	byte C_SeatSpecialType;//[Offset: 0xcae, Size: 0x1]
	byte C_LODLevel;//[Offset: 0xcaf, Size: 0x1]
	bool C_LODLevelForced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb0, Size: 0x1]
	enum C_CurHoldGunState;//[Offset: 0xcb1, Size: 0x1]
	enum C_UseHoldGunMovementType;//[Offset: 0xcb2, Size: 0x1]
	enum C_HitGunState;//[Offset: 0xcb3, Size: 0x1]
	bool C_UseHoldGunIdleMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb4, Size: 0x1]
	bool C_UseHoldGunMiddleMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb5, Size: 0x1]
	bool C_UseHoldGunUpMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb6, Size: 0x1]
	bool C_UseHoldGunScopeMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcb7, Size: 0x1]
	enum C_LastUseHoldGunMovementType;//[Offset: 0xcb8, Size: 0x1]
	enum C_MovementAnimChangeFromHoldGunType;//[Offset: 0xcb9, Size: 0x1]
	enum C_MovementAnimChangeToHoldGunType;//[Offset: 0xcba, Size: 0x1]
	bool C_NoAdditiveMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcbb, Size: 0x1]
	float NeckTurnUILeftAngle;//[Offset: 0xcc0, Size: 0x4]
	float NeckTurnUIRightAngle;//[Offset: 0xcc4, Size: 0x4]
	float NeckTurnUIUPAngle;//[Offset: 0xcc8, Size: 0x4]
	float NeckTurnUIDownAngle;//[Offset: 0xccc, Size: 0x4]
	float NeckNotTurnAngle;//[Offset: 0xcd0, Size: 0x4]
	float NeckMapAngleDefault_Horizon;//[Offset: 0xcd4, Size: 0x4]
	float NeckMapAngleDefault_Portrait;//[Offset: 0xcd8, Size: 0x4]
	float NeckMapAngleLeft;//[Offset: 0xcdc, Size: 0x4]
	float NeckMapAngleRight;//[Offset: 0xce0, Size: 0x4]
	float NeckMapAngleUp;//[Offset: 0xce4, Size: 0x4]
	float NeckMapAngleDown;//[Offset: 0xce8, Size: 0x4]
	float NeckMapCrouchAngleDefault_Horizon;//[Offset: 0xcec, Size: 0x4]
	float NeckMapCrouchAngleDefault_Portrait;//[Offset: 0xcf0, Size: 0x4]
	float NeckMapCrouchAngleLeft;//[Offset: 0xcf4, Size: 0x4]
	float NeckMapCrouchAngleRight;//[Offset: 0xcf8, Size: 0x4]
	float NeckMapCrouchAngleUp;//[Offset: 0xcfc, Size: 0x4]
	float NeckMapCrouchAngleDown;//[Offset: 0xd00, Size: 0x4]
	float NeckTurnSpeed;//[Offset: 0xd04, Size: 0x4]
	byte C_LastMovementMode;//[Offset: 0xd08, Size: 0x1]
	byte C_PoseType;//[Offset: 0xd09, Size: 0x1]
	byte C_LastPoseType;//[Offset: 0xd0a, Size: 0x1]
	byte C_WeaponType;//[Offset: 0xd0b, Size: 0x1]
	byte C_WeaponState;//[Offset: 0xd0d, Size: 0x1]
	byte C_ParachuteState;//[Offset: 0xd0e, Size: 0x1]
	byte C_WeaponHoldType;//[Offset: 0xd0f, Size: 0x1]
	byte C_WeaponMainType;//[Offset: 0xd10, Size: 0x1]
	byte C_HurtType;//[Offset: 0xd11, Size: 0x1]
	Rotator C_OwnerRotation;//[Offset: 0xd14, Size: 0xc]
	Rotator C_ControlRotation;//[Offset: 0xd20, Size: 0xc]
	Rotator C_ViewRotation;//[Offset: 0xd2c, Size: 0xc]
	Rotator C_ScopeAimOffsetStand;//[Offset: 0xd38, Size: 0xc]
	Rotator C_HeadRotOffset;//[Offset: 0xd44, Size: 0xc]
	Rotator C_FPPStandOffsetRotation;//[Offset: 0xd50, Size: 0xc]
	Rotator C_FPPCrouchOffsetRotation;//[Offset: 0xd5c, Size: 0xc]
	Rotator C_FPPProneOffsetRotation;//[Offset: 0xd68, Size: 0xc]
	Vector C_MoveVelocity;//[Offset: 0xd74, Size: 0xc]
	float C_MoveVelocityZ;//[Offset: 0xd80, Size: 0x4]
	Vector C_MoveVelocityInWorldSpace;//[Offset: 0xd84, Size: 0xc]
	Vector C_MoveDir;//[Offset: 0xd90, Size: 0xc]
	Vector C_HurtDir;//[Offset: 0xd9c, Size: 0xc]
	Vector C_FPPStandOffsetLocation;//[Offset: 0xda8, Size: 0xc]
	Vector C_FPPCrouchOffsetLocation;//[Offset: 0xdb4, Size: 0xc]
	Vector C_FPPProneOffsetLocation;//[Offset: 0xdc0, Size: 0xc]
	PlayerCharacter* C_OwnerCharacter;//[Offset: 0xdd0, Size: 0x8]
	XPlayerMotionComponent* C_MotionComp;//[Offset: 0xdd8, Size: 0x8]
	bool C_IsMainCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde0, Size: 0x1]
	bool C_IsMale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde1, Size: 0x1]
	bool C_NoHitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde2, Size: 0x1]
	bool C_IsHalfBodyHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde3, Size: 0x1]
	bool C_IsTremble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde4, Size: 0x1]
	bool C_IsSprintFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde5, Size: 0x1]
	bool C_IsInSprintState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde6, Size: 0x1]
	bool C_UseHoldGunIdleAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde7, Size: 0x1]
	bool C_UseHoldGunIdleGrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde8, Size: 0x1]
	float f_C_UseHoldGunIdleAddBlendOut;//[Offset: 0xdec, Size: 0x4]
	bool C_UseFlareGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf2, Size: 0x1]
	bool C_ShouldAdditiveFlare;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf3, Size: 0x1]
	bool C_ShouldAdditiveForegrip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf4, Size: 0x1]
	bool C_ShouldAdditiveForegripObstructed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf5, Size: 0x1]
	bool C_ShouldPlayObstructedAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf6, Size: 0x1]
	bool C_ShouldIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf7, Size: 0x1]
	bool C_ShouldForbiddenIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf8, Size: 0x1]
	bool C_IsFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf9, Size: 0x1]
	float C_HoldingShieldAlpha;//[Offset: 0xdfc, Size: 0x4]
	float C_MoveAnimRate;//[Offset: 0xe00, Size: 0x4]
	float C_HoldingShieldAdditive;//[Offset: 0xe04, Size: 0x4]
	bool C_IsDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe08, Size: 0x1]
	bool C_IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe09, Size: 0x1]
	float C_MoveSpeed2D;//[Offset: 0xe0c, Size: 0x4]
	float C_MoveDirection;//[Offset: 0xe10, Size: 0x4]
	bool C_IsInJumpRollState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe14, Size: 0x1]
	bool C_IsInMachineGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe15, Size: 0x1]
	bool C_IsInWeaponSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe16, Size: 0x1]
	bool C_IsInBuildingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe17, Size: 0x1]
	bool C_IsInBuildPlacing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe18, Size: 0x1]
	int C_Sleep;//[Offset: 0xe1c, Size: 0x4]
	float C_InputDirection;//[Offset: 0xe20, Size: 0x4]
	float C_InputMagnitude;//[Offset: 0xe24, Size: 0x4]
	bool C_bMoveForwardDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe28, Size: 0x1]
	bool C_bSwitchMoveForwardAndBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe29, Size: 0x1]
	bool C_EnableLeftHandAttachIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe38, Size: 0x1]
	bool C_EnableRightHandAttachIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe39, Size: 0x1]
	Transform C_LeftHandAttachTrans;//[Offset: 0xe40, Size: 0x30]
	Transform C_RightHandAttachTrans;//[Offset: 0xe70, Size: 0x30]
	bool C_EnableLeftFootAttachIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea0, Size: 0x1]
	bool C_EnableRightFootAttachIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea1, Size: 0x1]
	Transform C_LeftFootAttachTrans;//[Offset: 0xeb0, Size: 0x30]
	Transform C_RightFootAttachTrans;//[Offset: 0xee0, Size: 0x30]
	float C_FPS;//[Offset: 0xf10, Size: 0x4]
	int[] C_HurtValueArray;//[Offset: 0xf18, Size: 0x10]
	bool C_IsPlayingLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf28, Size: 0x1]
	Vector C_RawMoveInput;//[Offset: 0xf2c, Size: 0xc]
	AimOffsetBlendSpace* C_AimBlendSpace;//[Offset: 0xf38, Size: 0x8]
	AimOffsetBlendSpace* C_HoldGunAimBlendSpace;//[Offset: 0xf40, Size: 0x8]
	AimOffsetBlendSpace* C_HoldGunShieldAim;//[Offset: 0xf48, Size: 0x8]
	BlendSpace* C_MovementBSCache;//[Offset: 0xf50, Size: 0x8]
	BlendSpace* C_HitBlendSpace;//[Offset: 0xf58, Size: 0x8]
	BlendSpace* C_MovementBSCache_Dest;//[Offset: 0xf60, Size: 0x8]
	BlendSpace* C_ObstructedAnim;//[Offset: 0xf68, Size: 0x8]
	BlendSpace1D* C_FallingBS;//[Offset: 0xf70, Size: 0x8]
	BlendSpace1D* C_FallingHoldGunBS;//[Offset: 0xf78, Size: 0x8]
	CurveFloat* C_FallingIKCurve;//[Offset: 0xf80, Size: 0x8]
	BlendSpace1D* C_PeekAnim;//[Offset: 0xf88, Size: 0x8]
	BlendSpace1D* C_ForegripAnim;//[Offset: 0xf90, Size: 0x8]
	BlendSpace1D* C_ForegripIdleAnim;//[Offset: 0xf98, Size: 0x8]
	BlendSpace1D* C_ForegripMiddleAnim;//[Offset: 0xfa0, Size: 0x8]
	AimOffsetBlendSpace* C_PeekAnimLeftRight;//[Offset: 0xfa8, Size: 0x8]
	AnimSequence* C_TurnAnim;//[Offset: 0xfb0, Size: 0x8]
	AnimSequence* C_PreJumpStart;//[Offset: 0xfb8, Size: 0x8]
	AnimSequence* C_PreJumpStartHoldGun;//[Offset: 0xfc0, Size: 0x8]
	AnimSequence* C_JumpStart;//[Offset: 0xfc8, Size: 0x8]
	AnimSequence* C_JumpStartHoldGun;//[Offset: 0xfd0, Size: 0x8]
	AnimSequence* C_JumpStartF;//[Offset: 0xfd8, Size: 0x8]
	AnimSequence* C_JumpStartHoldGunF;//[Offset: 0xfe0, Size: 0x8]
	AnimSequence* C_LandLight;//[Offset: 0xfe8, Size: 0x8]
	AnimSequence* C_LandLightHoldGun;//[Offset: 0xff0, Size: 0x8]
	AnimSequence* C_LandMiddle;//[Offset: 0xff8, Size: 0x8]
	AnimSequence* C_LandMiddleHoldGun;//[Offset: 0x1000, Size: 0x8]
	AnimSequence* C_LandHeavy;//[Offset: 0x1008, Size: 0x8]
	AnimSequence* C_LandHeavyHoldGun;//[Offset: 0x1010, Size: 0x8]
	AnimSequence* C_IdleAddtive;//[Offset: 0x1018, Size: 0x8]
	AnimSequence* C_ShieldAddtive;//[Offset: 0x1020, Size: 0x8]
	BlendSpace* C_NearHitBlendSpace;//[Offset: 0x1028, Size: 0x8]
	AnimMontage* C_HurtDown;//[Offset: 0x1030, Size: 0x8]
	AnimMontage* C_HurtFire;//[Offset: 0x1038, Size: 0x8]
	AnimMontage* C_HurtBlind;//[Offset: 0x1040, Size: 0x8]
	BlendSpace* C_HoldGunMovementBS;//[Offset: 0x1048, Size: 0x8]
	BlendSpace* C_HoldGunUpMovementBS;//[Offset: 0x1050, Size: 0x8]
	BlendSpace* C_HoldGunScopeMovementBS;//[Offset: 0x1058, Size: 0x8]
	BlendSpace* C_HoldGunNoSprintMovementBS;//[Offset: 0x1060, Size: 0x8]
	AnimSequence* C_HoldGunIdleAdditive;//[Offset: 0x1068, Size: 0x8]
	AnimSequence* C_MovementBase;//[Offset: 0x1070, Size: 0x8]
	AnimSequence* C_StandbyAnimSequence;//[Offset: 0x1078, Size: 0x8]
	BlendSpace* C_HoldGunIdleMoveBS;//[Offset: 0x1080, Size: 0x8]
	BlendSpace* C_HoldGunIdleMove_Back_BS;//[Offset: 0x1088, Size: 0x8]
	BlendSpace* C_MoveStartBS;//[Offset: 0x1090, Size: 0x8]
	BlendSpace* C_MoveStopLeftBS;//[Offset: 0x1098, Size: 0x8]
	BlendSpace* C_MoveStopRightBS;//[Offset: 0x10a0, Size: 0x8]
	BlendSpace* C_StandScopeMovementBS;//[Offset: 0x10a8, Size: 0x8]
	BlendSpace* C_CrouchScopeMovementBS;//[Offset: 0x10b0, Size: 0x8]
	BlendSpace* C_ColdWStandMoveBS;//[Offset: 0x10b8, Size: 0x8]
	BlendSpace* C_ColdWCrouchMoveBS;//[Offset: 0x10c0, Size: 0x8]
	AnimSequence* C_ColdWCrouchBase;//[Offset: 0x10c8, Size: 0x8]
	AnimSequence* C_ColdWStandBase;//[Offset: 0x10d0, Size: 0x8]
	AnimSequence* C_ColdWStandIdleIdditive;//[Offset: 0x10d8, Size: 0x8]
	AnimSequence* C_ColdWCrouchIdleIdditive;//[Offset: 0x10e0, Size: 0x8]
	AnimSequence* C_ColdWeaponStartJumpSeq;//[Offset: 0x10e8, Size: 0x8]
	BlendSpace1D* C_ColdWeaponFallingBS1D;//[Offset: 0x10f0, Size: 0x8]
	AnimSequence* C_ColdWeaponForwardLandMoveSeq;//[Offset: 0x10f8, Size: 0x8]
	AnimSequence* C_ColdWeaponBackLandMoveSeq;//[Offset: 0x1100, Size: 0x8]
	AnimSequence* C_ColdWeaponLightLandIdleSeq;//[Offset: 0x1108, Size: 0x8]
	AimOffsetBlendSpace* C_ColdWStandAimBS;//[Offset: 0x1110, Size: 0x8]
	AnimSequence* C_StandColdWExtraAdditive;//[Offset: 0x1118, Size: 0x8]
	AnimSequence* C_CrouchColdWExtraAdditive;//[Offset: 0x1120, Size: 0x8]
	AnimSequenceBase* C_FurnitureInteractAnim;//[Offset: 0x1128, Size: 0x8]
	AnimSequenceBase* C_CustomAnimSeq;//[Offset: 0x1130, Size: 0x8]
	AnimSequenceBase* C_CustomMovingAnimSeq;//[Offset: 0x1138, Size: 0x8]
	AnimSequence* C_CacheStandbyAnimSequence;//[Offset: 0x1140, Size: 0x8]
	AnimSequenceBase* C_DefaultMachineGunBasePose;//[Offset: 0x1148, Size: 0x8]
	BlendSpaceBase* C_DefaultMachineGunAO;//[Offset: 0x1150, Size: 0x8]
	AnimSequenceBase* C_MachineGunBasePose;//[Offset: 0x1158, Size: 0x8]
	BlendSpaceBase* C_MachineGunAO;//[Offset: 0x1160, Size: 0x8]
	AnimSequenceBase* C_DyanmicMachineGunBasePose;//[Offset: 0x1168, Size: 0x8]
	BlendSpaceBase* C_DyanmicMachineGunAO;//[Offset: 0x1170, Size: 0x8]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1178, Size: 0x1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1179, Size: 0x1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x117a, Size: 0x1]
	bool C_LOD_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x117b, Size: 0x1]
	bool b_C_WeaponState_EQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x117c, Size: 0x1]
	float f_C_WeaponState_EQ_Reload;//[Offset: 0x1180, Size: 0x4]
	bool b_C_WeaponState_NEQ_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1184, Size: 0x1]
	bool b_P_AimOffsetActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1185, Size: 0x1]
	bool b_C_PeekFrameRate_NEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1186, Size: 0x1]
	bool b_C_PeekFrameRate_NEQ_0_OR_C_IsPeeking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1187, Size: 0x1]
	bool b_C_PeekFrameRateNEQ0_AND_C_IsPistolPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1188, Size: 0x1]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation;//[Offset: 0x118c, Size: 0xc]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation_Yaw;//[Offset: 0x1198, Size: 0xc]
	bool b_C_IsOnVehicle_AND_C_IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a4, Size: 0x1]
	bool b_C_PoseType_EQ_Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a5, Size: 0x1]
	bool b_C_PoseType_NEQ_Prone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a6, Size: 0x1]
	Rotator r_C_FPPStandOffsetRotation_half;//[Offset: 0x11a8, Size: 0xc]
	Rotator r_C_FPPCrouchOffsetRotation_half;//[Offset: 0x11b4, Size: 0xc]
	Rotator r_C_FPPProneOffsetRotation_half;//[Offset: 0x11c0, Size: 0xc]
	float f_C_MoveVelocityLengthSquard;//[Offset: 0x11cc, Size: 0x4]
	bool b_C_MoveVelocityLengthSquard_Bigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11d0, Size: 0x1]
	Vector C_MoveVelocityInWorldSpaceReverse;//[Offset: 0x11d4, Size: 0xc]
	bool b_C_Move_OR_C_IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e0, Size: 0x1]
	bool b_Crouch_SwitchWeapon_Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e1, Size: 0x1]
	bool b_OnVehicle_LeanOut_NarrowSeat_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e2, Size: 0x1]
	bool b_OnVehicle_LeanOut_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e3, Size: 0x1]
	bool b_WeaponState_EQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e4, Size: 0x1]
	bool b_WeaponState_NEQ_SwitchWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e5, Size: 0x1]
	float C_CharacterYawRotateRate_Reverse;//[Offset: 0x11e8, Size: 0x4]
	bool b_Move_PistolOrRifleGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11ec, Size: 0x1]
	float f_FallingVelocityZFactor;//[Offset: 0x11f0, Size: 0x4]
	float f_C_MoveVelocity_X_FallingZFactor;//[Offset: 0x11f4, Size: 0x4]
	bool b_C_ParachuteState_EQ_FreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f8, Size: 0x1]
	bool b_C_ParachuteState_NEQ_FreeFall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11f9, Size: 0x1]
	bool b_C_ParachuteState_EQ_Landing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11fa, Size: 0x1]
	bool b_WalkToUnarmedFalling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11fb, Size: 0x1]
	bool b_WalkToRifleJumpStationStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11fc, Size: 0x1]
	bool b_StandToRifleJumpStationStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11fd, Size: 0x1]
	bool b_UnarmedFallingToRifleFallLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11fe, Size: 0x1]
	bool b_UnarmedFallingToRifleCombatFallLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11ff, Size: 0x1]
	bool b_UnarmedFallingToRifleFallLandingMiddle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1200, Size: 0x1]
	bool b_C_LastMovementMode_EQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1201, Size: 0x1]
	bool b_C_LastMovementMode_NEQ_Falling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1202, Size: 0x1]
	float f_C_ViewRotation_IN_C_Scoping;//[Offset: 0x1204, Size: 0x4]
	float f_C_ViewRotation_Yaw;//[Offset: 0x1208, Size: 0x4]
	float b_WalkAdditiveAlpha;//[Offset: 0x120c, Size: 0x4]
	float f_C_MoveVelocity_Div_SwimSpeed_X;//[Offset: 0x1210, Size: 0x4]
	float f_C_MoveVelocity_Div_SwimSpeed_Y;//[Offset: 0x1214, Size: 0x4]
	bool C_IsClimbingLandder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1218, Size: 0x1]
	enum C_ClimbType;//[Offset: 0x1219, Size: 0x1]
	enum C_ClimbingState;//[Offset: 0x121a, Size: 0x1]
	float f_MovementBSChangeDefaultBlendTime;//[Offset: 0x121c, Size: 0x4]
	float f_PoseChangeBlendTime;//[Offset: 0x1220, Size: 0x4]
	float f_HoldGunStateChangeBlendTime;//[Offset: 0x1224, Size: 0x4]
	float f_HoldGunIdle2MiddleBlendTime;//[Offset: 0x1228, Size: 0x4]
	float f_HoldGunIdle2UpBlendTime;//[Offset: 0x122c, Size: 0x4]
	float f_HoldGun2IdleBlendTime;//[Offset: 0x1230, Size: 0x4]
	float f_HoldGun2ScopeBlendTime;//[Offset: 0x1234, Size: 0x4]
	float f_HoldGunScopeBlendOutTime;//[Offset: 0x1238, Size: 0x4]
	float f_JumpLandingHeavyZOffset;//[Offset: 0x123c, Size: 0x4]
	float f_JumpLandingHeavyZThreshold;//[Offset: 0x1240, Size: 0x4]
	float f_JumpLandingMiddleZThreshold;//[Offset: 0x1244, Size: 0x4]
	float f_WeaponObReloadUpAO;//[Offset: 0x1248, Size: 0x4]
	float ReloadFireBlot;//[Offset: 0x124c, Size: 0x4]
	enum C_BeHitCameraShakeLevel;//[Offset: 0x1250, Size: 0x1]
	Vector Acceleration;//[Offset: 0x1254, Size: 0xc]
	Vector LocalAcceleration;//[Offset: 0x1260, Size: 0xc]
	bool C_M_WeaponTypeIsGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x126c, Size: 0x1]
	bool C_M_WeaponIsNone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x126d, Size: 0x1]
	bool C_M_WeaponTypeIsColdWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x126e, Size: 0x1]
	bool C_M_WeaponTypeIsBow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x126f, Size: 0x1]
	bool C_M_ShouldChangToGunUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1270, Size: 0x1]
	bool C_M_ShouldChangToGunDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1271, Size: 0x1]
	bool C_M_ShouldPlayTransAnimationToGunDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1272, Size: 0x1]
	bool C_M_ShouldPlayTransBlendToGunDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1273, Size: 0x1]
	bool C_M_sholdNotPlayHoldgunTransAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1274, Size: 0x1]
	bool C_M_isCrouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1275, Size: 0x1]
	bool C_M_isMaleAnddNotTwistHoldgunposeik;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1276, Size: 0x1]
	bool C_M_isSightSlowOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1277, Size: 0x1]
	bool C_M_isMovingstop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1278, Size: 0x1]
	bool C_M_canEntertoMovestart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1279, Size: 0x1]
	bool C_M_canEnterIdletoMovestart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x127a, Size: 0x1]
	bool C_M_InputMagEqualTo2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x127b, Size: 0x1]
	bool C_M_VelocityEqualTo600;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x127c, Size: 0x1]
	bool C_M_canEnterSprintTranstoMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x127d, Size: 0x1]
	bool C_M_canEnterSprintingToMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x127e, Size: 0x1]
	bool C_M_MoceVelocitynotequalsto0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x127f, Size: 0x1]
	bool C_M_canEnterCurMovement_guntoSprintFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1280, Size: 0x1]
	bool C_M_canEnterDestMovementtoGunDownState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1281, Size: 0x1]
	bool C_M_canEnterSprintFiretoCurmovement_GunUpState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1282, Size: 0x1]
	bool C_M_isLandingStationary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1283, Size: 0x1]
	bool C_M_isLandingMiddle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1284, Size: 0x1]
	bool C_M_isLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1285, Size: 0x1]
	bool C_M_canEnterWalktoSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1286, Size: 0x1]
	bool C_M_canEnterSleeptoWalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1287, Size: 0x1]
	bool C_M_HalfBodySlotRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1288, Size: 0x1]
	bool C_M_canEnterWalktoSwimming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1289, Size: 0x1]
	bool C_M_canEnterWalktoFlying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128a, Size: 0x1]
	bool C_M_canEnterSwimmingtoWalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128b, Size: 0x1]
	bool C_M_canEnterFlyingtoWalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128c, Size: 0x1]
	bool C_M_HoldGunUseIKRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128d, Size: 0x1]
	bool C_M_ObstructUseIKRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128e, Size: 0x1]
	bool C_M_TotalIKRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128f, Size: 0x1]
	float C_M_LastDirection;//[Offset: 0x1290, Size: 0x4]
	float C_M_LastSpeed;//[Offset: 0x1294, Size: 0x4]
	float C_M_Yaw;//[Offset: 0x1298, Size: 0x4]
	float C_M_YawDelta;//[Offset: 0x129c, Size: 0x4]
	Rotator C_M_RotationLastTick;//[Offset: 0x12a0, Size: 0xc]
	bool C_M_RightFootLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12ac, Size: 0x1]
	bool C_M_LeftFootLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12ad, Size: 0x1]
	bool C_M_EnableAOwhenPeekAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12ae, Size: 0x1]
	bool C_M_ShouldGunDownLandMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12af, Size: 0x1]
	bool C_M_ShouldGunUpLandMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12b0, Size: 0x1]
	float C_M_HurtingAlpha;//[Offset: 0x12b4, Size: 0x4]
	float C_SwitchWeaponRate;//[Offset: 0x12b8, Size: 0x4]
	float C_SwitchWeaponLinkTime;//[Offset: 0x12bc, Size: 0x4]
	enum C_InteractType;//[Offset: 0x12c0, Size: 0x1]
	enum C_DoubleInteractMoveType;//[Offset: 0x12c1, Size: 0x1]
	enum C_DoubleInteractGenderType;//[Offset: 0x12c2, Size: 0x1]
	bool C_InCustomAnimState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c3, Size: 0x1]
	enum C_CustomAnimPoseType;//[Offset: 0x12c4, Size: 0x1]
	bool C_LandingEven;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c5, Size: 0x1]
	bool C_SetUseArtCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12c6, Size: 0x1]
	float C_CameraAimOffsetZ;//[Offset: 0x12c8, Size: 0x4]
	AnimSequence* C_AOp_FunctionCrouchBasePose;//[Offset: 0x12d0, Size: 0x8]
	AnimSequence* C_AOp_FunctionStandBasePose;//[Offset: 0x12d8, Size: 0x8]
	Rotator C_AOp_LastVelocityRotation;//[Offset: 0x12e0, Size: 0xc]
	Rotator C_AOp_CharacterRotationLast;//[Offset: 0x12ec, Size: 0xc]
	Rotator C_AOp_CharacterRotation;//[Offset: 0x12f8, Size: 0xc]
	Vector C_AOp_InterpMoveVelocity;//[Offset: 0x1304, Size: 0xc]
	Vector C_AOp_MovingScaleItemL;//[Offset: 0x1310, Size: 0xc]
	Vector C_AOp_MovingScaleItemR;//[Offset: 0x131c, Size: 0xc]
	Vector C_AOp_CharacterVelocity;//[Offset: 0x1328, Size: 0xc]
	float C_AOp_OnGroundAnimOffset;//[Offset: 0x1334, Size: 0x4]
	float C_AOp_OnGroundAddtive;//[Offset: 0x1338, Size: 0x4]
	float C_AOp_JumpRotateVar;//[Offset: 0x133c, Size: 0x4]
	float C_AOp_LeanInAir;//[Offset: 0x1340, Size: 0x4]
	float C_AOp_BaseMoveRate;//[Offset: 0x1344, Size: 0x4]
	float C_AOp_DirectionBackInterp;//[Offset: 0x1348, Size: 0x4]
	float C_AOp_ForwardDirection;//[Offset: 0x134c, Size: 0x4]
	float C_AOp_FallingSpeed;//[Offset: 0x1350, Size: 0x4]
	float C_AOp_BackwardDirection;//[Offset: 0x1354, Size: 0x4]
	float C_AOp_BackwardTick;//[Offset: 0x1358, Size: 0x4]
	float C_AOp_JumpInAirLeanVar;//[Offset: 0x135c, Size: 0x4]
	float C_AOp_DirectionInterp;//[Offset: 0x1360, Size: 0x4]
	float C_AOp_ForwardMoveReset;//[Offset: 0x1364, Size: 0x4]
	float C_AOp_BodyLowAngleForGrenade;//[Offset: 0x1368, Size: 0x4]
	float C_AOp_BodyLowAngleForGun;//[Offset: 0x136c, Size: 0x4]
	float C_AOp_SinTime;//[Offset: 0x1370, Size: 0x4]
	float C_AOp_FloatChecker;//[Offset: 0x1374, Size: 0x4]
	float C_AOp_LastDirectionVar;//[Offset: 0x1378, Size: 0x4]
	float C_AOp_LastDirectionInterp;//[Offset: 0x137c, Size: 0x4]
	float C_AOp_Direction;//[Offset: 0x1380, Size: 0x4]
	float C_AOp_LeanAlphaVar;//[Offset: 0x1384, Size: 0x4]
	float C_AOp_CharacterSpeedInterp;//[Offset: 0x1388, Size: 0x4]
	float C_AOp_CharacterSpeed;//[Offset: 0x138c, Size: 0x4]
	float C_AOp_MovingTick;//[Offset: 0x1390, Size: 0x4]
	float C_AOp_IKBlendTime;//[Offset: 0x1394, Size: 0x4]
	float C_AOp_LastDirection;//[Offset: 0x1398, Size: 0x4]
	int C_AOp_LowReadyRamdon;//[Offset: 0x139c, Size: 0x4]
	bool C_AOp_State_MoveToIdleBackward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a0, Size: 0x1]
	bool C_AOp_ContinuousJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a1, Size: 0x1]
	bool C_AOp_IsMoveForwardBeforeJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a2, Size: 0x1]
	bool C_AOp_State_MoveToIdleForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a3, Size: 0x1]
	bool C_AOp_InAirRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a4, Size: 0x1]
	bool C_AOp_IsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a5, Size: 0x1]
	bool C_AOp_WeaponTypeIsColdsteel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a6, Size: 0x1]
	bool C_AOp_IsMoveForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a7, Size: 0x1]
	bool C_AOp_SM_2MeleeAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a8, Size: 0x1]
	bool C_AOp_ForceOldBaseMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13a9, Size: 0x1]
	bool C_AOp_WeaponTypeIsGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13aa, Size: 0x1]
	bool C_AOp_SM_2Unarmed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13ab, Size: 0x1]
	bool C_AOp_State_IdleToMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13ac, Size: 0x1]
	bool C_AOp_State_IdleToStandConduit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13ad, Size: 0x1]
	bool C_AOp_ForwardMoveSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13ae, Size: 0x1]
	bool C_AOp_SM_2Function;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13af, Size: 0x1]
	bool C_AOp_SM_2RangedAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b0, Size: 0x1]
	bool C_AOp_UseStopAni;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b1, Size: 0x1]
	bool C_AOp_InAirAndGrounding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b2, Size: 0x1]
	bool C_AOp_ChangeDirection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b3, Size: 0x1]
	bool C_AOp_FireEffectSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b4, Size: 0x1]
	bool C_AOp_isTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b5, Size: 0x1]
	bool C_AOp_OnGroundToIdleToMiddle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b6, Size: 0x1]
	bool C_AOp_OnGroundToIdleToHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b7, Size: 0x1]
	bool C_AOp_OnGroundToIdleToLow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b8, Size: 0x1]
	bool C_AOp_UseIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13b9, Size: 0x1]
	bool C_AOp_AinmationHighReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13ba, Size: 0x1]
	bool C_AOp_IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13bb, Size: 0x1]
	enum C_AOp_CharacterPoseState;//[Offset: 0x13bc, Size: 0x1]
	enum C_AOp_CharacterActionState;//[Offset: 0x13bd, Size: 0x1]
	enum C_AOp_CharacterScopeState;//[Offset: 0x13be, Size: 0x1]
	byte C_AOp_Movementmode;//[Offset: 0x13bf, Size: 0x1]
	enum C_AOp_CharacterMovingState;//[Offset: 0x13c0, Size: 0x1]
	AOpDirectionLerpVar C_AOp_JumpRotarteP_LR;//[Offset: 0x13c4, Size: 0x20]
	AOpDirectionLerpVar C_AOp_JumpOnGroundStr;//[Offset: 0x13e4, Size: 0x20]
	AOpDirectionLerpVar C_AOp_JumpInAirLeaning;//[Offset: 0x1404, Size: 0x20]
	AOpDirectionLerpVar C_AOp_JumpOnGroundAniOffset;//[Offset: 0x1424, Size: 0x20]
	Vector2D C_AOp_FeetPosition;//[Offset: 0x1444, Size: 0x8]
	AOpDirectionLerpVar C_AOp_JumpRotarteP_B;//[Offset: 0x144c, Size: 0x20]
	AOpDirectionLerpVar C_AOp_JumpRotarteP_F;//[Offset: 0x146c, Size: 0x20]
	float C_Aop_GatlingScoping;//[Offset: 0x148c, Size: 0x4]
	bool C_AOp_BPDebugSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1490, Size: 0x1]
	bool C_AOp_FunctionUsedHighReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1491, Size: 0x1]
	float C_JumpRotateInputYaw;//[Offset: 0x1494, Size: 0x4]
	bool C_bUseNormalFallingPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1498, Size: 0x1]
	AOpDirectionLerpVarConfig HighReadyJumpRotationConfig;//[Offset: 0x14a0, Size: 0x20]
	AOpDirectionLerpVarConfig LowReadyJumpRotationConfig;//[Offset: 0x14c0, Size: 0x20]
	AOpDirectionLerpVarConfig ColdWeaponJumpRotationConfig;//[Offset: 0x14e0, Size: 0x20]
	AOpDirectionLerpVarConfig UnarmedJumpRotationConfig;//[Offset: 0x1500, Size: 0x20]
	AOpDirectionLerpVarConfig BowJumpRotationConfig;//[Offset: 0x1520, Size: 0x20]
	AOpDirectionLerpVarConfig DefaultJumpRotationConfig;//[Offset: 0x1540, Size: 0x20]
	Vector2D C_LeanGrounded;//[Offset: 0x1560, Size: 0x8]
	Vector2D C_HeadAimOffset;//[Offset: 0x1568, Size: 0x8]
	float WalkSpeed;//[Offset: 0x1570, Size: 0x4]
	float RunSpeed;//[Offset: 0x1574, Size: 0x4]
	AnimSequence* C_FunctionStandBasePose;//[Offset: 0x1598, Size: 0x8]
	AnimSequence* C_FunctionCrouchBasePose;//[Offset: 0x15a0, Size: 0x8]
	AnimSequence* C_BuildingStandBasePose;//[Offset: 0x15a8, Size: 0x8]
	AnimSequence* C_BuildingCrouchBasePose;//[Offset: 0x15b0, Size: 0x8]
	bool C_bCouchSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15b8, Size: 0x1]
	bool C_NCrouch_NSPrint_Vstcss;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15b9, Size: 0x1]
	bool C_Idle_NMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15ba, Size: 0x1]
	bool C_NIdleNInAirMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15bb, Size: 0x1]
	float C_HeadAnimOffset_NeX;//[Offset: 0x15bc, Size: 0x4]
	bool C_CrouchMIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c0, Size: 0x1]
	bool C_NCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c1, Size: 0x1]
	bool C_InAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c2, Size: 0x1]
	bool C_NIdleNInAirCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c3, Size: 0x1]
	bool C_NCrouch_InAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c4, Size: 0x1]
	bool C_Crouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c5, Size: 0x1]
	bool C_NStand_NGround_InAirGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c6, Size: 0x1]
	bool C_GroundStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c7, Size: 0x1]
	bool C_GroundContinJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c8, Size: 0x1]
	bool C_StandIdleGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c9, Size: 0x1]
	bool C_NStand_NGround_InAirGroundSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15ca, Size: 0x1]
	bool C_NIdleNInAirStandGroundNContinJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15cb, Size: 0x1]
	bool C_Melee_PickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15cc, Size: 0x1]
	bool C_NGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15cd, Size: 0x1]
	bool C_Ground;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15ce, Size: 0x1]
	bool C_Idle_Crouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15cf, Size: 0x1]
	float C_JumpRotateYaw;//[Offset: 0x15d0, Size: 0x4]
	bool C_GroundNContinJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d4, Size: 0x1]
	bool C_NIdleNInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d5, Size: 0x1]
	bool C_GroundNIdleInAirGrounding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d6, Size: 0x1]
	bool C_NGround_NIdle_NStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d7, Size: 0x1]
	bool C_NGround_NIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d8, Size: 0x1]
	float C_LowLandPlayRate;//[Offset: 0x15dc, Size: 0x4]
	float C_LowLandRotateYaw;//[Offset: 0x15e0, Size: 0x4]
	bool C_GroundNoMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e4, Size: 0x1]
	bool C_GroundMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e5, Size: 0x1]
	bool C_GroundIdleInAirGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e6, Size: 0x1]
	bool C_NInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e7, Size: 0x1]
	bool C_LowReady_CanStartJumpB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e8, Size: 0x1]
	bool C_LowReady_CanStartJumpF;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e9, Size: 0x1]
	bool C_NMoveFBeforeJumpIsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15ea, Size: 0x1]
	bool C_MoveFBeforeJumpIsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15eb, Size: 0x1]
	float C_FallToRunRotate;//[Offset: 0x15ec, Size: 0x4]
	float C_FallToIdleRotate;//[Offset: 0x15f0, Size: 0x4]
	float C_HeadAnimOffset_NeHalfX;//[Offset: 0x15f4, Size: 0x4]
	bool C_ScopeIn_InAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15f8, Size: 0x1]
	bool C_CrouchIdleNScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15f9, Size: 0x1]
	bool C_NIdleNInAirCrouchNScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15fa, Size: 0x1]
	bool C_GunScope_InAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15fb, Size: 0x1]
	bool C_CrouchNGunScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15fc, Size: 0x1]
	bool C_CrouchGunSope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15fd, Size: 0x1]
	bool C_StandGunScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15fe, Size: 0x1]
	bool C_NGunScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15ff, Size: 0x1]
	bool C_GunScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1600, Size: 0x1]
	bool C_StandNGunScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1601, Size: 0x1]
	bool C_StandIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1602, Size: 0x1]
	bool C_NIdleNInAirStandNGunScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1603, Size: 0x1]
	bool C_Vault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1604, Size: 0x1]
	bool C_Idle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1605, Size: 0x1]
	bool C_NIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1606, Size: 0x1]
	bool C_NGround_InAirJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1607, Size: 0x1]
	bool C_mAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1608, Size: 0x1]
	bool C_NmAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1609, Size: 0x1]
	bool C_mAirJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160a, Size: 0x1]
	bool C_mAirNJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160b, Size: 0x1]
	float C_HighReadyFallVar;//[Offset: 0x160c, Size: 0x4]
	bool C_StandSprint_CrouchSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1610, Size: 0x1]
	float C_CrouchMoveLeanRight;//[Offset: 0x1614, Size: 0x4]
	bool C_Idle_Crouch_Scope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1618, Size: 0x1]
	bool C_NGround_NIdle_NStand_Scope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1619, Size: 0x1]
	Rotator C_ColdWeaponCrouchMoveRotater;//[Offset: 0x161c, Size: 0xc]
	bool C_MoveBack_MoveForward;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1628, Size: 0x1]
	bool C_MoveForwardContinusJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1629, Size: 0x1]
	bool C_MoveFBeforeJumpNContinJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x162a, Size: 0x1]
	float C_ColdWeaponStartJumpFRotYaw;//[Offset: 0x162c, Size: 0x4]
	Rotator C_ColdWeaponFallRotator;//[Offset: 0x1630, Size: 0xc]
	float C_BowCrouchMoveLeanR;//[Offset: 0x163c, Size: 0x4]
	float C_BowCrouchMoveLeanF;//[Offset: 0x1640, Size: 0x4]
	Rotator C_BowCrouchMoveRotator;//[Offset: 0x1644, Size: 0xc]
	bool C_CrouchIdleNPowerStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1650, Size: 0x1]
	bool C_PowerStorage_InAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1651, Size: 0x1]
	bool C_NIdleNInAirCrouchNPowerStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1652, Size: 0x1]
	bool C_CrouchNPowerStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1653, Size: 0x1]
	bool C_PowerStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1654, Size: 0x1]
	bool C_NPowerStorageNFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1655, Size: 0x1]
	bool C_StandPowerStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1656, Size: 0x1]
	bool C_CrouchPowerStorageIsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1657, Size: 0x1]
	bool C_CrouchPowerStorageNIsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1658, Size: 0x1]
	bool C_CrouchPowerStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1659, Size: 0x1]
	bool C_StandNPowerStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x165a, Size: 0x1]
	bool C_NIsMoving_Idle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x165b, Size: 0x1]
	bool C_NIdleNInAirStandNPowerStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x165c, Size: 0x1]
	float C_BowMoveLeanLR;//[Offset: 0x1660, Size: 0x4]
	bool C_NIdleNInAirIsMoving_NCrouch_InAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1664, Size: 0x1]
	bool C_ViewRotMoreThanBodyLowAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1665, Size: 0x1]
	bool C_Idle_VelLess10;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1666, Size: 0x1]
	bool C_NIdleNInAirVelMore10;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1667, Size: 0x1]
	bool C_Idle_NIsMoving_NCrouch_InAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1668, Size: 0x1]
	bool C_NCrouch_NSprint_VelLessCSSViewRotlsBLA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1669, Size: 0x1]
	bool C_NCrouch_NSprint_VelLessCSSViewRotmtBLA;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x166a, Size: 0x1]
	bool C_NStand_NGround_NIdleNInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x166b, Size: 0x1]
	bool C_AlwaysFalse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x166c, Size: 0x1]
	bool C_NStand_NGround_Idle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x166d, Size: 0x1]
	bool C_StandNIdleNInAir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x166e, Size: 0x1]
	bool GrenadeCondToCrouchMoveH;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x166f, Size: 0x1]
	bool GrenadeCondToCrouchIdleH;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1670, Size: 0x1]
	bool C_NFunUseHighAopSm2Func;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1671, Size: 0x1]
	bool C_FunUseHighAopSm2Func;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1672, Size: 0x1]
	bool C_ScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1673, Size: 0x1]
	bool C_NIdleNInAirStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1674, Size: 0x1]
	bool C_StandNScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1675, Size: 0x1]
	bool C_GatlingGunStand2Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1676, Size: 0x1]
	bool C_GatlingStand2BaseMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1677, Size: 0x1]
	bool C_StandIdleMiddle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1678, Size: 0x1]
	bool C_GatlingStandCound2Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1679, Size: 0x1]
	bool C_StandIdleGunIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x167a, Size: 0x1]
	bool C_StandIdleNGunIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x167b, Size: 0x1]
	bool C_GunIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x167c, Size: 0x1]
	bool C_GatGroundCond2GroundIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x167d, Size: 0x1]
	bool C_GroundInAirGroundGunIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x167e, Size: 0x1]
	bool C_GatGroundCond2GroundMidle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x167f, Size: 0x1]
	bool C_MAirGunIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1680, Size: 0x1]
	bool C_NMAir_GunMiddle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1681, Size: 0x1]
	bool C_MAirGunMiddle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1682, Size: 0x1]
	bool C_NCrouch_NSprint_VellsCSS_PowerStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1683, Size: 0x1]
	bool C_NCrouch_InAir_PowerStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1684, Size: 0x1]
	bool C_Middle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1685, Size: 0x1]
	bool C_StandMiddleGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1686, Size: 0x1]
	bool C_NPowerStorageNFireGunIdle_NGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1687, Size: 0x1]
	bool C_CrouchPowerStorage_AIdleIsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1688, Size: 0x1]
	bool C_CrouchPowerStorage_AIdleNIsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1689, Size: 0x1]
	float C_LauncherCrouchScopeLeanLR;//[Offset: 0x168c, Size: 0x4]
	bool C_NStand_NGround_InAirGround_Middle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1690, Size: 0x1]
	bool C_GroundStandNPowerStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1691, Size: 0x1]
	bool C_StandIdleGroundNPowerStorageGunIdle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1692, Size: 0x1]
	bool C_LauncherMove2StandCond;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1693, Size: 0x1]
	bool C_LauncherStandCond2Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1694, Size: 0x1]
	bool C_NStand_NGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1695, Size: 0x1]
	bool C_NIdleNInAirGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1696, Size: 0x1]
	bool C_GroundPowerStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1697, Size: 0x1]
	bool C_DirAbsLess22p5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1698, Size: 0x1]
	bool C_DirAbsLess67p5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1699, Size: 0x1]
	bool C_DirAbsLess112p5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169a, Size: 0x1]
	bool C_DirAbsLess157p5;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169b, Size: 0x1]
	bool C_DirLess0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169c, Size: 0x1]
	bool C_NIdle_PowerStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169d, Size: 0x1]
	bool C_LauncherLow2OnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169e, Size: 0x1]
	float C_BackInterpMultiJumpRot;//[Offset: 0x16a0, Size: 0x4]
	float C_LauncherFallToRunFVar;//[Offset: 0x16a4, Size: 0x4]
	bool C_LauncherUseMiddleAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a8, Size: 0x1]
	bool C_GroundNInAirGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a9, Size: 0x1]
	bool C_NMoveFBeforeJump_NIsMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16aa, Size: 0x1]
	float C_LowGroundRotYaw;//[Offset: 0x16ac, Size: 0x4]
	bool C_NCrouch_NSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b0, Size: 0x1]
	float C_LowContinJumpPlayRate;//[Offset: 0x16b4, Size: 0x4]
	float C_F_ColdFalltoRunYaw;//[Offset: 0x16b8, Size: 0x4]
	bool C_Idle_Crouch_PowerStorage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16bc, Size: 0x1]
	bool C_NLauncher_SM2Func;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16bd, Size: 0x1]
	bool C_LauncherNSM2Func;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16be, Size: 0x1]
	bool C_BowNSm2Func;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16bf, Size: 0x1]
	bool C_NBow_SM2Func;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c0, Size: 0x1]
	bool C_NGatling_SM2Func;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c1, Size: 0x1]
	bool C_GatlingNSM2Func;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c2, Size: 0x1]
	bool C_RangeAttack2HighReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c3, Size: 0x1]
	bool C_NIsGun_SM2Func;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c4, Size: 0x1]
	bool C_LowReady2HighReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c5, Size: 0x1]
	bool C_LowReady2HighReady2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c6, Size: 0x1]
	bool C_HighReady2LowReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c7, Size: 0x1]
	bool C_HighReady2LowReady2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c8, Size: 0x1]
	bool C_RangeAttack2LowReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16c9, Size: 0x1]
	bool C_Unarmed2RangeAttck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16ca, Size: 0x1]
	bool C_RangeAttck2Unarmed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16cb, Size: 0x1]
	bool C_UnarmedMove2Conduit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16cc, Size: 0x1]
	bool C_UnarmedConduit2Move;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16cd, Size: 0x1]
	bool C_UnarmedConduit2OldBaseMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16ce, Size: 0x1]
	bool C_OldBaseMove2UnarmedConduit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16cf, Size: 0x1]
	bool C_Function2UnarmedConduit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d0, Size: 0x1]
	bool C_UnarmedConduit2Function;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d1, Size: 0x1]
	bool C_FuncBaseMove2Conduit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d2, Size: 0x1]
	bool C_FuncConduit2BaseMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d3, Size: 0x1]
	bool C_GrenadeMove2FuncCond;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d4, Size: 0x1]
	bool C_FuncCond2GrenadeMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d5, Size: 0x1]
	bool C_MeleeAttack2UnarmedCond;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d6, Size: 0x1]
	bool C_UnarmedCond2MeleeAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d7, Size: 0x1]
	bool C_ColdMove2MeleeAttack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d8, Size: 0x1]
	bool C_MeleeAttack2ColdMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16d9, Size: 0x1]
	bool C_HoldArmshield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16da, Size: 0x1]
	bool C_Gatling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16db, Size: 0x1]
	bool C_UseHighReadyIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16dc, Size: 0x1]
	bool C_NGround_InAirGroundSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16dd, Size: 0x1]
	bool C_Stand_Crouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16de, Size: 0x1]
	bool C_UnarmedTremble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16df, Size: 0x1]
	Vector C_GunAimVector;//[Offset: 0x16e0, Size: 0xc]
	Rotator C_GunAimRotator;//[Offset: 0x16ec, Size: 0xc]
	bool C_ForwardJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f8, Size: 0x1]
	bool C_BackJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16f9, Size: 0x1]
	bool C_IsInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16fa, Size: 0x1]
	bool C_IsFurnitureInteract;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16fb, Size: 0x1]
	bool C_IsHoldUpPassive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16fc, Size: 0x1]
	bool C_IsHoldUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16fd, Size: 0x1]
	bool C_IsCarry_Kang_Passive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16fe, Size: 0x1]
	bool C_IsCarry_Kang;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16ff, Size: 0x1]
	bool C_IsCarry_Bei_Passive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1700, Size: 0x1]
	bool C_IsCarry_Bei;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1701, Size: 0x1]
	bool C_IsCarryCase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1702, Size: 0x1]
	bool C_IsRollercoaster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1703, Size: 0x1]
	bool C_IsCarousel_Front;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1704, Size: 0x1]
	bool C_IsCarousel_Rear;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1705, Size: 0x1]
	bool C_IsSkywheel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1706, Size: 0x1]
	bool C_Move_Jumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1707, Size: 0x1]
	bool C_DoubleInteract_Moving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1708, Size: 0x1]
	bool C_Walk2Driving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1709, Size: 0x1]
	bool C_Driving2Walk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170a, Size: 0x1]
	bool C_IsSkiing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170b, Size: 0x1]
	bool bIsLandingHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x170d, Size: 0x1]
	bool C_AnimNotifyToDisableIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1720, Size: 0x1]
	bool C_BeginStandby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1721, Size: 0x1]
	bool C_Standby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1722, Size: 0x1]
	bool C_DisableStandby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1723, Size: 0x1]
	float C_StandingDelta;//[Offset: 0x1724, Size: 0x4]
	float C_MinStandingThrehold;//[Offset: 0x1728, Size: 0x4]
	float C_MaxStandingThrehold;//[Offset: 0x172c, Size: 0x4]
	float standbyAnimLength;//[Offset: 0x1734, Size: 0x4]
	float revertBeginStandbyTime;//[Offset: 0x1738, Size: 0x4]
	float C_ViewRotateSpeed;//[Offset: 0x173c, Size: 0x4]
	float C_JumpRotateLerpSpeed;//[Offset: 0x1740, Size: 0x4]
	float C_JumpRotateMaxAngle;//[Offset: 0x1744, Size: 0x4]
	float C_LeftJumpRotateAngleScaling;//[Offset: 0x1748, Size: 0x4]
	float C_RightJumpRotateAngleScaling;//[Offset: 0x174c, Size: 0x4]
	float ReloadBlendOutTime;//[Offset: 0x1750, Size: 0x4]
	float C_AOp_CrouchSprintSpeed;//[Offset: 0x1754, Size: 0x4]
	float C_AOp_StandSprintSpeed;//[Offset: 0x1758, Size: 0x4]
	float C_PoseChangeDuration;//[Offset: 0x175c, Size: 0x4]
	float C_FurnitureDelta;//[Offset: 0x1760, Size: 0x4]
	bool C_UseShootReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1764, Size: 0x1]
	bool C_IsStandSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1765, Size: 0x1]
	bool C_IsCrouchSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1766, Size: 0x1]
	bool C_IsHoldGunIdlePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1767, Size: 0x1]
	enum C_MeleeAimType;//[Offset: 0x1768, Size: 0x1]
	bool C_NeedFootIK;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1769, Size: 0x1]
	bool C_InNavalSteering;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176a, Size: 0x1]
	bool C_bColdWeaponExtraAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176b, Size: 0x1]
	bool C_bHormoneCast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x176c, Size: 0x1]
	bool C_IsInSelfie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1784, Size: 0x1]
	SkeletalMesh* C_StaticModeCopySkeleton;//[Offset: 0x1788, Size: 0x8]
	Transform[] C_StaticModeCopyTransform;//[Offset: 0x1790, Size: 0x10]
	SkeletalMesh* CachedStaticModeCopySkeleton;//[Offset: 0x17a0, Size: 0x8]
	Transform[] CachedStaticModeCopyTransform;//[Offset: 0x17a8, Size: 0x10]
	bool CachedIsInStaticMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17b8, Size: 0x1]
	bool C_IsInStaticMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17b9, Size: 0x1]
	bool EnableWinkMorphTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17ba, Size: 0x1]
	float WinkTime;//[Offset: 0x17bc, Size: 0x4]
	float WinkTimeElapsed;//[Offset: 0x17c0, Size: 0x4]
	CurveFloat* WinkCurve;//[Offset: 0x17c8, Size: 0x8]
	void TryToFireFlareGun();// 0x2f60220
	void StopMontageBySlot(const FName SlotNodeName, float BlendOutTime);// 0x2f60168
	void StopAnimMontage(AnimMontage* AnimMontage, float InBlendOutTime);// 0x2f600b0
	void SetVelocityZFactor(float NewFactor);// 0x2f60034
	void SetStandbyEnable(bool bEnable);// 0x2f5ffb0
	void SetMovementBSToDest();// 0x2f5ff9c
	void SetMoveForwardCallBack();// 0x2f5ff7c
	void SetMontageBlendInOutTime(AnimMontage* Montage, float BlendInTime, float BlendOutTime);// 0x2f5fe8c
	void SetMachineGunAnim(AnimSequenceBase* BasePose, BlendSpaceBase* AimOffset);// 0x2f5fdd8
	void SetC_ViewRotation(Rotator NewRotator, float DeltaTime);// 0x2f5fd20
	void SetC_PoseType(byte NewECharacterPoseType);// 0x2f5fca4
	void SetAttachIK(float DeltaSeconds);// 0x2f5fc28
	bool Selfie_IsInSelfieStatePure();// 0x2f5fbf0
	Vector2D Selfie_GetSelfieAO();// 0x2f5fbbc
	void RevertDefaultMachineGunAnim();// 0x2f5fba8
	void PlayLanded();// 0x33e07d0
	void PlayJump();// 0x33e07d0
	void PlayAnimMontageByTime(AnimMontage* AnimMontage, bool IsPlay, float InPlayRate, float StartTime, bool IsLoop);// 0x2f5fa2c
	void PlayAnimMontage(AnimMontage* AnimMontage, bool IsPlay, float InPlayRate, FName StartSectionName);// 0x2f5f8f0
	float OnWeaponChangeAnim(enum Layer, enum OldState, enum NewState);// 0x2f5f7ec
	bool OnReceiveFreezeRagdoll();// 0x2f5f7d4
	void NativeUpdateStaticModeParam();// 0x2f5f7c0
	void Monatage_StopForcly(float InBlendOutTime, const AnimMontage* Montage);// 0x2f5f708
	bool IsPlayingRescueAnimCPP();// 0x2f5f6a0
	bool IsPlayingRescueAnim();// 0x2f5f660
	bool IsMontagePlaying(AnimMontage* AnimMontage);// 0x2f5f5d8
	void HandleOwnerAnimEvent(FName EventMsg);// 0x2f5f55c
	float GetMontageSectionStartTimeByName(AnimMontage* Montage, FName InSectionName);// 0x2f5f498
	float GetMontageSectionLengthByName(AnimMontage* Montage, FName InSectionName);// 0x2f5f3d4
	float GetMontageSectionEndTimeByName(AnimMontage* Montage, FName InSectionName);// 0x2f5f310
	FName GetCurActiveMontageSlot(int Track);// 0x2f5f28c
	PlayerCharacter* GetCharacterOwner();// 0x2f5f258
	void DumpAllProperties();// 0x2f5f244
	void DumpAllAnimInstancesInThisWorld();// 0x2f5f230
	FString CheckBlueprintVarWithC();// 0x2f5f1ac
	void CacheWeaponTypeParamList(float DeltaSeconds);// 0x2f5f130
	void CacheWeaponStateParamList(float DeltaSeconds);// 0x2f5f0b4
	void CacheParamList(float DeltaSeconds);// 0x2f5f030
	void CacheOtherParamList(float DeltaSeconds);// 0x2f5efb4
	void CacheMoveParamList(float DeltaSeconds);// 0x2f5ef38
	void CacheAopParamList(float DeltaSeconds);// 0x2f5eeb4
	void CacheAnimVarList();// 0x2f5ee98

--------------------------------
Class: XPlayerMotionComponent.XMotionComponent.ActorComponent.Object
	float HurtResetTime;//[Offset: 0x250, Size: 0x4]
	float HurtBreakTime;//[Offset: 0x254, Size: 0x4]
	float HitCameraShakeResetTime;//[Offset: 0x258, Size: 0x4]
	float HoldToMiddleDuration;//[Offset: 0x25c, Size: 0x4]
	float ReloadToMiddleDuration;//[Offset: 0x260, Size: 0x4]
	float HoldToIdleDuration;//[Offset: 0x264, Size: 0x4]
	float StandSprintSpeed;//[Offset: 0x268, Size: 0x4]
	float CrouchSprintSpeed;//[Offset: 0x26c, Size: 0x4]
	delegate OnAnimBpStartLanding;//[Offset: 0x270, Size: 0x10]
	delegate OnAnimBpEndLanding;//[Offset: 0x280, Size: 0x10]
	delegate OnAnimBpJumpLeaveLand;//[Offset: 0x290, Size: 0x10]
	delegate OnPlayerHoldGunMovementChange;//[Offset: 0x2a0, Size: 0x10]
	delegate OnPlayerPoseChange;//[Offset: 0x2b0, Size: 0x10]
	delegate OnPlayerPickUp;//[Offset: 0x2c0, Size: 0x10]
	delegate OnPlayerWeaponChangeState;//[Offset: 0x2d0, Size: 0x10]
	delegate OnPlayerEnterRescueingStatus;//[Offset: 0x2e0, Size: 0x10]
	delegate OnPlayerBeHitCameraShake;//[Offset: 0x2f0, Size: 0x10]
	delegate OnStandbyStatusChange;//[Offset: 0x310, Size: 0x10]
	PlayerAnimList CurPlayerAnimList;//[Offset: 0x330, Size: 0x5b0]
	PlayerVehAnimList CurPlayerVehAnimList;//[Offset: 0x8e0, Size: 0x60]
	AnimVehParamList CurAnimVehParamList;//[Offset: 0x9c0, Size: 0x4c]
	AnimStatusKeyList LastUpdateStatusKeyList;//[Offset: 0xa10, Size: 0x28]
	AnimStatusKeyList CurUpdateStatusKeyList;//[Offset: 0xa38, Size: 0x28]
	UAECharacterAnimListComponent* AnimListComp;//[Offset: 0xa60, Size: 0x8]
	XMotionComponent* ShapeShiftMotionComp;//[Offset: 0xa68, Size: 0x8]
	<enum,MontageStopList> StateToStopMontageList;//[Offset: 0xa90, Size: 0x50]
	bool UnDoReplaceAnimList();// 0x3051b38
	void StopMontageByTypeAndPose(byte AnimType, byte PoseType, float BlendOutTime);// 0x3051a44
	void StopMontageByEventType(byte AnimEventType, float InBlendOutTime);// 0x305198c
	void StopFireAnim();// 0x3051978
	bool ShouldSkipSwitchWeaponAnim();// 0x3051940
	void SetSleepType(int sleep);// 0x30518c4
	void SetSkipSwitchWeaponAnim(float Delta);// 0x3051848
	void SetInteractType(int InteractType);// 0x30517cc
	void SetInteractCaster(bool Is_Caster);// 0x3051748
	void SetInteractAnimData(bool IsAdd, int ActionID, int Probability);// 0x3051644
	void SetHoldGunState(enum NewHoldState, bool NoSync, FName Reason, int Priority);// 0x3051504
	void SetForbidPoseAnimOnce(bool Value);// 0x3051484
	void SetDoubleInteractMoveType(int InteractType);// 0x3051408
	void SetDoubleInteractGenderType(int InteractType);// 0x305138c
	void SetBuildPlacing(bool IsPlacing);// 0x3051308
	void SetAfterFireTimer(float Delta);// 0x3051290
	void RetriggerDelayToSetHoldGunState(float DelayTime, FName ResetReason);// 0x30511d8
	bool ReplaceJumpAnimList(SkillReplaceCharJumpAnimData[] AnimDataList);// 0x3050fc8
	bool ReplaceAnimList(SkillReplaceCharAnimData[] AnimDataList);// 0x3050f0c
	void RemoveRangeCustomAnim(byte MinAnimType, byte MaxAnimType, byte PoseType, FName Reason);// 0x3050ddc
	void RemoveMonsterShapeshiftComp();// 0x3050dc8
	void RemoveCustomAnimType(byte AnimType, byte PoseType, FName Reason);// 0x3050cd4
	void PlayLocalShellDropFX();// 0x3050cc0
	void OnWeaponMgrUnEquipWeapon(GSTWeaponBase* InWeapon);// 0x3050c44
	void OnWeaponMgrEquipWeapon(GSTWeaponBase* InWeapon);// 0x3050bc8
	void OnWeaponChangeState(byte State);// 0x3050b44
	float OnWeaponChangeAnim(enum Layer, enum OldState, enum NewState);// 0x3050a38
	void OnStandbyStatusChange__DelegateSignature(bool bTriggerIn, bool bCustomAnim);// 0x33e07d0
	void OnPlayerWeaponStateStart(byte StateStarted);// 0x30509bc
	void OnPlayerBeHitCameraShakeDelegate__DelegateSignature(enum BeHitShakeLevel);// 0x33e07d0
	void OnMontageStop(AnimMontage* AnimMontage, bool bInterrupted);// 0x30508fc
	void OnHoldGunMovementStateChange__DelegateSignature(enum FromState, enum toState);// 0x33e07d0
	void OnCharacterWeaponStateChanged__DelegateSignature(byte CurState);// 0x33e07d0
	void OnCharacterPickUpActorDelegate__DelegateSignature();// 0x33e07d0
	void OnCharacterEnterRescueingStatusDelegate__DelegateSignature(bool IsTurnIntoRescueing);// 0x33e07d0
	void OnCharacterChangePoseDelegate__DelegateSignature(byte LastPose, byte NewPose);// 0x33e07d0
	void OnAnimBpWeaponIdleToBack();// 0x30508e8
	void OnAnimBpWeaponBackToIdle();// 0x30508d4
	void OnAnimBpStartLandingDelegate__DelegateSignature();// 0x33e07d0
	void OnAnimBpReloadComplete();// 0x30508c0
	void OnAnimBpJumpLeaveLandDelegate__DelegateSignature();// 0x33e07d0
	void OnAnimBpEndLandingDelegate__DelegateSignature();// 0x33e07d0
	bool NeedStopReloadAnim();// 0x3050888
	bool MainAnimIsInStandby();// 0x3050850
	void MainAnimExitStandby();// 0x305083c
	void MainAnimEnterStandby();// 0x3050828
	bool IsUsingShootWeapon();// 0x30507f0
	bool IsUsingFlareGun();// 0x30507b8
	bool IsSwimUpWater();// 0x3050780
	bool IsStayInteractState();// 0x3050748
	bool IsStayFurnitureState();// 0x3050710
	bool IsPeekLeft();// 0x30506d8
	bool IsOnVehicle();// 0x30506a0
	bool IsLocalViewed();// 0x3050668
	bool IsInState(enum inState);// 0x30505e0
	bool IsInPlane();// 0x30505a8
	bool IsInHeavyWeapon();// 0x3050570
	bool IsInEnterNearDeathCD();// 0x3050538
	bool IsFPP();// 0x3050500
	bool IsFiredThisTick();// 0x30504c8
	bool IsCharacterRescueExitWithBlend();// 0x3050490
	bool IsCharacter();// 0x3050458
	bool IsAutoSprint();// 0x3050420
	bool HasWeapon();// 0x30503e8
	bool HasVehcle();// 0x30503b0
	bool HasState(enum inState);// 0x3050328
	bool HasPeekCollision();// 0x30502f0
	void HandlePlayerPickUpActorByTarget(Actor* InWrapperActor, byte InCurrentPose);// 0x3050238
	void HandlePlayerPickUpActorByLoc(float InTargetZLoc, byte InCurrentPose);// 0x3050180
	void HandleOnCharAnimLoadingFinished();// 0x305016c
	XMotionComponent* GetShapeshiftComp();// 0x3050150
	byte GetPlayerWeaponFireMode();// 0x305011c
	byte GetPlayerWeaponEquipSlot();// 0x30500e8
	AnimVehParamList GetPlayerVehAnimParam(float DeltaTime);// 0x3050030
	PlayerVehAnimList GetPlayerVehAnimation();// 0x304fff4
	float GetPlayerReloadTime();// 0x304ffc0
	PlayerAnimData GetPlayerAnimationByEventType(byte AnimEventType);// 0x304ff24
	PlayerAnimList GetPlayerAnimation();// 0x304fee4
	enum GetOwnerGender();// 0x304feb0
	float GetMontageLengthByEventType(byte AnimEventType, FName SectionName);// 0x304fde8
	bool GetIsPlayingEmote();// 0x304fdb0
	bool GetIsFreeCamera();// 0x304fd78
	enum GetHoldGunState();// 0x304fd44
	enum GetHoldGunMovementState();// 0x304fd10
	int GetHitCount();// 0x304fcf4
	float GetDefaultSpeed();// 0x304fcc0
	enum GetCurSwitchWeaponType();// 0x304fc8c
	enum GetCurrentState(enum stateLayer);// 0x304fc08
	AnimationAsset* GetCurrentStandbyAnimAsset(bool bFindCustomAnim);// 0x304fb7c
	enum GetCurClimbType();// 0x304fb48
	AnimationAsset* GetCharacterJumpLandAsset(enum JumpAnimType, byte DirType);// 0x304fa88
	float GetCharacterAnimLength(byte AnimType, byte PoseType, int Section);// 0x304f984
	AnimationAsset* GetCharacterAnimAsset(byte AnimType, byte PoseType);// 0x304f8c4
	float GetAfterFireTimer();// 0x304f8a8
	void ForcePlayerUpdateAnimation();// 0x304f894
	void ForbiddenIKByReason(FName Reason, int Priority, bool Value);// 0x304f79c
	void ForbiddenIK(bool State);// 0x304f718
	bool CheckPlayerNeedUpdateAnimation(out byte OutForceUpdateFlag);// 0x304f680
	bool AnimBpStepLadderComplete();// 0x304f648
	bool AnimBpExitLadderComplete();// 0x304f610
	bool AnimBpEnterLadderComplete();// 0x304f5d8
	void AddStateToStopMontageList(enum CharacterState, AnimMontage* AnimMontage, float BlendOutTime);// 0x304f4e4
	void AddMonsterShapeshiftComp();// 0x304f4d0
	void AddHitCount();// 0x304f4bc
	void AddCustomAnimTypeRange(byte MinAnimType, byte MaxAnimType, byte PoseType, FString AnimPath, FName Reason, byte Priority, int Probability);// 0x304f2c8
	void AddCustomAnimType(byte AnimType, byte PoseType, FString AnimPath, FName Reason, byte Priority, int Probability);// 0x304f110
	void AddCustomAnimAssetRange(byte MinAnimType, byte MaxAnimType, byte PoseType, AnimationAsset* AnimAsset, FName Reason, byte Priority, int Probability);// 0x304ef30
	void AddCustomAnimAsset(byte AnimType, byte PoseType, AnimationAsset* AnimAsset, FName Reason, byte Priority, int Probability);// 0x304ed8c

--------------------------------
Class: XMotionComponent.ActorComponent.Object
	delegate AnimMontagePlayDelegate;//[Offset: 0xf0, Size: 0x10]
	delegate AnimMontagePlayByTimeDelegate;//[Offset: 0x100, Size: 0x10]
	delegate AliasMontagePlayDelegate;//[Offset: 0x110, Size: 0x10]
	delegate AnimPlaySlotAnimDelegate;//[Offset: 0x120, Size: 0x10]
	delegate CharacterAnimEventDelegate;//[Offset: 0x130, Size: 0x10]
	delegate AnimMontageStopDelegate;//[Offset: 0x140, Size: 0x10]
	delegate OnMotionAnimResetEvent;//[Offset: 0x150, Size: 0x10]
	delegate TurnInPlaceDelegate;//[Offset: 0x178, Size: 0x10]
	delegate StopTurnInPlaceDelegate;//[Offset: 0x188, Size: 0x10]
	void UpdateStandbyAnimIndex();// 0x304a2e4
	void TurnInPlaceEvent__DelegateSignature(float Degrees);// 0x33e07d0
	void TurnInPlace(float InDegrees);// 0x304a268
	void StopTurnInPlaceEvent__DelegateSignature();// 0x33e07d0
	void StopTurnInPlace();// 0x304a254
	void StopMontageIfResolve(FString AnimMontage, float InBlendOutTime);// 0x304a18c
	void StopAnimMontage(AnimMontage* AnimMontage, float InBlendOutTime);// 0x304a0cc
	void StopAllMontage(float InBlendOutTime);// 0x304a048
	void StopAliasMontage(FName AliasMontage);// 0x3049fc4
	void StopActiveMontage(float InBlendOutTime);// 0x3049f40
	void SetViewRotation(out const Rotator ViewRot);// 0x3049eb0
	void SetStandbyAnimRange(int StartIndex, int EndIndex);// 0x3049dfc
	void SetNeedPlayDeathStaticPoseNow(bool State);// 0x3049d7c
	static void SetInNavalBattle(bool InNaval);// 0x3049d00
	void SetForbidHitAnim(bool bForbidden);// 0x3049c80
	void SetEnableLookAt(bool Enable);// 0x3049bf4
	void SetDeadType(int deadType);// 0x3049b70
	void SetAliasMontagePosition(FName AliasMontage, float Position);// 0x3049ab0
	void ReplaceAnim(int AnimType, FString AnimMontageRef);// 0x3049980
	void ProcessDeathStaticPose();// 0x3049964
	void PlaySkillEffectAnimNotify(FString ParticleName);// 0x304987c
	void PlayMontageWithSectionAndElapsedTime(FString AnimMontageRef, FName StartSectionName, float ElapsedTime, float PlayRate);// 0x30496e4
	void PlayMontageInMainAnimInst(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x30495e8
	float PlayMontageIfResolve(FString AnimMontage, float InPlayRate, FName StartSectionName);// 0x30494d4
	void PlayMontageAssetWithSectionAndElapsedTime(AnimMontage* AnimMontage, FName StartSectionName, float ElapsedTime, float PlayRate);// 0x30493a4
	float PlayAnimMontageByTime(AnimMontage* AnimMontage, float InPlayRate, float StartTime, bool IsLoop);// 0x304925c
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x3049154
	void PlayAliasMontageWithSectionAndElapsedTime(FName AliasMontage, FName StartSectionName, float ElapsedTime, float PlayRate);// 0x3049024
	float PlayAliasMontageAtTime(FName AliasMontage, float InPlayRate, float StartTime, bool IsLoop);// 0x3048edc
	float PlayAliasMontage(FName AliasMontage, float InPlayRate, FName StartSectionName);// 0x3048dd4
	void OnMotionAnimResetEvent__DelegateSignature();// 0x33e07d0
	bool OnFreezeRagdoll();// 0x3048d94
	void OnAvatarLoadedPlayAnim(AvatarCommonBase* Avatar);// 0x3048d18
	bool OnAnimBpEvent(FString InEventName);// 0x3048c2c
	void Montage_SetPlayRate(AnimMontage* AnimMontage, float NewPlayRate);// 0x3048b6c
	bool IsMontagePlayingByPath(FString AnimPath);// 0x3048a70
	bool IsMontagePlaying(AnimMontage* AnimMontage);// 0x30489e0
	bool IsInBattle();// 0x30489a0
	bool IsDead();// 0x3048960
	bool IsAliasMontagePlaying(out const FName AliasMontage);// 0x30488c0
	bool InputHit();// 0x3048880
	bool InputAttack();// 0x3048840
	bool HitByBullet(Vector HurtDir, enum BeHitShakeLevel);// 0x304876c
	bool HandleHitByNear(Vector HurtDir, enum BeHitShakeLevel);// 0x3048698
	bool HandleHitByBullet(Vector HurtDir, enum BeHitShakeLevel);// 0x30485c4
	void HandleCharacterAnimEvent(FName EventMsg);// 0x3048548
	AnimInstance* GetSubAnimInstance(FName InName);// 0x30484c4
	uint64 GetServerID();// 0x3048490
	float GetMontageSectionStartPosition(FString AnimMontageRef, FName SectionName);// 0x304835c
	float GetMontageSectionLength(FString AnimMontageRef, FName SectionName, bool OnlySelfSection);// 0x30481e4
	FString GetMontageRandomSection(FString AnimMontageRef, FName SectionName);// 0x3048068
	float GetMontageAssetSectionStartPosition(AnimMontage* AnimMontage, FName SectionName);// 0x3047f9c
	float GetMontageAssetSectionLength(AnimMontage* AnimMontage, FName SectionName, bool OnlySelfSection);// 0x3047e8c
	bool GetForbiddenAnim();// 0x3047e70
	int GetDeadType();// 0x3047e34
	AnimationAsset* GetCharacterAnimByAlias(FString AnimAlias);// 0x3047d3c
	float GetAliasMontageSectionStartPosition(FName AliasMontage, FName SectionName);// 0x3047c70
	float GetAliasMontageSectionLength(FName AliasMontage, FName SectionName, bool OnlySelfSection);// 0x3047b60
	FString GetAliasMontageRealName(FName AliasMontage);// 0x3047a88
	FString GetAliasMontageRandomSection(FName AliasMontage, FName SectionName);// 0x3047970
	FString GetAliasMontageCurrentSection(FName AliasMontage);// 0x3047898
	FString Get8DirRootMotionCurveByAlias(FString AnimAlias, int Dir);// 0x304771c
	FString Get8DirRootMotionAnimByAlias(FString AnimAlias, int Dir);// 0x30475a0
	bool Get8DirRootMotionAnimAndCurveByAlias(FString AnimAlias, out FString AnimPath, out FString AnimCurthPath, int Dir);// 0x30473a0
	void ForceUpdateStandby();// 0x304738c
	void ExitBattle(bool PlayMontage);// 0x3047300
	void EnterBattle(bool PlayMontage);// 0x3047274
	void DetachParentMotion();// 0x3047260
	bool CheckNeedUpdateStandbyAnim(out byte CheckStandbyFlag);// 0x30471c8
	void CharacterAnimEvent__DelegateSignature(FName EventMsg);// 0x33e07d0
	void AttachParentMotion(XMotionComponent* Parent, uint32 CopyFlags);// 0x3047110
	void AnimPlaySlotAnimEvent__DelegateSignature(AnimSequenceBase* AnimSequence, bool IsPlay, FName SlotName, float InPlayRate, float blendTime);// 0x33e07d0
	void AnimMontageStopEvent__DelegateSignature(AnimMontage* MontageToStop, float InBlendOutTime);// 0x33e07d0
	void AnimMontagePlayEvent__DelegateSignature(AnimMontage* MontageToPlay, bool IsPlay, float PlayRate, FName StartSection);// 0x33e07d0
	void AnimMontagePlayByTimeEvent__DelegateSignature(AnimMontage* MontageToPlay, bool IsPlay, float PlayRate, float StartTime, bool IsLoop);// 0x33e07d0
	void AliasMontagePlayEvent__DelegateSignature(FName AliasMontageToPlay, bool IsPlay, float PlayRate, FName StartSection);// 0x33e07d0
	void AliasMontage_SetPlayRate(FName AliasMontage, float NewPlayRate);// 0x3047050

--------------------------------
Class: PlayerAnimList
	PlayerAnimData MovementAnim;//[Offset: 0x0, Size: 0x18]
	PlayerAnimData AimAnim;//[Offset: 0x18, Size: 0x18]
	PlayerAnimData ReloadAnim;//[Offset: 0x30, Size: 0x18]
	PlayerAnimData EquipWeaponAnim;//[Offset: 0x48, Size: 0x18]
	PlayerAnimData ChangePoseAnim;//[Offset: 0x60, Size: 0x18]
	PlayerAnimData PickUpAnim;//[Offset: 0x78, Size: 0x18]
	PlayerAnimData FireAnim;//[Offset: 0x90, Size: 0x18]
	PlayerAnimData HurtAnim;//[Offset: 0xa8, Size: 0x18]
	PlayerAnimData TurnAnim;//[Offset: 0xc0, Size: 0x18]
	PlayerAnimData PullingPlugAnim;//[Offset: 0xd8, Size: 0x18]
	PlayerAnimData PutDownWeaponAnim;//[Offset: 0xf0, Size: 0x18]
	PlayerAnimData WeaponIdle;//[Offset: 0x108, Size: 0x18]
	PlayerAnimData PeekAnim;//[Offset: 0x120, Size: 0x18]
	PlayerAnimData ForegripAnim;//[Offset: 0x138, Size: 0x18]
	PlayerAnimData ForegripIdleAnim;//[Offset: 0x150, Size: 0x18]
	PlayerAnimData ForegripMiddleAnim;//[Offset: 0x168, Size: 0x18]
	PlayerAnimData[] JumpAnimList;//[Offset: 0x180, Size: 0x10]
	PlayerAnimData[] JumpAnimListF;//[Offset: 0x190, Size: 0x10]
	PlayerAnimData[] JumpAnimListHoldGun;//[Offset: 0x1a0, Size: 0x10]
	PlayerAnimData[] JumpAnimListHoldGunF;//[Offset: 0x1b0, Size: 0x10]
	PlayerAnimData NearHurtAnim;//[Offset: 0x1c0, Size: 0x18]
	PlayerAnimData HurtDownAnim;//[Offset: 0x1d8, Size: 0x18]
	PlayerAnimData HurtFireAnim;//[Offset: 0x1f0, Size: 0x18]
	PlayerAnimData HurtBlindAnim;//[Offset: 0x208, Size: 0x18]
	PlayerAnimData Idle2Move_F_Anim;//[Offset: 0x220, Size: 0x18]
	PlayerAnimData Idle2Move_FL_Anim;//[Offset: 0x238, Size: 0x18]
	PlayerAnimData Idle2Move_L_Anim;//[Offset: 0x250, Size: 0x18]
	PlayerAnimData Idle2Move_BL_Anim;//[Offset: 0x268, Size: 0x18]
	PlayerAnimData Idle2Move_B_Anim;//[Offset: 0x280, Size: 0x18]
	PlayerAnimData Idle2Move_BR_Anim;//[Offset: 0x298, Size: 0x18]
	PlayerAnimData Idle2Move_R_Anim;//[Offset: 0x2b0, Size: 0x18]
	PlayerAnimData Idle2Move_FR_Anim;//[Offset: 0x2c8, Size: 0x18]
	PlayerAnimData Move2Idle_F_Anim;//[Offset: 0x2e0, Size: 0x18]
	PlayerAnimData Move2Idle_FL_Anim;//[Offset: 0x2f8, Size: 0x18]
	PlayerAnimData Move2Idle_L_Anim;//[Offset: 0x310, Size: 0x18]
	PlayerAnimData Move2Idle_BL_Anim;//[Offset: 0x328, Size: 0x18]
	PlayerAnimData Move2Idle_B_Anim;//[Offset: 0x340, Size: 0x18]
	PlayerAnimData Move2Idle_BR_Anim;//[Offset: 0x358, Size: 0x18]
	PlayerAnimData Move2Idle_R_Anim;//[Offset: 0x370, Size: 0x18]
	PlayerAnimData Move2Idle_FR_Anim;//[Offset: 0x388, Size: 0x18]
	PlayerAnimData Sprint2IdleAnim;//[Offset: 0x3a0, Size: 0x18]
	PlayerAnimData HoldGunMovementAnim;//[Offset: 0x3b8, Size: 0x18]
	PlayerAnimData HoldGunUpMovementAnim;//[Offset: 0x3d0, Size: 0x18]
	PlayerAnimData HoldGunScopeMovementAnim;//[Offset: 0x3e8, Size: 0x18]
	PlayerAnimData DeathStaticPose;//[Offset: 0x400, Size: 0x18]
	PlayerAnimData LookMovementAnim;//[Offset: 0x418, Size: 0x18]
	PlayerAnimData NearHitAnim2;//[Offset: 0x430, Size: 0x18]
	PlayerAnimData RemoteHitAnim2;//[Offset: 0x448, Size: 0x18]
	float NearHitTime;//[Offset: 0x460, Size: 0x4]
	float RemoteHitTime;//[Offset: 0x464, Size: 0x4]
	PlayerAnimData HoldGunNoSprintMovementAnim;//[Offset: 0x468, Size: 0x18]
	PlayerAnimData HoldGunIdleAdditiveAnim;//[Offset: 0x480, Size: 0x18]
	PlayerAnimData HoldGunMovementBaseAnim;//[Offset: 0x498, Size: 0x18]
	PlayerAnimData HoldGunScopePullingPlugAnim;//[Offset: 0x4b0, Size: 0x18]
	PlayerAnimData PowerStorageAnim;//[Offset: 0x4c8, Size: 0x18]
	PlayerAnimData WeaponToIdleAnim;//[Offset: 0x4e0, Size: 0x18]
	PlayerAnimData StandByAnim;//[Offset: 0x4f8, Size: 0x18]
	PlayerAnimData OutBattleMovementAnim;//[Offset: 0x510, Size: 0x18]
	PlayerAnimData MoveStartAnim;//[Offset: 0x528, Size: 0x18]
	PlayerAnimData MoveStopLeftAnim;//[Offset: 0x540, Size: 0x18]
	PlayerAnimData MoveStopRightAnim;//[Offset: 0x558, Size: 0x18]
	PlayerAnimData HoldGunIdleMoveAnim;//[Offset: 0x570, Size: 0x18]
	PlayerAnimData HoldGunIdleMoveBackAnim;//[Offset: 0x588, Size: 0x18]
	PlayerAnimData[] ExtraAnimList;//[Offset: 0x5a0, Size: 0x10]

--------------------------------
Class: PlayerAnimData
	AnimationAsset* Animation;//[Offset: 0x0, Size: 0x8]
	float Rate;//[Offset: 0x8, Size: 0x4]
	FName AnimTransformKey;//[Offset: 0xc, Size: 0x8]

--------------------------------
Class: PlayerVehAnimList
	AnimationAsset* DriveAnim;//[Offset: 0x0, Size: 0x8]
	AnimationAsset* IdleMotorbikeAnim;//[Offset: 0x8, Size: 0x8]
	AnimationAsset* BackMotorbikeAnim;//[Offset: 0x10, Size: 0x8]
	AnimationAsset* HandSteerMotorbikeAnim;//[Offset: 0x18, Size: 0x8]
	AnimationAsset* VacateMotorbikeAnim;//[Offset: 0x20, Size: 0x8]
	AnimationAsset* PassengerMotorSingleIdleAnim;//[Offset: 0x28, Size: 0x8]
	AnimationAsset* LeanOutAnim;//[Offset: 0x30, Size: 0x8]
	AnimationAsset* LeanInAnim;//[Offset: 0x38, Size: 0x8]
	AnimationAsset* AimAnim;//[Offset: 0x40, Size: 0x8]
	AnimationAsset* WeaponIdleAddition;//[Offset: 0x48, Size: 0x8]
	AnimationAsset* WeaponAimAddition;//[Offset: 0x50, Size: 0x8]
	AnimationAsset* WeaponReloadAddition;//[Offset: 0x58, Size: 0x8]

--------------------------------
Class: AnimVehParamList
	bool IsLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool IsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float VacateHight;//[Offset: 0x4, Size: 0x4]
	bool IsVehicleMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool MotorOnlyPassenger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	Rotator VehViewRotation;//[Offset: 0xc, Size: 0xc]
	byte SeatWeaponHoldType;//[Offset: 0x18, Size: 0x1]
	byte SeatSpecialType;//[Offset: 0x19, Size: 0x1]
	enum VehicleType;//[Offset: 0x1a, Size: 0x1]
	float LeanOutPercentage;//[Offset: 0x1c, Size: 0x4]
	float FrontWheelSteerAngle;//[Offset: 0x20, Size: 0x4]
	float FrontWheelMaxSteerAngle;//[Offset: 0x24, Size: 0x4]
	float ForwardSpeed;//[Offset: 0x28, Size: 0x4]
	float MotorTiltAngle;//[Offset: 0x2c, Size: 0x4]
	Vector LeftHandAttachLocation;//[Offset: 0x30, Size: 0xc]
	Vector RightHandAttachLocation;//[Offset: 0x3c, Size: 0xc]

--------------------------------
Class: AnimStatusKeyList
	GSTWeaponBase* EquipWeapon;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: GSTWeaponBase.Actor.Object
	<FName,ItemHandleBase*> AttachMap;//[Offset: 0x350, Size: 0x50]
	Transform FPPWeaponOffset;//[Offset: 0x3a0, Size: 0x30]
	Transform FPPWeaponOffsetNonShooting;//[Offset: 0x3d0, Size: 0x30]
	Transform FPPWeaponOffsetSprint;//[Offset: 0x400, Size: 0x30]
	class UAECharAnimListCompBase* AnimListCompTemplate;//[Offset: 0x430, Size: 0x8]
	class UAECharAnimListCompBase* AnimListCompFemaleTemplate;//[Offset: 0x438, Size: 0x8]
	delegate WeaponEffectActionDelegate;//[Offset: 0x440, Size: 0x10]
	delegate OnShootWeaponChangeState;//[Offset: 0x450, Size: 0x10]
	delegate OnWeaponVisibilityChange;//[Offset: 0x460, Size: 0x10]
	FString SyncFreshWeaponStateForRep;//[Offset: 0x470, Size: 0x10]
	byte WeaponType;//[Offset: 0x480, Size: 0x1]
	byte HandWeaponType;//[Offset: 0x481, Size: 0x1]
	FName EquipHandSlot;//[Offset: 0x484, Size: 0x8]
	byte EquipHandAnimSlot;//[Offset: 0x48c, Size: 0x1]
	byte CurEquipHandAnimSlot;//[Offset: 0x48d, Size: 0x1]
	bool IsVisibleInBagSlot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 0x1]
	bool NeedPlayToIdleAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a9, Size: 0x1]
	bool BindCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 0x1]
	FString BindCollisionSocket;//[Offset: 0x770, Size: 0x10]
	Vector BindCollisionOffset;//[Offset: 0x780, Size: 0xc]
	Vector WeaponCollisionBox;//[Offset: 0x78c, Size: 0xc]
	ItemHandleBase* SelfItemHandle;//[Offset: 0x7c8, Size: 0x8]
	WeaponOwnerProxy* OwnerProxy;//[Offset: 0x800, Size: 0x8]
	WeaponManager* WeaponManager;//[Offset: 0x808, Size: 0x8]
	WeaponEntityComp* WeaponEntityComp;//[Offset: 0x810, Size: 0x8]
	WeaponAvatarComponent* WeaponAvatarComponent;//[Offset: 0x818, Size: 0x8]
	CrossHairComp* CrossHairComp;//[Offset: 0x820, Size: 0x8]
	AutoFireCrossHairComp* AutoFireCrossHairComp;//[Offset: 0x828, Size: 0x8]
	ScopeCrossHairComp* ScopeCrossHairComp;//[Offset: 0x830, Size: 0x8]
	AidCrossHairComp* AidCrossHairComp;//[Offset: 0x838, Size: 0x8]
	FlagCrossHairComp* FlagCrossHairComp;//[Offset: 0x840, Size: 0x8]
	AttrModifyComponent* AttrModifierCompoment;//[Offset: 0x850, Size: 0x8]
	byte CurWeaponState;//[Offset: 0x85c, Size: 0x1]
	WeaponStateMgr* WeaponStateMgr;//[Offset: 0x860, Size: 0x8]
	void WeaponNotifyChangeStateDelegate__DelegateSignature(byte State);// 0x33e07d0
	void WeaponEffectActionDelegate__DelegateSignature(byte Action);// 0x33e07d0
	void SetWeaponMeshHidden(bool Hidden, bool CastShadow);// 0x2ebd524
	void SetVirtualInfo(bool IsVirtual, int VirtualAtk);// 0x2ebd464
	void SetSightDefineID(out const ItemDefineID ItemDefineID);// 0x2ebd3bc
	void SetSelfItemHandle(ItemHandleBase* Handle);// 0x2ebd340
	void SetRecycleTag(FName Tag);// 0x2ebd2bc
	void SetPSHiddenOnly(bool bInHidden);// 0x2ebd238
	void SetProxyControlEntityInfo(uint64 EntityID, int GlobalID, uint64 MasterID);// 0x2ebd144
	void SetParticleSystemHidden(bool bInHidden);// 0x2ebd0c0
	void SetMatHiddenOnly(bool bInHidden);// 0x2ebd03c
	float SetMaterialsRoughnessBias(float Value);// 0x2ebcfb8
	void SetMaterialParamValue(out const FName ParamName, float Value);// 0x2ebcee8
	void SetMaterialColorParamValue(out const FName ParamName, LinearColor Value);// 0x2ebce18
	void SetItemDefineID(out const ItemDefineID ID);// 0x2ebcd88
	void SetCurFreshWeaponState(byte inState);// 0x2ebcd24
	void SetBulletNumInfo(int curBulletNum);// 0x2ebcca0
	void SetBlinkMesh(SkeletalMeshComponent* Blink);// 0x2ebcc24
	void SetActorVisibilityWithReason(out const enum WeaponVisibility, out const FName Reason, out const int Priority);// 0x2ebcaf0
	void ResetVisibilityReason(out const FName Reason);// 0x2ebca64
	void RemoveDynamicModifier(FString AttrModifyId);// 0x2ebc9d8
	void RemoveDelegate();// 0x2ebc9bc
	bool RefreshWeaponSkin(int SkinID);// 0x2ebc92c
	void RefreshSkin(int SkinID);// 0x2ebc8b0
	void OnWeaponVisibilityChangeDelegate__DelegateSignature();// 0x33e07d0
	void OnWeaponChangeStateDelegate__DelegateSignature(byte State);// 0x33e07d0
	void OnWeaponChangeMontage(bool IsEquip, bool Finish);// 0x2ebc7e0
	void OnUnEquip();// 0x2ebc7c4
	void OnStopFire(out const byte toState);// 0x2ebc730
	void OnStartFire();// 0x2ebc714
	void OnSignificanceLevelChange(int newLevel);// 0x2ebc690
	void OnOwnerAvatarLoadFinished(AvatarCommonBase* OwnerAvatar);// 0x2ebc614
	void OnMotionReloadComplete(bool Finish);// 0x2ebc588
	void OnLocalHandleWeaponAfterSpawnInClient();// 0x2ebc56c
	void OnInactive();// 0x2ebc550
	void OnHand();// 0x2ebc534
	void OnEquip();// 0x2ebc518
	void OnBack();// 0x2ebc4fc
	void NotifyAction(byte Action, bool bBroadCast);// 0x2ebc434
	bool IsShootWeapon();// 0x2ebc418
	bool IsRecycled();// 0x2ebc3fc
	bool IsEnableLeanOutHolding();// 0x2ebc3c4
	void InitDelegate();// 0x2ebc3a8
	void InitBulletNumInBarrel(int Num);// 0x2ebc324
	byte GetWeaponType();// 0x2ebc308
	int GetWeaponSubType();// 0x2ebc2d4
	WeaponStateMgr* GetWeaponStateMgr();// 0x2ebc2b8
	FString GetWeaponName();// 0x2ebc234
	MeshComponent* GetWeaponMeshComponent();// 0x2ebc200
	WeaponManager* GetWeaponManager();// 0x2ebc1e4
	WeaponEntityComp* GetWeaponEntityComp();// 0x2ebc1c8
	WeaponAnimInstanceBase* GetWeaponBaseAnimInst();// 0x2ebc194
	WeaponAvatarComponent* GetWeaponAvatarComp();// 0x2ebc178
	int GetWeaponArmType();// 0x2ebc144
	ItemDefineID GetSightDefineID();// 0x2ebc110
	int GetShootTotalType();// 0x2ebc0dc
	ItemHandleBase* GetSelfItemHandle();// 0x2ebc0a8
	enum GetSelectedType();// 0x2ebc06c
	ScopeCrossHairComp* GetScopeCrossHairComp();// 0x2ebc050
	FName GetRecycleTag();// 0x2ebc014
	float GetPowerStorageTime();// 0x2ebbfe0
	WeaponOwnerProxy* GetOwnerProxy();// 0x2ebbfc4
	FString GetOwnerPlayerName();// 0x2ebbf40
	Pawn* GetOwnerPawn();// 0x2ebbf0c
	FString GetOwnerName();// 0x2ebbe88
	Controller* GetOwnerController();// 0x2ebbe54
	Actor* GetOwnerActor();// 0x2ebbe20
	ItemDefineID GetItemDefineIDRef();// 0x2ebbdd8
	bool GetInactive();// 0x2ebbd98
	byte GetHandWeaponType();// 0x2ebbd7c
	FlagCrossHairComp* GetFlagCrossHairComp();// 0x2ebbd60
	byte GetCurShootType();// 0x2ebbd2c
	byte GetCurFreshWeaponState();// 0x2ebbcf8
	CrossHairComp* GetCrossHairComp();// 0x2ebbcdc
	AutoFireCrossHairComp* GetAutoFireCrossHairComp();// 0x2ebbcc0
	AnimationAsset* GetAttachMeshAnim(enum slotType, int AnimIdx);// 0x2ebbc00
	void EnableCrossHair();// 0x2ebbbec
	void DisableCrossHair();// 0x2ebbbd8
	void DetachMeshFromSocket();// 0x2ebbbc4
	void AttachMeshToSocket(FName socket);// 0x2ebbb48
	void AddDynamicModifier(out AttrModifyItem AttrModifyItem);// 0x2ebba78

--------------------------------
Class: ItemHandleBase.Object
	<FName,ItemAssociation> AssociationMap;//[Offset: 0x28, Size: 0x50]
	ItemDefineID defineID;//[Offset: 0x78, Size: 0x28]
	void SetAssociation(FName Name, ItemAssociation Association);// 0x2ed04e0
	void RemoveAssociation(FName Name);// 0x2ed0464
	void Init(out const ItemDefineID InDefineID);// 0x2ed03cc
	ItemDefineID GetDefineID();// 0x2ed03a0
	ItemAssociation GetAssociation(FName Name);// 0x2ed02f4
	void AddAssociation(FName Name, ItemAssociation Association);// 0x2ed01f4

--------------------------------
Class: ItemAssociation
	FName AssociationName;//[Offset: 0x0, Size: 0x8]
	ItemDefineID AssociationTargetDefineID;//[Offset: 0x8, Size: 0x28]
	ItemHandleBase* AssociationTargetHandle;//[Offset: 0x30, Size: 0x8]

--------------------------------
Class: ItemDefineID
	int ResID;//[Offset: 0x0, Size: 0x4]
	bool bValidItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bValidInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	uint64 InstanceID;//[Offset: 0x8, Size: 0x8]
	FName BackSocket;//[Offset: 0x10, Size: 0x8]
	int Tab;//[Offset: 0x18, Size: 0x4]
	int GridIndex;//[Offset: 0x1c, Size: 0x4]
	int ModelID;//[Offset: 0x20, Size: 0x4]
	int SkinID;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: UAEAnimListComponentBase.ActorComponent.Object
	<int,AnimListMapValueData> AnimListMap;//[Offset: 0x140, Size: 0x50]
	bool needPostLoadFreshEditList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	<int,ReasonToAnimData> CustomAnimListMap;//[Offset: 0x198, Size: 0x50]
	Object*[] PendingAnimRefList;//[Offset: 0x250, Size: 0x10]

--------------------------------
Class: AnimListMapValueData
	AnimListData[] AnimListMapValue;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AnimListData
	int LayerID;//[Offset: 0x0, Size: 0x4]
	AnimationAsset* Animation;//[Offset: 0x8, Size: 0x8]
	FString ExtString;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: ReasonToAnimData
	<FName,CustomLoadAnimData> ReasonToAnimData;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: CustomLoadAnimData
	AnimationAsset* AnimAsset;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: WeaponOwnerProxy.ActorComponent.Object
	bool bClientHasFinishedReloadWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	WeaponManager* WeaponManager;//[Offset: 0xf8, Size: 0x8]
	Pawn* OwnerPawn;//[Offset: 0x100, Size: 0x8]
	GSTWeaponBase* weapon;//[Offset: 0x108, Size: 0x8]
	void StopAltFire();// 0x3010768
	void StartPowerStorage();// 0x3010754
	void StartAltFire();// 0x3010740
	void SetShootType(byte shootType);// 0x30106c4
	bool ReloadStop();// 0x301068c
	void ReloadStart();// 0x3010678
	void ReleasePowerStorage();// 0x3010664
	void LocalUnEquipWeapon(bool bIsAI, bool bSimulatedProxy);// 0x301059c
	bool LocalStartFire();// 0x3010564
	void LocalEquipWeapon(bool bIsAI, bool bLocalFPP, bool bSimulatedProxy);// 0x3010450
	void HandleWeaponOnShoot();// 0x301043c
	void HandleOnCharAnimLoadingFinished();// 0x3010428
	PrimitiveComponent* GetWeaponAttachToMesh();// 0x30103ec
	GSTWeaponBase* GetWeapon();// 0x30103d0
	Pawn* GetOwnerPawn();// 0x30103b4
	Controller* GetOwnerController();// 0x3010380
	void FireStop();// 0x301036c
	void DoAutoReloadCurrentWeapon();// 0x3010358
	void CancelPowerStorage();// 0x3010344

--------------------------------
Class: WeaponManager.ActorComponent.Object
	delegate WeaponEquipDelegate;//[Offset: 0xf8, Size: 0x10]
	delegate WeaponUnequipDelegate;//[Offset: 0x108, Size: 0x10]
	delegate OnWeaponEquipFinishedDelegate;//[Offset: 0x118, Size: 0x10]
	delegate OnWeaponEquipFinishedDelegateBeforeLua;//[Offset: 0x128, Size: 0x10]
	delegate OnWeaponCreatedDelegate;//[Offset: 0x138, Size: 0x10]
	delegate OnWeaponDestroyedDelegate;//[Offset: 0x148, Size: 0x10]
	Pawn* OwnerPawn;//[Offset: 0x158, Size: 0x8]
	GSTWeaponBase* CurrentWeapon;//[Offset: 0x160, Size: 0x8]
	GSTWeaponBase* PendingWeapon;//[Offset: 0x168, Size: 0x8]
	GSTWeaponBase* PendingKillWeapon;//[Offset: 0x170, Size: 0x8]
	<FName,GSTWeaponBase*> WeaponInventory;//[Offset: 0x178, Size: 0x50]
	<FName,WeaponOwnerProxy*> WeaponProxys;//[Offset: 0x1c8, Size: 0x50]
	<FName,FName> SlotToSocketMap;//[Offset: 0x218, Size: 0x50]
	delegate OnMotionChangeWeaponCompleteDelegate;//[Offset: 0x268, Size: 0x10]
	float EquipWeaponDelayDelta;//[Offset: 0x2c8, Size: 0x4]
	class Actor* WeaponAssetPath1;//[Offset: 0x2d0, Size: 0x28]
	void WeaponUnequipedFinished();// 0x300b244
	void UnEquipWeaponAttachment(GSTWeaponBase* weapon, out const FName Slot);// 0x300b17c
	void UnequipCurrentWeapon();// 0x300b168
	void ShowAllWeapons(out const FName pstr_Reason);// 0x300b0dc
	void SetWeaponVisibleOnWeaponEquip(GSTWeaponBase* weapon);// 0x300b060
	void SetOpenGunShield(bool bHold);// 0x300afe0
	void SetMaterialParamValue(out const FName ParamName, float Value);// 0x300af10
	void SetMaterialColorValue(out const FName ParamName, LinearColor Value);// 0x300ae40
	void SetHoldArmShield(bool bHold);// 0x300adc0
	bool SetHideAllWeaponsPermanently(bool bHide);// 0x300ad30
	void RemoveWeaponFromInventory(GSTWeaponBase* weapon);// 0x300acb4
	void RefreshWeaponMeshMode();// 0x300aca0
	void RefreshAvatarByPredictedLODLevel();// 0x300ac8c
	void PutWeaponeToHand(GSTWeaponBase* weapon, out const FName UnEquipSlot);// 0x300abc4
	void PutWeaponeToDynamic(GSTWeaponBase* weapon, out const FName UnEquipSlot);// 0x300aafc
	void PutWeaponeToBack(GSTWeaponBase* weapon, out const FName UnEquipSlot);// 0x300aa34
	void OnWeaponEquipFinishedDelegate__DelegateSignature();// 0x33e07d0
	void OnMotionReloadComplete(bool IsFinish);// 0x300a9b0
	void OnMotionChangeWeaponComplete();// 0x300a99c
	bool IsAllWeaponHiddenPermanently();// 0x300a980
	bool HoldArmShield();// 0x300a964
	void HideCurWeapon(out const FName pstr_Reason, int Priority);// 0x300a894
	void HideAllWeapons(out const FName pstr_Reason, int Priority);// 0x300a7c4
	bool HasWeapon(GSTWeaponBase* weapon);// 0x300a73c
	byte GetWeaponPropSlot(GSTWeaponBase* InWeapon);// 0x300a6b8
	GSTWeaponBase* GetWeaponByID(FName WeaponID);// 0x300a634
	FName GetSocketMapedBySlot(out const FName Slot, GSTWeaponBase* weapon);// 0x300a558
	GSTWeaponBase* GetPendingWeapon();// 0x300a53c
	GSTWeaponBase* GetGunShieldWeapon();// 0x300a508
	int GetEquipedWeaponAttachmentResID(GSTWeaponBase* weapon, out const FName Slot);// 0x300a434
	enum GetCurSwitchWeaponType();// 0x300a418
	GSTWeaponBase* GetCurrentWeapon();// 0x300a3fc
	<FName,GSTWeaponBase*> GetAllWeapons();// 0x300a3dc
	GSTWeaponBase* FindWeaponByUUID(uint64 InstanceID);// 0x300a358
	GSTWeaponBase* EquipWeaponById(int pWeaponId, bool pNeedMoment);// 0x300a294
	void EquipWeaponAttachment(GSTWeaponBase* weapon, out const FName Slot, WeaponAttachItemHandle* attachment);// 0x300a188
	void EquipWeapon(GSTWeaponBase* weapon, bool bNeedMoment);// 0x300a0c8
	void DropWeapon(GSTWeaponBase* weapon);// 0x300a04c
	void DropAllWeaponWithoutCurrent();// 0x300a038
	void DropAllWeapon();// 0x300a024
	void DoWeaponUnequip(GSTWeaponBase* weapon);// 0x3009fa8
	void DoWeaponEquip(GSTWeaponBase* weapon);// 0x3009f2c
	GSTWeaponBase* CreateShootWeapon(int ItemId, out const ItemDefineID pItemDefineID);// 0x3009e50
	bool CanEquipWeapon(GSTWeaponBase* weapon);// 0x3009dc0
	void BreakChangeWeapon();// 0x3009dac
	void AddWeapon(GSTWeaponBase* weapon);// 0x3009d30
	GSTWeaponBase* AddProjectile(FString WeaponClassStr, FString ItemHandleClassStr);// 0x3009c48

--------------------------------
Class: WeaponAttachItemHandle.BattleItemHandleBase.ItemHandleBase.Object
	WeaponAttachmentConfig WeaponAttachmentConfig;//[Offset: 0xb0, Size: 0x2b8]
	bool bIsLoadTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x368, Size: 0x1]
	DataTable* WeaponAttachmentConfigTable;//[Offset: 0x370, Size: 0x8]
	FName WeaponAttachmentConfigRowName;//[Offset: 0x378, Size: 0x8]
	bool EquipOrUnEuipAttachment(GSTWeaponBase* InWeapon, bool IsEquip);// 0x2fef518

--------------------------------
Class: BattleItemHandleBase.ItemHandleBase.Object
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	World* GetWorldInternal();// 0x2e1eef8

--------------------------------
Class: WeaponAttachmentConfig
	FText AttachmentName;//[Offset: 0x0, Size: 0x18]
	enum AttachmentSlotType;//[Offset: 0x18, Size: 0x1]
	enum SightType;//[Offset: 0x19, Size: 0x1]
	enum BarrelType;//[Offset: 0x1a, Size: 0x1]
	bool IsApplyToMasterMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]
	bool IsExtendMaxBulletNumInOneClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool IsSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool IsFireSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	bool IsCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1]
	WeaponAttachmentAttrModify[] WeaponAttachmentAttrModifys;//[Offset: 0x20, Size: 0x10]
	ReplacedAttament[] replacementWeapon;//[Offset: 0x298, Size: 0x10]
	AnimationAsset*[] AttachmentAnimList;//[Offset: 0x2a8, Size: 0x10]

--------------------------------
Class: WeaponAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 0x10]
	enum Op;//[Offset: 0x10, Size: 0x1]
	float ModifyValue;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: ReplacedAttament
	ItemDefineID[] targetWeaponIDList;//[Offset: 0x0, Size: 0x10]
	WeaponMeshCfg replacedAttachmentCfg;//[Offset: 0x10, Size: 0x268]

--------------------------------
Class: WeaponMeshCfg.TableRowBase
	StaticMesh* stMesh;//[Offset: 0x8, Size: 0x28]
	SkeletalMesh* skMesh;//[Offset: 0x30, Size: 0x28]
	StaticMesh* stMeshLod;//[Offset: 0x58, Size: 0x28]
	SkeletalMesh* skMeshLod;//[Offset: 0x80, Size: 0x28]
	class AnimInstance* AnimInstClass;//[Offset: 0xa8, Size: 0x28]
	MaterialInterface* MeshMat;//[Offset: 0xd0, Size: 0x28]
	MaterialInterface* baseMat;//[Offset: 0xf8, Size: 0x8]
	enum meshType;//[Offset: 0x100, Size: 0x1]
	AnimSequence* sightOff;//[Offset: 0x108, Size: 0x28]
	AnimSequence* sightOn;//[Offset: 0x130, Size: 0x28]
	ParticleSystemInfo[] ParticleSystemInfo;//[Offset: 0x158, Size: 0x10]
	ParticleSystemInfo[] ParticleSystemInfoHD;//[Offset: 0x168, Size: 0x10]
	bool bIsSpGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x199, Size: 0x1]
	<FName,MaterialInterface*> SpGunMats;//[Offset: 0x1a0, Size: 0x50]
	AnimSequence* WeaponShowIdleAnim;//[Offset: 0x1f0, Size: 0x28]
	FName[] SpVisibleSockets;//[Offset: 0x218, Size: 0x10]
	ParticleSystemInfo[] OpeningParticleSystems;//[Offset: 0x228, Size: 0x10]
	AnimationAsset*[] AnimationList;//[Offset: 0x238, Size: 0x10]
	ShootEffectNode[] ShootEffectNodes;//[Offset: 0x248, Size: 0x10]
	ShootBulletTailFxNode[] ShootBulletTailFxNodes;//[Offset: 0x258, Size: 0x10]

--------------------------------
Class: TableRowBase

--------------------------------
Class: ParticleSystemInfo
	FName socket;//[Offset: 0x0, Size: 0x8]
	ParticleSystem* ParticleSystem;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: ShootEffectNode.ShootBaseNode
	enum AttachState;//[Offset: 0xc, Size: 0x1]
	ParticleSystem* MuzzleFX;//[Offset: 0x10, Size: 0x28]
	int FXSortPriority;//[Offset: 0x38, Size: 0x4]
	FName SocketName;//[Offset: 0x3c, Size: 0x8]
	Vector MuzzelFXScale;//[Offset: 0x44, Size: 0xc]
	bool IsScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	FXDistancaScaleStruct RemoteMuzzleFXDistanceScale;//[Offset: 0x54, Size: 0x10]
	enum AimType;//[Offset: 0x64, Size: 0x1]

--------------------------------
Class: ShootBaseNode
	byte ActionName;//[Offset: 0x0, Size: 0x1]
	int NodeId;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: FXDistancaScaleStruct
	float FXStartScaleDistance;//[Offset: 0x0, Size: 0x4]
	float FXEndScaleDistance;//[Offset: 0x4, Size: 0x4]
	float FXStartScaleValue;//[Offset: 0x8, Size: 0x4]
	float FXEndScaleValue;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: ShootBulletTailFxNode.ShootBaseNode
	ParticleSystem* TailFX;//[Offset: 0x10, Size: 0x8]
	ParticleSystem* TailFogFx;//[Offset: 0x18, Size: 0x8]
	BulletTailFxInfo LocalTailFxInfo;//[Offset: 0x20, Size: 0x30]
	enum AimType;//[Offset: 0x50, Size: 0x1]

--------------------------------
Class: BulletTailFxInfo
	float TailFxSpeed;//[Offset: 0x0, Size: 0x4]
	float TailFxSpawnTime;//[Offset: 0x4, Size: 0x4]
	float TailFxMinLifeTime;//[Offset: 0x8, Size: 0x4]
	float TailFxLifeTime;//[Offset: 0xc, Size: 0x4]
	float TailFogFxSpeed;//[Offset: 0x10, Size: 0x4]
	float TailFogFxSpawnTime;//[Offset: 0x14, Size: 0x4]
	float TailFogFxMinLifeTime;//[Offset: 0x18, Size: 0x4]
	float TailFogFxLifeTime;//[Offset: 0x1c, Size: 0x4]
	float TailMeshLength;//[Offset: 0x20, Size: 0x4]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	float DebugLength;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: WeaponEntityComp.WeaponBaseComp.ActorComponent.Object
	int WeaponID;//[Offset: 0xf8, Size: 0x4]
	byte WeaponHoldType;//[Offset: 0x104, Size: 0x1]
	bool bEnableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 0x1]
	bool bEnableLeanOutHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106, Size: 0x1]
	float SprintSpeedScale;//[Offset: 0x108, Size: 0x4]
	float MoveSpeedScale;//[Offset: 0x10c, Size: 0x4]
	float HoldShieldMoveSpeedScale;//[Offset: 0x110, Size: 0x4]
	float GunMiddleSpeedScale;//[Offset: 0x114, Size: 0x4]
	float HoldShieldMiddleSpeedScale;//[Offset: 0x118, Size: 0x4]
	float GunScopeSpeedScale;//[Offset: 0x11c, Size: 0x4]
	float HitForce;//[Offset: 0x120, Size: 0x4]
	byte GetWeaponHoldType();// 0x3007850

--------------------------------
Class: WeaponBaseComp.ActorComponent.Object
	GSTWeaponBase* OwnerWeapon;//[Offset: 0xf0, Size: 0x8]

--------------------------------
Class: WeaponAvatarComponent.InventoryAvatarComponent.AvatarBaseComponent.SceneComponent.ActorComponent.Object
	delegate OnWeaponMeshComponentLoaded;//[Offset: 0x638, Size: 0x10]
	delegate OnWeaponAvatarLoadFinishForLua;//[Offset: 0x648, Size: 0x10]
	SoftObjectPath WeaponMenshPath;//[Offset: 0x658, Size: 0x18]
	GSTWeaponBase* WeaponOwner;//[Offset: 0x670, Size: 0x8]
	<int,BattleItemHandleBase*> PendingEquipItemHandles;//[Offset: 0x678, Size: 0x50]
	ItemDefineID[] PendingEquipItemIds;//[Offset: 0x6c8, Size: 0x10]
	BattleItemHandleBase*[] EquipItemHandlesList;//[Offset: 0x6d8, Size: 0x10]
	<SoftObjectPath,BattleItemHandleBase*> PendingLoadRes;//[Offset: 0x6e8, Size: 0x50]
	<SoftObjectPath,ItemDefineID> PendingDefineLoadRes;//[Offset: 0x738, Size: 0x50]
	<uint32,WeaponAttachMeshConfig> ShootPartMap;//[Offset: 0x788, Size: 0x50]
	bool BindCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8, Size: 0x1]
	Vector BindCollisionOffset;//[Offset: 0x7dc, Size: 0xc]
	Vector WeaponCollisionBox;//[Offset: 0x7e8, Size: 0xc]
	<int,MeshComponent*> FakeShadowMeshComponentList;//[Offset: 0x7f8, Size: 0x50]
	<FName,ParticleSystem*> OpeningParticleSystems;//[Offset: 0x8b0, Size: 0x50]
	void SetPSMatHidden(bool bHidden);// 0x3003e54
	void SetPSHiddenOnly(bool bHidden);// 0x3003dd0
	void SetMeshLod(MeshComponent* MeshComp, int inLod);// 0x3003d18
	void SetMatHiddenOnly(bool bHidden);// 0x3003c94
	void SetMaterialParamValueAll(out const FName ParamName, float Value);// 0x3003bc4
	void SetMaterialColorParamValueAll(out const FName ParamName, LinearColor Value);// 0x3003af4
	void SetBoneTickEnable(bool Enable);// 0x3003a70
	void ResetAttachmentParentBySlot(enum targetSlot);// 0x30039f4
	void ResetAttachmentParent();// 0x30039e0
	void PutOnMasterComponentByItemHandle(BattleItemHandleBase* itemHandle, SkeletalMesh* skMesh, StaticMesh* stMesh);// 0x30038e8
	void PutOnMasterComponentByDefineID(ItemDefineID ItemDefineID, SkeletalMesh* skMesh, StaticMesh* stMesh);// 0x30037e8
	void PutOnEquipmentByItemHandle(BattleItemHandleBase* itemHandle, SkeletalMesh* skMesh, StaticMesh* stMesh);// 0x30036f0
	void OnWeaponMeshComponentLoadedDelegate__DelegateSignature();// 0x33e07d0
	void OnWeaponAvatarLoadedDelegateForLua__DelegateSignature(uint64 entityServerID);// 0x33e07d0
	void OnSignificanceLevelChange(int newLevel);// 0x3003674
	void OnMeshAssetLoaded(out const SoftObjectPath[] AssetRefArray);// 0x30035ac
	void OnItemHandleLoaded(ItemDefineID defineID, BattleItemHandleBase* itemHandle);// 0x30034e4
	bool LoadMeshesById(ItemDefineID ItemId, bool bAsync);// 0x30033fc
	bool LoadMeshes(BattleItemHandleBase* itemHandle, bool bAsync);// 0x300332c
	bool IsUseHDRes();// 0x30032f4
	bool IsUseAsyncLoad();// 0x30032bc
	bool IsAvatarLoadFinished();// 0x30032a0
	bool IsAirGun();// 0x3003284
	void InitialAvatarParam(int AGender);// 0x3003200
	StaticMesh* GetStaticMesh(out const WeaponMeshCfg meshPack);// 0x3003158
	SkeletalMesh* GetSkeletalMesh(out const WeaponMeshCfg meshPack);// 0x30030b0
	<FName,ParticleSystem*> GetParticleSystem(out WeaponMeshCfg meshPack);// 0x3002edc
	bool GetMeshResRef(BattleItemHandleBase* Handle, out SoftObjectPath[] AssetRefArray);// 0x3002dc8
	bool GetMeshPackById(ItemDefineID ItemId, out WeaponMeshCfg meshCfg);// 0x3002cc4
	bool GetMeshPack(BattleItemHandleBase* itemHandle, out WeaponMeshCfg meshCfg);// 0x3002bdc
	bool GetMeshByItemResRef(ItemDefineID ItemId, out SoftObjectPath[] AssetRefArray);// 0x3002ab0
	MaterialInstance*[] GetMaterial(out WeaponMeshCfg meshPack, out FName[] MatSocketNames);// 0x3002958
	int GetMasterSlot();// 0x3002924
	AnimationAsset* GetAttachmentAnim(enum slotID, int AnimIdx);// 0x3002864
	void GetAnimationList(out WeaponMeshCfg meshPack, out AnimationAsset*[] OutResourceList);// 0x3002764
	void DebugAvatar();// 0x3002750

--------------------------------
Class: InventoryAvatarComponent.AvatarBaseComponent.SceneComponent.ActorComponent.Object
	<int,AvatarMeshData> AvatarDataList;//[Offset: 0x540, Size: 0x50]
	<int,AvatarMeshData> AvataDataConfig;//[Offset: 0x590, Size: 0x50]
	<int,BattleItemHandleBase*> ItemHandleList;//[Offset: 0x5e0, Size: 0x50]
	int GenderType;//[Offset: 0x630, Size: 0x4]
	void SetDefaultConfig(int Slot);// 0x2ecf028
	void ResetComponentMaster();// 0x2ecf014
	void ResetAllAvataSlot();// 0x2ecf000
	void OnRep_AvatarMeshChanged();// 0x2ecefe4
	bool IsSlotHasEquipped(int Slot);// 0x2ecef5c
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x2eceed8
	void InitDefaultAvatar(BattleItemHandleBase* Handle);// 0x2ecee54
	ItemDefineID GetSlotDefinedID(int Slot);// 0x2ecedb0
	bool GetEquimentMeshBySlot(int Slot, out AvatarMeshData meshPack);// 0x2ecec4c
	void ClearMeshByItemHandle(BattleItemHandleBase* itemHandle);// 0x2ecebc8
	void ApplyStaticMeshByItemID(int Slot, StaticMesh* Mesh, out MaterialInstance*[] Mats, out <FName,ParticleSystem*> PSs, out ItemDefineID ItemId, FName SocketName, out FName[] MatSocketNames);// 0x2ece8dc
	void ApplyStaticMeshByID(int Slot, StaticMesh* Mesh, out MaterialInstance*[] Mats, out <FName,ParticleSystem*> PSs, BattleItemHandleBase* Handle, FName SocketName, out FName[] MatSocketNames);// 0x2ece614
	void ApplySkeletalMeshByItemID(int Slot, SkeletalMesh* Mesh, out MaterialInstance*[] Mats, out <FName,ParticleSystem*> PSs, out ItemDefineID ItemId, FName SocketName, out FName[] MatSocketNames, out AnimationAsset*[] Anims);// 0x2ece2bc
	void ApplySkeletalMeshByID(int Slot, SkeletalMesh* Mesh, out MaterialInstance*[] Mats, out <FName,ParticleSystem*> PSs, BattleItemHandleBase* Handle, FName SocketName, out FName[] MatSocketNames, out AnimationAsset*[] Anims);// 0x2ecdf88
	void ApplyItemHandle(BattleItemHandleBase* Handle);// 0x2ecdf04
	void ApplyConfig();// 0x2ecdef0

--------------------------------
Class: AvatarBaseComponent.SceneComponent.ActorComponent.Object
	MeshComponent* MasterBoneComponent;//[Offset: 0x248, Size: 0x8]
	<int,MeshComponent*> MeshComponentList;//[Offset: 0x250, Size: 0x50]
	FName MeshMaterialSlotName;//[Offset: 0x2a0, Size: 0x8]
	<int,FName> SlotToSocketMap;//[Offset: 0x2a8, Size: 0x50]
	float DefaultMeshCullDistance;//[Offset: 0x2f8, Size: 0x4]
	float MinusOwnerPawnCullDistance;//[Offset: 0x2fc, Size: 0x4]
	bool SyncLoadMesh(out SoftObjectPath[] MeshAssetArray);// 0x2df1bcc
	void SetStaticMeshToSlot(int Slot, StaticMesh* Mesh, out MaterialInstance*[] Mats, out <FName,ParticleSystem*> PSs, FName SocketName, out FName[] MatSocketNames);// 0x2df193c
	void SetSlotMatGlobalVectorParams(enum Slot, out const FName ParamName, LinearColor Value);// 0x2df182c
	void SetSlotMatGlobalScalarParams(enum Slot, out const FName ParamName, float Value);// 0x2df171c
	void SetSkeletalMeshToSlot(int Slot, SkeletalMesh* Mesh, out MaterialInstance*[] Mats, out <FName,ParticleSystem*> PSs, FName SocketName, out FName[] MatSocketNames);// 0x2df148c
	void SetParticleSystemHidden(bool bInHidden);// 0x2df1408
	void SetMeshVisible(int Slot, bool Visible);// 0x2df1344
	void SetMeshParticleSystem(int Slot, MeshComponent* MeshComp, out <FName,ParticleSystem*> PSs);// 0x2df11b8
	void SetMeshMaterial(int Slot, MeshComponent* MeshComp, out MaterialInstance*[] Mats, MaterialInstance* MatBase, out FName[] MatSocketNames);// 0x2df0ff8
	bool SetMeshComponentLightChannel(int Channel);// 0x2df0f70
	void SetForceMipStreamingAll(bool bForceMipStreaming);// 0x2df0eec
	void SetComponentMesh(MeshComponent* Component, SkeletalMesh* SkeletalMesh, StaticMesh* StaticMesh);// 0x2df0df4
	void RefreshAvatarByPredictedLODLevel();// 0x2df0de0
	void OnWeaponVisibilityChange();// 0x2df0dcc
	void OnMeshLoadedAsync(out const SoftObjectPath[] TargetsToLoad, out const Object*[] LoadedAssets);// 0x2df0c94
	bool IsAttachToMaster(int Slot, MeshComponent* MeshComp);// 0x2df0bc0
	void InitMasterComponent();// 0x2df0ba4
	bool GetSlotVisibilty(int Slot);// 0x2df0b1c
	MeshComponent* GetMeshComponent(int Slot);// 0x2df0a90
	AnimInstance* GetAnimInstance();// 0x2df0a5c
	void GetAllPSCs(out ParticleSystemComponent*[] OutPSCs);// 0x2df09c0
	void ClearMeshBySlot(int Slot);// 0x2df093c
	void ClearMeshAndApplyDefaultConfig(int Slot);// 0x2df08b8
	void ChangeAvatarParentMat(FString ParentMatPath);// 0x2df07d8
	bool AsyncLoadMesh(out SoftObjectPath[] MeshAssetArray);// 0x2df06f4
	void ApplyAnimation(int Slot, class AnimInstance AnimClass);// 0x2df063c

--------------------------------
Class: AvatarMeshData
	StaticMesh* MeshST;//[Offset: 0x0, Size: 0x8]
	SkeletalMesh* MeshSK;//[Offset: 0x8, Size: 0x8]
	MaterialInstance*[] MatIns;//[Offset: 0x10, Size: 0x10]
	<FName,ParticleSystem*> PSs;//[Offset: 0x20, Size: 0x50]
	int[] hideSlots;//[Offset: 0x70, Size: 0x10]
	ReplacedSlotData[] replacedSlots;//[Offset: 0x80, Size: 0x10]
	HideSlotData[] hideBoneSlots;//[Offset: 0x90, Size: 0x10]
	ItemDefineID definedID;//[Offset: 0xa0, Size: 0x28]
	bool AttachToMaster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	FName[] MatSocketNames;//[Offset: 0xd0, Size: 0x10]
	AnimationAsset*[] AnimationList;//[Offset: 0xe0, Size: 0x10]
	FName SocketName;//[Offset: 0xf0, Size: 0x8]

--------------------------------
Class: ReplacedSlotData

--------------------------------
Class: HideSlotData

--------------------------------
Class: WeaponAttachMeshConfig
	int meshId;//[Offset: 0x0, Size: 0x4]
	bool IsOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	WeaponAttachmentConfig AttachmentSlotType;//[Offset: 0x8, Size: 0x2b8]

--------------------------------
Class: CrossHairComp.CrossHairBaseComp.WeaponBaseComp.ActorComponent.Object
	float PistolCenterDownDis;//[Offset: 0x158, Size: 0x4]
	Texture2D* CrossHairTextureCenter;//[Offset: 0x160, Size: 0x8]
	Texture2D* CrossHairTextureEdge;//[Offset: 0x168, Size: 0x8]
	SubmachineGunCrossHair SubmachineGunCrossHair;//[Offset: 0x170, Size: 0x80]
	SnipeGunCrossHair SnipeGunCrossHair;//[Offset: 0x1f0, Size: 0xa8]
	BowCrossHair BowCrossHair;//[Offset: 0x298, Size: 0x70]
	ShootWeaponBulletCount ShootWeaponBulletCount;//[Offset: 0x308, Size: 0xb8]
	bool bDrawDebugCrossHairCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c0, Size: 0x1]
	float DrawDebugCrossHairCircleAreaSteps;//[Offset: 0x3c4, Size: 0x4]
	bool bDrawDebugSpreadCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c8, Size: 0x1]
	float DrawDebugSpreadCircleAreaSteps;//[Offset: 0x3cc, Size: 0x4]
	bool bDrawDebugLimitCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d0, Size: 0x1]
	float DrawDebugLimitCircleAreaSteps;//[Offset: 0x3d4, Size: 0x4]
	bool bDrawDebugString;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d8, Size: 0x1]
	void SetShootWeaponBulletCountEnabled(bool bEnabled);// 0x2e50d30
	void PrepareDraw(Canvas* InCanvas, out const Vector InLeaderLocation);// 0x2e50c64
	void OnWeaponBulletNumChange(int CurNum, int MaxNum);// 0x2e50ba8

--------------------------------
Class: CrossHairBaseComp.WeaponBaseComp.ActorComponent.Object
	Actor* WeaponOwner;//[Offset: 0xf8, Size: 0x8]
	GSTShootWeapon* OwnerShootWeapon;//[Offset: 0x100, Size: 0x8]
	ShootWeaponEntityComp* ShootWeaponEntity;//[Offset: 0x108, Size: 0x8]
	void OnWeaponStopFire();// 0x2e503e4
	void OnWeaponStartFire();// 0x2e503c8
	void OnWeaponShoot();// 0x2e503ac
	void OnScopeOutEnd();// 0x2e50390
	void OnScopeInEnd();// 0x2e50374
	void OnEndViewTarget(PlayerController* PC);// 0x2e502f0
	void OnCharacterStateChange(int Layer, int OldState, int NewState);// 0x2e501f8
	void OnCharacterJump();// 0x2e501dc
	void OnBecomeViewTarget(PlayerController* PC);// 0x2e50158
	void DrawDebugSpreadEnd();// 0x2e5013c
	void DrawDebugPointEnd();// 0x2e50120
	FString DebugInfo();// 0x2e50094

--------------------------------
Class: SubmachineGunCrossHair
	SoftObjectPath CenterPointResource;//[Offset: 0x0, Size: 0x18]
	Vector2D CenterPointScale;//[Offset: 0x18, Size: 0x8]
	SoftObjectPath HorizontalEdgeResource;//[Offset: 0x20, Size: 0x18]
	Vector2D HorizontalEdgeScale;//[Offset: 0x38, Size: 0x8]
	float HorizontalEdgeOffset;//[Offset: 0x40, Size: 0x4]
	float HorizontalEdgeDeviationMoveAnimationInterpSpeed;//[Offset: 0x44, Size: 0x4]
	SoftObjectPath CrossEdgeResource;//[Offset: 0x48, Size: 0x18]
	Vector2D CrossEdgeScale;//[Offset: 0x60, Size: 0x8]
	float CrossEdgeAngle;//[Offset: 0x68, Size: 0x4]
	Vector2D CrossEdgeOffset;//[Offset: 0x6c, Size: 0x8]
	Vector2D WholeScale;//[Offset: 0x74, Size: 0x8]

--------------------------------
Class: SnipeGunCrossHair
	SoftObjectPath CenterPointResource;//[Offset: 0x0, Size: 0x18]
	Vector2D CenterPointScale;//[Offset: 0x18, Size: 0x8]
	SoftObjectPath HorizontalLineResource;//[Offset: 0x20, Size: 0x18]
	Vector2D HorizontalLineScale;//[Offset: 0x38, Size: 0x8]
	float HorizontalLineDeviationMoveAnimationInterpSpeed;//[Offset: 0x40, Size: 0x4]
	SoftObjectPath CrossEdgeResource;//[Offset: 0x48, Size: 0x18]
	Vector2D CrossEdgeScale;//[Offset: 0x60, Size: 0x8]
	float CrossEdgeOffset;//[Offset: 0x68, Size: 0x4]
	SoftObjectPath BottomEdgeResource;//[Offset: 0x70, Size: 0x18]
	Vector2D BottomEdgeScale;//[Offset: 0x88, Size: 0x8]
	Vector2D BottomEdgeOffset;//[Offset: 0x90, Size: 0x8]
	float BottomEdgeDeviationOffsetRate;//[Offset: 0x98, Size: 0x4]
	Vector2D WholeScale;//[Offset: 0x9c, Size: 0x8]

--------------------------------
Class: BowCrossHair
	SoftObjectPath CenterPointResource;//[Offset: 0x0, Size: 0x18]
	Vector2D CenterPointScale;//[Offset: 0x18, Size: 0x8]
	SoftObjectPath HorizontalLineResource;//[Offset: 0x20, Size: 0x18]
	Vector2D HorizontalLineScale;//[Offset: 0x38, Size: 0x8]
	float HorizontalLineOffset;//[Offset: 0x40, Size: 0x4]
	SoftObjectPath CrossEdgeResource;//[Offset: 0x48, Size: 0x18]
	Vector2D CrossEdgeScale;//[Offset: 0x60, Size: 0x8]
	Vector2D WholeScale;//[Offset: 0x68, Size: 0x8]

--------------------------------
Class: ShootWeaponBulletCount
	SoftObjectPath ArcBackgroundResource;//[Offset: 0x0, Size: 0x18]
	Vector2D ArcBackgroundScale;//[Offset: 0x18, Size: 0x8]
	SoftObjectPath ThumbPointResource;//[Offset: 0x20, Size: 0x18]
	Vector2D ThumbPointScale;//[Offset: 0x38, Size: 0x8]
	float[] PercentValueConfig;//[Offset: 0x40, Size: 0x10]
	AlphaBlendConfig HiddenToVisibleAlphaBlendConfig;//[Offset: 0x50, Size: 0x20]
	AlphaBlendConfig[] VisibleToHiddenAlphaBlendConfig;//[Offset: 0x70, Size: 0x10]
	float DeviationThreshold;//[Offset: 0x80, Size: 0x4]
	Vector2D WholeScale;//[Offset: 0x84, Size: 0x8]
	float WholeOffset;//[Offset: 0x8c, Size: 0x4]
	float WholeRotation;//[Offset: 0x90, Size: 0x4]
	float ArcWidth;//[Offset: 0x94, Size: 0x4]
	float ArcRadius;//[Offset: 0x98, Size: 0x4]
	float ArcAngle;//[Offset: 0x9c, Size: 0x4]
	LinearColor[] PercentColorArray;//[Offset: 0xa0, Size: 0x10]
	float PointOffset;//[Offset: 0xb0, Size: 0x4]

--------------------------------
Class: AlphaBlendConfig
	enum BlendOption;//[Offset: 0x0, Size: 0x1]
	CurveFloat* CustomCurve;//[Offset: 0x8, Size: 0x8]
	float blendTime;//[Offset: 0x10, Size: 0x4]
	float BeginValue;//[Offset: 0x14, Size: 0x4]
	float DesiredValue;//[Offset: 0x18, Size: 0x4]
	bool bIsLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]

--------------------------------
Class: GSTShootWeapon.GSTWeaponBase.Actor.Object
	bool IsEquipSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x940, Size: 0x1]
	bool IsEquipFiringSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x941, Size: 0x1]
	bool IsEquipCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x942, Size: 0x1]
	bool IsHeavyWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x943, Size: 0x1]
	AkAudioEvent* BulletFlySound;//[Offset: 0x948, Size: 0x8]
	AkAudioEvent* LoadBulletSound;//[Offset: 0x950, Size: 0x8]
	AkAudioEvent* ChangeMagazineSound;//[Offset: 0x958, Size: 0x8]
	AkAudioEvent* MagazineINSound;//[Offset: 0x960, Size: 0x8]
	AkAudioEvent* MagazineOUTSound;//[Offset: 0x968, Size: 0x8]
	AkAudioEvent* PullBoltSound;//[Offset: 0x970, Size: 0x8]
	Vector BulletDecalScale;//[Offset: 0x978, Size: 0xc]
	bool TestInfinityBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x984, Size: 0x1]
	int BulletMode;//[Offset: 0x988, Size: 0x4]
	WeaponShootComp* ShootWeaponComp;//[Offset: 0x998, Size: 0x8]
	ShootEventProcessComponent* EventProcessComponent;//[Offset: 0x9a0, Size: 0x8]
	delegate OnShootWeaponAutoReloadDel;//[Offset: 0x9a8, Size: 0x10]
	delegate OnCurBulletChange;//[Offset: 0x9b8, Size: 0x10]
	delegate OnStartFireDelegate;//[Offset: 0x9d8, Size: 0x10]
	delegate OnStopFireDelegate;//[Offset: 0x9e8, Size: 0x10]
	delegate OnStartPullingDelegate;//[Offset: 0x9f8, Size: 0x10]
	delegate OnStopPullingDelegate;//[Offset: 0xa08, Size: 0x10]
	delegate OnWeaponShootDelegate;//[Offset: 0xa18, Size: 0x10]
	delegate OnWeaponReloadStartDelegate;//[Offset: 0xa28, Size: 0x10]
	delegate OnWeaponReloadEndDelegage;//[Offset: 0xa38, Size: 0x10]
	delegate OnWeaponEquipWeaponDelegate;//[Offset: 0xa48, Size: 0x10]
	delegate OnWeaponUnEquipWeaponDelegage;//[Offset: 0xa58, Size: 0x10]
	delegate OnWeaponNoShootDelegage;//[Offset: 0xa68, Size: 0x10]
	delegate OnWeaponEquipDelegate;//[Offset: 0xa78, Size: 0x10]
	delegate OnWeaponUnEquipDelegate;//[Offset: 0xa88, Size: 0x10]
	delegate OnHitDelegate;//[Offset: 0xab0, Size: 0x10]
	delegate OnShootFire;//[Offset: 0xac0, Size: 0x10]
	delegate OnLaunchBullet;//[Offset: 0xad0, Size: 0x10]
	delegate OnThirdBulletHit;//[Offset: 0xae0, Size: 0x10]
	Vector LastImpactEffectLocation;//[Offset: 0xcd0, Size: 0xc]
	float LastImpactEffectTime;//[Offset: 0xcdc, Size: 0x4]
	FName[] PowerStorageReplaceCharAnimList;//[Offset: 0xce0, Size: 0x10]
	byte TraceChannel;//[Offset: 0xcf0, Size: 0x1]
	bool isSnipeGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcf1, Size: 0x1]
	Transform BoltActionTransform;//[Offset: 0xd00, Size: 0x30]
	bool IsPenetrate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd30, Size: 0x1]
	BulletTrackComp* BulletTrackComp;//[Offset: 0xd38, Size: 0x8]
	ToaaBulletTrackComp* ToaaBulletTrackComp;//[Offset: 0xd40, Size: 0x8]
	bool IsScopeInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd50, Size: 0x1]
	bool bInstantImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda8, Size: 0x1]
	ShootWeaponEntityComp* ShootWeaponEntityComp;//[Offset: 0xdc8, Size: 0x8]
	<Object*,uint32> ShootEventNodeResMap;//[Offset: 0xe18, Size: 0x50]
	bool StopFireFilter();// 0x2eb4df8
	bool StartFireFilter();// 0x2eb4db8
	void StartDoPreBarrel(float HandledTime);// 0x2eb4d34
	void SetShootBulletType(enum bulletType);// 0x2eb4cbc
	void SetRetargetGunMesh(bool IsRetarget, SceneComponent* gunMesh);// 0x2eb4bf4
	void SetReloadMethod(byte reloadMethod);// 0x2eb4b78
	void SetIsHeavyWeapon(bool bEquip);// 0x2eb4af8
	void SetImpactOverflowDamage(int64 Damage, bool bBroadcastToLua);// 0x2eb4a1c
	void SetHomingTargetComponent(SceneComponent* Target, FName TargetSocket);// 0x2eb4968
	void SetCurShootType(byte shootType);// 0x2eb48ec
	void SetAimType(enum InAimType);// 0x2eb4874
	void ReqRefreshClipInfo();// 0x2eb4860
	void RefreshWeaponMesh();// 0x2eb484c
	void RefreshProtocolWeaponInfo();// 0x2eb4838
	void ReconnectRefreshWeaponDetail(int BulletNum, uint32 CurClipID, int SyncType, uint64 RandomSeed, int ShootID);// 0x2eb46d0
	void OnWeaponUnEquipDelegate__DelegateSignature();// 0x33e07d0
	void OnWeaponShootDelegate__DelegateSignature();// 0x33e07d0
	void OnWeaponReloadStartDelegate__DelegateSignature();// 0x33e07d0
	void OnWeaponReloadEndDelegage__DelegateSignature();// 0x33e07d0
	void OnWeaponEquipDelegate__DelegateSignature();// 0x33e07d0
	void OnWeaponClipMaxBulletChanged();// 0x2eb46bc
	void OnWeaponBulletChanged();// 0x2eb46a8
	void OnStopReload();// 0x2eb4694
	void OnStopPullingDelegate__DelegateSignature();// 0x33e07d0
	void OnStopFireDelegate__DelegateSignature();// 0x33e07d0
	void OnStartReload();// 0x2eb4680
	void OnStartPullingDelegate__DelegateSignature();// 0x33e07d0
	void OnStartFireDelegate__DelegateSignature();// 0x33e07d0
	void OnShootWeaponAutoReloadDelegate__DelegateSignature();// 0x33e07d0
	void OnShootFireDelegate__DelegateSignature();// 0x33e07d0
	void OnRep_HitDataArray(out const BulletHitInfoUploadData[] HitDataArray);// 0x2eb45e4
	void OnNoBulletNum();// 0x2eb45d0
	void OnMaxBulletChange__DelegateSignature();// 0x33e07d0
	void OnLeadingPlayerCharacterStateChange(int InLayer, int InOldState, int InNewState);// 0x2eb44e0
	void OnLaunchBulletDelegate__DelegateSignature(out const LanchBullet ShootData);// 0x33e07d0
	void OnHitDelegate__DelegateSignature(out const WeaponImpactResult ImpactResult);// 0x33e07d0
	void OnHeavyWeaponBulletModeChanged(int InBulletMode);// 0x2eb4464
	void OnEndViewTarget(PlayerController* PC);// 0x2eb43e0
	void OnCurBulletChange__DelegateSignature();// 0x33e07d0
	void OnBreakFire();// 0x2eb43cc
	void OnBecomeViewTarget(PlayerController* PC);// 0x2eb4348
	void LogWeaponAttr();// 0x2eb4334
	bool IsScopeInAttachToCharacter();// 0x2eb42fc
	bool IsPressAimButtonShoulderMode();// 0x2eb42c4
	bool IsOneShoot();// 0x2eb4284
	bool IsInPreFire();// 0x2eb424c
	void HeavyWeaponSwitchBulletMode(int BulletMode);// 0x2eb41d0
	void GunAttachMeshAnimPlay(enum AttachType, int animIndex, int Rate, bool bLoop);// 0x2eb409c
	byte GetWeaponReloadType();// 0x2eb4068
	MeshComponent* GetWeaponMuzzleEffectComponent(FName SocketName);// 0x2eb3fe4
	Vector GetWeaponDetectStartOffest();// 0x2eb3fac
	float GetWeaponBodyLength();// 0x2eb3f78
	Transform GetTransformBySocket(FName pSocket);// 0x2eb3eb4
	float GetTraceDistanceFromEntity();// 0x2eb3e80
	FName GetSilencerSocketNameFromEntity();// 0x2eb3e4c
	byte GetShootWeaponShootMode();// 0x2eb3e18
	ShootWeaponEntityComp* GetShootWeaponEntityComponent();// 0x2eb3de4
	WeaponShootComp* GetShootWeaponComp();// 0x2eb3db0
	byte GetShootType();// 0x2eb3d90
	float GetShootIntervalFromEntity();// 0x2eb3d5c
	float GetShootInterval();// 0x2eb3d28
	FName GetShellDropSocketNameFromEntity();// 0x2eb3cf4
	int GetScopeResID();// 0x2eb3cc0
	uint64 GetScopeInstanceID();// 0x2eb3c8c
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex);// 0x2eb3bc8
	float GetReloadTimeFromEntity();// 0x2eb3b94
	float GetReloadTacticalTimeFromEntity();// 0x2eb3b60
	float GetReloadMagOutTime();// 0x2eb3b2c
	float GetReloadMagOutHideTime();// 0x2eb3af8
	float GetReloadMagInTime();// 0x2eb3ac4
	float GetReloadDurationStartFromEntity();// 0x2eb3a90
	float GetReloadDurationLoopFromEntity();// 0x2eb3a5c
	Transform GetRelativeMuzzleTransform();// 0x2eb39e0
	float GetReferenceDistance();// 0x2eb39ac
	float GetRangeModifier();// 0x2eb3978
	float GetPostReloadTimeFromEntity();// 0x2eb3944
	float GetPostFireTimeFromEntity();// 0x2eb3910
	float GetPelletVerticalSpread();// 0x2eb38dc
	float GetPelletHorizontalSpread();// 0x2eb38a8
	float GetPelletAimVerticalSpreadFactor();// 0x2eb3874
	float GetPelletAimHorizontaSpreadFactor();// 0x2eb3840
	int GetOwnerAvatarPredictedLODLevel();// 0x2eb380c
	Transform GetMuzzleTransform();// 0x2eb3790
	FName GetMuzzleSocketNameFromEntity();// 0x2eb375c
	float GetMaxImpactEffectSkipTimeFromEntity();// 0x2eb3728
	int GetMaxBulletNumInOneClipFromEntity();// 0x2eb36f4
	bool GetIsHeavyWeapon();// 0x2eb36bc
	int64 GetImpactOverflowDamage();// 0x2eb36a0
	float GetImpactEffectSkipDistanceFromEntity();// 0x2eb366c
	FName GetHomingTargetSocket();// 0x2eb3638
	float GetHomingMaxAngleSpeed();// 0x2eb3604
	float GetHoldGunIdleTimeAfterScopeChangeFromEntity();// 0x2eb35d0
	float GetHoldGunIdleTimeAfterFireFromEntity();// 0x2eb359c
	enum GetHitCameraShakeLevelFormEntity();// 0x2eb3568
	float GetHandFoldMinDegree();// 0x2eb3534
	float GetHandFoldMaxDegree();// 0x2eb3500
	float GetGameDeviationFactor();// 0x2eb34cc
	FName GetFiringSuppressorSocketNameFromEntity();// 0x2eb3498
	MeshComponent* GetDefaultAttachmentComponentByType(enum Type);// 0x2eb3414
	byte GetCurSightType();// 0x2eb33e0
	float GetCurReloadTime();// 0x2eb33ac
	byte GetCurReloadMethod();// 0x2eb3378
	float GetCrossHairSustainedFireDiffusePercent();// 0x2eb3344
	float GetCrossHairSustainedFireDeviation();// 0x2eb3310
	float GetCrossHairMaxDrawSize();// 0x2eb32dc
	float GetCrossHairInitSize();// 0x2eb32a8
	float GetCrossHairBurstSpeed();// 0x2eb3274
	float GetCrossHairBurstIncreaseSpeed();// 0x2eb3240
	bool GetClipHasInfiniteBulletsFromEntity();// 0x2eb3208
	float GetBurstShootIntervalFromEntity();// 0x2eb31d4
	int GetBurstShootBulletsNumFromEntity();// 0x2eb31a0
	ItemDefineID GetBulletTypeFromEntity();// 0x2eb314c
	float GetBulletRangeEntity();// 0x2eb3118
	float GetBulletNumSingleShotFromEntity();// 0x2eb30e4
	int GetBulletNumInCurClip();// 0x2eb30b0
	float GetBulletFireSpeedFromEntity();// 0x2eb307c
	float GetBowMaxPowerStorageTime();// 0x2eb3048
	float GetBaseImpactDamageEntity();// 0x2eb3014
	enum GetAimType();// 0x2eb2ff8
	float GetAccessoriesVRecoilFactor();// 0x2eb2fc4
	float GetAccessoriesRecoveryFactor();// 0x2eb2f90
	float GetAccessoriesHRecoilFactor();// 0x2eb2f5c
	float GetAccessoriesDeviationFactor();// 0x2eb2f28
	void ConditionalSpawnImpactDeathEffect(out const Vector Position, out const Rotator Rotation, Actor* hitCharacter);// 0x2eb2e0c
	void ClientPlayBulletFlySound(Vector FlySoundPos);// 0x2eb2d90
	void BulletLineTrace(Vector BornPos, Vector EndPos, Actor* BulletActor);// 0x2eb2c90

--------------------------------
Class: WeaponShootComp.WeaponBaseComp.ActorComponent.Object
	FName NormalBulletsTrackCompTag;//[Offset: 0xf8, Size: 0x8]
	FName ScopeBulletsTrackCompTag;//[Offset: 0x100, Size: 0x8]
	bool bInstantImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	bool bDrawShootLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 0x1]
	float DrawShootLineTime;//[Offset: 0x10c, Size: 0x4]
	bool bDrawShootPointOnScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	float DrawShootPointOnScreenTime;//[Offset: 0x114, Size: 0x4]
	float DrawShootPointOnScreenSize;//[Offset: 0x118, Size: 0x4]
	float DrawShootPoint3DSize;//[Offset: 0x11c, Size: 0x4]
	delegate OnShoot;//[Offset: 0x128, Size: 0x10]
	GSTShootWeapon* OwnerShootWeapon;//[Offset: 0x150, Size: 0x8]
	void ShootDelegate__DelegateSignature();// 0x33e07d0
	void OnContinuousShootStateChangedDelegate__DelegateSignature(bool bIsContinuousShooting);// 0x33e07d0
	void OnContinuousShootDelegate__DelegateSignature(int BulletsNum);// 0x33e07d0

--------------------------------
Class: ShootEventProcessComponent.WeaponBaseComp.ActorComponent.Object
	void OnWeaponVisibleChange();// 0x2f4d3d4
	void OnUnEquipEvent();// 0x2f4d3c0
	void OnThirdBulletHit(out const LanchBullet BulletData);// 0x2f4d320
	void OnStopReload();// 0x2f4d30c
	void OnStopFire();// 0x2f4d2f8
	void OnStartReload();// 0x2f4d2e4
	void OnStartPulling();// 0x2f4d2d0
	void OnStartFire();// 0x2f4d2bc
	void OnShootFire();// 0x2f4d2a8
	void OnNoBullet();// 0x2f4d294
	void OnLaunchBullet(out const LanchBullet BulletData);// 0x2f4d1f4
	void OnLaunchBow();// 0x2f4d1e0
	void OnImpact();// 0x2f4d1cc
	void OnEquipEvent();// 0x2f4d1b8

--------------------------------
Class: LanchBullet

--------------------------------
Class: BulletTrackComp.WeaponBaseComp.ActorComponent.Object
	GSTShootWeapon* OwnerShootWeapon;//[Offset: 0xf8, Size: 0x8]
	BaseCharacter* OwnerCharacter;//[Offset: 0x100, Size: 0x8]
	PlayerController* OwnerPlayerController;//[Offset: 0x108, Size: 0x8]
	void SetRecoilScale(float InValue);// 0x2e26864
	void SetDeviationScale(float InValue);// 0x2e267ec
	void OnWeaponStopFire();// 0x2e267d8
	void OnWeaponStartFire();// 0x2e267c4
	void OnWeaponShoot();// 0x2e267b0
	void OnEndViewTarget(PlayerController* PlayerController);// 0x2e26734
	void OnBecomeViewTarget(PlayerController* PlayerController);// 0x2e266b8
	float GetRecoilScale();// 0x2e2669c
	float GetDeviationScale();// 0x2e26680
	Vector GetCurRecoilInfo();// 0x2e26648
	float GetCurDeviation();// 0x2e26614

--------------------------------
Class: ToaaBulletTrackComp.WeaponBaseComp.ActorComponent.Object
	GSTShootWeapon* OwnerShootWeapon;//[Offset: 0xf8, Size: 0x8]
	BaseCharacter* OwnerCharacter;//[Offset: 0x100, Size: 0x8]
	PlayerController* OwnerPlayerController;//[Offset: 0x108, Size: 0x8]
	void OnWeaponStopFire();// 0x2f7b784
	void OnWeaponStartFire();// 0x2f7b770
	void OnWeaponShoot();// 0x2f7b75c
	void OnEndViewTarget(PlayerController* PC);// 0x2f7b6e0
	void OnBecomeViewTarget(PlayerController* PC);// 0x2f7b664
	Vector GetCurRecoilInfo();// 0x2f7b62c
	float GetCurDeviation();// 0x2f7b5f8

--------------------------------
Class: ShootWeaponEntityComp.WeaponEntityComp.WeaponBaseComp.ActorComponent.Object
	bool IsPureVirtualGun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	class GSTShootBulletBase* BulletTemplate;//[Offset: 0x138, Size: 0x8]
	int BulletId;//[Offset: 0x140, Size: 0x4]
	int BulletNumWaring;//[Offset: 0x144, Size: 0x4]
	float BulletFireSpeed;//[Offset: 0x148, Size: 0x4]
	float HomingMaxAngleSpeed;//[Offset: 0x14c, Size: 0x4]
	FName HomingTargetSocket;//[Offset: 0x150, Size: 0x8]
	float LockTargetTime;//[Offset: 0x158, Size: 0x4]
	int MaxBulletNumInOneClip;//[Offset: 0x15c, Size: 0x4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x160, Size: 0x4]
	float ShootInterval;//[Offset: 0x164, Size: 0x4]
	bool NeedBtnCd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	bool bHasSingleFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1]
	bool bHasAutoFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16a, Size: 0x1]
	bool bHasBurstFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16b, Size: 0x1]
	int BurstShootBulletsNum;//[Offset: 0x16c, Size: 0x4]
	float BurstShootInterval;//[Offset: 0x170, Size: 0x4]
	int BulletNumSingleShot;//[Offset: 0x174, Size: 0x4]
	FName MuzzleSocketName;//[Offset: 0x178, Size: 0x8]
	FName DefaultMuzzleSocketName;//[Offset: 0x180, Size: 0x8]
	FName SilencerSocketName;//[Offset: 0x188, Size: 0x8]
	FName FiringSuppressorSocketName;//[Offset: 0x190, Size: 0x8]
	FName ShellDropSocketName;//[Offset: 0x198, Size: 0x8]
	float ImpactEffectSkipDistance;//[Offset: 0x1a0, Size: 0x4]
	float MaxImpactEffectSkipTime;//[Offset: 0x1a4, Size: 0x4]
	byte shootType;//[Offset: 0x1a8, Size: 0x1]
	byte ShootMode;//[Offset: 0x1a9, Size: 0x1]
	int ShootTotalType;//[Offset: 0x1ac, Size: 0x4]
	bool ADSManualStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 0x1]
	bool IsNeedBlink;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b1, Size: 0x1]
	enum HitCameraShakeLevel;//[Offset: 0x1b2, Size: 0x1]
	float WeaponWarnUpTime;//[Offset: 0x1b4, Size: 0x4]
	bool IsLoopAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]
	int SpecialSkillId;//[Offset: 0x1bc, Size: 0x4]
	int HeavyWeaponBuffid;//[Offset: 0x1c0, Size: 0x4]
	int HitTriggerSkillID;//[Offset: 0x1c4, Size: 0x4]
	int HeavyWeaponAddOneBulletTime;//[Offset: 0x1c8, Size: 0x4]
	int HeavyWeaponMasterType;//[Offset: 0x1cc, Size: 0x4]
	HeavyWeaponSkill[] HeavyWeaponSkills;//[Offset: 0x1d0, Size: 0x10]
	enum SelectedType;//[Offset: 0x1e0, Size: 0x1]
	float ChangeWeaponCd;//[Offset: 0x1e4, Size: 0x4]
	float HoldGunIdleDeltaAfterFire;//[Offset: 0x1e8, Size: 0x4]
	float HoldGunIdleDeltaAfterScopeChange;//[Offset: 0x1ec, Size: 0x4]
	bool IsPressAimButtonShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]
	float FireResumeSprintTime;//[Offset: 0x1f4, Size: 0x4]
	float BaseImpactDamage;//[Offset: 0x1f8, Size: 0x4]
	float BulletRange;//[Offset: 0x1fc, Size: 0x4]
	class ShootWeaponImpactEffect* ImpactActorTemplate;//[Offset: 0x200, Size: 0x8]
	byte ImpactDirType;//[Offset: 0x208, Size: 0x1]
	SRangeAttenuateConfig[] RangeAttenuate;//[Offset: 0x210, Size: 0x10]
	float RangeModifier;//[Offset: 0x220, Size: 0x4]
	float ReferenceDistance;//[Offset: 0x224, Size: 0x4]
	class DamageType* DamageType;//[Offset: 0x228, Size: 0x8]
	ItemDefineID bulletType;//[Offset: 0x230, Size: 0x28]
	bool bHasInfiniteClips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	bool bClipHasInfiniteBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 0x1]
	int InitBulletInClip;//[Offset: 0x25c, Size: 0x4]
	bool bAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	float TraceDistance;//[Offset: 0x264, Size: 0x4]
	float MaxValidHitTime;//[Offset: 0x268, Size: 0x4]
	float ImpactPhysicsDamage;//[Offset: 0x26c, Size: 0x4]
	float FlameDamageMuzzleNearRadius;//[Offset: 0x270, Size: 0x4]
	float FlameDamageAngle;//[Offset: 0x274, Size: 0x4]
	Vector FlameDamageOverlap2Extent;//[Offset: 0x278, Size: 0xc]
	float FlameDamageOverlap2Offset;//[Offset: 0x284, Size: 0x4]
	int FlameNoHurtResID;//[Offset: 0x288, Size: 0x4]
	int FlameNoHurtCheckRadius;//[Offset: 0x28c, Size: 0x4]
	int NoHurtTriggerSkillID;//[Offset: 0x290, Size: 0x4]
	int GunHitTriggerSkillID;//[Offset: 0x294, Size: 0x4]
	byte ReloadType;//[Offset: 0x298, Size: 0x1]
	float PreFireTime;//[Offset: 0x29c, Size: 0x4]
	float PreFireScopeInterruptTime;//[Offset: 0x2a0, Size: 0x4]
	float PostFireTime;//[Offset: 0x2a4, Size: 0x4]
	float PostReloadTime;//[Offset: 0x2a8, Size: 0x4]
	float ReloadDurationStart;//[Offset: 0x2ac, Size: 0x4]
	float ReloadDurationLoop;//[Offset: 0x2b0, Size: 0x4]
	float ReloadTime;//[Offset: 0x2b4, Size: 0x4]
	float ReloadTimeTactical;//[Offset: 0x2b8, Size: 0x4]
	float ReloadTimeMagOut;//[Offset: 0x2bc, Size: 0x4]
	float ReloadTimeMagOutHide;//[Offset: 0x2c0, Size: 0x4]
	float ReloadTimeMagIn;//[Offset: 0x2c4, Size: 0x4]
	bool NeedUseTacticalMagTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8, Size: 0x1]
	float ReloadTimeTacticalMagOut;//[Offset: 0x2cc, Size: 0x4]
	float ReloadTimeTacticalMagIn;//[Offset: 0x2d0, Size: 0x4]
	FName ReloadAllTIDName;//[Offset: 0x2d4, Size: 0x8]
	FName ReloadTacticalTIDName;//[Offset: 0x2dc, Size: 0x8]
	byte RecoilType;//[Offset: 0x2e4, Size: 0x1]
	SRecoilInfo RecoilInfo;//[Offset: 0x2e8, Size: 0x70]
	SToaaRecoilInfo ToaaRecoilInfo;//[Offset: 0x358, Size: 0x60]
	float AccessoriesVRecoilFactor;//[Offset: 0x3b8, Size: 0x4]
	float AccessoriesHRecoilFactor;//[Offset: 0x3bc, Size: 0x4]
	float AccessoriesRecoveryFactor;//[Offset: 0x3c0, Size: 0x4]
	SDeviation DeviationInfo;//[Offset: 0x3c4, Size: 0x48]
	float ShotGunVerticalSpread;//[Offset: 0x40c, Size: 0x4]
	float ShotGunHorizontalSpread;//[Offset: 0x410, Size: 0x4]
	float GameDeviationFactor;//[Offset: 0x414, Size: 0x4]
	float GameDeviationAccuracy;//[Offset: 0x418, Size: 0x4]
	float AccessoriesDeviationFactor;//[Offset: 0x41c, Size: 0x4]
	enum CrossHairType;//[Offset: 0x420, Size: 0x1]
	float CrossHairInitialSize;//[Offset: 0x424, Size: 0x4]
	float CrossHairMaxDrawSize;//[Offset: 0x428, Size: 0x4]
	float CrossHairBurstSpeed;//[Offset: 0x42c, Size: 0x4]
	float CrossHairBurstIncreaseSpeed;//[Offset: 0x430, Size: 0x4]
	float CrossHairSustainedFireDiffusePercent;//[Offset: 0x434, Size: 0x4]
	float CrossHairSustainedFireDeviation;//[Offset: 0x438, Size: 0x4]
	CrossHairShakeInfo NormalCrossHairShake;//[Offset: 0x440, Size: 0x10]
	CrossHairShakeInfo ShoulderCrossHairShake;//[Offset: 0x450, Size: 0x10]
	CrossHairShakeInfo ScopeCrossHairShake;//[Offset: 0x460, Size: 0x10]
	FName DefaultScopeSocket;//[Offset: 0x470, Size: 0x8]
	FName DefaultGripSocket;//[Offset: 0x478, Size: 0x8]
	FName DefaultGunStockSocket;//[Offset: 0x480, Size: 0x8]
	FName DefaultMagSocket;//[Offset: 0x488, Size: 0x8]
	float WeaponBodyLength;//[Offset: 0x490, Size: 0x4]
	Vector WeaponDetectStartOffest;//[Offset: 0x494, Size: 0xc]
	FName[] OpticalSightAttachmentSocketNameList;//[Offset: 0x4a0, Size: 0x10]
	byte reloadMethod;//[Offset: 0x4b4, Size: 0x1]
	float WeaponAimFOV;//[Offset: 0x4b8, Size: 0x4]
	float WeaponAimFOVBaseLine;//[Offset: 0x4bc, Size: 0x4]
	float WeaponAimInTime;//[Offset: 0x4c0, Size: 0x4]
	float WeaponAimPitchRate;//[Offset: 0x4c4, Size: 0x4]
	float WeaponAimYawRate;//[Offset: 0x4c8, Size: 0x4]
	float GameMotionYawRate;//[Offset: 0x4cc, Size: 0x4]
	float GameMotionPitchRate;//[Offset: 0x4d0, Size: 0x4]
	float ShotGunAimVerticalSpreadFactor;//[Offset: 0x4d4, Size: 0x4]
	float ShotGunAimHorizontalSpreadFactor;//[Offset: 0x4d8, Size: 0x4]
	float ForegripParam;//[Offset: 0x4dc, Size: 0x4]
	float SensitiveFireYawRate;//[Offset: 0x4e0, Size: 0x4]
	float SensitiveFirePitchRate;//[Offset: 0x4e4, Size: 0x4]
	byte SightType;//[Offset: 0x4e8, Size: 0x1]
	float MaxBulletImpactFXClampDistance;//[Offset: 0x4ec, Size: 0x4]
	int MaxBulletImpactFXSpawnNum;//[Offset: 0x4f0, Size: 0x4]
	bool IsLimitBulletImpactFxSpawnInActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f4, Size: 0x1]
	float RecoilKickADS;//[Offset: 0x4f8, Size: 0x4]
	float ExtraHitPerformScale;//[Offset: 0x4fc, Size: 0x4]
	float HUDAlphaDecreaseSpeedScale;//[Offset: 0x500, Size: 0x4]
	bool bAutoExitScopeAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x504, Size: 0x1]
	enum ReleaseFireType;//[Offset: 0x505, Size: 0x1]
	bool IsScopeInAttachToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x506, Size: 0x1]
	bool IsEnterPreFireScopeInterrupt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x507, Size: 0x1]
	float ScopeOutDelayTime;//[Offset: 0x508, Size: 0x4]
	bool bLock90DirWhenPitchAbove75;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 0x1]
	float LockAnimPitchDegree;//[Offset: 0x510, Size: 0x4]
	float LockAnimPitchDegreeCrouch;//[Offset: 0x514, Size: 0x4]
	int HandFoldMaxDegree;//[Offset: 0x518, Size: 0x4]
	int HandFoldMinDegree;//[Offset: 0x51c, Size: 0x4]
	float AnimationKick;//[Offset: 0x520, Size: 0x4]
	ShootBodyBuff[] HitHeadBuffs;//[Offset: 0x528, Size: 0x10]
	ShootBodyBuff[] HitBodyBuffs;//[Offset: 0x538, Size: 0x10]
	ShootBodyBuff[] HitArmBuffs;//[Offset: 0x548, Size: 0x10]
	ShootBodyBuff[] HitLegBuffs;//[Offset: 0x558, Size: 0x10]
	int ShotgunAddBuffHits;//[Offset: 0x568, Size: 0x4]
	int ShotgunAddBuffID;//[Offset: 0x56c, Size: 0x4]
	int ShotgunAddBuffProb;//[Offset: 0x570, Size: 0x4]
	int ShootAddBuffID;//[Offset: 0x574, Size: 0x4]
	int ShootAddBuffCDTime;//[Offset: 0x578, Size: 0x4]
	ShootCameraModeParam NormalModeParam;//[Offset: 0x57c, Size: 0x18]
	ShootCameraModeParam ShoulderModeParam;//[Offset: 0x594, Size: 0x18]
	ShootCameraModeParam AimModeParam;//[Offset: 0x5ac, Size: 0x18]
	float BowArrowInitSpeed;//[Offset: 0x5c4, Size: 0x4]
	float BowArrowMaxSpeed;//[Offset: 0x5c8, Size: 0x4]
	float BowMaxPowerStorageTime;//[Offset: 0x5cc, Size: 0x4]
	float BowPowerStorageInitSkillCoe;//[Offset: 0x5d0, Size: 0x4]
	float BowPowerStorageMaxSkillCoe;//[Offset: 0x5d4, Size: 0x4]
	AutoAimConfig AutoAimConfig;//[Offset: 0x5d8, Size: 0x40]
	OptimizeViewRotationConfig OptimizeViewRotationConfig;//[Offset: 0x618, Size: 0x2c]
	bool NeedTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x644, Size: 0x1]
	float FireOverheating;//[Offset: 0x648, Size: 0x4]
	float DissipateHeat;//[Offset: 0x64c, Size: 0x4]
	float MaxTemperature;//[Offset: 0x650, Size: 0x4]
	float MinTemperature;//[Offset: 0x654, Size: 0x4]
	bool IsNeedHidePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658, Size: 0x1]
	byte ScopeCameraId;//[Offset: 0x659, Size: 0x1]

--------------------------------
Class: GSTShootBulletBase.Actor.Object
	BulletMovementComp* PMComp;//[Offset: 0x340, Size: 0x8]
	bool bLaunchWithGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	int MaxNoGravityRange;//[Offset: 0x34c, Size: 0x4]
	float LaunchGravityScale;//[Offset: 0x350, Size: 0x4]
	int PunctureTimes;//[Offset: 0x354, Size: 0x4]
	float DelayDestroyTimer;//[Offset: 0x358, Size: 0x4]
	class DamageType* DamageType;//[Offset: 0x360, Size: 0x8]
	Vector RootScale;//[Offset: 0x368, Size: 0xc]
	ParticleSystem* LocalTailFX;//[Offset: 0x378, Size: 0x8]
	bool IsNeedShowImpactEffectHitReaction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	bool bShowNormalTailFXImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 0x1]
	bool bDrawImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x382, Size: 0x1]
	ParticleSystem* LocalTailFogFx;//[Offset: 0x388, Size: 0x8]
	BulletTailFxInfo LocalTailFxInfo;//[Offset: 0x390, Size: 0x30]
	ParticleSystem* RemoteTailFX;//[Offset: 0x3c0, Size: 0x8]
	ParticleSystem* RemoteTailFogFx;//[Offset: 0x3c8, Size: 0x8]
	BulletTailFxInfo RemoteTailFxInfo;//[Offset: 0x3d0, Size: 0x30]
	Vector ShootDir;//[Offset: 0x400, Size: 0xc]
	bool bClientCalcDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 0x1]
	delegate OnResetBullet;//[Offset: 0x458, Size: 0x10]
	delegate OnBulletImpact;//[Offset: 0x468, Size: 0x10]
	delegate OnLaunchBullet;//[Offset: 0x478, Size: 0x10]
	GSTShootWeapon* OwningShootWeapon;//[Offset: 0x488, Size: 0x8]
	Pawn* InstigatorPawn;//[Offset: 0x490, Size: 0x8]
	void ResetBulletDelegate__DelegateSignature();// 0x33e07d0
	void OnImpactDelegate__DelegateSignature(HitResult HitInfo);// 0x33e07d0
	void OnImpact(out const HitResult ImpactResult);// 0x2eb2204
	void LaunchBulletDelegate__DelegateSignature();// 0x33e07d0

--------------------------------
Class: BulletMovementComp.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	bool bEnableTickDelayForOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 0x1]
	bool bNeedStopWhenImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f3, Size: 0x1]
	bool bNeedSweepCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 0x1]
	float SweepCheckRadius;//[Offset: 0x1f8, Size: 0x4]
	enum SelectedType;//[Offset: 0x1fc, Size: 0x1]
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x200, Size: 0x8]
	void ResumeMoveAfterImpactWithNoLost();// 0x2e2607c
	void ResetTickDelay();// 0x2e26064
	void ForceStop();// 0x2e26050

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0x12c, Size: 0x4]
	float MaxSpeed;//[Offset: 0x130, Size: 0x4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x134, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x134, Size: 0x1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x134, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x134, Size: 0x1]
	bool bSimulationEnabled;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x134, Size: 0x1]
	bool bSweepCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x134, Size: 0x1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x134, Size: 0x1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x134, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x135, Size: 0x1]
	bool bInterpMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x135, Size: 0x1]
	bool bInterpRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x135, Size: 0x1]
	float PreviousHitTime;//[Offset: 0x138, Size: 0x4]
	Vector PreviousHitNormal;//[Offset: 0x13c, Size: 0xc]
	float ProjectileGravityScale;//[Offset: 0x148, Size: 0x4]
	float Buoyancy;//[Offset: 0x14c, Size: 0x4]
	float Bounciness;//[Offset: 0x150, Size: 0x4]
	float Friction;//[Offset: 0x154, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x158, Size: 0x4]
	float MinFrictionFraction;//[Offset: 0x15c, Size: 0x4]
	delegate OnProjectileBounce;//[Offset: 0x160, Size: 0x10]
	delegate OnProjectileStop;//[Offset: 0x170, Size: 0x10]
	float HomingAccelerationMagnitude;//[Offset: 0x180, Size: 0x4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x184, Size: 0x8]
	float MaxSimulationTimeStep;//[Offset: 0x18c, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x190, Size: 0x4]
	int BounceAdditionalIterations;//[Offset: 0x194, Size: 0x4]
	float InterpLocationTime;//[Offset: 0x198, Size: 0x4]
	float InterpRotationTime;//[Offset: 0x19c, Size: 0x4]
	float InterpLocationMaxLagDistance;//[Offset: 0x1a0, Size: 0x4]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x1a4, Size: 0x4]
	void StopSimulating(out const HitResult HitResult);// 0x4760734
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x47606b0
	void SetInterpolatedComponent(SceneComponent* Component);// 0x476062c
	void ResetInterpolation();// 0x4760610
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x33e07d0
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x33e07d0
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0x476052c
	Vector LimitVelocity(Vector NewVelocity);// 0x476049c
	bool IsVelocityUnderSimulationThreshold();// 0x4760454
	bool IsInterpolationComplete();// 0x4760428

--------------------------------
Class: HeavyWeaponSkill
	int Passives;//[Offset: 0x0, Size: 0x4]
	int Actives;//[Offset: 0x4, Size: 0x4]
	LinearColor Color;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: ShootWeaponImpactEffect.DataAsset.Object
	float FleshFxRandomAngle;//[Offset: 0x34, Size: 0x4]
	float OtherFxRandomAngle;//[Offset: 0x38, Size: 0x4]
	bool bUseImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	ParticleSystem* DefaultFX;//[Offset: 0x40, Size: 0x8]
	ParticleSystem* DefaultFXLow;//[Offset: 0x48, Size: 0x8]
	bool IsDefaultFxApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	ParticleSystem* ConcreteFX;//[Offset: 0x58, Size: 0x8]
	ParticleSystem* ConcreteFXLow;//[Offset: 0x60, Size: 0x8]
	bool IsConcreteFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	ParticleSystem* DirtFX;//[Offset: 0x70, Size: 0x8]
	ParticleSystem* DirtFXLow;//[Offset: 0x78, Size: 0x8]
	bool IsDirtFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	ParticleSystem* WaterFX;//[Offset: 0x88, Size: 0x8]
	ParticleSystem* WaterFXLow;//[Offset: 0x90, Size: 0x8]
	bool IsWaterFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	ParticleSystem* MetalFX;//[Offset: 0xa0, Size: 0x8]
	ParticleSystem* MetalFXLow;//[Offset: 0xa8, Size: 0x8]
	bool IsMetalFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	ParticleSystem* WoodFX;//[Offset: 0xb8, Size: 0x8]
	ParticleSystem* WoodFXLow;//[Offset: 0xc0, Size: 0x8]
	bool IsWoodFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	ParticleSystem* GlassFX;//[Offset: 0xd0, Size: 0x8]
	ParticleSystem* GlassFXLow;//[Offset: 0xd8, Size: 0x8]
	bool IsGlassFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	ParticleSystem* GrassFX;//[Offset: 0xe8, Size: 0x8]
	ParticleSystem* GrassFXLow;//[Offset: 0xf0, Size: 0x8]
	bool IsGrassFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	ParticleSystem* FleshFX;//[Offset: 0x100, Size: 0x8]
	ParticleSystem* FleshFXLow;//[Offset: 0x108, Size: 0x8]
	bool IsFleshFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	ParticleSystem* OutFleshFX;//[Offset: 0x118, Size: 0x8]
	ParticleSystem* OutFleshFXLow;//[Offset: 0x120, Size: 0x8]
	bool IsOutFleshFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	ParticleSystem* DeathFleshFX;//[Offset: 0x130, Size: 0x8]
	ParticleSystem* DeathFleshFXLow;//[Offset: 0x138, Size: 0x8]
	bool IsDeathFleshFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	ParticleSystem* HeadFleshFX;//[Offset: 0x148, Size: 0x8]
	ParticleSystem* HeadFleshFXLow;//[Offset: 0x150, Size: 0x8]
	ParticleSystem* ShieldFleshFX;//[Offset: 0x158, Size: 0x8]
	ParticleSystem* ShieldFleshFXLow;//[Offset: 0x160, Size: 0x8]
	bool IsHeadFleshFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	ParticleSystem* SteelFX;//[Offset: 0x170, Size: 0x8]
	ParticleSystem* SteelFXLow;//[Offset: 0x178, Size: 0x8]
	bool IsSteelFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	ParticleSystem* SandbagFX;//[Offset: 0x188, Size: 0x8]
	ParticleSystem* SandbagFXLow;//[Offset: 0x190, Size: 0x8]
	bool IsSandbagFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	ParticleSystem* SandFX;//[Offset: 0x1a0, Size: 0x8]
	ParticleSystem* SandFXLow;//[Offset: 0x1a8, Size: 0x8]
	bool IsSandFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 0x1]
	ParticleSystem* ClothFX;//[Offset: 0x1b8, Size: 0x8]
	ParticleSystem* ClothFXLow;//[Offset: 0x1c0, Size: 0x8]
	bool IsClothFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	ParticleSystem* PlasticFX;//[Offset: 0x1d0, Size: 0x8]
	ParticleSystem* PlasticFXLow;//[Offset: 0x1d8, Size: 0x8]
	bool IsPlasticFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	ParticleSystem* LeatherFX;//[Offset: 0x1e8, Size: 0x8]
	ParticleSystem* LeatherFXLow;//[Offset: 0x1f0, Size: 0x8]
	bool IsLeatherFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 0x1]
	ParticleSystem* CeramicsFX;//[Offset: 0x200, Size: 0x8]
	ParticleSystem* CeramicsFXLow;//[Offset: 0x208, Size: 0x8]
	bool IsCeramicsFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	ParticleSystem* PaperFX;//[Offset: 0x218, Size: 0x8]
	ParticleSystem* PaperFXLow;//[Offset: 0x220, Size: 0x8]
	bool IsPaperFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	ParticleSystem* StoneFX;//[Offset: 0x230, Size: 0x8]
	ParticleSystem* StoneFXLow;//[Offset: 0x238, Size: 0x8]
	bool IsStoneFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	ParticleSystem* SinkFx;//[Offset: 0x248, Size: 0x8]
	ParticleSystem* SinkFxLow;//[Offset: 0x250, Size: 0x8]
	bool IsSinkFxApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	ParticleSystem* PopCanFX;//[Offset: 0x260, Size: 0x8]
	ParticleSystem* PopCanFXLow;//[Offset: 0x268, Size: 0x8]
	bool IsPopCanFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	ParticleSystem* PyreflyFX;//[Offset: 0x278, Size: 0x8]
	ParticleSystem* PyreflyFXLow;//[Offset: 0x280, Size: 0x8]
	bool IsPyreflyFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	ParticleSystem* LeafFX;//[Offset: 0x290, Size: 0x8]
	ParticleSystem* LeafFXLow;//[Offset: 0x298, Size: 0x8]
	bool IsLeafFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	ParticleSystem* CarFX;//[Offset: 0x2a8, Size: 0x8]
	ParticleSystem* CarFXLow;//[Offset: 0x2b0, Size: 0x8]
	bool IsCarFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	ParticleSystem* AsphaltFX;//[Offset: 0x2c0, Size: 0x8]
	ParticleSystem* AsphaltFXLow;//[Offset: 0x2c8, Size: 0x8]
	bool IsAsphaltFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	ParticleSystem* CrystalFX;//[Offset: 0x2d8, Size: 0x8]
	ParticleSystem* CrystalFXLow;//[Offset: 0x2e0, Size: 0x8]
	bool IsCrystalFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	ParticleSystem* Crystal2FX;//[Offset: 0x2f0, Size: 0x8]
	ParticleSystem* Crystal2FXLow;//[Offset: 0x2f8, Size: 0x8]
	bool IsCrystal2FXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	ParticleSystem* Crystal3FX;//[Offset: 0x308, Size: 0x8]
	ParticleSystem* Crystal3FXLow;//[Offset: 0x310, Size: 0x8]
	bool IsMetalNoHoldApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	ParticleSystem* MetalNoHoldFX;//[Offset: 0x320, Size: 0x8]
	ParticleSystem* MetalNoHoldFXLow;//[Offset: 0x328, Size: 0x8]
	bool IsCrystal3FXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	ParticleSystem* IceFX;//[Offset: 0x338, Size: 0x8]
	ParticleSystem* IceFXLow;//[Offset: 0x340, Size: 0x8]
	bool IsIceFXApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	ImpactEffectScale[] ImpactEffectScales;//[Offset: 0x350, Size: 0x10]
	ImpactEffectScale[] DeathImpactEffectScales;//[Offset: 0x360, Size: 0x10]
	ImpactEffectScale[] BloodEffectScales;//[Offset: 0x370, Size: 0x10]
	float RecycleTime;//[Offset: 0x380, Size: 0x4]
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x384, Size: 0x1]
	bool IsBlindageFleshApplyScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x385, Size: 0x1]
	ParticleSystem* BlindageFleshFX;//[Offset: 0x388, Size: 0x8]
	ParticleSystem* BlindageFleshFXLow;//[Offset: 0x390, Size: 0x8]
	AkAudioEvent* DefaultSound;//[Offset: 0x398, Size: 0x8]
	AkAudioEvent* ConcreteSound;//[Offset: 0x3a0, Size: 0x8]
	AkAudioEvent* DirtSound;//[Offset: 0x3a8, Size: 0x8]
	AkAudioEvent* WaterSound;//[Offset: 0x3b0, Size: 0x8]
	AkAudioEvent* MetalSound;//[Offset: 0x3b8, Size: 0x8]
	AkAudioEvent* WoodSound;//[Offset: 0x3c0, Size: 0x8]
	AkAudioEvent* GlassSound;//[Offset: 0x3c8, Size: 0x8]
	AkAudioEvent* GrassSound;//[Offset: 0x3d0, Size: 0x8]
	AkAudioEvent* FleshSound;//[Offset: 0x3d8, Size: 0x8]
	AkAudioEvent* SteelSound;//[Offset: 0x3e0, Size: 0x8]
	AkAudioEvent* SandbagSound;//[Offset: 0x3e8, Size: 0x8]
	AkAudioEvent* SandSound;//[Offset: 0x3f0, Size: 0x8]
	AkAudioEvent* ClothSound;//[Offset: 0x3f8, Size: 0x8]
	AkAudioEvent* PlasticSound;//[Offset: 0x400, Size: 0x8]
	AkAudioEvent* LeatherSound;//[Offset: 0x408, Size: 0x8]
	AkAudioEvent* CeramicsSound;//[Offset: 0x410, Size: 0x8]
	AkAudioEvent* PaperSound;//[Offset: 0x418, Size: 0x8]
	AkAudioEvent* StoneSound;//[Offset: 0x420, Size: 0x8]
	AkAudioEvent* SinkSound;//[Offset: 0x428, Size: 0x8]
	AkAudioEvent* PopCanSound;//[Offset: 0x430, Size: 0x8]
	AkAudioEvent* PyreflySound;//[Offset: 0x438, Size: 0x8]
	AkAudioEvent* LeafSound;//[Offset: 0x440, Size: 0x8]
	AkAudioEvent* CarSound;//[Offset: 0x448, Size: 0x8]
	AkAudioEvent* AsphaltSound;//[Offset: 0x450, Size: 0x8]
	AkAudioEvent* CrystalSound;//[Offset: 0x458, Size: 0x8]
	AkAudioEvent* Crystal2Sound;//[Offset: 0x460, Size: 0x8]
	AkAudioEvent* Crystal3Sound;//[Offset: 0x468, Size: 0x8]
	AkAudioEvent* IceSound;//[Offset: 0x470, Size: 0x8]
	AkAudioEvent* MetalNoHoldSound;//[Offset: 0x478, Size: 0x8]
	AkAudioEvent* ArmShieldHitSound;//[Offset: 0x480, Size: 0x8]
	AkAudioEvent* GunShieldHitSound;//[Offset: 0x488, Size: 0x8]
	AkAudioEvent* BlindageHitSound;//[Offset: 0x490, Size: 0x8]
	DecalData DefaultDecal;//[Offset: 0x498, Size: 0x20]
	DecalData ConcreteDecal;//[Offset: 0x4b8, Size: 0x20]
	DecalData DirtDecal;//[Offset: 0x4d8, Size: 0x20]
	DecalData WaterDecal;//[Offset: 0x4f8, Size: 0x20]
	DecalData MetalDecal;//[Offset: 0x518, Size: 0x20]
	DecalData WoodDecal;//[Offset: 0x538, Size: 0x20]
	DecalData GrassDecal;//[Offset: 0x558, Size: 0x20]
	DecalData GlassDecal;//[Offset: 0x578, Size: 0x20]
	DecalData FleshDecal;//[Offset: 0x598, Size: 0x20]
	DecalData SteelDecal;//[Offset: 0x5b8, Size: 0x20]
	DecalData SandbagDecal;//[Offset: 0x5d8, Size: 0x20]
	DecalData SandDecal;//[Offset: 0x5f8, Size: 0x20]
	DecalData ClothDecal;//[Offset: 0x618, Size: 0x20]
	DecalData PlasticDecal;//[Offset: 0x638, Size: 0x20]
	DecalData LeatherDecal;//[Offset: 0x658, Size: 0x20]
	DecalData CeramicsDecal;//[Offset: 0x678, Size: 0x20]
	DecalData PaperDecal;//[Offset: 0x698, Size: 0x20]
	DecalData StoneDecal;//[Offset: 0x6b8, Size: 0x20]
	DecalData SinkDecal;//[Offset: 0x6d8, Size: 0x20]
	DecalData PopCanDecal;//[Offset: 0x6f8, Size: 0x20]
	DecalData PyreflyDecal;//[Offset: 0x718, Size: 0x20]
	DecalData LeafDecal;//[Offset: 0x738, Size: 0x20]
	DecalData CarDecal;//[Offset: 0x758, Size: 0x20]
	DecalData AsphaltDecal;//[Offset: 0x778, Size: 0x20]
	DecalData CrystalDecal;//[Offset: 0x798, Size: 0x20]
	DecalData Crystal2Decal;//[Offset: 0x7b8, Size: 0x20]
	DecalData Crystal3Decal;//[Offset: 0x7d8, Size: 0x20]
	DecalData IceDecal;//[Offset: 0x7f8, Size: 0x20]
	DecalData MetalNoHoldDecal;//[Offset: 0x818, Size: 0x20]
	float FXCullingDistance;//[Offset: 0x838, Size: 0x4]
	byte HitSurfaceType;//[Offset: 0x83c, Size: 0x1]
	Vector ImpactNormal;//[Offset: 0x840, Size: 0xc]
	Vector ImpactPoint;//[Offset: 0x84c, Size: 0xc]
	PrimitiveComponent* HitComponent;//[Offset: 0x858, Size: 0x8]
	bool bAudioOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x860, Size: 0x1]
	ParticleSystemComponent* ImpactParticleComp;//[Offset: 0x868, Size: 0x8]
	AkAudioEvent* BeginWaterAudioEvent;//[Offset: 0x878, Size: 0x8]
	AkAudioEvent* EndWaterAudioEvent;//[Offset: 0x880, Size: 0x8]
	float ExtendWaterTime;//[Offset: 0x890, Size: 0x4]
	float CheckWaterInterval;//[Offset: 0x8a0, Size: 0x4]
	SceneComponent* TargetImpactComp;//[Offset: 0x8d0, Size: 0x8]
	FName TargetSocket;//[Offset: 0x8d8, Size: 0x8]
	void OnParticleHit(FName EventName, float EmitterTime, int ParticleTime, Vector Location, Vector Velocity, Vector Direction, Vector Normal, FName BoneName, PhysicalMaterial* PhysMat);// 0x2f534d4
	void ClearDecalTimer();// 0x2f534c0

--------------------------------
Class: ImpactEffectScale
	float Distance;//[Offset: 0x0, Size: 0x4]
	float Scale;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: DecalData
	float DecalSize;//[Offset: 0x0, Size: 0x4]
	float LifeSpan;//[Offset: 0x4, Size: 0x4]
	MaterialInterface* DecalMaterial;//[Offset: 0x8, Size: 0x8]
	float ImpactEffectStartScaleDistance;//[Offset: 0x10, Size: 0x4]
	float ImpactEffectEndScaleDistance;//[Offset: 0x14, Size: 0x4]
	float ImpactEffectStartScaleValue;//[Offset: 0x18, Size: 0x4]
	float ImpactEffectEndScaleValue;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: SRangeAttenuateConfig
	int rangeStart;//[Offset: 0x0, Size: 0x4]
	int RangeEnd;//[Offset: 0x4, Size: 0x4]
	float rangeAttenuateFactor;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: SRecoilInfo
	float VerticalRecoilMin;//[Offset: 0x0, Size: 0x4]
	float VerticalRecoilMax;//[Offset: 0x4, Size: 0x4]
	float VerticalRecoilVariation;//[Offset: 0x8, Size: 0x4]
	float VerticalRecoveryModifier;//[Offset: 0xc, Size: 0x4]
	float VerticalRecoveryClamp;//[Offset: 0x10, Size: 0x4]
	float VerticalRecoveryMax;//[Offset: 0x14, Size: 0x4]
	float LeftMax;//[Offset: 0x18, Size: 0x4]
	float RightMax;//[Offset: 0x1c, Size: 0x4]
	float HorizontalTendency;//[Offset: 0x20, Size: 0x4]
	CurveVector* RecoilCurve;//[Offset: 0x28, Size: 0x8]
	int BulletPerSwitch;//[Offset: 0x30, Size: 0x4]
	float TimePerSwitch;//[Offset: 0x34, Size: 0x4]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float RecoilSpeedVertical;//[Offset: 0x3c, Size: 0x4]
	float RecoilSpeedHorizontal;//[Offset: 0x40, Size: 0x4]
	float RecovertySpeedVertical;//[Offset: 0x44, Size: 0x4]
	float RecoilValueClimb;//[Offset: 0x48, Size: 0x4]
	float RecoilValueFail;//[Offset: 0x4c, Size: 0x4]
	float RecoilModifierStand;//[Offset: 0x50, Size: 0x4]
	float RecoilModifierCrouch;//[Offset: 0x54, Size: 0x4]
	float RecoilModifierProne;//[Offset: 0x58, Size: 0x4]
	float RecoilHorizontalMinScalar;//[Offset: 0x5c, Size: 0x4]
	float BurstEmptyDelay;//[Offset: 0x60, Size: 0x4]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	float ShootSightReturnSpeed;//[Offset: 0x68, Size: 0x4]

--------------------------------
Class: SToaaRecoilInfo
	float RecoilValueClimb;//[Offset: 0x0, Size: 0x4]
	CurveVector* RecoilCurve;//[Offset: 0x8, Size: 0x8]
	CurveFloat* RecoilRandomRadiusCurve;//[Offset: 0x10, Size: 0x8]
	float RecoilRandomRadius;//[Offset: 0x18, Size: 0x4]
	float VerticalRecoilMin;//[Offset: 0x1c, Size: 0x4]
	float VerticalRecoilMax;//[Offset: 0x20, Size: 0x4]
	float VerticalRecoilSpeed;//[Offset: 0x24, Size: 0x4]
	float HorizontalRecoilMin;//[Offset: 0x28, Size: 0x4]
	float HorizontalRecoilMax;//[Offset: 0x2c, Size: 0x4]
	float HorizontalRecoilSpeed;//[Offset: 0x30, Size: 0x4]
	CurveFloat* RecoilReviseCurve;//[Offset: 0x38, Size: 0x8]
	float VerticalRecoveryMax;//[Offset: 0x40, Size: 0x4]
	float RecoilPopupSpeed;//[Offset: 0x44, Size: 0x4]
	float RecoilRecoverySpeed;//[Offset: 0x48, Size: 0x4]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	int PostFireRecoveryRecentShootNum;//[Offset: 0x50, Size: 0x4]
	float ShootSightReturnSpeed;//[Offset: 0x54, Size: 0x4]
	float BurstEmptyDelay;//[Offset: 0x58, Size: 0x4]

--------------------------------
Class: SDeviation
	float DeviationBase;//[Offset: 0x0, Size: 0x4]
	float DeviationBaseAim;//[Offset: 0x4, Size: 0x4]
	float DeviationBaseADS;//[Offset: 0x8, Size: 0x4]
	float DeviationRecoilGain;//[Offset: 0xc, Size: 0x4]
	float DeviationRecoilGainAim;//[Offset: 0x10, Size: 0x4]
	float DeviationRecoilGainADS;//[Offset: 0x14, Size: 0x4]
	float DeviationMax;//[Offset: 0x18, Size: 0x4]
	float DeviationMinMove;//[Offset: 0x1c, Size: 0x4]
	float DeviationMaxMove;//[Offset: 0x20, Size: 0x4]
	float DeviationMoveMultiplier;//[Offset: 0x24, Size: 0x4]
	float DeviationMoveMinRefrence;//[Offset: 0x28, Size: 0x4]
	float DeviationMoveMaxRefrence;//[Offset: 0x2c, Size: 0x4]
	float DeviationStanceStand;//[Offset: 0x30, Size: 0x4]
	float DeviationStanceCrouch;//[Offset: 0x34, Size: 0x4]
	float DeviationStanceProne;//[Offset: 0x38, Size: 0x4]
	float DeviationStanceJump;//[Offset: 0x3c, Size: 0x4]
	float DeviationPowerStorageBase;//[Offset: 0x40, Size: 0x4]
	float DeviationPowerStorageMax;//[Offset: 0x44, Size: 0x4]

--------------------------------
Class: CrossHairShakeInfo
	CurveVector* ShakeCurve;//[Offset: 0x0, Size: 0x8]
	float CrossHairShakeRandomFactor;//[Offset: 0x8, Size: 0x4]
	bool IsEnableShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: ShootBodyBuff
	int BuffID;//[Offset: 0x0, Size: 0x4]
	int Probability;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: ShootCameraModeParam
	float VRecoilFactor;//[Offset: 0x0, Size: 0x4]
	float HRecoilFactor;//[Offset: 0x4, Size: 0x4]
	float RecoveryFactor;//[Offset: 0x8, Size: 0x4]
	float DeviationFactor;//[Offset: 0xc, Size: 0x4]
	float MaxVerticalRecoil;//[Offset: 0x10, Size: 0x4]
	bool bAutoRecover;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]

--------------------------------
Class: AutoAimConfig
	float MinAttenuationDistance;//[Offset: 0x0, Size: 0x4]
	float MaxAttenuationDistance;//[Offset: 0x4, Size: 0x4]
	float MinValidDistance;//[Offset: 0x8, Size: 0x4]
	float MaxValidDistance;//[Offset: 0xc, Size: 0x4]
	AutoAimFactor AutoAimFactor_SwipeScreen_ScopeIn;//[Offset: 0x10, Size: 0x8]
	AutoAimFactor AutoAimFactor_WeaponShoot_ScopeIn;//[Offset: 0x18, Size: 0x8]
	AutoAimPoint[] AutoAimPointArray;//[Offset: 0x20, Size: 0x10]
	float AimingDuration;//[Offset: 0x30, Size: 0x4]
	float WeaponStopFireRevertLimitTime;//[Offset: 0x34, Size: 0x4]
	bool bEnableDampingRing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bEnableBlacklistActors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]

--------------------------------
Class: AutoAimFactor
	float RadiusFactor;//[Offset: 0x0, Size: 0x4]
	float SpeedFactor;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AutoAimPoint
	FName SocketName;//[Offset: 0x0, Size: 0x8]
	AutoAimArgs AutoAimArgs_SwipeScreen;//[Offset: 0x8, Size: 0xc]
	AutoAimArgs AutoAimArgs_WeaponShoot;//[Offset: 0x14, Size: 0xc]
	float Damping_Radius;//[Offset: 0x20, Size: 0x4]
	float Damping_RotationFactor;//[Offset: 0x24, Size: 0x4]

--------------------------------
Class: AutoAimArgs
	float Radius;//[Offset: 0x0, Size: 0x4]
	float Speed;//[Offset: 0x4, Size: 0x4]
	bool bCalcRadiusFactor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]

--------------------------------
Class: OptimizeViewRotationConfig
	int ValidDistance;//[Offset: 0x0, Size: 0x4]
	float ValidCapsuleHalfHeight;//[Offset: 0x4, Size: 0x4]
	Vector2D SpeedUpRangeVsScreenScale;//[Offset: 0x8, Size: 0x8]
	Vector2D ProjectCapsuleToScreenScale;//[Offset: 0x10, Size: 0x8]
	Vector2D SpeedUpFactor;//[Offset: 0x18, Size: 0x8]
	Vector2D SpeedDownFactor;//[Offset: 0x20, Size: 0x8]
	int CheckInterval;//[Offset: 0x28, Size: 0x4]

--------------------------------
Class: BulletHitInfoUploadData
	Vector ImpactPoint;//[Offset: 0x0, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0xc, Size: 0xc]
	Vector ImpactActorPos;//[Offset: 0x18, Size: 0xc]
	Vector ShootMomentMuzzlePos;//[Offset: 0x24, Size: 0xc]
	byte SurfaceType;//[Offset: 0x30, Size: 0x1]
	uint32 ShootID;//[Offset: 0x34, Size: 0x4]
	uint32 ClipID;//[Offset: 0x38, Size: 0x4]
	uint16 CompensationTime;//[Offset: 0x3c, Size: 0x2]
	Actor* Actor;//[Offset: 0x40, Size: 0x8]
	uint64 serverID;//[Offset: 0x48, Size: 0x8]
	int GlobalID;//[Offset: 0x50, Size: 0x4]
	PrimitiveComponent* Component;//[Offset: 0x54, Size: 0x8]
	bool bBulletCanBreakThrough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	bool bIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	int Timestamp;//[Offset: 0x60, Size: 0x4]
	int ClientTimeStamp;//[Offset: 0x64, Size: 0x4]
	byte HitBodyType;//[Offset: 0x68, Size: 0x1]
	byte HitWeakness;//[Offset: 0x69, Size: 0x1]
	byte HitPartIndex;//[Offset: 0x6a, Size: 0x1]
	bool bIsFirstImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b, Size: 0x1]
	double SystemTimeStamp;//[Offset: 0x70, Size: 0x8]
	double ShootTimeStamp;//[Offset: 0x78, Size: 0x8]
	Vector GunTailPos;//[Offset: 0x80, Size: 0xc]
	IntVector WorldOrigin;//[Offset: 0x8c, Size: 0xc]
	int ImpactType;//[Offset: 0x98, Size: 0x4]
	bool NoTriggerNoHurtSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	float PowerStorageTime;//[Offset: 0xa0, Size: 0x4]
	bool bTrajectoryDisplayed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	bool bFroceBroadcast;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 0x1]
	bool bSvrValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6, Size: 0x1]
	bool bSvrHurtSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa7, Size: 0x1]
	bool bAntiCheatSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	int64 ClientDamage;//[Offset: 0xb0, Size: 0x8]
	int DamageType;//[Offset: 0xb8, Size: 0x4]
	Vector ShootDir;//[Offset: 0xbc, Size: 0xc]
	uint64 SvrTimeStamp;//[Offset: 0xc8, Size: 0x8]
	Vector ShooterPos;//[Offset: 0xd0, Size: 0xc]

--------------------------------
Class: WeaponImpactResult

--------------------------------
Class: AutoFireCrossHairComp.WeaponBaseComp.ActorComponent.Object
	BaseCharacter* OwnerCharacter;//[Offset: 0xf8, Size: 0x8]
	GSTShootWeapon* OwnerShootWeapon;//[Offset: 0x100, Size: 0x8]
	ShootWeaponEntityComp* ShootWeaponEntity;//[Offset: 0x108, Size: 0x8]
	SoftObjectPath CrossHairTextureCenter;//[Offset: 0x118, Size: 0x18]
	SoftObjectPath CrossHairTextureEdge;//[Offset: 0x130, Size: 0x18]
	SoftObjectPath CrossHairTextureChangeEdge;//[Offset: 0x148, Size: 0x18]
	bool ShowWhenScope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	float DefualtDis;//[Offset: 0x164, Size: 0x4]
	float DefualtMinDis;//[Offset: 0x168, Size: 0x4]
	float PreAimTime;//[Offset: 0x16c, Size: 0x4]
	float MaxYaoShotDis;//[Offset: 0x170, Size: 0x4]
	float MinYaoShotDis;//[Offset: 0x174, Size: 0x4]
	float DisThrehold;//[Offset: 0x178, Size: 0x4]
	float PhysiqueThreshold;//[Offset: 0x17c, Size: 0x4]
	float[] IconAngles;//[Offset: 0x180, Size: 0x10]
	float FlameOutTime;//[Offset: 0x190, Size: 0x4]
	float FlameOutStopFireTime;//[Offset: 0x194, Size: 0x4]
	bool NeedAutoFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	void UpdateComponentTickable();// 0x2de8cb4
	void OnScopeOutEnd();// 0x2de8c98
	void OnScopeInEnd();// 0x2de8c7c
	void OnEndViewTarget(PlayerController* PC);// 0x2de8bf8
	void OnBecomeViewTarget(PlayerController* PC);// 0x2de8b74

--------------------------------
Class: ScopeCrossHairComp.CrossHairBaseComp.WeaponBaseComp.ActorComponent.Object
	Texture2D* ScopeCrossHairTexture;//[Offset: 0x150, Size: 0x8]

--------------------------------
Class: AidCrossHairComp.WeaponBaseComp.ActorComponent.Object
	PlayerCharacter* OwnerCharacter;//[Offset: 0xf8, Size: 0x8]
	GSTShootWeapon* OwnerShootWeapon;//[Offset: 0x100, Size: 0x8]
	ShootWeaponEntityComp* ShootWeaponEntity;//[Offset: 0x108, Size: 0x8]
	WeaponShootComp* WeaponShootComp;//[Offset: 0x110, Size: 0x8]
	PlayerController* OwnerPlayerController;//[Offset: 0x118, Size: 0x8]
	Texture2D* AidCrossHairTexture;//[Offset: 0x128, Size: 0x8]
	float MaxShowDistance;//[Offset: 0x130, Size: 0x4]
	float MinShowDistance;//[Offset: 0x134, Size: 0x4]

--------------------------------
Class: FlagCrossHairComp.WeaponBaseComp.ActorComponent.Object
	<enum,Texture2D*> FlagIcons;//[Offset: 0xf8, Size: 0x50]
	Vector2D Offset;//[Offset: 0x148, Size: 0x8]
	PlayerCharacter* OwnerCharacter;//[Offset: 0x158, Size: 0x8]
	GSTShootWeapon* OwnerShootWeapon;//[Offset: 0x160, Size: 0x8]
	ShootWeaponEntityComp* ShootWeaponEntity;//[Offset: 0x168, Size: 0x8]
	WeaponShootComp* WeaponShootComp;//[Offset: 0x170, Size: 0x8]
	PlayerController* OwnerPlayerController;//[Offset: 0x178, Size: 0x8]
	void SetShowFlogIcon(bool bShow);// 0x2e9e234
	void SetMode(enum Mode);// 0x2e9e1bc

--------------------------------
Class: AttrModifyComponent.ActorComponent.Object
	delegate OnAttrModified;//[Offset: 0xf0, Size: 0x10]
	DataTable* AttrDataTable;//[Offset: 0x100, Size: 0x8]
	int AttrGroup;//[Offset: 0x108, Size: 0x4]
	AttrModifyItem[] ConfigAttrModifyList;//[Offset: 0x110, Size: 0x10]
	AttrModifyGroupItem[] ConfigAttrModifyGroupList;//[Offset: 0x120, Size: 0x10]
	int8[] AttrModifyStateList;//[Offset: 0x180, Size: 0x10]
	int8[] AttrModifyGroupStateList;//[Offset: 0x190, Size: 0x10]
	void SetAttributeGroup(int InGroup, bool InRegister);// 0x2dd9608
	bool RegisterModifyAbleAttr(out const AttrRegisterItem[] AttrRegists, bool bSetAttrByOrigin);// 0x2dd94e4
	bool RegisterAttributesFromTable(int InGroup);// 0x2dd945c
	void OnRep_AttrModifyStateList();// 0x2dd9448
	void OnRep_AttrModifyGroupStateList();// 0x2dd9434
	void OnAttrModifiedEvent__DelegateSignature(out const AttrAffected[] AffectedAttrS);// 0x33e07d0
	bool EnableAttrModifier(FString AttrModifyItemName);// 0x2dd9348
	bool EnableAllAttrModifier();// 0x2dd9310
	bool DisableModifierToActor(Actor* TargetActor);// 0x2dd9288
	bool DisableAttrModifier(FString AttrModifyItemName);// 0x2dd919c
	bool DisableAllAttrModifier();// 0x2dd9164

--------------------------------
Class: AttrModifyItem
	FString AttrModifyItemName;//[Offset: 0x0, Size: 0x10]
	FString AttrName;//[Offset: 0x10, Size: 0x10]
	enum ModifierOp;//[Offset: 0x20, Size: 0x1]
	float ModifierValue;//[Offset: 0x24, Size: 0x4]
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	CacheAffactTargetInfo[] AffectTargetsCachInfo;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: CacheAffactTargetInfo
	Actor* AffectTarget;//[Offset: 0x0, Size: 0x8]
	float FinalAddValue;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: AttrModifyGroupItem
	AttrModifyItem[] AttrModifyItem;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: AttrRegisterItem
	FString AttrName;//[Offset: 0x0, Size: 0x10]
	enum AttrVariableType;//[Offset: 0x10, Size: 0x1]
	bool HasReplicatedTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]

--------------------------------
Class: AttrAffected
	FString AttrName;//[Offset: 0x0, Size: 0x10]
	Actor* AffectedActor;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: WeaponStateMgr.WeaponBaseComp.ActorComponent.Object
	void UnbindStateStateMachineDelegate();// 0x3011e80
	void OnStateChangeAllInfo(XStateMachine* InStateMachine, byte InLayer, byte InEvent, byte InOldState, byte InNewState, bool bNetSync);// 0x3011cc8
	void OnStateChange(XStateMachine* InStateMachine, byte InLayer, byte InOldState, byte InNewState);// 0x3011b90
	void BindStateStateMachineDelegate();// 0x3011b7c

--------------------------------
Class: WeaponAnimInstanceBase.AnimInstance.Object
	bool C_Charge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	bool C_Tactical;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 0x1]
	byte C_WeaponState;//[Offset: 0x36a, Size: 0x1]
	float C_ReloadAnimRate;//[Offset: 0x36c, Size: 0x4]
	float C_ReloadTime;//[Offset: 0x370, Size: 0x4]
	float C_PreFireTime;//[Offset: 0x374, Size: 0x4]
	bool C_CustomScopping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	bool C_State_Reload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x379, Size: 0x1]
	bool C_State_Charge;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37a, Size: 0x1]
	bool C_State_Fire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37b, Size: 0x1]
	bool C_Bullet_Empty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 0x1]
	bool C_Equipped_Scope;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 0x1]
	bool C_IsOwnerCharacterMale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37f, Size: 0x1]
	bool bWeaponActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	AnimSequence* WeaponIdleAnimSequence;//[Offset: 0x390, Size: 0x8]
	AnimSequence* WeaponReloadAnimSequence;//[Offset: 0x398, Size: 0x8]
	AnimSequence* WeaponTacticalReloadAnimSequence;//[Offset: 0x3a0, Size: 0x8]
	AnimMontage* WeaponBoltMontage;//[Offset: 0x3a8, Size: 0x8]
	AnimMontage* WeaponFireMontage;//[Offset: 0x3b0, Size: 0x8]
	AnimSequence* WeaponSightOff;//[Offset: 0x3b8, Size: 0x8]
	void OnWeaponShoot();// 0x2feeba8
	void OnWeaponOwnerStateChange(XStateMachine* StateMachine, byte stateLayer, byte OldState, byte NewState);// 0x2feea78
	void OnOwnerWeaponEnabled(GSTWeaponBase* OwnerWeapon);// 0x2fee9fc
	void OnOwnerWeaponDisabled(GSTWeaponBase* OwnerWeapon);// 0x2fee980
	PlayerCharacter* GetWeaponOwnerCharacter();// 0x2fee948

--------------------------------
Class: UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterMovementAnimData[] CharacterMovementAnimEditList;//[Offset: 0x260, Size: 0x10]
	CharacterJumpAnimData[] CharacterJumpEditList;//[Offset: 0x270, Size: 0x10]
	CharacterJumpAnimData[] CharacterHoldGunJumpEditList;//[Offset: 0x280, Size: 0x10]
	CurveFloat* FallingIKCurve;//[Offset: 0x290, Size: 0x8]
	CharacterRootMotionAnimData[] Character8DirRootMotionEditList;//[Offset: 0x298, Size: 0x10]
	float RemoteHitTime;//[Offset: 0x2a8, Size: 0x4]
	float NearHitTime;//[Offset: 0x2ac, Size: 0x4]
	UAECharacterAnimListData* AnimListData;//[Offset: 0x2b0, Size: 0x28]
	UAECharacterAnimListData* AnimListDataAsset;//[Offset: 0x2d8, Size: 0x8]
	bool CurrentIsTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0, Size: 0x1]
	bool CurrentHoldShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1, Size: 0x1]
	<byte,int> ProbabilityAnimMap;//[Offset: 0x2e8, Size: 0x50]
	void OnAsyncLoadingFinished(AsyncLoadCharAnimParams LoadingParam);// 0x2fb6b84
	FString GetCharacterRootMontionAnimCurve(byte RootMotionAnimType, byte DirType, byte PoseType);// 0x2fb6a38
	AnimationAsset* GetCharacterRootMontionAnim(byte RootMotionAnimType, byte DirType, byte PoseType);// 0x2fb6934
	PlayerAnimData[] GetCharacterJumpAnim(byte JumpType, bool HoldUpGun, int JumpLOD);// 0x2fb67e0
	AnimationAsset* GetCharacterAnim(byte AnimType, byte PoseType, bool bFindCustomAnim);// 0x2fb66d4
	int GetAnimProbability(byte AnimTypeKey);// 0x2fb6650

--------------------------------
Class: CharacterMovementAnimData
	byte AnimType;//[Offset: 0x0, Size: 0x1]
	FString AnimTypeName;//[Offset: 0x8, Size: 0x10]
	ChararacterPoseAnimData[] PoseAnimList;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ChararacterPoseAnimData
	byte PoseType;//[Offset: 0x0, Size: 0x1]
	FString PoseName;//[Offset: 0x8, Size: 0x10]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x18, Size: 0x28]
	AnimationAsset* PoseAnim;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: CharacterJumpAnimData
	byte JumpType;//[Offset: 0x0, Size: 0x1]
	FString JumpTypeName;//[Offset: 0x8, Size: 0x10]
	ChararacterJumpPhaseData[] JumpPhaseList;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ChararacterJumpPhaseData
	byte JumpPhase;//[Offset: 0x0, Size: 0x1]
	FString JumpPhaseName;//[Offset: 0x8, Size: 0x10]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x18, Size: 0x28]
	AnimationAsset* PoseAnim;//[Offset: 0x40, Size: 0x8]

--------------------------------
Class: CharacterRootMotionAnimData
	byte AnimType;//[Offset: 0x0, Size: 0x1]
	FString AnimTypeName;//[Offset: 0x8, Size: 0x10]
	ChararacterRootMotionDirAnimData[] AnimDirList;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ChararacterRootMotionDirAnimData
	byte AnimDirType;//[Offset: 0x0, Size: 0x1]
	FString AnimDirName;//[Offset: 0x8, Size: 0x10]
	ChararacterRootMotionPoseAnimData[] PoseAnimList;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: ChararacterRootMotionPoseAnimData
	byte PoseType;//[Offset: 0x0, Size: 0x1]
	FString PoseName;//[Offset: 0x8, Size: 0x10]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x18, Size: 0x28]
	FString MotionCurveName;//[Offset: 0x40, Size: 0x10]
	AnimationAsset* PoseAnim;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: UAECharacterAnimListData.UAEBaseAnimListData.DataAsset.Object
	CharacterMovementAnimData[] CharacterMovementAnimEditList;//[Offset: 0x40, Size: 0x10]
	CharacterJumpAnimData[] CharacterJumpEditList;//[Offset: 0x50, Size: 0x10]
	CharacterJumpAnimData[] CharacterHoldGunJumpEditList;//[Offset: 0x60, Size: 0x10]
	CharacterRootMotionAnimData[] Character8DirRootMotionEditList;//[Offset: 0x70, Size: 0x10]
	CharacterAnimProbability[] AnimProbabilityList;//[Offset: 0x80, Size: 0x10]

--------------------------------
Class: UAEBaseAnimListData.DataAsset.Object
	CharacterJumpLandAnimData[] CharacterJumpLandAnimEditList;//[Offset: 0x30, Size: 0x10]

--------------------------------
Class: CharacterJumpLandAnimData
	byte AnimTypeIndex;//[Offset: 0x0, Size: 0x1]
	enum JumpAnimType;//[Offset: 0x1, Size: 0x1]
	CharacterJumpDirAnimData[] JumpDirAnimList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: CharacterJumpDirAnimData
	byte DirIndex;//[Offset: 0x0, Size: 0x1]
	byte JumpDirType;//[Offset: 0x1, Size: 0x1]
	AnimationAsset* JumpAnimSoftPtr;//[Offset: 0x8, Size: 0x28]

--------------------------------
Class: CharacterAnimProbability
	byte AnimType;//[Offset: 0x0, Size: 0x1]
	int Probability;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: AsyncLoadCharAnimParams

--------------------------------
Class: MontageStopList
	StopMontageInfo[] MontageStopList;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: StopMontageInfo
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SkillReplaceCharJumpAnimData
	byte CharacterGunHoldType;//[Offset: 0x0, Size: 0x1]
	byte CharacterJumpAnimType;//[Offset: 0x1, Size: 0x1]
	AnimationAsset*[] PoseAnimList;//[Offset: 0x8, Size: 0x10]

--------------------------------
Class: SkillReplaceCharAnimData
	byte CharacterAnimType;//[Offset: 0x0, Size: 0x1]
	AnimationAsset*[] PoseAnimList;//[Offset: 0x8, Size: 0x10]
	AnimationAsset*[] FPPPoseAnimList;//[Offset: 0x18, Size: 0x10]

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x10c, Size: 0x1]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	float AnimLength;//[Offset: 0x8c, Size: 0x4]
	InterpolationParameter InterpolationParam;//[Offset: 0x90, Size: 0x8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa8, Size: 0x4]
	byte NotifyTriggerMode;//[Offset: 0xac, Size: 0x1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xb0, Size: 0x10]
	int SampleIndexWithMarkers;//[Offset: 0xc0, Size: 0x4]
	BlendSample[] SampleData;//[Offset: 0xc8, Size: 0x10]
	EditorElement[] GridSamples;//[Offset: 0xd8, Size: 0x10]
	BlendParameter BlendParameters;//[Offset: 0xe8, Size: 0xc]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4]
	byte InterpolationType;//[Offset: 0x4, Size: 0x1]

--------------------------------
Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x14]
	float InterpolationSpeedPerSec;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8]
	Vector SampleValue;//[Offset: 0x8, Size: 0xc]
	float RateScale;//[Offset: 0x14, Size: 0x4]

--------------------------------
Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4]
	float Weights;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: BlendParameter
	float Min;//[Offset: 0x0, Size: 0x4]
	float Max;//[Offset: 0x4, Size: 0x4]
	int GridNum;//[Offset: 0x8, Size: 0x4]

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c, Size: 0x1]

--------------------------------
Class: AOpDirectionLerpVar
	float N135Var;//[Offset: 0x0, Size: 0x4]
	float N90Var;//[Offset: 0x4, Size: 0x4]
	float N45Var;//[Offset: 0x8, Size: 0x4]
	float N0Var;//[Offset: 0xc, Size: 0x4]
	float P45Var;//[Offset: 0x10, Size: 0x4]
	float P90Var;//[Offset: 0x14, Size: 0x4]
	float P135Var;//[Offset: 0x18, Size: 0x4]
	float P180Var;//[Offset: 0x1c, Size: 0x4]

--------------------------------
Class: AOpDirectionLerpVarConfig
	AOpDirectionLerpVar[] MaleLerpVars;//[Offset: 0x0, Size: 0x10]
	AOpDirectionLerpVar[] FemaleLerpVars;//[Offset: 0x10, Size: 0x10]

--------------------------------
Class: CosResLoader.Object
	SoftObjectPath[] LoadingPath;//[Offset: 0x28, Size: 0x10]
	<SoftObjectPath,Object*> LoadedRes;//[Offset: 0x38, Size: 0x50]
	enum mLoadingStatus;//[Offset: 0x88, Size: 0x1]
	delegate mDelegate;//[Offset: 0x90, Size: 0x10]
	bool ReleaseLoadedRes();// 0x2e4d4c4
	int GetTag();// 0x2e4d4a8
	bool GetLoadedResWithStringPath(out const FString[] InTargetsToStream, out Object*[] OutStreamedRes);// 0x2e4d36c
	bool GetLoadedRes(out const SoftObjectPath[] InTargetsToStream, out Object*[] OutStreamedRes);// 0x2e4d230
	bool GetIsLoading();// 0x2e4d20c
	bool GetIsFinished();// 0x2e4d1e8
	static CosResLoader* CosCreateInstance();// 0x2e4d1b0
	bool CancelAsyncLoad(const int InAsyncLoadHandleID);// 0x2e4d128
	int AsyncLoadResWithStringPath(const int Tag, out const FString[] TargetsToStream, const bool bStartStalled, const int Priority, const bool bAddToStablePool);// 0x2e4cf48
	int AsyncLoadRes(const int Tag, out const SoftObjectPath[] TargetsToStream, const bool bStartStalled, const int Priority, const bool bAddToStablePool);// 0x2e4cd68

--------------------------------
Class: InitAvatarParams
	<enum,InitAvatarTextureParams> MatGlobalTextureParams;//[Offset: 0x198, Size: 0x50]

--------------------------------
Class: InitAvatarTextureParams
	<FName,Texture2D*> TextureParams;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: MeshData
	StaticMesh* stMesh;//[Offset: 0x0, Size: 0x8]
	SkeletalMesh* skMesh;//[Offset: 0x8, Size: 0x8]
	<FName,MaterialInstance*> matInstMap;//[Offset: 0x10, Size: 0x50]
	<FName,SkMeshStateToAnimParamsRuntime> PartSkMeshStateToAnimMap;//[Offset: 0x60, Size: 0x50]
	<FName,ParticleSystem*> ParticleSystemMap;//[Offset: 0xb0, Size: 0x50]
	<FName,class Object> ParticleSystemActorClassMap;//[Offset: 0x100, Size: 0x50]
	enum subSlot;//[Offset: 0x150, Size: 0x1]
	enum meshType;//[Offset: 0x151, Size: 0x1]
	int PartIdx;//[Offset: 0x154, Size: 0x4]
	enum socketType;//[Offset: 0x158, Size: 0x1]
	class Object* AnimInstClass;//[Offset: 0x160, Size: 0x8]
	bool enableSkMeshSelfAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	AnimationAsset* PartSkMeshIdleAnim;//[Offset: 0x170, Size: 0x8]
	enum SwitchState;//[Offset: 0x178, Size: 0x1]
	bool IsGFur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]
	SkeletalMesh* AttachedGFurMesh;//[Offset: 0x180, Size: 0x8]
	<FName,MaterialInstance*> AttachedGFurMatInstMap;//[Offset: 0x188, Size: 0x50]

--------------------------------
Class: SkMeshStateToAnimParamsRuntime
	AnimationAsset* AnimationAsset;//[Offset: 0x0, Size: 0x8]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float Rate;//[Offset: 0xc, Size: 0x4]

--------------------------------
Class: AvatarData
	bool ForceUpdateAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int charIdx;//[Offset: 0x4, Size: 0x4]
	FName meshCollisionProfileName;//[Offset: 0x8, Size: 0x8]
	int DamagePartBoneKey;//[Offset: 0x10, Size: 0x4]
	<enum,int> partData;//[Offset: 0x18, Size: 0x50]
	FName Reason;//[Offset: 0x68, Size: 0x8]
	int Priority;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: ParentMatData
	<enum,MaterialInterface*> ParentMatMap;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: GFurComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalGrowMesh;//[Offset: 0x5b8, Size: 0x8]
	StaticMesh* StaticGrowMesh;//[Offset: 0x5c0, Size: 0x8]
	FurSplines* FurSplines;//[Offset: 0x5c8, Size: 0x8]
	SkeletalMesh*[] SkeletalGuideMeshes;//[Offset: 0x5d0, Size: 0x10]
	StaticMesh*[] StaticGuideMeshes;//[Offset: 0x5e0, Size: 0x10]
	int LayerCount;//[Offset: 0x5f0, Size: 0x4]
	float MinScreenSize;//[Offset: 0x5f4, Size: 0x4]
	FurLod[] LODs;//[Offset: 0x5f8, Size: 0x10]
	float ShellBias;//[Offset: 0x608, Size: 0x4]
	float FurLength;//[Offset: 0x60c, Size: 0x4]
	float MinFurLength;//[Offset: 0x610, Size: 0x4]
	bool RemoveFacesWithoutSplines;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614, Size: 0x1]
	bool PhysicsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x615, Size: 0x1]
	float ForceDistribution;//[Offset: 0x618, Size: 0x4]
	float Stiffness;//[Offset: 0x61c, Size: 0x4]
	float Damping;//[Offset: 0x620, Size: 0x4]
	Vector ConstantForce;//[Offset: 0x624, Size: 0xc]
	float MaxForce;//[Offset: 0x630, Size: 0x4]
	float MaxForceTorqueFactor;//[Offset: 0x634, Size: 0x4]
	float ReferenceHairBias;//[Offset: 0x638, Size: 0x4]
	float HairLengthForceUniformity;//[Offset: 0x63c, Size: 0x4]
	float MaxPhysicsOffsetLength;//[Offset: 0x640, Size: 0x4]
	float NoiseStrength;//[Offset: 0x644, Size: 0x4]

--------------------------------
Class: FurSplines.Object
	Vector[] Vertices;//[Offset: 0x28, Size: 0x10]
	int[] Index;//[Offset: 0x38, Size: 0x10]
	int[] Count;//[Offset: 0x48, Size: 0x10]
	int ControlPointCount;//[Offset: 0x58, Size: 0x4]
	FString ImportFilename;//[Offset: 0x60, Size: 0x10]
	int Version;//[Offset: 0x70, Size: 0x4]

--------------------------------
Class: FurLod
	float ScreenSize;//[Offset: 0x0, Size: 0x4]
	int LayerCount;//[Offset: 0x4, Size: 0x4]
	int Lod;//[Offset: 0x8, Size: 0x4]
	bool PhysicsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]

--------------------------------
Class: BakeFaceRuntimeData
	SkeletalMesh* BakeFaceSkeletalMesh;//[Offset: 0x0, Size: 0x8]
	MaterialInstance* BaseColorMat;//[Offset: 0x8, Size: 0x8]
	MaterialInstance* NormalMat;//[Offset: 0x10, Size: 0x8]
	MaterialInstance* RoughnessMat;//[Offset: 0x18, Size: 0x8]
	MaterialInstance* EyeBaseColorMat;//[Offset: 0x20, Size: 0x8]

--------------------------------
Class: FaceMakeupMatBase.ETC2CompressedLib.ActorComponent.Object
	delegate onPreReleaseRenderTextures;//[Offset: 0x128, Size: 0x10]
	FName UniqueName;//[Offset: 0x138, Size: 0x8]
	bool bIsUseSharedRT;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	AvatarComponent* BaseAvatar;//[Offset: 0x144, Size: 0x8]
	bool ReleaseAssetAfterDrawRTS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 0x1]
	FString[] AssetUsedForRelease;//[Offset: 0x150, Size: 0x10]
	bool ReleaseTextureAfterDrawRTs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	BakeFaceRuntimeData BakeFaceRuntimeData;//[Offset: 0x168, Size: 0x28]
	bool FaceMouldNoMip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	void TryReleaseUnusedAsset();// 0x2e83c28
	void Print(FString str);// 0x2e83b9c
	void PreReleaseRenderTextures__DelegateSignature();// 0x33e07d0
	void PreReleaseRenderTextures();// 0x2e83b88
	Object* LoadAssetByPath(FString FilePath);// 0x2e83aec
	void Initialize(BakeFaceRuntimeData runtimeData);// 0x33e07d0
	MaterialInstanceDynamic* GetBodyMaterial(enum Slot, FName matSlotName);// 0x2e83a24
	void DelayCall(int frame, delegate callback, int Token);// 0x2e83904
	TextureRenderTarget2D* CreateRenderTarget2D(int Size, bool mipmap, byte Format, FName SlotName);// 0x2e837bc
	void ClearRuntimeData();// 0x33e07d0
	void ClearMaterialInstanceParam(MaterialInstanceDynamic* mat);// 0x2e83740
	void CancelCall();// 0x2e8372c

--------------------------------
Class: ETC2CompressedLib.ActorComponent.Object
	Texture2D* C_Tex2DBaseColor;//[Offset: 0xf0, Size: 0x8]
	Texture2D* C_Tex2DNormal;//[Offset: 0xf8, Size: 0x8]
	Texture2D* C_Tex2DRoughness;//[Offset: 0x100, Size: 0x8]
	Texture2D* C_Tex2DEye;//[Offset: 0x108, Size: 0x8]
	FName C_SlotBaseColor;//[Offset: 0x110, Size: 0x8]
	FName C_SlotRoughness;//[Offset: 0x118, Size: 0x8]
	FName C_SlotNormal;//[Offset: 0x120, Size: 0x8]
	bool IsSlotSupportCompress(enum Slot);// 0x2e7b394
	bool IsRTCompressSupported();// 0x2e7b354
	void CreateCompressTex2D(int baseColorSize, int roughnessSize, int normalSize, int eyeSize);// 0x2e7b22c
	void ClearCompressTex2D();// 0x2e7b218
	void ApplyCompressedRTexToHeadMaterialWithoutEye(MaterialInstanceDynamic* headMaterial);// 0x2e7b19c
	void ApplyCompressedEyeTex(MaterialInstanceDynamic* applyTo, out const FName Slot);// 0x2e7b0d4
	void AddCompressPassAll(TextureRenderTarget2D* BaseColor, TextureRenderTarget2D* Normal, TextureRenderTarget2D* Roughness, TextureRenderTarget2D* eye);// 0x2e7afac
	Texture2D* AddCompressPass(TextureRenderTarget2D* rt, Texture2D* outPutTex);// 0x2e7aee8

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	int SizeX;//[Offset: 0xd0, Size: 0x4]
	int SizeY;//[Offset: 0xd4, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0xd8, Size: 0x10]
	byte AddressX;//[Offset: 0xe8, Size: 0x1]
	byte AddressY;//[Offset: 0xe9, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xea, Size: 0x1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xea, Size: 0x1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xea, Size: 0x1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xea, Size: 0x1]
	byte RenderTargetFormat;//[Offset: 0xeb, Size: 0x1]
	byte OverrideFormat;//[Offset: 0xec, Size: 0x1]

--------------------------------
Class: TextureRenderTarget.Texture.Object
	float TargetGamma;//[Offset: 0xc8, Size: 0x4]

--------------------------------
Class: CopyPoseAnimInstance.AnimInstance.Object
	FName[] FaceBoneNames;//[Offset: 0x368, Size: 0x10]
	Transform[] FaceBoneTransforms;//[Offset: 0x378, Size: 0x10]
	bool C_IsNeedLookAtCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	bool C_IsUseRTSComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 0x1]
	bool C_IsNeedBakeBody;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ea, Size: 0x1]
	SkeletalMeshComponent* C_CopyPoseFromComponent;//[Offset: 0x3f0, Size: 0x8]
	<enum> ForbidLookAtStateList;//[Offset: 0x3f8, Size: 0x50]
	<enum> OnlyRotHeadStateList;//[Offset: 0x448, Size: 0x50]
	float C_LookAtRotCorrection;//[Offset: 0x498, Size: 0x4]
	bool C_OnlyHeadLookAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 0x1]
	Rotator C_FinalLookAtRotation;//[Offset: 0x4ac, Size: 0xc]
	float LookAtLimitYaw;//[Offset: 0x4b8, Size: 0x4]
	float LookAtLimitPitch;//[Offset: 0x4bc, Size: 0x4]
	float LookAtRotSpeed;//[Offset: 0x4c0, Size: 0x4]
	float UpLookAtPitchScale;//[Offset: 0x4c4, Size: 0x4]
	float DownLookAtPitchScale;//[Offset: 0x4c8, Size: 0x4]
	void SetNeedLookAtCamera(bool IsNeedLookAtCamera, FName Reason, uint32 InPriority);// 0x2e4bfa8
	void SetNeedBakeBody(bool IsNeedBakeBody);// 0x2e4bf24
	void SetCopyPoseFrom(SkeletalMeshComponent* comp);// 0x33e07d0
	void ResetNeedLookAtCamera(FName Reason);// 0x2e4bea8
	void PlayExpressionSlotAnimation(FString AnimSequenceRef, FString SlotName);// 0x2e4bdd0
	void OnSetCopyPoseFrom();// 0x2e4bdb4
	void OnPerSetCopyPoseFrom();// 0x2e4bd98

--------------------------------
Class: ToaaPawnMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	byte WalkingMode;//[Offset: 0x178, Size: 0x1]
	float GroundFriction;//[Offset: 0x17c, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x180, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x184, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x188, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x18c, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x190, Size: 0x4]
	Vector Acceleration;//[Offset: 0x194, Size: 0xc]
	Vector LastAcceleration;//[Offset: 0x1a0, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x1ac, Size: 0x4]
	BasePawn* GetBasePawnOwner();// 0x2f9bbd4
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x2f9ba8c

--------------------------------
Class: TeleportMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x248, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x24c, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x258, Size: 0xc]
	float ProbeSize;//[Offset: 0x264, Size: 0x4]
	byte ProbeChannel;//[Offset: 0x268, Size: 0x1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x269, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x269, Size: 0x1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x269, Size: 0x1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x269, Size: 0x1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x269, Size: 0x1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x269, Size: 0x1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x269, Size: 0x1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x269, Size: 0x1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26a, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x26c, Size: 0x4]
	float CameraRotationLagSpeed;//[Offset: 0x270, Size: 0x4]
	float CameraLagMaxTimeStep;//[Offset: 0x274, Size: 0x4]
	float CameraLagMaxDistance;//[Offset: 0x278, Size: 0x4]
	bool IsCollisionFixApplied();// 0x47a4f54
	Vector GetUnfixedCameraPosition();// 0x47a4f1c
	Rotator GetTargetRotation();// 0x47a4ee4

--------------------------------
Class: VehicleAutoMoveParamInput
	Vector AutoMoveTargetLocation;//[Offset: 0x0, Size: 0xc]
	float AutoMoveTargetDistSqrtTolerance;//[Offset: 0xc, Size: 0x4]
	Actor* Vehicle;//[Offset: 0x10, Size: 0x8]

--------------------------------
Class: VehicleAutoMoveParamOut
	float Throttle;//[Offset: 0x0, Size: 0x4]
	float Steering;//[Offset: 0x4, Size: 0x4]
	float Boosting;//[Offset: 0x8, Size: 0x4]
	float HandBrake;//[Offset: 0xc, Size: 0x4]
	bool bIsAutoMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: BaseAnimInstance.AnimInstance.Object
	void StopSync();// 0x2e050c0
	void StopAnimMontage(AnimMontage* AnimMontage, float InBlendOutTime);// 0x2e05008
	void SetVector(FName Name, Vector Value);// 0x2e04f4c
	void SetTrigger(FName Name, bool bValue);// 0x2e04e8c
	void SetRotator(FName Name, Rotator Value);// 0x2e04dd0
	void SetInteger(FName Name, int Value);// 0x2e04d18
	void SetFloat(FName Name, float Value);// 0x2e04c60
	void SetBool(FName Name, bool bValue);// 0x2e04ba0
	void SetAnimSyncWithTarget(AnimInstance* OtherAnimInstance, FName TargetMachineName, FName SelfMachineName, float SyncInterval);// 0x2e04a74
	void Reset();// 0x2e04a60
	void PlayAnimMontage(AnimMontage* AnimMontage, bool IsPlay, float InPlayRate, FName StartSectionName);// 0x2e04924
	void OnQinggongSectionChange(byte InType, byte InStage, byte InSection);// 0x2e04830
	void NotifyQinggongStart(byte InType, byte InStage, byte InSection);// 0x33e07d0
	void NotifyQinggongSectionChange(byte InType, byte InStage, byte InSection);// 0x33e07d0
	void NotifyQinggongEnd();// 0x33e07d0
	void NotifyOut(FName NotifyName);// 0x2e047b4
	Vector GetVector(FName Name);// 0x2e0472c
	Rotator GetRotator(FName Name);// 0x2e046a4
	int GetInteger(FName Name);// 0x2e04620
	float GetFloat(FName Name);// 0x2e0459c
	bool GetBool(FName Name);// 0x2e04514

--------------------------------
Class: CarrierUserComponent.ActorComponent.Object
	float WaitGroundLoadTimeout;//[Offset: 0x114, Size: 0x4]
	void OnDetachFromCarrier();// 0x2e32790
	void OnAttachToCarrier(Object* Carrier, int SeatIdx);// 0x2e326d8
	Object* LuaGetCurrCarrier();// 0x2e326a0
	enum GetCurrCarrierType();// 0x2e32684
	void DebugSetClientDrivenMode(bool bSet);// 0x2e32600

--------------------------------
Class: GliderUserComponent.ActorComponent.Object
	AnimMontage* WaitingStopAnim;//[Offset: 0x108, Size: 0x8]
	bool UnloadParaglider();// 0x2eab1dc
	bool UnEquipJetPack();// 0x2eab1a4
	void TurnOnGliderEffect();// 0x2eab190
	void SetEnterAnimState(bool bFinish);// 0x2eab10c
	void PlayGliderAnimMontage(FString AnimPath, bool bNeedCallback);// 0x2eaafe8
	void OnSetGliderAnimBPInput(bool C_FirstTurnLeft, bool C_FirstTurnRight, bool C_FirstTurnForward, bool C_FirstTurnBack, bool C_ForceToIdleL, bool C_ForceToIdleF);// 0x2eaadf8
	void OnMontageStop(AnimMontage* AnimMontage, bool bInterrupted);// 0x2eaad38
	bool IsFinishEnterAnim();// 0x2eaad1c
	bool IsEquippedParaglider();// 0x2eaace0
	bool IsEquippedJetPack();// 0x2eaaca4
	BaseParaglider* GetCurrParaglider();// 0x2eaac70
	BaseJetPack* GetCurrJetPack();// 0x2eaac3c
	bool EquipParagliderByPath(FString bpPath, FName SocketName, bool bCreateHide);// 0x2eaaac8
	bool EquipJetPackByPath(FString bpPath);// 0x2eaa9dc

--------------------------------
Class: BaseParaglider.Actor.Object
	PlayerCharacter* OwnerPlayer;//[Offset: 0x340, Size: 0x8]
	float IdleForwardSpeed;//[Offset: 0x348, Size: 0x4]
	float MaxForwardSpeed;//[Offset: 0x34c, Size: 0x4]
	float MinForwardSpeed;//[Offset: 0x350, Size: 0x4]
	float IdleFallSpeed;//[Offset: 0x354, Size: 0x4]
	float MaxFallSpeed;//[Offset: 0x358, Size: 0x4]
	float MinFallSpeed;//[Offset: 0x35c, Size: 0x4]
	float ForwardSpeedInterpRate;//[Offset: 0x360, Size: 0x4]
	float FallSpeedInterpRate;//[Offset: 0x364, Size: 0x4]
	float MaxRotationalSpeedYaw;//[Offset: 0x368, Size: 0x4]
	float MinRotationalSpeedYaw;//[Offset: 0x36c, Size: 0x4]
	float RotationalSpeedYawInterpRate;//[Offset: 0x370, Size: 0x4]
	FName LeftHandSocket;//[Offset: 0x374, Size: 0x8]
	FName RightHandSocket;//[Offset: 0x37c, Size: 0x8]
	SkeletalMeshComponent* Mesh;//[Offset: 0x388, Size: 0x8]
	GliderEffectComponent* EffectComponent;//[Offset: 0x390, Size: 0x8]

--------------------------------
Class: GliderEffectComponent.SceneComponent.ActorComponent.Object
	float MinEffectVelocity;//[Offset: 0x248, Size: 0x4]
	ParticleSystem*[] EffectResourceList;//[Offset: 0x250, Size: 0x10]
	FName[] EffectSocketNameList;//[Offset: 0x260, Size: 0x10]
	ParticleSystem*[] ResidentResList;//[Offset: 0x270, Size: 0x10]
	FName[] ResidentSocketList;//[Offset: 0x280, Size: 0x10]
	<int,ParticleSystemComponent*> FlyPSCMap;//[Offset: 0x290, Size: 0x50]
	<int,int> AsyncLoadingHandlerMap;//[Offset: 0x2e0, Size: 0x50]
	void TurnOnResidentEffect();// 0x2ea7cf4
	void TurnFlyEffect(bool bTurnOn);// 0x2ea7c70

--------------------------------
Class: BaseJetPack.Actor.Object
	PlayerCharacter* OwnerPlayer;//[Offset: 0x340, Size: 0x8]
	SkeletalMeshComponent* Mesh;//[Offset: 0x348, Size: 0x8]

--------------------------------
Class: XCameraUnderWaterFXComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float FogMaxOpacity;//[Offset: 0x590, Size: 0x4]
	byte CollisionChannel;//[Offset: 0x594, Size: 0x1]
	Character* OwnerCharacter;//[Offset: 0x598, Size: 0x8]

--------------------------------
Class: WeaponCollisionComponent.ActorComponent.Object
	Vector CheckReactionMeleeHitOffset;//[Offset: 0xf0, Size: 0xc]
	Vector CheckReactionMeleeHitExtend;//[Offset: 0xfc, Size: 0xc]
	Vector HandCollisionOffset;//[Offset: 0x108, Size: 0xc]
	Vector HandCollisionBox;//[Offset: 0x114, Size: 0xc]
	Vector FootCollisionOffset;//[Offset: 0x120, Size: 0xc]
	Vector FootCollisionBox;//[Offset: 0x12c, Size: 0xc]
	Color DebugColor;//[Offset: 0x138, Size: 0x4]
	void SetCustomSocket(FString SocketName);// 0x300630c
	void SetCustomSize(Vector CustomSize);// 0x3006290
	void SetCustomOffset(Vector CustomOffset);// 0x3006214
	void SetCollisionType(int Value);// 0x3006198
	void SetCollisionScale(Vector Scale);// 0x300611c
	FString GetCustomSocket();// 0x3006098
	Vector GetCustomSize();// 0x3006060
	Vector GetCustomOffset();// 0x3006028
	int GetCollisionType();// 0x3005ff4
	bool GetCollisionState();// 0x3005fbc
	Vector GetCollisionPosition(uint64 EntityID);// 0x3005f34
	HitResult GetCollisionInfo(Actor* Actor);// 0x3005e78
	Vector GetCollisionDirection(uint64 EntityID);// 0x3005df0
	void EnableWeaponCollision();// 0x3005ddc
	void DisableWeaponCollision();// 0x3005dc8
	void CheckHitReactionComponent();// 0x3005db4

--------------------------------
Class: ClimbGlobalConfig.DataAsset.Object
	<enum,GenderToClimbAction> ConfigData;//[Offset: 0x30, Size: 0x50]

--------------------------------
Class: GenderToClimbAction
	<enum,ClimbActionConfig*> GenderToClimbAction;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: ClimbActionConfig.DataAsset.Object
	float ClimbUpSpeed;//[Offset: 0x30, Size: 0x4]
	float ClimbDownSpeed;//[Offset: 0x34, Size: 0x4]
	float UpAnimRate;//[Offset: 0x38, Size: 0x4]
	float DownAnimRate;//[Offset: 0x3c, Size: 0x4]
	FString UpEnterArtPath;//[Offset: 0x40, Size: 0x10]
	FString UpExitArtPath;//[Offset: 0x50, Size: 0x10]
	FString DownEnterArtPath;//[Offset: 0x60, Size: 0x10]
	FString DownExitArtPath;//[Offset: 0x70, Size: 0x10]
	FString FastDownExitArtPath;//[Offset: 0x80, Size: 0x10]
	enum ClimbType;//[Offset: 0x90, Size: 0x1]
	FString TriggerEventName;//[Offset: 0x98, Size: 0x10]
	FString UpLoopAudio;//[Offset: 0xa8, Size: 0x10]
	FString DownLoopAudio;//[Offset: 0xb8, Size: 0x10]
	FString FastDownLoopAudio;//[Offset: 0xc8, Size: 0x10]
	FString AutoClimbLoopAudio;//[Offset: 0xd8, Size: 0x10]
	float TraceRadius;//[Offset: 0xe8, Size: 0x4]
	float TraceHalfHeight;//[Offset: 0xec, Size: 0x4]

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x5b1, Size: 0x1]
	enum TimingPolicy;//[Offset: 0x5b2, Size: 0x1]
	class UserWidget* WidgetClass;//[Offset: 0x5b8, Size: 0x8]
	IntPoint DrawSize;//[Offset: 0x5c0, Size: 0x8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8, Size: 0x1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c9, Size: 0x1]
	float RedrawTime;//[Offset: 0x5cc, Size: 0x4]
	IntPoint CurrentDrawSize;//[Offset: 0x5d8, Size: 0x8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e0, Size: 0x1]
	Vector2D Pivot;//[Offset: 0x5e4, Size: 0x8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ec, Size: 0x1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ed, Size: 0x1]
	bool bApplyGammaCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ee, Size: 0x1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x5f0, Size: 0x8]
	LinearColor BackgroundColor;//[Offset: 0x5f8, Size: 0x10]
	LinearColor TintColorAndOpacity;//[Offset: 0x608, Size: 0x10]
	float OpacityFromTexture;//[Offset: 0x618, Size: 0x4]
	enum BlendMode;//[Offset: 0x61c, Size: 0x1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61d, Size: 0x1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61e, Size: 0x1]
	UserWidget* Widget;//[Offset: 0x620, Size: 0x8]
	BodySetup* BodySetup;//[Offset: 0x648, Size: 0x8]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x650, Size: 0x8]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x658, Size: 0x8]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x660, Size: 0x8]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x668, Size: 0x8]
	MaterialInterface* MaskedMaterial;//[Offset: 0x670, Size: 0x8]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x678, Size: 0x8]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x680, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x688, Size: 0x8]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690, Size: 0x1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x691, Size: 0x1]
	FName SharedLayerName;//[Offset: 0x694, Size: 0x8]
	int LayerZOrder;//[Offset: 0x69c, Size: 0x4]
	enum GeometryMode;//[Offset: 0x6a0, Size: 0x1]
	float CylinderArcAngle;//[Offset: 0x6a4, Size: 0x4]
	void SetWidget(UserWidget* Widget);// 0x3e2a5d8
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x3e2a55c
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x3e2a4e0
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x3e2a45c
	void SetDrawSize(Vector2D Size);// 0x3e2a3e4
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x3e2a368
	void RequestRedraw();// 0x3e2a34c
	UserWidget* GetUserWidgetObject();// 0x3e2a318
	TextureRenderTarget2D* GetRenderTarget();// 0x3e2a2e4
	LocalPlayer* GetOwnerPlayer();// 0x3e2a2b0
	MaterialInstanceDynamic* GetMaterialInstance();// 0x3e2a27c
	Vector2D GetDrawSize();// 0x3e2a248
	Vector2D GetCurrentDrawSize();// 0x3e2a214

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x2e0, Size: 0x1]
	float FOVAngle;//[Offset: 0x2e4, Size: 0x4]
	float OrthoWidth;//[Offset: 0x2e8, Size: 0x4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x2f0, Size: 0x8]
	byte CaptureSource;//[Offset: 0x2f8, Size: 0x1]
	byte CompositeMode;//[Offset: 0x2f9, Size: 0x1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x300, Size: 0x570]
	float PostProcessBlendWeight;//[Offset: 0x870, Size: 0x4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x874, Size: 0x1]
	Matrix CustomProjectionMatrix;//[Offset: 0x880, Size: 0x40]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0, Size: 0x1]
	Vector ClipPlaneBase;//[Offset: 0x8c4, Size: 0xc]
	Vector ClipPlaneNormal;//[Offset: 0x8d0, Size: 0xc]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8dc, Size: 0x1]
	void CaptureScene();// 0x4774670
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x477453c

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x248, Size: 0x1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x250, Size: 0x10]
	Actor*[] HiddenActors;//[Offset: 0x260, Size: 0x10]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x270, Size: 0x10]
	Actor*[] ShowOnlyActors;//[Offset: 0x280, Size: 0x10]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290, Size: 0x1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291, Size: 0x1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x292, Size: 0x1]
	float LODDistanceFactor;//[Offset: 0x294, Size: 0x4]
	float MaxViewDistanceOverride;//[Offset: 0x298, Size: 0x4]
	int CaptureSortPriority;//[Offset: 0x29c, Size: 0x4]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x2a0, Size: 0x10]
	bool bCaptureTopHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	FString ProfilingEventName;//[Offset: 0x2c0, Size: 0x10]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x47734cc
	void ShowOnlyActorComponents(Actor* InActor);// 0x4773450
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x47733d4
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x4773358
	void RemoveShowOnlyActorComponents(Actor* InActor);// 0x47732dc
	void HideComponent(PrimitiveComponent* InComponent);// 0x4773260
	void HideActorComponents(Actor* InActor);// 0x47731e4
	void ClearShowOnlyComponents(PrimitiveComponent* InComponent);// 0x4773168
	void ClearHiddenComponents();// 0x4773154

--------------------------------
Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 0x10]
	bool Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: OptimizeViewRotationComponent.ActorComponent.Object
	OptimizeViewRotationConfig DefaultOptimizeConfig;//[Offset: 0xf0, Size: 0x2c]
	bool bIsSettingsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11c, Size: 0x1]
	bool bIsTriggerEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11c, Size: 0x1]
	Vector2D SpeedFactor;//[Offset: 0x120, Size: 0x8]
	OptimizeViewRotationConfig OptimizeConfig;//[Offset: 0x128, Size: 0x2c]
	Box2D SpeedUpRangeBox2D;//[Offset: 0x154, Size: 0x14]
	OptimizeViewRotationEntity LockTarget;//[Offset: 0x168, Size: 0x68]
	PlayerCharacter* OwnerPlayerCharacter;//[Offset: 0x1d0, Size: 0x8]
	GSTShootWeapon* OwnerShootWeapon;//[Offset: 0x1d8, Size: 0x8]
	uint64 CheckTimestamp;//[Offset: 0x1e0, Size: 0x8]
	bool WhetherReChooseLockTarget(out const OptimizeViewRotationEntity OptimizeViewRotationEntity);// 0x2f1ae48
	void UpdateSpeedUpRange();// 0x2f1ae34
	void UpdateSpeedFactor(float DeltaDistance);// 0x2f1adb8
	void UpdateOptimizeConfig();// 0x2f1ada4
	void UpdateLockTarget();// 0x2f1ad90
	void UnChooseLockTarget();// 0x2f1ad7c
	void SetTriggerEnabled(bool InIsTriggerEnabled);// 0x2f1acf8
	void SetSettingsEnabled(bool InIsSettingsEnabled);// 0x2f1ac74
	void OnUnEquipWeapon(GSTWeaponBase* InWeapon);// 0x2f1abf8
	void OnEquipWeapon(GSTWeaponBase* InWeapon);// 0x2f1ab7c
	bool IsEnabled();// 0x2f1ab44
	void ChooseLockTarget();// 0x2f1ab30
	bool CheckLockTarget(out const OptimizeViewRotationEntity OptimizeViewRotationEntity);// 0x2f1aa8c

--------------------------------
Class: OptimizeViewRotationEntity.FilterValidEntity
	Vector BottomLocation;//[Offset: 0x30, Size: 0xc]
	Vector BottomScreenLocation;//[Offset: 0x3c, Size: 0xc]
	Vector2D ProjectCapsuleToScreenScale;//[Offset: 0x48, Size: 0x8]
	Box2D ProjectCapsuleToScreenRangeBox2D;//[Offset: 0x50, Size: 0x14]
	bool bWasInProjectCapsuleToScreenRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1]

--------------------------------
Class: FilterValidEntity
	Vector Location;//[Offset: 0x10, Size: 0xc]
	float Distance;//[Offset: 0x1c, Size: 0x4]
	Vector ScreenLocation;//[Offset: 0x20, Size: 0xc]
	float ScreenDistance;//[Offset: 0x2c, Size: 0x4]

--------------------------------
Class: AutoFireCrossHairCtrlComp.ActorComponent.Object
	LeadingPlayerCharacter* OwnerCharacter;//[Offset: 0x100, Size: 0x8]
	AutoFireCrossHairComp* AutoFireCrossHairComp;//[Offset: 0x108, Size: 0x8]
	GSTShootWeapon* AGSTShootWeaponComp;//[Offset: 0x110, Size: 0x8]
	MeshComponent* weaponSkMesh;//[Offset: 0x118, Size: 0x8]
	MeshComponent* ScopeMeshComponent;//[Offset: 0x120, Size: 0x8]
	void UpdateComponentTickable();// 0x2de9b60
	void SetEdgeColor(FString Color);// 0x2de9ad4
	void SetDrawEnable(bool Target);// 0x2de9a4c
	void SetCenterEnable(bool Target);// 0x2de99c0
	void OnWeaponEquip();// 0x2de99ac
	void OnScopeOutEnd();// 0x2de9998
	void OnScopeInEnd();// 0x2de9984
	void OnPreAim();// 0x2de9968
	void OnExitAutoFire(bool needResume);// 0x2de98dc
	void OnEndViewTarget(PlayerController* PC);// 0x2de9860
	void OnBecomeViewTarget(PlayerController* PC);// 0x2de97e4
	AutoFireCrossHairComp* GetCurAutoFireCrossHairComp();// 0x2de97c8
	void EdgeReset(float Timer);// 0x2de974c
	void Draw(Canvas* Canvas, out const Vector InLeaderLocation);// 0x2de9688
	void ChangeEdgeColor(bool bFire);// 0x2de9604
	void AimOut();// 0x2de95f0

--------------------------------
Class: BP_AvatarAudioComponent_C.AvatarAudioComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2a0, Size: 0x8]
	float RandomGetAvatarMatParam(float CallFunc_RandomFloatInRange_ReturnValue);// 0x33e07d0
	float MusicParaNormalizeByRMS(float CallFunc_GetRMS_ReturnValue, float CallFunc_fn_MusicParaNormalize__maxRecordedVol_Out, float CallFunc_fn_MusicParaNormalize_NormalizedVolume);// 0x33e07d0
	void ReceiveTick(float DeltaSeconds);// 0x33e07d0
	void TANodeTick(float Delta);// 0x33e07d0
	void ExecuteUbergraph_BP_AvatarAudioComponent(int EntryPoint, float K2Node_CustomEvent_Delta, Actor* CallFunc_GetOwner_ReturnValue, BaseCharacter* K2Node_DynamicCast_AsBase_Character, bool K2Node_DynamicCast_bSuccess, FName CallFunc_MakeLiteralName_ReturnValue, float K2Node_Event_DeltaSeconds, float CallFunc_GetRMS_ReturnValue, float CallFunc_fn_MusicParaNormalize__maxRecordedVol_Out, float CallFunc_fn_MusicParaNormalize_NormalizedVolume);// 0x33e07d0
	bool NeedGetRMS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	float MaxRecordedVolOut;//[Offset: 0x2ac, Size: 0x4]
	float NormalizedVolume;//[Offset: 0x2b0, Size: 0x4]
	BaseCharacter* OwnerBaseCharacter;//[Offset: 0x2b8, Size: 0x8]

--------------------------------
Class: AvatarAudioComponent.ActorComponent.Object
	AvatarAudioConfig* AvatarAudioConfig;//[Offset: 0xf0, Size: 0x8]
	void SetTickEnable(out const FName InReason, int InPriority, int InValue);// 0x2deec88
	float RandomGetAvatarMatParam();// 0x2deec70
	void OnChangeGlobalAvatarAudioTickEnable(out const FName InReason, int InPriority, bool InValue);// 0x2deeb60
	void OnBgmChanged(FString OldEventName, FString OldSwitchGroup, FString OldSwitchState, FString NewEventName, FString NewSwitchGroup, FString NewSwitchState);// 0x2dee958
	void OnAvatarLoadFinished(AvatarCommonBase* AvatarCommonBase);// 0x2dee8dc
	float MusicParaNormalizeByRMS();// 0x2dee8c4
	static void ChangeGlobalAvatarAudioTickEnable(out const FName InReason, int InPriority, bool InValue);// 0x2dee7c0

--------------------------------
Class: AvatarAudioConfig.DataAsset.Object
	<BgmInfo,AvatarSlotMatData*> Bgm2AvatarSlotData;//[Offset: 0x30, Size: 0x50]
	<FName,float> Func2TickInterval;//[Offset: 0x80, Size: 0x50]
	<enum,AutoSlotID2Param> AutoSlotType2IDMap;//[Offset: 0xd0, Size: 0x50]

--------------------------------
Class: BgmInfo
	FString EventName;//[Offset: 0x0, Size: 0x10]
	FString SwitchGroup;//[Offset: 0x10, Size: 0x10]
	FString SwitchState;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: AvatarSlotMatData.DataAsset.Object
	<enum,SlotID2MatParam> SlotType2ID;//[Offset: 0x30, Size: 0x50]
	<enum,SlotID2MatParam> AutoSlotType2ID;//[Offset: 0x80, Size: 0x50]

--------------------------------
Class: SlotID2MatParam
	<int,MatParam2Func> SlotID2MatParam;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: MatParam2Func
	<FName,FName> MatParam2Func;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: AutoSlotID2Param
	<int,AutoParam2DetailInfo> AutoID2Param;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: AutoParam2DetailInfo
	<FName,AutoMatDetailInfo> AutoParam2DetailInfo;//[Offset: 0x0, Size: 0x50]

--------------------------------
Class: AutoMatDetailInfo
	FName AutoFuncName;//[Offset: 0x0, Size: 0x8]
	<BgmInfo> DisableBgmList;//[Offset: 0x8, Size: 0x50]

--------------------------------
Class: BaseCustomSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	byte CameraQueryChannel;//[Offset: 0x2cc, Size: 0x1]
	float SweepRadius;//[Offset: 0x2d0, Size: 0x4]
	float SweepDistance;//[Offset: 0x2d4, Size: 0x4]
	bool bIgnoreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8, Size: 0x1]
	bool bIsDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d9, Size: 0x1]
	bool bCheckForNewRelativeTM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2da, Size: 0x1]
	void SetIsCheckOverlay(bool InHide);// 0x2e0f71c
	void RemoveIgnoreCollisionTest(Actor* Actor);// 0x2e0f6a0
	void OnEndViewTarget(PlayerController* PC);// 0x2e0f624
	void OnBecomeViewTarget(PlayerController* PC);// 0x2e0f5a8
	Actor*[] GetAllIgnoreCollisionTestActors();// 0x2e0f520
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x2e0f3c8
	void ComponentDeactivated(ActorComponent* ActorComponent);// 0x2e0f34c
	void ClearAllIgnoreCollisionTest();// 0x2e0f338
	void AddIgnoreCollisionTest(Actor* Actor);// 0x2e0f2bc

--------------------------------
Class: BlockingVolumeCheckComponent.ActorComponent.Object
	StaticMesh* Effect;//[Offset: 0xf0, Size: 0x8]
	Vector EffectSize;//[Offset: 0xf8, Size: 0xc]
	Vector CheckSize;//[Offset: 0x104, Size: 0xc]
	float CheckInterval;//[Offset: 0x110, Size: 0x4]
	float HitEffectInterval;//[Offset: 0x114, Size: 0x4]
	int TipID;//[Offset: 0x118, Size: 0x4]
	float HitTipInterval;//[Offset: 0x11c, Size: 0x4]
	Actor* EffectContainer;//[Offset: 0x120, Size: 0x8]
	void OnActorHitAction(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x2e1f5cc

--------------------------------
Class: CustomSpringArmComponent.BaseCustomSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	bool EnableInterpTo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d0, Size: 0x1]
	float CAMNOBLOCK_ADJUSTSMALLVALUE;//[Offset: 0x3d4, Size: 0x4]
	float CAMNOBLOCK_ADJUSTSPEED;//[Offset: 0x3d8, Size: 0x4]
	float CAMNOBLOCK_ACCELERATEDSPEED;//[Offset: 0x3dc, Size: 0x4]
	float CAMBLOCK_ADJUSTSPEED;//[Offset: 0x3e0, Size: 0x4]
	float CAMBLOCK_ADJUSTSPEED_MAX;//[Offset: 0x3e4, Size: 0x4]
	float CAMBLOCK_ACCELERATEDSPEED;//[Offset: 0x3e8, Size: 0x4]
	bool bDoTraceOftenChangeCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3ec, Size: 0x1]
	int DoTraceOftenChangeThreshold;//[Offset: 0x3f0, Size: 0x4]
	float ForwardSpeedToRotSpeed;//[Offset: 0x3f4, Size: 0x4]
	float MinForwardSpeedToRotation;//[Offset: 0x3f8, Size: 0x4]
	float SmartCameraAutoReturnSpeed;//[Offset: 0x3fc, Size: 0x4]
	float StayTimeBeforeReturning;//[Offset: 0x400, Size: 0x4]
	float DefaultPitch;//[Offset: 0x404, Size: 0x4]
	Rotator DefaultRotation;//[Offset: 0x408, Size: 0xc]
	float ExtraLimitMaxPitch;//[Offset: 0x414, Size: 0x4]
	float ExtraLimitMinPitch;//[Offset: 0x418, Size: 0x4]
	float SmartLimitMaxPitch;//[Offset: 0x41c, Size: 0x4]
	float SmartLimitMinPitch;//[Offset: 0x420, Size: 0x4]
	Rotator CameraEffectRotationOffset;//[Offset: 0x424, Size: 0xc]
	float FreeCamRotationReturnRate;//[Offset: 0x530, Size: 0x4]
	AutoSpringArmConfigAsset* ConfigAsset;//[Offset: 0x548, Size: 0x8]
	void SetUsePawnControlRotation(out const FName ModifyReason, int InPriority, bool InUsePawnControlRotation);// 0x2e541c0
	Rotator SetSmartCamRotationTargetBySpeedVector(Vector speedVector);// 0x2e54130
	void SetSmartCamRotationDefaultTarget(Rotator Target);// 0x2e540b4
	void SetSmartCameraAutoReturnImmediately();// 0x2e540a0
	void SetSmartCameraAutoReturn(bool bEnabled);// 0x2e5401c
	void SetFreeCameraInput(Rotator deltaRot);// 0x2e53fa0
	void SetFreeCameraAutoReturn(bool bEnabled);// 0x2e53f1c
	void ResetSmartCamera();// 0x2e53f08
	void ResetFreeCamera();// 0x2e53ef4
	FString GetUsePawnControlRotationDebugValue();// 0x2e53e70
	void AddSmartCameraRollInput(float Roll);// 0x2e53df0
	void AddSmartCameraInput(float Yaw, float Pitch);// 0x2e53d3c

--------------------------------
Class: AutoSpringArmConfigAsset.DataAsset.Object
	float ArmRecoverSpeed;//[Offset: 0x30, Size: 0x4]
	float DistanceThreshold;//[Offset: 0x34, Size: 0x4]
	Vector TargetOffsetFix;//[Offset: 0x38, Size: 0xc]
	float TargetOffsetFixSpeed;//[Offset: 0x44, Size: 0x4]
	float TargetOffsetRecoverSpeed;//[Offset: 0x48, Size: 0x4]
	CurveFloat* SampleCurve;//[Offset: 0x50, Size: 0x8]

--------------------------------
Class: AutoAimComponent.ActorComponent.Object
	PlayerCharacter* OwnerPlayerCharacter;//[Offset: 0xf0, Size: 0x8]
	PlayerController* OwnerPlayerController;//[Offset: 0xf8, Size: 0x8]
	ToaaPlayerController* OwnerToaaPlayerController;//[Offset: 0x100, Size: 0x8]
	GSTShootWeapon* OwnerShootWeapon;//[Offset: 0x108, Size: 0x8]
	ShootWeaponEntityComp* ShootWeaponEntity;//[Offset: 0x110, Size: 0x8]
	Actor*[] BlacklistActors;//[Offset: 0x268, Size: 0x10]
	void SetAutoAimType(enum InAutoAimType, int InPriority);// 0x2de6790
	void RemoveFromBlacklistActors(Actor* InTarget);// 0x2de6714
	void OnWeaponStopFire();// 0x2de6700
	void OnWeaponStartFire();// 0x2de66ec
	void OnWeaponShoot();// 0x2de66d8
	void OnUnEquipWeapon(GSTWeaponBase* InWeapon);// 0x2de665c
	void OnEquipWeapon(GSTWeaponBase* InWeapon);// 0x2de65e0
	bool IsInBlacklistActors(Actor* InTarget);// 0x2de6558
	bool IsEnableAutoAim();// 0x2de6520
	void EnableAutoAim(out const FName InReason, int InPriority, bool bIsEnable);// 0x2de6410
	void ClearBlacklistActors();// 0x2de63fc
	void AddToBlacklistActors(Actor* InTarget);// 0x2de6380

--------------------------------
Class: Vault_C.ToaaVaultComponent.BaseVaultComponent.ActorComponent.Object

--------------------------------
Class: BaseFPPComponent.ActorComponent.Object
	bool bIsBoltAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	int[] SightX6IDs;//[Offset: 0xf8, Size: 0x10]
	int[] SightX8IDs;//[Offset: 0x108, Size: 0x10]
	LeadingPlayerCharacter* Character;//[Offset: 0x190, Size: 0x8]
	FName ScopeAimCameraSocketName;//[Offset: 0x198, Size: 0x8]
	FName FPPSocketName;//[Offset: 0x1a0, Size: 0x8]
	FName PlayerScopeInSocketName;//[Offset: 0x1a8, Size: 0x8]
	FName BoltActionCurveName;//[Offset: 0x1b0, Size: 0x8]
	float ScopeZoomSpringArmLength;//[Offset: 0x1b8, Size: 0x4]
	float BoltActionHoldTimeDefault;//[Offset: 0x1c0, Size: 0x4]
	float BoltActionFov;//[Offset: 0x1c4, Size: 0x4]
	float ScopeZoomAlpha;//[Offset: 0x1c8, Size: 0x4]
	<FName,float> ScopeZoomBackupMap;//[Offset: 0x1d0, Size: 0x50]
	float ScopeZoomSpeed;//[Offset: 0x220, Size: 0x4]
	CurveFloat* ScopeFovCurveRate;//[Offset: 0x228, Size: 0x8]
	<int,CurveFloat*> ScopeFovCurveRateMap;//[Offset: 0x230, Size: 0x50]
	CurveFloat* ScopeFovLeghtCurve;//[Offset: 0x280, Size: 0x8]
	float ScopeInterpolationRate;//[Offset: 0x288, Size: 0x4]
	Transform BeginOffest;//[Offset: 0x290, Size: 0x30]
	Vector MaxAttachCharacterOffset;//[Offset: 0x2c0, Size: 0xc]
	float AttachToCharacterHandleDelay;//[Offset: 0x2cc, Size: 0x4]
	float MaxAttachXOffset;//[Offset: 0x2d0, Size: 0x4]
	bool IsDrawDebugPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	float DrawDebugPointTime;//[Offset: 0x2d8, Size: 0x4]
	float DrawDebugPointSize;//[Offset: 0x2dc, Size: 0x4]
	int CurrentPlayAnimIndex;//[Offset: 0x2e0, Size: 0x4]
	bool bUseScopeInRotatorOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e4, Size: 0x1]
	CurveFloat* ScopeInRotOffsetSpeed;//[Offset: 0x2e8, Size: 0x8]
	float ScopeInRotCheckLineLength;//[Offset: 0x2f0, Size: 0x4]
	float ScopeInRotOffsetMaxAngle;//[Offset: 0x2f4, Size: 0x4]
	float HoldGunMiddleScopeInTime;//[Offset: 0x2f8, Size: 0x4]
	float ScopeInRotOffsetDelay;//[Offset: 0x2fc, Size: 0x4]
	<FName,float> ScopeZoomMap;//[Offset: 0x338, Size: 0x50]
	void UpdateScopeInRotOffset(float DeltaTime);// 0x2e11b8c
	void UpdateScopeCameraOffsets(out float FOV, out float Offset);// 0x2e11ab0
	float SwitchSightConfigMaterial();// 0x33e07d0
	void SwitchScopeMeshAnim(byte Type);// 0x2e11a34
	void SwitchCameraMode(byte Mode);// 0x2e119b8
	void StopScopeIn();// 0x2e119a4
	float ShowReflectorSightTPPMaterial();// 0x33e07d0
	void SetTagCulling(bool isUse);// 0x33e07d0
	int SetScopeFovRate(float pRate);// 0x2e11920
	void SetScopeCameraByRate(float Alpha);// 0x2e118a4
	void SetCurFovRate(float pRate);// 0x2e11828
	void ScopingChange(bool InValue);// 0x2e117a4
	void Scoping(byte NewType);// 0x2e11728
	void ScopeZoomUpdate(float Alpha);// 0x2e116ac
	void ScopeZoomTick(float DeltaTime);// 0x2e11630
	void ScopeTimelineUpdate(float Alpha);// 0x2e115b4
	void ScopeOutSpeedChange(ShootWeaponEntityComp* Entity);// 0x2e11538
	bool ScopeOutLogic();// 0x2e11500
	void ScopeOutEnd();// 0x2e114ec
	void ScopeOut(byte NewType);// 0x2e11470
	void ScopeNotHandFold();// 0x2e1145c
	void ScopeInterrupt(byte NewType);// 0x2e113e0
	void ScopeInSpeedChange(ShootWeaponEntityComp* Entity);// 0x2e11364
	void ScopeInLogic();// 0x2e11350
	void ScopeInEnd();// 0x2e1133c
	void ScopeInAfterTimeline();// 0x2e11328
	void ScopeIn(byte NewType);// 0x2e112ac
	void ScopeHandFold();// 0x2e11298
	void RevertScopeInRot();// 0x2e11284
	void ProcessScopeInRotOffset();// 0x2e11270
	void PlayScopeInTimeLine();// 0x2e1125c
	void PhotographScopeOut();// 0x2e11248
	void PhotographScopeIn();// 0x2e11234
	void OnLeadingPlayerCharacterStateChange(int InLayer, int InOldState, int InNewState);// 0x2e11144
	bool IsUseZoomScope(bool bIsScopeIn);// 0x2e110b4
	void InitScopeZoom(uint64 ScopeID);// 0x2e11038
	void HandleScopeInRotOffset();// 0x2e11024
	byte GetSightType();// 0x2e10ff0
	float GetScopeZoomValue(uint64 ScopeID);// 0x2e10f6c
	FName GetScopeZoomKey(uint64 ScopeID);// 0x2e10ee8
	float GetScopeInAnimTime();// 0x2e10eb4
	float GetScopeFov(GSTShootWeapon* ShootWeapon);// 0x2e10e30
	float GetScopeCameraLeghtOffet();// 0x2e10dfc
	float GetScopeCameraFovOffet();// 0x2e10dc8
	float GetCurFovRate();// 0x2e10d94
	void EquipZoomScope(uint64 ScopeID, bool bIsScopeIn);// 0x2e10cd4
	void EquipWeapon(GSTWeaponBase* weapon);// 0x2e10c58
	float DetachSightLens();// 0x33e07d0
	void ClearScopeInRot();// 0x2e10c44
	void BoltAction(float DeltaSeconds);// 0x2e10bc8
	void AttachToSight();// 0x2e10bb4
	void AttachToCharacter();// 0x2e10ba0
	float AttachSightLens();// 0x33e07d0
	void ActiveComponentTickable();// 0x2e10b8c

--------------------------------
Class: GSTMeleeWeapon.GSTWeaponBase.Actor.Object
	DataTable* MeleeEffectTable;//[Offset: 0x940, Size: 0x8]
	DataTable* MeleeWaveSoundTable;//[Offset: 0x948, Size: 0x8]
	MeleeWeaponEntityComp* GetMeleeWeaponEntityComponent();// 0x2eae978

--------------------------------
Class: MeleeWeaponEntityComp.WeaponEntityComp.WeaponBaseComp.ActorComponent.Object
	int[] AttackSkillNormal;//[Offset: 0x128, Size: 0x10]
	int[] AttackSkillOnGround;//[Offset: 0x138, Size: 0x10]
	int AttackSkillInJumping;//[Offset: 0x148, Size: 0x4]
	int ExecuteSkillNormal;//[Offset: 0x14c, Size: 0x4]
	int AssassinSkill;//[Offset: 0x150, Size: 0x4]
	int ExecuteSkillKillPeople;//[Offset: 0x154, Size: 0x4]
	int[] AttackAnimalSkillOneHand;//[Offset: 0x158, Size: 0x10]
	int[] AttackAnimalSkillTwoHand;//[Offset: 0x168, Size: 0x10]
	Object*[] SkillResourceCache;//[Offset: 0x180, Size: 0x10]

--------------------------------
Class: ClimbTriggerComponent.SceneComponent.ActorComponent.Object
	ClimbActionConfig* MaleClimbParam;//[Offset: 0x248, Size: 0x8]
	ClimbActionConfig* FemaleClimbParam;//[Offset: 0x250, Size: 0x8]
	Transform downStartPoint;//[Offset: 0x340, Size: 0x30]
	Transform upStartPoint;//[Offset: 0x370, Size: 0x30]
	Transform downExitPoint;//[Offset: 0x3a0, Size: 0x30]
	Transform upExitPoint;//[Offset: 0x3d0, Size: 0x30]
	delegate OnClimbTriggerEnterEvent;//[Offset: 0x438, Size: 0x10]
	delegate OnClimbTriggerExitEvent;//[Offset: 0x448, Size: 0x10]
	delegate OnDisabledEventExecuteOnce;//[Offset: 0x458, Size: 0x10]
	void SetUIPos(out const Vector downUIPos, out const Vector upUIPos);// 0x2e44774
	void SetTriggerType(enum TriggerType);// 0x2e446fc
	void SetEntityStructInfo(uint64 EntityID, int GlobalID);// 0x2e44644
	void SetClimbTriggerInfo(out const Vector DownTriggerCenter, out const Vector UpTriggerCenter, float DownRadius, float UpRadius, float DownHeight, float UpHeight);// 0x2e4447c
	void SetClimbPointInfo(out const Transform downStartPoint, out const Transform upStartPoint, float downExitHeight, float upExitHeight);// 0x2e442b0
	void SetClimbPointExitPointInfo(out const Transform downExitPoint, out const Transform upExitPoint);// 0x2e44164
	void SetClimbPointByPosAndRot(out const Vector downStartPos, out const Rotator downStartRot, float downExitHeight, out const Vector upStartPos, out const Rotator upStartRot, float upExitHeight);// 0x2e43f6c
	void SetCheckCollision(bool bCheck);// 0x2e43eec
	void OnTriggerDisabled__DelegateSignature();// 0x33e07d0
	void OnTriggerChangeDelegate__DelegateSignature(ClimbTriggerComponent* TriggerComp, enum triggerLocType);// 0x33e07d0
	bool NeedCheckCollision();// 0x2e43ed0
	void LoadClimbParamConfig(FString MaleConfigPath, FString FemaleConfigPath);// 0x2e43df8
	Vector GetUpUIPos();// 0x2e43dc0
	enum GetTriggerType();// 0x2e43da4
	int GetGlobalID();// 0x2e43d88
	uint64 GetEntityID();// 0x2e43d6c
	Vector GetDownUIPos();// 0x2e43d34

--------------------------------
Class: PlayerGunCollosionComp.ActorComponent.Object
	float DetectInterval;//[Offset: 0xf0, Size: 0x4]
	int DetectThreshold;//[Offset: 0xf4, Size: 0x4]
	float FoldFactor;//[Offset: 0xf8, Size: 0x4]
	byte CollisionMaskFilter;//[Offset: 0xfc, Size: 0x1]
	LeadingPlayerCharacter* pCharOwner;//[Offset: 0x100, Size: 0x8]
	Vector BoxHalfSize;//[Offset: 0x110, Size: 0xc]
	Vector QEoffsetPeekLeftOnVehicle;//[Offset: 0x11c, Size: 0xc]
	Vector QEoffsetPeekRightOnVehicle;//[Offset: 0x128, Size: 0xc]
	Vector QEoffsetPeekLeft;//[Offset: 0x134, Size: 0xc]
	Vector QEoffsetPeekRight;//[Offset: 0x140, Size: 0xc]
	float StaticTraceLengthOffset;//[Offset: 0x14c, Size: 0x4]
	Vector QEoffsetPeekStandAdd;//[Offset: 0x150, Size: 0xc]
	Vector QEoffsetPeekCrouchAdd;//[Offset: 0x15c, Size: 0xc]
	Vector QEoffsetPeekProneAdd;//[Offset: 0x168, Size: 0xc]
	int FoldFactorDelt;//[Offset: 0x174, Size: 0x4]
	int FoldFactorDeltChange;//[Offset: 0x178, Size: 0x4]
	int TraceDis;//[Offset: 0x17c, Size: 0x4]
	float TickDeltTime;//[Offset: 0x180, Size: 0x4]
	bool IsDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1]
	void SetEffect(const bool Visbile, out const Vector EffectLoc);// 0x2f321c8
	void CheckCollision(out const int InFoldFactor, out const Vector FoldPoint, out const Vector FoldNormal);// 0x2f32094

--------------------------------
Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4]

--------------------------------
Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8]
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4]
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4]
	bool bIsExcluded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideTravelCost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideEnteringCost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]

--------------------------------
Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x2c, Size: 0x4]
	float FixedAreaEnteringCost;//[Offset: 0x30, Size: 0x4]
	Color DrawColor;//[Offset: 0x34, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x38, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]

--------------------------------
Class: ToaaPredictProjectilePathActor.Actor.Object
	int SimFrequency;//[Offset: 0x348, Size: 0x4]
	int MaxBounces;//[Offset: 0x34c, Size: 0x4]
	int NumberSplineMeshes;//[Offset: 0x350, Size: 0x4]
	int NumberMeshesNeeded;//[Offset: 0x354, Size: 0x4]
	int NumberMeshesLastFrame;//[Offset: 0x358, Size: 0x4]
	int CheckThrowType;//[Offset: 0x35c, Size: 0x4]
	float ProjectileRadius;//[Offset: 0x360, Size: 0x4]
	float MaxSimTime;//[Offset: 0x364, Size: 0x4]
	float Bounciness;//[Offset: 0x368, Size: 0x4]
	float SimFriction;//[Offset: 0x36c, Size: 0x4]
	float OverrideGravityZ;//[Offset: 0x370, Size: 0x4]
	float SimTime;//[Offset: 0x374, Size: 0x4]
	float PathDuration;//[Offset: 0x378, Size: 0x4]
	bool bTraceWithChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 0x1]
	bool bIgnoreAvatarCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 0x1]
	Vector ExplodeSize;//[Offset: 0x380, Size: 0xc]
	Vector LastPoint;//[Offset: 0x38c, Size: 0xc]
	Vector ThrowVelocity;//[Offset: 0x398, Size: 0xc]
	HitResult PathHit;//[Offset: 0x3a4, Size: 0x88]
	StaticMeshComponent* EffectRange;//[Offset: 0x430, Size: 0x8]
	ParticleSystemComponent* EffectPoint;//[Offset: 0x438, Size: 0x8]
	SplineComponent* Spline;//[Offset: 0x440, Size: 0x8]
	StaticMesh* EffectMesh;//[Offset: 0x448, Size: 0x8]
	MaterialInterface* EffectMaterial;//[Offset: 0x450, Size: 0x8]
	byte TraceChannel;//[Offset: 0x458, Size: 0x1]
	byte[] ExtraObjectType;//[Offset: 0x460, Size: 0x10]
	SplineMeshComponent*[] SplineMeshes;//[Offset: 0x470, Size: 0x10]
	ParticleSystemComponent*[] BouncePointsArray;//[Offset: 0x480, Size: 0x10]
	Vector[] PathPoints;//[Offset: 0x490, Size: 0x10]
	Vector[] BouncePoints;//[Offset: 0x4a0, Size: 0x10]
	Vector[] BounceNormals;//[Offset: 0x4b0, Size: 0x10]
	PredictProjectilePathPointData[] PathData;//[Offset: 0x4c0, Size: 0x10]
	HitResult[] BounceHit;//[Offset: 0x4d0, Size: 0x10]
	Vector[] BounceVelocitys;//[Offset: 0x4e0, Size: 0x10]
	SoftObjectPath collectionPath;//[Offset: 0x520, Size: 0x18]
	SoftObjectPath splineMeshPath;//[Offset: 0x538, Size: 0x18]
	SoftObjectPath effectMeshPath_High;//[Offset: 0x550, Size: 0x18]
	SoftObjectPath effectMeshPath_Low;//[Offset: 0x568, Size: 0x18]
	SoftObjectPath effectMaterialPath_High;//[Offset: 0x580, Size: 0x18]
	SoftObjectPath effectMaterialPath_Low;//[Offset: 0x598, Size: 0x18]
	void SetToaaPredictProjectilePathParams(out const ToaaPredictProjectilePathParams ToaaPredictProjectilePathParams);// 0x2fa1da8
	void SetThrowParams(out const Vector InBaseVector, float InThrowAngleAroundY, float InThrowAngleAroundZ, float InThrowSpeed);// 0x2fa1c64
	void SetProjectileBlockingHitCheckType(enum HitCheckType);// 0x2fa1be8
	void SetOwnerController(Controller* InController);// 0x2fa1b6c
	void SetEnable(bool InIsEnable);// 0x2fa1ae8
	void SetEffectQualityLevel(int InEffectQualityLevel);// 0x2fa1a6c
	Vector GetWeaponThrowVelocity();// 0x2fa1a34
	Vector GetThrowVelocity();// 0x2fa19fc
	uint64 GetStopTargetEntityID();// 0x2fa19c8
	enum GetProjectileBlockingHitCheckType();// 0x2fa1994
	Actor*[] GetPredictLineIgnoreActors();// 0x2fa1910
	Controller* GetOwnerController();// 0x2fa18dc
	int GetEffectQualityLevel();// 0x2fa18a8
	Vector GetBaseVector();// 0x2fa1870

--------------------------------
Class: PredictProjectilePathPointData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	float Time;//[Offset: 0x18, Size: 0x4]

--------------------------------
Class: ToaaPredictProjectilePathParams
	float ProjectileRadius;//[Offset: 0x0, Size: 0x4]
	float MaxSimTime;//[Offset: 0x4, Size: 0x4]
	int SimFrequency;//[Offset: 0x8, Size: 0x4]
	int MaxBounces;//[Offset: 0xc, Size: 0x4]
	float Bounciness;//[Offset: 0x10, Size: 0x4]
	float Friction;//[Offset: 0x14, Size: 0x4]
	float OverrideGravityZ;//[Offset: 0x18, Size: 0x4]
	Vector ExplodeSize;//[Offset: 0x1c, Size: 0xc]
	bool bTraceWithChannel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bIgnoreAvatarCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	byte TraceChannel;//[Offset: 0x2a, Size: 0x1]
	byte[] ExtraObjectType;//[Offset: 0x30, Size: 0x10]
	int CheckThrowType;//[Offset: 0x40, Size: 0x4]

--------------------------------
Class: SceneCapture2D.SceneCapture.Actor.Object
	SceneCaptureComponent2D* CaptureComponent2D;//[Offset: 0x348, Size: 0x8]
	void OnInterpToggle(bool bEnable);// 0x4772a1c

--------------------------------
Class: SceneCapture.Actor.Object

--------------------------------
Class: BuilderCylinderTriggerComponent.CylinderTriggerComponent.TriggerAreaComponent.ActorComponent.Object
	void SetServerID(uint64 EntityID);// 0x2e24940
	uint64 GetServerID();// 0x2e24924

--------------------------------
Class: CylinderTriggerComponent.TriggerAreaComponent.ActorComponent.Object
	void SetTriggerInfoByFollow(float CylinderRadius, float CylinderHeight);// 0x2e55200
	void SetTriggerInfo(out const Vector TriggerCenterPos, float CylinderRadius, float CylinderHeight);// 0x2e550f4
	void SetOwnerServerID(uint64 serverID);// 0x2e5507c
	uint64 GetOwnerServerID();// 0x2e55060

--------------------------------
Class: TriggerAreaComponent.ActorComponent.Object
	delegate OnTriggerEnterEvent;//[Offset: 0x110, Size: 0x10]
	delegate OnTriggerExitEvent;//[Offset: 0x120, Size: 0x10]
	void OnTriggerChangeDelegate__DelegateSignature(TriggerAreaComponent* TriggerComponent);// 0x33e07d0

--------------------------------
Class: TOAAMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	delegate OnSimulateMoveFinish;//[Offset: 0x720, Size: 0x10]
	bool bWantsToBeProne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x730, Size: 0x1]
	bool bProneMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x730, Size: 0x1]
	float PronedHalfHeight;//[Offset: 0x734, Size: 0x4]
	Vector GlidingRotationalVelocity;//[Offset: 0x738, Size: 0xc]
	byte WalkingMode;//[Offset: 0x748, Size: 0x1]
	CurveFloat* WalkSpeedScaleCurve;//[Offset: 0x750, Size: 0x8]
	float ForwardJumpVelocity;//[Offset: 0x758, Size: 0x4]
	float ForwardJumpUpGravityScale;//[Offset: 0x75c, Size: 0x4]
	float ForwardJumpDownGravityScale;//[Offset: 0x760, Size: 0x4]
	float StandJumpVelocity;//[Offset: 0x764, Size: 0x4]
	float StandJumpUpGravityScale;//[Offset: 0x768, Size: 0x4]
	float StandJumpDownGravityScale;//[Offset: 0x76c, Size: 0x4]
	float StandJumpPreDuration;//[Offset: 0x770, Size: 0x4]
	float JumpLandingDuration;//[Offset: 0x774, Size: 0x4]
	float JumpLandingMiddleZThreshold;//[Offset: 0x778, Size: 0x4]
	float JumpLandingMiddleDuration;//[Offset: 0x77c, Size: 0x4]
	float JumpLandingHeavyZThreshold;//[Offset: 0x780, Size: 0x4]
	float JumpLandingHeavyDuration;//[Offset: 0x784, Size: 0x4]
	float JumpLandingHeavyZOffset;//[Offset: 0x788, Size: 0x4]
	float JumpMinGap;//[Offset: 0x78c, Size: 0x4]
	float JumpMaxVelocity;//[Offset: 0x790, Size: 0x4]
	float JumpLandProneToStandZ;//[Offset: 0x794, Size: 0x4]
	float JumpLandCrouchToStandZ;//[Offset: 0x798, Size: 0x4]
	byte JumpFallingAccelerationType;//[Offset: 0x79c, Size: 0x1]
	CurveFloat* JumpFallingAccelerationCurve;//[Offset: 0x7a0, Size: 0x8]
	float CornerWidth;//[Offset: 0x7a8, Size: 0x4]
	float CornerCleanSpaceDist;//[Offset: 0x7ac, Size: 0x4]
	float CapsuleRadiusScale;//[Offset: 0x7b0, Size: 0x4]
	float ViewDirAngleMax;//[Offset: 0x7b4, Size: 0x4]
	float ViewDirAngleMin;//[Offset: 0x7b8, Size: 0x4]
	bool UseLineTraceInsteadSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7bc, Size: 0x1]
	int ZTestIterations;//[Offset: 0x7c0, Size: 0x4]
	float SimulateMoveMaxDistance;//[Offset: 0x7c8, Size: 0x4]
	float SimulateMoveDistThreshold;//[Offset: 0x7cc, Size: 0x4]
	float SimulateMoveValidFactor;//[Offset: 0x7d0, Size: 0x4]
	int SimulateMoveNonvalidFrames;//[Offset: 0x7d4, Size: 0x4]
	float SwimmingZDelta;//[Offset: 0x7d8, Size: 0x4]
	float MaxAboveWaterHeight;//[Offset: 0x7dc, Size: 0x4]
	float SuspendAboveWaterHeight;//[Offset: 0x7e0, Size: 0x4]
	SkiingDefine* SkiingConfig;//[Offset: 0x7e8, Size: 0x8]
	bool UpdateGravitationalForce(int GravitationKey, out const Vector CenterPos, float CenterMaxSpeed, float EffectRadius, float AttenuationK);// 0x2f98434
	int TrySimulateMoveToDestination(out const Vector[] PtList, SimulateMoveParam MoveParm);// 0x2f982e8
	void SetSkiingState(enum NewState);// 0x2f9826c
	void SetSkiFrictionFactor(FName Reason, int Priority, float Value);// 0x2f98178
	void SetSkiForwardControlInput(byte ForwardInput);// 0x2f980fc
	void SetSkiExternAccelerateByID(FName Reason, float InAcceleratiton, uint64 UniqueId);// 0x2f98008
	void SetSkiExternAccelerate(FName Reason, float InAcceleratiton);// 0x2f97f50
	void SetGravityScaleCoe(float InValue);// 0x2f97ed8
	void SetForwardJumpVelByReason(out const byte JumpType, float VelValue, out const FName Reason, out const int Priority);// 0x2f97d60
	void SetFallUpGravityScale(FName Reason, int Priority, float Value);// 0x2f97c6c
	void SetFallDownGravityScale(FName Reason, int Priority, float Value);// 0x2f97b78
	void ResetSkiFrictionFactor(FName Reason);// 0x2f97afc
	void ResetSkiExternAccelerateByID(FName Reason, uint64 UniqueId);// 0x2f97a48
	void ResetSkiExternAccelerate(FName Reason);// 0x2f979cc
	void ResetJumpVelByReason(out const byte JumpType, out const FName Reason);// 0x2f978e0
	void ResetJumpVel();// 0x2f978cc
	void ResetFallUpGravityScale(FName Reason);// 0x2f97850
	void ResetFallDownGravityScale(FName Reason);// 0x2f977d4
	void RemoveGravitationalForce(int GravitationKey);// 0x2f97758
	void RemoveAllGravitationalForce();// 0x2f97744
	void OverrideVelocity(out const Vector InVelocity);// 0x2f976bc
	void OverrideGlidingVelocity(out const Vector InGlidingTargetBaseVelocity, float InGlidingTargetFallSpeed, float InForwardSpeedInterpRate, float InFallSpeedInterpRate);// 0x2f97578
	void OverrideGlidingRotationalVelocity(out const Vector InRotationSpeed, float InRotationSpeedInterpRate);// 0x2f974a8
	bool IsSkiing();// 0x2f97470
	void InitJumpVel();// 0x2f9745c
	enum GetSkiingState();// 0x2f97440
	Vector GetMoveBlockHitPoint();// 0x2f97418
	float GetGravityScaleCoe();// 0x2f973fc
	float GetForwardJumpVelByReason(out const byte JumpType);// 0x2f9735c
	float GetDistFromGround();// 0x2f97328
	Vector GetCurGlidingRotationVel();// 0x2f97304
	Vector GetCurGlidingBaseVel();// 0x2f972e0
	void ExitSkiingRiseFallingByID(uint64 UniqueId);// 0x2f97264
	void ExitSkiingRiseFalling();// 0x2f97250
	void ExitSkiing();// 0x2f9723c
	void EnterSkiingRiseFallingByID(out const Vector RiseAcceleration, float RiseAttenuationK, float RiseOriginZ, uint64 UniqueId);// 0x2f970f8
	void EnterSkiingRiseFalling(out const Vector RiseAcceleration, float RiseAttenuationK, float RiseOriginZ);// 0x2f96fec
	void EnterSkiing();// 0x2f96fd8
	void EnterPathFollowSkiing(SplineComponent* InSplineComponent, float InSpeed, uint64 PathUniqueID);// 0x2f96ee4
	bool CanSkiingPushStart();// 0x2f96eac
	bool bMovingButBlocked();// 0x2f96e8c
	float ApplyGravitational(float DeltaTime);// 0x2f96e08
	void AdjustToFloor();// 0x2f96df4
	int AddGravitationalForce(out const Vector CenterPos, float CenterMaxSpeed, float EffectRadius, float AttenuationK);// 0x2f96ca8

--------------------------------
Class: SkiingDefine.DataAsset.Object
	float MovingToSkiingSpeed;//[Offset: 0x30, Size: 0x4]
	float SprintToSkiingSpeed;//[Offset: 0x34, Size: 0x4]
	float MaxSpeedEnablePushStart;//[Offset: 0x38, Size: 0x4]
	float PushInitSpeed;//[Offset: 0x3c, Size: 0x4]
	float EnterVelocityDirAngle;//[Offset: 0x40, Size: 0x4]
	float EnterTime;//[Offset: 0x44, Size: 0x4]
	float ExitTime;//[Offset: 0x48, Size: 0x4]
	float RushingStartTime;//[Offset: 0x4c, Size: 0x4]
	float GroundGravityScale;//[Offset: 0x50, Size: 0x4]
	float FrictionFactor;//[Offset: 0x54, Size: 0x4]
	float TurnAttenuationK;//[Offset: 0x58, Size: 0x4]
	float DirTurnFactor;//[Offset: 0x5c, Size: 0x4]
	float RotTurnSpeed;//[Offset: 0x60, Size: 0x4]
	float BrakingDeceleration;//[Offset: 0x64, Size: 0x4]
	float BrakeToStopSpeed;//[Offset: 0x68, Size: 0x4]
	float ReverseSpeedToStop;//[Offset: 0x6c, Size: 0x4]
	float RushOverMinSpeed;//[Offset: 0x70, Size: 0x4]
	float RushOverMinSlopAngleDiff;//[Offset: 0x74, Size: 0x4]
	float RushOverReverseZAngleDiff;//[Offset: 0x78, Size: 0x4]
	float SkiingWalkableAngle;//[Offset: 0x7c, Size: 0x4]
	float PathSkiingMinSpeed;//[Offset: 0x80, Size: 0x4]
	float PathSkiingMaxEnterAngle;//[Offset: 0x84, Size: 0x4]
	float SkiGroundNormalLerpSpeed;//[Offset: 0x88, Size: 0x4]
	float SkiIdleNormalLerpSpeed;//[Offset: 0x8c, Size: 0x4]
	float SkiLandNormalLerpSpeed;//[Offset: 0x90, Size: 0x4]
	float SkiLandNormalLerpTime;//[Offset: 0x94, Size: 0x4]
	static void SetMaxSkiingSpeed(float InMaxSpeed);// 0x2f58538

--------------------------------
Class: SimulateMoveParam
	bool MoveWithoutCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool MoveBreakByInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	enum MoveType;//[Offset: 0x2, Size: 0x1]
	Vector OverrideVelocity;//[Offset: 0x4, Size: 0xc]
	float VelocityScale;//[Offset: 0x10, Size: 0x4]
	float DistanceScale;//[Offset: 0x14, Size: 0x4]
	float MaxFallingLedgeHeight;//[Offset: 0x18, Size: 0x4]
	bool MoveToDestRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	Rotator DestRotation;//[Offset: 0x20, Size: 0xc]

--------------------------------
Class: BP_PredictProjectilePath_C.ToaaPredictProjectilePathActor.Actor.Object
	void UserConstructionScript();// 0x33e07d0
	ParticleSystemComponent* Effect Point;//[Offset: 0x5b0, Size: 0x8]
	StaticMeshComponent* Effect Range;//[Offset: 0x5b8, Size: 0x8]
	ParticleSystemComponent* Bounce Point 4;//[Offset: 0x5c0, Size: 0x8]
	ParticleSystemComponent* Bounce Point 3;//[Offset: 0x5c8, Size: 0x8]
	ParticleSystemComponent* Bounce Point 2;//[Offset: 0x5d0, Size: 0x8]
	ParticleSystemComponent* Bounce Point 1;//[Offset: 0x5d8, Size: 0x8]
	SplineMeshComponent* SplineMesh19;//[Offset: 0x5e0, Size: 0x8]
	SplineMeshComponent* SplineMesh18;//[Offset: 0x5e8, Size: 0x8]
	SplineMeshComponent* SplineMesh17;//[Offset: 0x5f0, Size: 0x8]
	SplineMeshComponent* SplineMesh16;//[Offset: 0x5f8, Size: 0x8]
	SplineMeshComponent* SplineMesh15;//[Offset: 0x600, Size: 0x8]
	SplineMeshComponent* SplineMesh14;//[Offset: 0x608, Size: 0x8]
	SplineMeshComponent* SplineMesh13;//[Offset: 0x610, Size: 0x8]
	SplineMeshComponent* SplineMesh12;//[Offset: 0x618, Size: 0x8]
	SplineMeshComponent* SplineMesh11;//[Offset: 0x620, Size: 0x8]
	SplineMeshComponent* SplineMesh10;//[Offset: 0x628, Size: 0x8]
	SplineMeshComponent* SplineMesh9;//[Offset: 0x630, Size: 0x8]
	SplineMeshComponent* SplineMesh8;//[Offset: 0x638, Size: 0x8]
	SplineMeshComponent* SplineMesh7;//[Offset: 0x640, Size: 0x8]
	SplineMeshComponent* SplineMesh6;//[Offset: 0x648, Size: 0x8]
	SplineMeshComponent* SplineMesh5;//[Offset: 0x650, Size: 0x8]
	SplineMeshComponent* SplineMesh4;//[Offset: 0x658, Size: 0x8]
	SplineMeshComponent* SplineMesh3;//[Offset: 0x660, Size: 0x8]
	SplineMeshComponent* SplineMesh2;//[Offset: 0x668, Size: 0x8]
	SplineMeshComponent* SplineMesh1;//[Offset: 0x670, Size: 0x8]
	SplineMeshComponent* SplineMesh;//[Offset: 0x678, Size: 0x8]
	SplineComponent* SplineCom;//[Offset: 0x680, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x688, Size: 0x8]

--------------------------------
Class: BP_NaviDecalNew_C.NaviDecalNewActor.BaseActor.Actor.Object

--------------------------------
Class: NaviDecalNewActor.BaseActor.Actor.Object
	SplineComponent* mSplineCom;//[Offset: 0x818, Size: 0x8]
	SplineMeshComponent*[] marrSplineMeshCom;//[Offset: 0x820, Size: 0x10]
	MaterialInstanceDynamic*[] marrSplineMeshComMat;//[Offset: 0x830, Size: 0x10]
	SoftObjectPath mStaticMeshPath;//[Offset: 0x840, Size: 0x18]
	int mMaxSplinePointNum;//[Offset: 0x858, Size: 0x4]
	void UpdateSpline();// 0x2f0e290
	void SetSplinePointTanWithID(int pPointIndex, int pType, bool pbFixZ);// 0x2f0e198
	void SetSplinePointTans(int pPointIndex, out const Vector pInTangent, out const Vector pOutTangent);// 0x2f0e080
	void SetSplinePointTan(int pPointIndex, out const Vector pInTangent);// 0x2f0dfbc
	void SetSplinePointLoc(int pPointIndex, out const Vector pInLocation);// 0x2f0def8
	void SetMeshVisible(int pPointIndex, bool pbVisible);// 0x2f0de3c
	void SetMeshMat(int pPointIndex, float pCurDis, float pNxtDis, out const Vector pStartLoc, out const Vector pEndLoc);// 0x2f0dcac
	void SetMeshLocAndTanCustom(int pPointIndex, out const Vector pCurLoc, out const Vector pNxtLoc, out const Vector pCurTan, out const Vector pNxtTan, float pLenScale, float pMinTan, bool pbFloorLoc, float pFloorLen);// 0x2f0d9f0
	void SetMeshLocAndTan(int pPointIndex, float pLenScale, float pMinTan, bool pbFloorLoc, float pFloorLen);// 0x2f0d874
	void Init(int pMaxSplinePointNum, FString pMeshPath, float pMeshScaleX, float pMeshScaleY);// 0x2f0d738
	float GetSplineSegmentLength(const int pIndex, const float pParam);// 0x2f0d678
	Vector GetSplinePointTanLocal(int pPointIndex);// 0x2f0d5f0
	Vector GetSplinePointTan(int pPointIndex);// 0x2f0d568
	Vector GetSplinePointLocLocal(int pPointIndex);// 0x2f0d4e0
	Vector GetSplinePointLoc(int pPointIndex);// 0x2f0d458
	void ClearSplinePoints();// 0x2f0d444
	void AddSplinePointLoc(int pPointIndex, out const Vector pInLocation);// 0x2f0d380

--------------------------------
Class: BaseActor.Actor.Object
	AvatarCommonBase* AvatarCommonBase;//[Offset: 0x6d0, Size: 0x8]
	uint64 serverID;//[Offset: 0x6e0, Size: 0x8]
	int EntityType;//[Offset: 0x6e8, Size: 0x4]
	int ResID;//[Offset: 0x6ec, Size: 0x4]
	Rotator XGetSocketRotator(FName SocketName);// 0x2e02c38
	Vector XGetSocketLocation(FName SocketName);// 0x2e02ba8
	bool XDoesSocketExist(FName SocketName);// 0x2e02b18
	void TurnHeadToMainChara();// 0x2e02b04
	void SetMaterialVectorParamValue(enum slotType, int Index, FString ParamName, out const LinearColor Value);// 0x2e029b8
	void SetMaterialScalarParamValue(enum slotType, int Index, FString ParamName, float Value);// 0x2e02878
	void SetAvatarRelativeRotation(out const FName InReason, int InPriority, out const Rotator InRelativeRotation);// 0x2e02760
	void SetAvatarRelativeLocation(out const FName InReason, int InPriority, out const Vector InRelativeLocation);// 0x2e02648
	void Reset();// 0x2e0262c
	void ReceiveResume();// 0x33e07d0
	void ReceiveOnRecycle();// 0x33e07d0
	void PrintMonsterInfo();// 0x2e02610
	void InitAvatarRelativeRotation(out const Rotator InRelativeRotation);// 0x2e02588
	void InitAvatarRelativeLocation(out const Vector InRelativeLocation);// 0x2e02500
	Rotator GetSocketRotator(FName SocketName);// 0x2e02470
	Vector GetSocketLocation(FName SocketName);// 0x2e023e0
	Vector GetLocalCompositionLocation();// 0x2e023a8
	enum GetHitBodyTypeByBoneName(out const FName InBoneName);// 0x2e0230c
	SceneComponent* GetDynamicComponent(FName SocketName);// 0x2e02288
	BaseAnimInstance* GetBaseAnimInstance();// 0x2e0224c
	MeshComponent* GetAvatarMeshComponent(int avatarSlotTypeIn);// 0x2e021c8
	SceneComponent* GetAvatarMasterBoneComp();// 0x2e02194
	AvatarCommonBase* GetAvatarComponent();// 0x2e02178
	bool DoesSocketExist(FName SocketName);// 0x2e020e8
	void ClearAvatarRelativeRotation(out const FName InReason);// 0x2e0205c
	void ClearAvatarRelativeLocation(out const FName InReason);// 0x2e01fd0
	void AttachComponentToAvatar(SceneComponent* child, FName SocketName);// 0x2e01f1c
	void AttachActorToAvatar(Actor* child, FName SocketName, enum AttachmentRule);// 0x2e01e2c
	int AddDynamicComponentToAvatarUseParentBound(SceneComponent* Component, FName SocketName);// 0x2e01d68
	int AddDynamicComponentToAvatar(SceneComponent* Component, FName SocketName);// 0x2e01ca4
	int AddDynamicActorToAvatar(Actor* Actor, FName SocketName);// 0x2e01be0

--------------------------------
Class: BP_NaviDecal1_C.NaviDecalActor2.BaseActor.Actor.Object

--------------------------------
Class: NaviDecalActor2.BaseActor.Actor.Object
	int MaxNumStaticMeshes;//[Offset: 0x814, Size: 0x4]
	SplineComponent* mSplineCom;//[Offset: 0x818, Size: 0x8]
	StaticMeshComponent*[] StaticMeshComponentArray;//[Offset: 0x820, Size: 0x10]
	void UpdateSpline();// 0x2f0c66c
	void SetSplinePointTanWithID(int pPointIndex, int pType, float TangentLength, bool pbFixZ);// 0x2f0c538
	void SetSplinePointTans(int pPointIndex, out const Vector pInTangent, out const Vector pOutTangent);// 0x2f0c420
	void SetSplinePointTan(int pPointIndex, out const Vector pInTangent);// 0x2f0c35c
	void SetSplinePointLoc(int pPointIndex, out const Vector pInLocation);// 0x2f0c298
	void SetMeshVisible(int pPointIndex, bool pbVisible);// 0x2f0c1dc
	void Init(int pMaxSplinePointNum, FString pMeshPath, float InBaseMeshLength, float InBaseMeshWidth);// 0x2f0c0a0
	float GetSplineSegmentLength(const int pIndex, const float pParam);// 0x2f0bfe0
	Vector GetSplinePointTanLocal(int pPointIndex);// 0x2f0bf58
	Vector GetSplinePointTan(int pPointIndex);// 0x2f0bed0
	Vector GetSplinePointLocLocal(int pPointIndex);// 0x2f0be48
	Vector GetSplinePointLoc(int pPointIndex);// 0x2f0bdc0
	void ClearSplinePoints();// 0x2f0bdac
	void Apply(float InitialOffset, out const int[] CountArray, out const float[] LengthArray, out const float[] WidthArray, out const float[] IntervalArray);// 0x2f0bba4
	void AddSplinePointLoc(int pPointIndex, out const Vector pInLocation);// 0x2f0bae0

--------------------------------
Class: BP_HighLevelNightLightForPlayer_C.Actor.Object
	void TakeOff();// 0x33e07d0
	void TakeOn();// 0x33e07d0
	void UserConstructionScript();// 0x33e07d0
	SpotLightComponent* SpotLight1;//[Offset: 0x340, Size: 0x8]
	SceneComponent* Scene;//[Offset: 0x348, Size: 0x8]
	MaterialInstanceDynamic* mat;//[Offset: 0x350, Size: 0x8]
	LinearColor Color;//[Offset: 0x358, Size: 0x10]
	float Intensity;//[Offset: 0x368, Size: 0x4]
	float Hardness;//[Offset: 0x36c, Size: 0x4]
	float Length;//[Offset: 0x370, Size: 0x4]

--------------------------------
Class: SpotLightComponent.PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float InnerConeAngle;//[Offset: 0x350, Size: 0x4]
	float OuterConeAngle;//[Offset: 0x354, Size: 0x4]
	float LightShaftConeAngle;//[Offset: 0x358, Size: 0x4]
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x47a4a5c
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x47a49e0

--------------------------------
Class: PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x338, Size: 0x1]
	float LightFalloffExponent;//[Offset: 0x33c, Size: 0x4]
	LinearColor CustomShadowColor;//[Offset: 0x340, Size: 0x10]
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x474bac4

--------------------------------
Class: LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	enum IntensityUnits;//[Offset: 0x331, Size: 0x1]
	float AttenuationRadius;//[Offset: 0x334, Size: 0x4]
	void SetAttenuationRadius(float NewRadius);// 0x46d8a48
	static float GetUnitsConversionFactor(enum SrcUnits, enum TargetUnits, float CosHalfConeAngle);// 0x46d8954

--------------------------------
Class: ShootTempBase_C.MainShootWeaponBase_C.GSTShootWeapon.GSTWeaponBase.Actor.Object

--------------------------------
Class: MainShootWeaponBase_C.GSTShootWeapon.GSTWeaponBase.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xe70, Size: 0x8]
	void CanDropMag(out bool CanDrop, int CallFunc_GetOwnerAvatarPredictedLODLevel_ReturnValue, Pawn* CallFunc_GetOwnerPawn_ReturnValue, bool CallFunc_LessEqual_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x33e07d0
	void GetPlayerState(enum InLayer, out enum OutState, Pawn* CallFunc_GetOwnerPawn_ReturnValue, PlayerCharacter* K2Node_DynamicCast_AsPlayer_Character, bool K2Node_DynamicCast_bSuccess, enum CallFunc_GetCurState_ReturnValue);// 0x33e07d0
	void ShowMagComp();// 0x33e07d0
	void HideDropMag(Pawn* CallFunc_GetOwnerPawn_ReturnValue, bool CallFunc_IsValid_ReturnValue);// 0x33e07d0
	void DropMagDown(bool CallFunc_CanDropMag_CanDrop, enum CallFunc_GetPlayerState_OutState, bool CallFunc_EqualEqual_ByteByte_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_K2_IsTimerActiveHandle_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, Pawn* CallFunc_GetOwnerPawn_ReturnValue, StaticMeshComponent* K2Node_DynamicCast_AsStatic_Mesh_Component, bool K2Node_DynamicCast_bSuccess, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, Vector CallFunc_K2_GetComponentLocation_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, bool CallFunc_IsValid_ReturnValue, Transform CallFunc_MakeTransform_ReturnValue, Actor* CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue, HitResult CallFunc_K2_SetActorTransform_SweepHitResult, bool CallFunc_K2_SetActorTransform_ReturnValue, DropDownWeaponMag_C* CallFunc_FinishSpawningActor_ReturnValue, byte CallFunc_GetCurReloadMethod_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue1, bool CallFunc_BooleanOR_ReturnValue);// 0x33e07d0
	void BP_PawnAttachMesh(out MeshComponent* PlayerMesh, Pawn* CallFunc_GetOwnerPawn_ReturnValue, AvatarComponent* CallFunc_GetComponentByClass_ReturnValue);// 0x33e07d0
	void BP_OnWeaponReloadEnd(float CallFunc_GetTimeSeconds_ReturnValue);// 0x33e07d0
	void BP_OnWeaponReloadStart(float ReloadTimeMagIn, float ReloadTimeMagOut, float CallFunc_GetReloadMagOutTime_ReturnValue, float CallFunc_GetReloadMagInTime_ReturnValue, float CallFunc_FMax_ReturnValue, float CallFunc_GetCurReloadTime_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate1, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue1);// 0x33e07d0
	void OnWeaponMagIn(bool CallFunc_K2_IsTimerActiveHandle_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue1, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_EqualEqual_NameName_ReturnValue, MeshComponent* CallFunc_GetDefaultAttachmentComponentByType_ReturnValue, FName CallFunc_GetAttachSocketName_ReturnValue, bool CallFunc_IsValid_ReturnValue, bool CallFunc_K2_AttachToComponent_ReturnValue, MeshComponent* CallFunc_GetDefaultAttachmentComponentByType_ReturnValue1);// 0x33e07d0
	void OnWeaponMagOut(bool CallFunc_CanDropMag_CanDrop, float CallFunc_GetReloadMagOutHideTime_ReturnValue, float CallFunc_GetReloadMagOutHideTime_ReturnValue1, enum CallFunc_GetPlayerState_OutState, bool CallFunc_Greater_FloatFloat_ReturnValue, bool CallFunc_EqualEqual_ByteByte_ReturnValue, bool CallFunc_BooleanAND_ReturnValue, bool CallFunc_BooleanOR_ReturnValue, float CallFunc_GetTimeSeconds_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue1, float CallFunc_Subtract_FloatFloat_ReturnValue, delegate K2Node_CreateDelegate_OutputDelegate, bool CallFunc_Greater_FloatFloat_ReturnValue2, TimerHandle CallFunc_K2_SetTimerDelegate_ReturnValue, bool CallFunc_BooleanAND_ReturnValue1, byte CallFunc_GetCurFreshWeaponState_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue, bool CallFunc_NotEqual_ByteByte_ReturnValue1, MeshComponent* CallFunc_BP_PawnAttachMesh_PlayerMesh, bool CallFunc_BooleanAND_ReturnValue2, bool CallFunc_K2_AttachToComponent_ReturnValue, MeshComponent* CallFunc_GetDefaultAttachmentComponentByType_ReturnValue, bool CallFunc_IsValid_ReturnValue, FName CallFunc_GetAttachSocketName_ReturnValue);// 0x33e07d0
	void BeginRegReloadEvent(delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate1, delegate K2Node_CreateDelegate_OutputDelegate2);// 0x33e07d0
	void UserConstructionScript();// 0x33e07d0
	void ReceiveBeginPlay();// 0x33e07d0
	void ReceiveEndPlay(byte EndPlayReason);// 0x33e07d0
	void ExecuteUbergraph_MainShootWeaponBase(int EntryPoint, byte K2Node_Event_EndPlayReason, bool CallFunc_IsValid_ReturnValue, float CallFunc_K2_GetTimerRemainingTimeHandle_ReturnValue, bool CallFunc_K2_IsValidTimerHandle_ReturnValue);// 0x33e07d0
	ShootEventProcessComponent* ShootEventProcess;//[Offset: 0xe78, Size: 0x8]
	AutoFireCrossHairComp* AutoFireCrossHairComp1;//[Offset: 0xe80, Size: 0x8]
	ShootFireComp* ShootFireComp;//[Offset: 0xe88, Size: 0x8]
	AidCrossHairComp* AidCrossHair;//[Offset: 0xe90, Size: 0x8]
	ScopeCrossHairComp* ScopeCrossHair;//[Offset: 0xe98, Size: 0x8]
	CrossHairComp* CrossHair;//[Offset: 0xea0, Size: 0x8]
	ShootWeaponEffectComp* ShootWeaponEffect;//[Offset: 0xea8, Size: 0x8]
	WeaponShootComp* WeaponShoot;//[Offset: 0xeb0, Size: 0x8]
	ShootWeaponEntityComp* ShootWeaponEntity;//[Offset: 0xeb8, Size: 0x8]
	MeshComponent* MagComp;//[Offset: 0xec0, Size: 0x8]
	FName MagCompAttachSocket;//[Offset: 0xec8, Size: 0x8]
	DropDownWeaponMag_C* DropMag;//[Offset: 0xed0, Size: 0x8]
	bool MagDropDownEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed8, Size: 0x1]
	Vector MagDropDownOffset;//[Offset: 0xedc, Size: 0xc]
	float MagDropDownDelay;//[Offset: 0xee8, Size: 0x4]
	TimerHandle DropDownMagTimerHandle;//[Offset: 0xef0, Size: 0x8]
	float MagDropDownHideDelay;//[Offset: 0xef8, Size: 0x4]
	float MagInShownDelay;//[Offset: 0xefc, Size: 0x4]
	float MagOutHideTime;//[Offset: 0xf00, Size: 0x4]
	float ReloadEndTime;//[Offset: 0xf04, Size: 0x4]
	TimerHandle MagOutTimerHandle;//[Offset: 0xf08, Size: 0x8]

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: DropDownWeaponMag_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x340, Size: 0x8]
	void SetPendingDestroyState(bool isPendingDestroy);// 0x33e07d0
	void ClearVelocity();// 0x33e07d0
	void SetVisible(bool Visible, Pawn* Owner, bool CallFunc_Not_PreBool_ReturnValue);// 0x33e07d0
	void SetSimulatePhysics(bool Enable, bool CallFunc_IsValid_ReturnValue);// 0x33e07d0
	void SetMagMesh(StaticMesh* Mesh, bool CallFunc_IsValid_ReturnValue, bool CallFunc_SetStaticMesh_ReturnValue);// 0x33e07d0
	void UserConstructionScript();// 0x33e07d0
	void WaitforDestroy(float LeftTime);// 0x33e07d0
	void ReceiveTick(float DeltaSeconds);// 0x33e07d0
	void ExecuteUbergraph_DropDownWeaponMag(int EntryPoint, float K2Node_CustomEvent_LeftTime, Rotator CallFunc_K2_GetComponentRotation_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_Less_FloatFloat_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, float K2Node_Event_DeltaSeconds, Vector CallFunc_GetComponentVelocity_ReturnValue, bool CallFunc_IsValid_ReturnValue, float CallFunc_VSize_ReturnValue, bool CallFunc_LessEqual_FloatFloat_ReturnValue);// 0x33e07d0
	StaticMeshComponent* Mag;//[Offset: 0x348, Size: 0x8]
	BoxComponent* Box;//[Offset: 0x350, Size: 0x8]
	bool PendingDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	bool CheckRollDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359, Size: 0x1]

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x5a8, Size: 0xc]
	float LineThickness;//[Offset: 0x5b4, Size: 0x4]
	void SetBoxExtent(Vector InBoxExtent, bool bUpdateOverlaps);// 0x45d4cb4
	Vector GetUnscaledBoxExtent();// 0x45d4c90
	Vector GetScaledBoxExtent();// 0x45d4c50

--------------------------------
Class: ShootFireComp.WeaponBaseComp.ActorComponent.Object
	void OnShootFire();// 0x2f4dbe0

--------------------------------
Class: ShootWeaponEffectComp.WeaponEffectComp.WeaponBaseComp.ActorComponent.Object
	class CameraShake* CameraShakeTemplate_NormalCameraMode;//[Offset: 0x260, Size: 0x8]
	class CameraShake* CameraShakeTemplate_NearCameraMode;//[Offset: 0x268, Size: 0x8]
	class CameraShake* CameraShakeTemplate_AimCameraMode;//[Offset: 0x270, Size: 0x8]
	class CameraShake* CameraShakeTemplate_ShoulderCameraMode;//[Offset: 0x278, Size: 0x8]
	float CameraOneShootRandomMinFactor;//[Offset: 0x280, Size: 0x4]
	float CameraOneShootRandomMaxFactor;//[Offset: 0x284, Size: 0x4]
	bool IsCameraOneShootShake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	AkAudioEvent* ShellDropSound;//[Offset: 0x290, Size: 0x8]
	AkAudioEvent* SilencerShootSound;//[Offset: 0x298, Size: 0x8]
	AkAudioEvent* LoopShootSound;//[Offset: 0x2a0, Size: 0x8]
	AkAudioEvent* StopLoopShootEvent;//[Offset: 0x2a8, Size: 0x8]
	bool IsUseLoopShootSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b0, Size: 0x1]
	ParticleSystem* MuzzleFX;//[Offset: 0x2b8, Size: 0x8]
	Vector LocalMuzzelFXScale;//[Offset: 0x2c0, Size: 0xc]
	ParticleSystem* ScopeMuzzleFX;//[Offset: 0x2d0, Size: 0x8]
	ParticleSystem* ScopeMuzzleFXContinue;//[Offset: 0x2d8, Size: 0x8]
	Vector ScopeMuzzelFXScale;//[Offset: 0x2e0, Size: 0xc]
	ParticleSystem* RemoteMuzzleFX;//[Offset: 0x2f0, Size: 0x8]
	Vector RemoteMuzzelFXScale;//[Offset: 0x2f8, Size: 0xc]
	FXDistancaScaleStruct RemoteMuzzleFXDistanceScale;//[Offset: 0x304, Size: 0x10]
	ParticleSystem* LocalSilencerMuzzleFX;//[Offset: 0x318, Size: 0x8]
	Vector LocalSilencerMuzzelFXScale;//[Offset: 0x320, Size: 0xc]
	ParticleSystem* ScopeSilencerMuzzleFX;//[Offset: 0x330, Size: 0x8]
	ParticleSystem* ScopeSilencerMuzzleFXContinue;//[Offset: 0x338, Size: 0x8]
	Vector ScopeSilencerMuzzelFXScale;//[Offset: 0x340, Size: 0xc]
	ParticleSystem* RemoteSilencerMuzzleFX;//[Offset: 0x350, Size: 0x8]
	Vector RemoteSilencerMuzzelFXScale;//[Offset: 0x358, Size: 0xc]
	FXDistancaScaleStruct RemoteSilencerMuzzleFXDistanceScale;//[Offset: 0x364, Size: 0x10]
	ParticleSystem* LocalFiringSuppressorMuzzleFX;//[Offset: 0x378, Size: 0x8]
	Vector LocalFiringSuppressorMuzzelFXScale;//[Offset: 0x380, Size: 0xc]
	ParticleSystem* ScopeFiringSuppressorMuzzleFX;//[Offset: 0x390, Size: 0x8]
	ParticleSystem* ScopeFiringSuppressorMuzzleFXContinue;//[Offset: 0x398, Size: 0x8]
	Vector ScopeFiringSuppressorMuzzelFXScale;//[Offset: 0x3a0, Size: 0xc]
	ParticleSystem* RemoteFiringSuppressorMuzzleFX;//[Offset: 0x3b0, Size: 0x8]
	Vector RemoteFiringSuppressorMuzzelFXScale;//[Offset: 0x3b8, Size: 0xc]
	FXDistancaScaleStruct RemoteSuppressorMuzzleFXDistanceScale;//[Offset: 0x3c4, Size: 0x10]
	ParticleSystem* LocalCompensatorMuzzleFX;//[Offset: 0x3d8, Size: 0x8]
	Vector LocalCompensatorMuzzelFXScale;//[Offset: 0x3e0, Size: 0xc]
	ParticleSystem* ScopeCompensatorMuzzleFX;//[Offset: 0x3f0, Size: 0x8]
	ParticleSystem* LowMuzzleFX;//[Offset: 0x3f8, Size: 0x8]
	ParticleSystem* ScopeCompensatorMuzzleFXContinue;//[Offset: 0x400, Size: 0x8]
	Vector ScopeCompensatorMuzzelFXScale;//[Offset: 0x408, Size: 0xc]
	ParticleSystem* RemoteCompensatorMuzzleFX;//[Offset: 0x418, Size: 0x8]
	Vector RemoteCompensatorMuzzelFXScale;//[Offset: 0x420, Size: 0xc]
	bool IsMuzzleFxLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x42c, Size: 0x1]
	float MuzzleFxFadeTime;//[Offset: 0x430, Size: 0x4]
	FName MuzzleFxFadeParam;//[Offset: 0x434, Size: 0x8]
	bool bIsActiveShellDropFXWhenShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x43c, Size: 0x1]
	ParticleSystem* ShellDropFX;//[Offset: 0x440, Size: 0x8]
	Vector ShellDropFXScale;//[Offset: 0x448, Size: 0xc]
	ParticleSystem* FPPShellDropFX;//[Offset: 0x458, Size: 0x8]
	Vector FPPShellDropFXScale;//[Offset: 0x460, Size: 0xc]
	CurveFloat* MuzzleLightIntensityCurve;//[Offset: 0x470, Size: 0x8]
	CurveLinearColor* MuzzleLightColorCurve;//[Offset: 0x478, Size: 0x8]
	float MuzzleLightAttenuationRadius;//[Offset: 0x480, Size: 0x4]
	float MuzzleLightMaxTime;//[Offset: 0x484, Size: 0x4]
	float MuzzleLightIntensityFactor;//[Offset: 0x488, Size: 0x4]
	FName ShootLightSocketName;//[Offset: 0x48c, Size: 0x8]
	GSTShootWeapon* OwnerShootWeapon;//[Offset: 0x498, Size: 0x8]
	ParticleSystemComponent* MuzzleFXComp;//[Offset: 0x4a0, Size: 0x8]
	Vector MuzzleFXOriginalScale;//[Offset: 0x4a8, Size: 0xc]
	float MuzzleFXPrevDistanceScaler;//[Offset: 0x4b4, Size: 0x4]
	ParticleSystemComponent* ShellDropFXComp;//[Offset: 0x4b8, Size: 0x8]
	ParticleSystemComponent* FPPShellDropFXComp;//[Offset: 0x4c0, Size: 0x8]
	PointLightComponent* PointLightComp;//[Offset: 0x4e0, Size: 0x8]
	void OnWeaponUnEquiped();// 0x2f4f884
	void OnWeaponStopFire();// 0x2f4f870
	void OnWeaponStartFire();// 0x2f4f85c
	void OnWeaponShoot();// 0x2f4f848
	void OnWeaponEuiped();// 0x2f4f834
	void ActiveLocalShellDropFX();// 0x2f4f820

--------------------------------
Class: WeaponEffectComp.WeaponBaseComp.ActorComponent.Object
	WeaponEffectAudioStruct[] SoundDataArray;//[Offset: 0xf8, Size: 0x10]
	WeaponEffectAudioStruct[] SoundDataArrayFemale;//[Offset: 0x108, Size: 0x10]
	<SoftObjectPath,ParticleSystem*> ParticleMap;//[Offset: 0x120, Size: 0x50]
	void HandleWeaponAction(byte Action);// 0x3007438

--------------------------------
Class: WeaponEffectAudioStruct
	byte Action;//[Offset: 0x0, Size: 0x1]
	AkAudioEvent* SoundEvent;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: BP_WEP_Chopper_C.BP_MeleeWeapon_Base_C.GSTMeleeWeapon.GSTWeaponBase.Actor.Object
	void UserConstructionScript();// 0x33e07d0
	WeaponBaseComp* WeaponBaseComp;//[Offset: 0x960, Size: 0x8]
	WeaponEntityComp* WeaponEntity;//[Offset: 0x968, Size: 0x8]

--------------------------------
Class: BP_MeleeWeapon_Base_C.GSTMeleeWeapon.GSTWeaponBase.Actor.Object
	void UserConstructionScript();// 0x33e07d0
	MeleeWeaponEntityComp* MeleeWeaponEntity;//[Offset: 0x950, Size: 0x8]
	MeleeWeaponEffectComp* MeleeWeaponEffectComp;//[Offset: 0x958, Size: 0x8]

--------------------------------
Class: MeleeWeaponEffectComp.WeaponEffectComp.WeaponBaseComp.ActorComponent.Object
	GSTMeleeWeapon* OwnerMeleeWeapon;//[Offset: 0x260, Size: 0x8]

--------------------------------
Class: DrawPathMap_C.FogActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x378, Size: 0x8]
	void UpdateTexture(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Vector2D[] CallFunc_GetNewExploreGrid_ReturnValue, Vector2D CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, Canvas* CallFunc_BeginDrawCanvasToRenderTarget_Canvas, Vector2D CallFunc_BeginDrawCanvasToRenderTarget_Size, DrawToRenderTargetContext CallFunc_BeginDrawCanvasToRenderTarget_Context);// 0x33e07d0
	void InitTexture(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, Vector CallFunc_GetTexSize_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Texture2D* CallFunc_CreateTextruePixel_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_FTrunc_ReturnValue1, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue1, TextureRenderTarget2D* CallFunc_CreateRenderTarget2D_ReturnValue);// 0x33e07d0
	void UserConstructionScript();// 0x33e07d0
	void InpActEvt_I_K2Node_InputKeyEvent(Key Key);// 0x33e07d0
	void InitPath();// 0x33e07d0
	void ReceiveBeginPlay();// 0x33e07d0
	void BlurPathMap();// 0x33e07d0
	void ExecuteUbergraph_DrawPathMap(int EntryPoint, Key K2Node_InputKeyEvent_Key, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, Texture2D* CallFunc_CreateTextruePixel_ReturnValue, Vector CallFunc_GetTexSize_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, int CallFunc_FTrunc_ReturnValue, int CallFunc_FTrunc_ReturnValue1, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue1, TextureRenderTarget2D* CallFunc_CreateRenderTarget2D_ReturnValue);// 0x33e07d0
	SceneComponent* DefaultSceneRoot;//[Offset: 0x380, Size: 0x8]
	TextureRenderTarget2D* PathRT;//[Offset: 0x388, Size: 0x8]
	Vector2D CurrentPosition;//[Offset: 0x390, Size: 0x8]
	TextureRenderTarget2D* BlurredRT;//[Offset: 0x398, Size: 0x8]
	Vector2D DrawSize;//[Offset: 0x3a0, Size: 0x8]
	float Count;//[Offset: 0x3a8, Size: 0x4]
	MaterialInstanceDynamic* BlurMat;//[Offset: 0x3b0, Size: 0x8]
	IntPoint NewVar;//[Offset: 0x3b8, Size: 0x8]
	bool bIsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1]
	MaterialInstanceDynamic* DynamicBlurMat;//[Offset: 0x3c8, Size: 0x8]

--------------------------------
Class: FogActor.Actor.Object
	MaterialInstanceDynamic* MaterialDynamic;//[Offset: 0x340, Size: 0x8]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x348, Size: 0x8]
	MaterialInterface* UpdateMaterial;//[Offset: 0x350, Size: 0x8]
	TextureRenderTarget2D* BlurRT;//[Offset: 0x358, Size: 0x8]

--------------------------------
Class: DrawToRenderTargetContext
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x0, Size: 0x8]

--------------------------------
Class: SimpleEntitiesRoot_C.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x340, Size: 0x8]

--------------------------------
Class: HumanPawnBP_C.HumanPawn.BasePawn.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xaa8, Size: 0x8]
	void UserConstructionScript();// 0x33e07d0
	void ReceiveBeginPlay();// 0x33e07d0
	void WeaponEquip(GSTWeaponBase* weapon);// 0x33e07d0
	void WeaponUnequip(GSTWeaponBase* weapon);// 0x33e07d0
	void ExecuteUbergraph_HumanPawnBP(int EntryPoint, GSTWeaponBase* K2Node_CustomEvent_Weapon, delegate K2Node_CreateDelegate_OutputDelegate, delegate K2Node_CreateDelegate_OutputDelegate1, GSTWeaponBase* K2Node_CustomEvent_Weapon1);// 0x33e07d0
	WeaponManager* WeaponManager;//[Offset: 0xab0, Size: 0x8]
	UAECharacterAnimListComponent* UAECharacterAnimList1;//[Offset: 0xab8, Size: 0x8]
	UAECharacterAnimListComponent* UAECharacterAnimList;//[Offset: 0xac0, Size: 0x8]

--------------------------------
Class: HumanPawn.BasePawn.Pawn.Actor.Object
	delegate OnCharacterStateChange;//[Offset: 0xa40, Size: 0x10]
	delegate OnBecomeViewTarget;//[Offset: 0xa50, Size: 0x10]
	delegate OnEndViewTarget;//[Offset: 0xa60, Size: 0x10]
	enum DefaultHoldGunState;//[Offset: 0xa70, Size: 0x1]
	float HoldGunBackToIdleTime;//[Offset: 0xa74, Size: 0x4]
	ToaaVaultComponent* VaultComp;//[Offset: 0xa78, Size: 0x8]
	void SetShootTargetRot(Vector ShootRot);// 0x2ec4ec4
	void SetShootTargetPos(Vector ShootPos);// 0x2ec4e44
	void SetShootTargetActor(Actor* ShootTarget);// 0x2ec4dc8
	bool Pickup(float InTargetLocZ);// 0x2ec4d40
	void OnRsp_WeaponHoldMode(enum HoldMode);// 0x2ec4cc4
	void OnHoldGunState(enum FromState, enum toState);// 0x2ec4c0c
	void OnEndViewTarget__DelegateSignature(PlayerController* PC);// 0x33e07d0
	void OnCharacterStateChange__DelegateSignature(int InLayer, int InOldState, int InNewState);// 0x33e07d0
	void OnBecomeViewTarget__DelegateSignature(PlayerController* PC);// 0x33e07d0
	ToaaVaultComponent* GetVaultComp();// 0x2ec4bf0
	Vector GetShootTargetRot();// 0x2ec4bcc
	Vector GetShootTargetPos();// 0x2ec4ba4
	Actor* GetShootTargetActor();// 0x2ec4b6c
	XPlayerMotionComponent* GetPlayerMotionComp();// 0x2ec4b30
	int GetCur8DirMoveIdx();// 0x2ec4afc
	byte GetCharacterPoseType();// 0x2ec4ac0
	bool EndPickup();// 0x2ec4a88

--------------------------------
Class: BasePawnBP_C.BasePawn.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa18, Size: 0x8]
	void UserConstructionScript();// 0x33e07d0
	void PlayFaceFx(FString AnimPath);// 0x33e07d0
	void BndEvt__Avatar_K2Node_ComponentBoundEvent_0_OnAllMeshLoadedDelegate__DelegateSignature();// 0x33e07d0
	void ExecuteUbergraph_BasePawnBP(int EntryPoint, FString K2Node_Event_AnimPath, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess);// 0x33e07d0
	FaceFXComponent* FaceFX;//[Offset: 0xa20, Size: 0x8]
	Zombie_01_AnimList_C* SkillAnimList;//[Offset: 0xa28, Size: 0x8]
	Zombie_01_AnimList_C* Zombie_01_AnimList;//[Offset: 0xa30, Size: 0x8]

--------------------------------
Class: FaceFXComponent.ActorComponent.Object
	delegate OnPlaybackAudioStart;//[Offset: 0xf0, Size: 0x10]
	delegate OnPlaybackStopped;//[Offset: 0x100, Size: 0x10]
	FaceFXEntry[] Entries;//[Offset: 0x110, Size: 0x10]
	void StopAll();// 0x141e5c0
	bool Stop(SkeletalMeshComponent* SkelMeshComp, const Object* Caller);// 0x141e4f8
	bool Setup(SkeletalMeshComponent* SkelMeshComp, ActorComponent* AudioComponent, const FaceFXActor* Asset, bool IsCompensateForForceFrontXAxis, bool IsAutoPlaySound, bool IsDisableMorphTargets, bool IsDisableMaterialParameters, const Object* Caller);// 0x141e298
	bool Resume(SkeletalMeshComponent* SkelMeshComp, const Object* Caller);// 0x141e1d0
	bool PlayById(FName Group, FName AnimName, SkeletalMeshComponent* SkelMeshComp, bool Loop, const Object* Caller);// 0x141e04c
	bool Play(FaceFXAnim* Animation, SkeletalMeshComponent* SkelMeshComp, bool Loop, const Object* Caller);// 0x141df04
	bool Pause(SkeletalMeshComponent* SkelMeshComp, const Object* Caller);// 0x141de3c
	void OnCharacterPlaybackStopped(FaceFXCharacter* Character, out const FaceFXAnimId AnimId);// 0x141dd58
	void OnCharacterAudioStart(FaceFXCharacter* Character, out const FaceFXAnimId AnimId, bool IsAudioStarted, ActorComponent* AudioComponentStartedOn);// 0x141dbe8
	bool JumpToById(float Position, bool Pause, FName Group, FName AnimName, bool LoopAnimation, SkeletalMeshComponent* SkelMeshComp, const Object* Caller);// 0x141d9e0
	bool JumpTo(float Position, bool Pause, FaceFXAnim* Animation, bool LoopAnimation, SkeletalMeshComponent* SkelMeshComp, const Object* Caller);// 0x141d810
	bool IsPlayingAnimation(out const FaceFXAnimId AnimId, SkeletalMeshComponent* SkelMeshComp, const Object* Caller);// 0x141d6dc
	bool IsPlaying(SkeletalMeshComponent* SkelMeshComp, const Object* Caller);// 0x141d614
	bool IsPaused(SkeletalMeshComponent* SkelMeshComp, const Object* Caller);// 0x141d54c

--------------------------------
Class: FaceFXEntry
	SkeletalMeshComponent* SkelMeshComp;//[Offset: 0x0, Size: 0x8]
	ActorComponent* AudioComp;//[Offset: 0x8, Size: 0x8]
	FaceFXActor* Asset;//[Offset: 0x10, Size: 0x28]
	FaceFXCharacter* Character;//[Offset: 0x38, Size: 0x8]
	bool bIsCompensateForForceFrontXAxis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	bool bIsAutoPlaySound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]
	bool bIsDisableMorphTargets;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 0x1]
	bool bIsDisableMaterialParameters;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x40, Size: 0x1]

--------------------------------
Class: FaceFXActor.FaceFXAsset.Object
	FaceFXActorData[] PlatformData;//[Offset: 0x28, Size: 0x10]
	FaceFXActorData ActorData;//[Offset: 0x38, Size: 0x30]
	FaceFXAnim*[] Animations;//[Offset: 0x68, Size: 0x10]
	enum BlendMode;//[Offset: 0x78, Size: 0x1]

--------------------------------
Class: FaceFXAsset.Object

--------------------------------
Class: FaceFXActorData
	byte[] ActorRawData;//[Offset: 0x0, Size: 0x10]
	byte[] BonesRawData;//[Offset: 0x10, Size: 0x10]
	FaceFXIdData[] Ids;//[Offset: 0x20, Size: 0x10]

--------------------------------
Class: FaceFXIdData
	uint64 ID;//[Offset: 0x0, Size: 0x8]
	FName Name;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FaceFXAnim.FaceFXAsset.Object
	FaceFXAnimData[] PlatformData;//[Offset: 0x28, Size: 0x10]
	FaceFXAnimData AnimData;//[Offset: 0x38, Size: 0x10]
	FaceFXAnimId ID;//[Offset: 0x48, Size: 0x10]
	Object* AudioAkEvent;//[Offset: 0x58, Size: 0x28]
	Object* AudioAkEventStop;//[Offset: 0x80, Size: 0x28]
	Object* AudioAkEventPause;//[Offset: 0xa8, Size: 0x28]
	Object* AudioAkEventResume;//[Offset: 0xd0, Size: 0x28]

--------------------------------
Class: FaceFXAnimData
	byte[] RawData;//[Offset: 0x0, Size: 0x10]

--------------------------------
Class: FaceFXAnimId
	FName Group;//[Offset: 0x0, Size: 0x8]
	FName Name;//[Offset: 0x8, Size: 0x8]

--------------------------------
Class: FaceFXCharacter.Object
	FaceFXActor* FaceFXActor;//[Offset: 0x90, Size: 0x8]
	FaceFXAnim* CurrentAnim;//[Offset: 0x158, Size: 0x8]

--------------------------------
Class: Zombie_01_AnimList_C.UAEMonsterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object

--------------------------------
Class: UAEMonsterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	MonsterMovementAnimData[] MovementAnimEditList;//[Offset: 0x260, Size: 0x10]
	MonsterDependAnimData[] DependAnimEditList;//[Offset: 0x270, Size: 0x10]
	float HitBreakTime;//[Offset: 0x280, Size: 0x4]
	float RemoteHitTime;//[Offset: 0x284, Size: 0x4]
	float NearHitTime;//[Offset: 0x288, Size: 0x4]
	UAEMonsterAnimListData* AnimListData;//[Offset: 0x290, Size: 0x28]
	UAEMonsterAnimListData* AnimListDataAsset;//[Offset: 0x2b8, Size: 0x8]
	<byte,int> ProbabilityAnimMap;//[Offset: 0x2d8, Size: 0x50]
	void OnAsyncLoadingFinished(AsyncLoadMonsterAnimParams LoadingParam);// 0x2fc20b8
	AnimationAsset* GetCharacterAnim(byte AnimType);// 0x2fc2034
	int GetAnimProbability(byte AnimTypeKey);// 0x2fc1fb0

--------------------------------
Class: MonsterMovementAnimData
	byte AnimType;//[Offset: 0x0, Size: 0x1]
	FString AnimTypeName;//[Offset: 0x8, Size: 0x10]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x18, Size: 0x28]

--------------------------------
Class: MonsterDependAnimData
	FString AnimTypeName;//[Offset: 0x0, Size: 0x10]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x10, Size: 0x28]

--------------------------------
Class: UAEMonsterAnimListData.UAEBaseAnimListData.DataAsset.Object
	MonsterMovementAnimData[] MovementAnimEditList;//[Offset: 0x40, Size: 0x10]
	MonsterDependAnimData[] DependAnimEditList;//[Offset: 0x50, Size: 0x10]
	MonsterAnimProbability[] AnimProbabilityList;//[Offset: 0x60, Size: 0x10]
	MonsterFurnitureInteractAnimData[] FurnitureInteractAnimList;//[Offset: 0x70, Size: 0x10]

--------------------------------
Class: MonsterAnimProbability
	byte AnimType;//[Offset: 0x0, Size: 0x1]
	int Probability;//[Offset: 0x4, Size: 0x4]

--------------------------------
Class: MonsterFurnitureInteractAnimData
	FString InteractName;//[Offset: 0x0, Size: 0x10]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x10, Size: 0x28]

--------------------------------
Class: AsyncLoadMonsterAnimParams

--------------------------------
Class: BaseActorBP_C.BaseActor.Actor.Object

--------------------------------
