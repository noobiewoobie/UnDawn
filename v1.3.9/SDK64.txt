Class: World.Object
	Level* PersistentLevel;//[Offset: 0x30, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x38, Size: 0x8]
	LineBatchComponent* LineBatcher;//[Offset: 0x40, Size: 0x8]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x48, Size: 0x8]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x50, Size: 0x8]
	GameNetworkManager* NetworkManager;//[Offset: 0x58, Size: 0x8]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x60, Size: 0x8]
	Object*[] ExtraReferencedObjects;//[Offset: 0x68, Size: 0x10]
	Object*[] PerModuleDataObjects;//[Offset: 0x78, Size: 0x10]
	LevelStreaming*[] StreamingLevels;//[Offset: 0x88, Size: 0x10]
	<LevelStreaming*> StreamingLevelsToConsider;//[Offset: 0x98, Size: 0x50]
	FString StreamingLevelsPrefix;//[Offset: 0xe8, Size: 0x10]
	Level* CurrentLevelPendingVisibility;//[Offset: 0xf8, Size: 0x8]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x100, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x108, Size: 0x8]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x110, Size: 0x8]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x118, Size: 0x8]
	NavigationSystemBase* NavigationSystem;//[Offset: 0x138, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x140, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x148, Size: 0x8]
	AISystemBase* AISystem;//[Offset: 0x150, Size: 0x8]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x158, Size: 0x8]
	Level*[] Levels;//[Offset: 0x160, Size: 0x10]
	LevelCollection[] LevelCollections;//[Offset: 0x170, Size: 0x10]
	Level* CurrentLevel;//[Offset: 0x188, Size: 0x8]
	GameInstance* OwningGameInstance;//[Offset: 0x190, Size: 0x8]
	MaterialParameterCollectionInstance*[] ParameterCollectionInstances;//[Offset: 0x198, Size: 0x10]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x1a8, Size: 0x8]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x1b0, Size: 0x8]
	WorldComposition* WorldComposition;//[Offset: 0x888, Size: 0x8]
	bool bAreConstraintsDirty;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x8da, Size: 0x1]
	WorldPSCPool PSCPool;//[Offset: 0x908, Size: 0x58]
	void HandleTimelineScrubbed();// 0x4f2530c
<----------Generated by SSpawner v1.0.2---------->


Class: Object
	void ExecuteUbergraph(int EntryPoint);// 0x35332fc
<----------Generated by SSpawner v1.0.2---------->


Class: Level.Object
	World* OwningWorld;//[Offset: 0xc0, Size: 0x8]
	Model* Model;//[Offset: 0xc8, Size: 0x8]
	ModelComponent*[] ModelComponents;//[Offset: 0xd0, Size: 0x10]
	LevelActorContainer* ActorCluster;//[Offset: 0xe0, Size: 0x8]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xe8, Size: 0x4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xec, Size: 0x4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xf0, Size: 0x8]
	NavigationObjectBase* NavListStart;//[Offset: 0xf8, Size: 0x8]
	NavigationObjectBase* NavListEnd;//[Offset: 0x100, Size: 0x8]
	NavigationDataChunk*[] NavDataChunks;//[Offset: 0x108, Size: 0x10]
	float LightmapTotalSize;//[Offset: 0x118, Size: 0x4]
	float ShadowmapTotalSize;//[Offset: 0x11c, Size: 0x4]
	Vector[] StaticNavigableGeometry;//[Offset: 0x120, Size: 0x10]
	Guid[] StreamingTextureGuids;//[Offset: 0x130, Size: 0x10]
	bool bIsLightingScenario;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1d8, Size: 0x1]
	Guid LevelBuildDataId;//[Offset: 0x1dc, Size: 0x10]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x1f0, Size: 0x8]
	IntVector LightBuildLevelOffset;//[Offset: 0x1f8, Size: 0xc]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x204, Size: 0x1]
	bool bStaticComponentsRegisteredInStreamingManager;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x204, Size: 0x1]
	bool bIsVisible;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x204, Size: 0x1]
	WorldSettings* WorldSettings;//[Offset: 0x250, Size: 0x8]
	AssetUserData*[] AssetUserData;//[Offset: 0x260, Size: 0x10]
	ReplicatedStaticActorDestructionInfo[] DestroyedReplicatedStaticActors;//[Offset: 0x280, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: Model.Object
<----------Generated by SSpawner v1.0.2---------->


Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x5e0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float MinDrawDistance;//[Offset: 0x280, Size: 0x4]
	float LDMaxDrawDistance;//[Offset: 0x284, Size: 0x4]
	float CachedMaxDrawDistance;//[Offset: 0x288, Size: 0x4]
	byte DepthPriorityGroup;//[Offset: 0x28c, Size: 0x1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x28d, Size: 0x1]
	byte IndirectLightingCacheQuality;//[Offset: 0x28e, Size: 0x1]
	enum LightmapType;//[Offset: 0x28f, Size: 0x1]
	byte DebugID;//[Offset: 0x290, Size: 0x1]
	byte bTreatAsBackgroundForOcclusion;//[Offset: 0x291, Size: 0x1]
	bool bNeverDistanceCull;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x292, Size: 0x1]
	bool bCulledAsHugePlane;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x292, Size: 0x1]
	bool bUseComplexOccCulling;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x292, Size: 0x1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x293, Size: 0x1]
	bool bGenerateOverlapEvents;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x293, Size: 0x1]
	bool bMultiBodyOverlap;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x293, Size: 0x1]
	bool bCheckAsyncSceneOnMove;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x293, Size: 0x1]
	bool bTraceComplexOnMove;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 0x1]
	bool bReturnMaterialOnMove;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x294, Size: 0x1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x294, Size: 0x1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x294, Size: 0x1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x294, Size: 0x1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x294, Size: 0x1]
	bool bVisibleInRealTimeSkyCaptures;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x294, Size: 0x1]
	bool bOnlyForTopHigh;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x294, Size: 0x1]
	bool bRenderInMainPass;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x295, Size: 0x1]
	bool bRenderInMono;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x295, Size: 0x1]
	bool bReceivesDecals;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x295, Size: 0x1]
	bool bOwnerNoSee;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x295, Size: 0x1]
	bool bOnlyOwnerSee;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x295, Size: 0x1]
	bool bDrawIdeaOutline;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x295, Size: 0x1]
	byte IdeaOutlineColor;//[Offset: 0x296, Size: 0x1]
	bool bOutlineNotBeOccluded;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x297, Size: 0x1]
	bool bDrawIdeaOcclusion;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x297, Size: 0x1]
	bool bTwoSidedLDROutline;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x297, Size: 0x1]
	bool bUseAsEarlyZ;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x297, Size: 0x1]
	bool bUseAsOccluder;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x297, Size: 0x1]
	bool bSelectable;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x297, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x297, Size: 0x1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x297, Size: 0x1]
	bool CastShadow;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 0x1]
	byte ShadowCtrl;//[Offset: 0x299, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x29a, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x29a, Size: 0x1]
	bool bCastDynamicShadow;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x29a, Size: 0x1]
	bool bCastStaticShadow;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x29a, Size: 0x1]
	bool bAutoCastShadow;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x29a, Size: 0x1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x29a, Size: 0x1]
	bool bSelfShadowOnly;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x29a, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x29a, Size: 0x1]
	bool bCastInsetShadow;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x29b, Size: 0x1]
	bool bCastCinematicShadow;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x29b, Size: 0x1]
	bool bCastHiddenShadow;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x29b, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x29b, Size: 0x1]
	bool bLightAsIfStatic;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x29b, Size: 0x1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x29b, Size: 0x1]
	bool bReceiveMobileCSMShadows;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x29b, Size: 0x1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x29b, Size: 0x1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x29c, Size: 0x1]
	bool bIgnoreRadialForce;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x29c, Size: 0x1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x29c, Size: 0x1]
	bool bReplicatePhysicsToAutonomousProxy;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x29c, Size: 0x1]
	bool AlwaysLoadOnClient;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x29c, Size: 0x1]
	bool AlwaysLoadOnServer;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x29c, Size: 0x1]
	bool bUseEditorCompositing;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x29c, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x29c, Size: 0x1]
	bool bRenderOverlookDepth;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x29d, Size: 0x1]
	bool bEnableReplaceMaterial;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x29d, Size: 0x1]
	bool bFullScreenTranslucency;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x29d, Size: 0x1]
	bool bNeverCullByFrustumAndOcclusion;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x29d, Size: 0x1]
	bool bAffectPrt;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x29d, Size: 0x1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x29e, Size: 0x1]
	byte CullingLayer;//[Offset: 0x29f, Size: 0x1]
	byte CanCharacterStepUpOn;//[Offset: 0x2a1, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x2a2, Size: 0x1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x2a3, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x2a8, Size: 0x4]
	float MinimumPixelValueFactor;//[Offset: 0x2ac, Size: 0x4]
	int TranslucencySortPriority;//[Offset: 0x2b0, Size: 0x4]
	int VisibilityId;//[Offset: 0x2b4, Size: 0x4]
	float LpvBiasMultiplier;//[Offset: 0x2bc, Size: 0x4]
	float BoundsScale;//[Offset: 0x2c8, Size: 0x4]
	float OCBoundsScale;//[Offset: 0x2cc, Size: 0x4]
	int OCBoundsExtent;//[Offset: 0x2d0, Size: 0x4]
	float LastSubmitTime;//[Offset: 0x2d4, Size: 0x4]
	float LastRenderTime;//[Offset: 0x2d8, Size: 0x4]
	float LastRenderTimeOnScreen;//[Offset: 0x2dc, Size: 0x4]
	BoundsAgencyVolume*[] BoundsAgencies;//[Offset: 0x2e0, Size: 0x10]
	Actor*[] MoveIgnoreActors;//[Offset: 0x300, Size: 0x10]
	PrimitiveComponent*[] MoveIgnoreComponents;//[Offset: 0x310, Size: 0x10]
	BodyInstance BodyInstance;//[Offset: 0x330, Size: 0x140]
	delegate OnComponentHit;//[Offset: 0x470, Size: 0x10]
	delegate OnComponentBeginOverlap;//[Offset: 0x480, Size: 0x10]
	delegate OnComponentEndOverlap;//[Offset: 0x490, Size: 0x10]
	delegate OnComponentWake;//[Offset: 0x4a0, Size: 0x10]
	delegate OnComponentSleep;//[Offset: 0x4b0, Size: 0x10]
	delegate OnBeginCursorOver;//[Offset: 0x4d0, Size: 0x10]
	delegate OnEndCursorOver;//[Offset: 0x4e0, Size: 0x10]
	delegate OnClicked;//[Offset: 0x4f0, Size: 0x10]
	delegate OnReleased;//[Offset: 0x500, Size: 0x10]
	delegate OnInputTouchBegin;//[Offset: 0x510, Size: 0x10]
	delegate OnInputTouchEnd;//[Offset: 0x520, Size: 0x10]
	delegate OnInputTouchEnter;//[Offset: 0x530, Size: 0x10]
	delegate OnInputTouchLeave;//[Offset: 0x540, Size: 0x10]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x568, Size: 0x8]
	PrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;//[Offset: 0x570, Size: 0x58]
	void WakeRigidBody(FName BoneName);// 0x4e9d014
	void WakeAllRigidBodies();// 0x4e9cff8
	void SetWalkableSlopeOverride(out const WalkableSlopeOverride NewOverride);// 0x4e9cf60
	void SetUseCCD(bool InUseCCD, FName BoneName);// 0x4e9ce90
	void SetTwoSidedLDROutline(bool bInTwoSided);// 0x4e9ce0c
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);// 0x4e9cd90
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);// 0x4e9cd0c
	void SetSimulatePhysics(bool bSimulate);// 0x4e9cc80
	void SetShadowCtrl(byte InShadowCtrl);// 0x4e9cc04
	void SetRenderOverlookDepth(bool bValue);// 0x4e9cb80
	void SetRenderInMono(bool bValue);// 0x4e9cafc
	void SetRenderInMainPass(bool bValue);// 0x4e9ca78
	void SetRenderCustomDepth(bool bValue);// 0x4e9c9f4
	void SetReceivesDecals(bool bNewReceivesDecals);// 0x4e9c970
	void SetPhysMaterialOverride(PhysicalMaterial* NewPhysMaterial);// 0x4e9c8ec
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x4e9c7e8
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x4e9c6d8
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, FName BoneName);// 0x4e9c5c8
	void SetPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent, FName BoneName);// 0x4e9c4bc
	void SetPhysicsAngularVelocityInRadians(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x4e9c3b0
	void SetPhysicsAngularVelocityInDegrees(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x4e9c290
	void SetPhysicsAngularVelocity(Vector NewAngVel, bool bAddToCurrent, FName BoneName);// 0x4e9c170
	void SetOwnerNoSee(bool bNewOwnerNoSee);// 0x4e9c0ec
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);// 0x4e9c068
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);// 0x4e9bfdc
	void SetNeverCullByFrustumAndOcclusion(bool bValue);// 0x4e9bf58
	void SetMaterialByName(FName MaterialSlotName, MaterialInterface* Material);// 0x4e9be9c
	void SetMaterial(int ElementIndex, MaterialInterface* Material);// 0x4e9bddc
	void SetMassScale(FName BoneName, float InMassScale);// 0x4e9bd1c
	void SetMassOverrideInKg(FName BoneName, float MassInKg, bool bOverrideMass);// 0x4e9bc18
	void SetLockedAxis(byte LockedAxis);// 0x4e9bb94
	void SetLinearDamping(float InDamping);// 0x4e9bb10
	void SetIdeaOutlineNotBeOccluded(bool bNotBeOccluded);// 0x4e9ba8c
	void SetIdeaOutlineColor(const byte InOutlineColor);// 0x4e9ba10
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);// 0x4e9b98c
	void SetFullScreenTranslucency(bool bValue);// 0x4e9b908
	void SetEnableReplaceMaterial(bool bValue);// 0x4e9b884
	void SetEnableGravity(bool bGravityEnabled);// 0x4e9b7f8
	void SetDrawIdeaOutline(bool bNewDrawOutline);// 0x4e9b774
	void SetDrawIdeaOcclusion(bool bNewDrawOcclusion);// 0x4e9b6f0
	void SetCustomDepthStencilWriteMask(enum WriteMaskBit);// 0x4e9b674
	void SetCustomDepthStencilValue(int Value);// 0x4e9b5f8
	void SetCullDistance(float NewCullDistance);// 0x4e9b57c
	void SetConstraintMode(byte ConstraintMode);// 0x4e9b4f8
	void SetCollisionResponseToChannel(byte Channel, byte NewResponse);// 0x4e9b438
	void SetCollisionResponseToAllChannels(byte NewResponse);// 0x4e9b3b4
	void SetCollisionProfileName(FName InCollisionProfileName);// 0x4e9b330
	void SetCollisionObjectType(byte Channel);// 0x4e9b2ac
	void SetCollisionEnabled(byte NewType);// 0x4e9b228
	void SetCenterOfMass(Vector CenterOfMassOffset, FName BoneName);// 0x4e9b170
	void SetCastShadow(bool NewCastShadow);// 0x4e9b0ec
	void SetBoundsScale(float NewBoundsScale);// 0x4e9b070
	void SetAngularDamping(float InDamping);// 0x4e9afec
	void SetAllUseCCD(bool InUseCCD);// 0x4e9af60
	void SetAllPhysicsLinearVelocity(Vector NewVel, bool bAddToCurrent);// 0x4e9ae98
	void SetAllPhysicsAngularVelocityInRadians(out const Vector NewAngVel, bool bAddToCurrent);// 0x4e9adb8
	void SetAllPhysicsAngularVelocityInDegrees(out const Vector NewAngVel, bool bAddToCurrent);// 0x4e9acb4
	void SetAllPhysicsAngularVelocity(out const Vector NewAngVel, bool bAddToCurrent);// 0x4e9abd4
	void SetAllMassScale(float InMassScale);// 0x4e9ab50
	void SetAffectPrt(bool bValue);// 0x4e9aacc
	Vector ScaleByMomentOfInertia(Vector InputVector, FName BoneName);// 0x4e9a9f8
	bool RemoveBoundsAgency(BoundsAgencyVolume* Agency);// 0x4e9a970
	void PutRigidBodyToSleep(FName BoneName);// 0x4e9a8f4
	bool K2_SphereTraceComponent(Vector TraceStart, Vector TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x4e9a5bc
	bool K2_SphereOverlapComponent(Vector InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x4e9a2c4
	bool K2_LineTraceComponent(Vector TraceStart, Vector TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x4e99fc8
	bool K2_IsQueryCollisionEnabled();// 0x4e99f80
	bool K2_IsPhysicsCollisionEnabled();// 0x4e99f38
	bool K2_IsCollisionEnabled();// 0x4e99ef4
	bool K2_BoxOverlapComponent(Vector InBoxCentre, const Box InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, out Vector HitLocation, out Vector HitNormal, out FName BoneName, out HitResult OutHit);// 0x4e99bc0
	bool IsOverlappingComponent(const PrimitiveComponent* OtherComp);// 0x4e99b38
	bool IsOverlappingActor(const Actor* Other);// 0x4e99ab0
	bool IsGravityEnabled();// 0x4e99a70
	bool IsAnyRigidBodyAwake();// 0x4e99a30
	void IgnoreComponentWhenMoving(PrimitiveComponent* Component, bool bShouldIgnore);// 0x4e99970
	void IgnoreActorWhenMoving(Actor* Actor, bool bShouldIgnore);// 0x4e998b0
	WalkableSlopeOverride GetWalkableSlopeOverride();// 0x4e99868
	Vector GetPhysicsLinearVelocityAtPoint(Vector Point, FName BoneName);// 0x4e9979c
	Vector GetPhysicsLinearVelocity(FName BoneName);// 0x4e99714
	Vector GetPhysicsAngularVelocityInRadians(FName BoneName);// 0x4e9968c
	Vector GetPhysicsAngularVelocityInDegrees(FName BoneName);// 0x4e995f0
	Vector GetPhysicsAngularVelocity(FName BoneName);// 0x4e99554
	void GetOverlappingComponents(out PrimitiveComponent*[] OutOverlappingComponents);// 0x4e994b8
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x4e993d4
	int GetNumMaterials();// 0x4e99398
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x4e992c0
	MaterialInterface* GetMaterial(int ElementIndex);// 0x4e99234
	float GetMassScale(FName BoneName);// 0x4e991a8
	float GetMass();// 0x4e9916c
	float GetLinearDamping();// 0x4e99130
	Vector GetInertiaTensor(FName BoneName);// 0x4e990a0
	bool GetGenerateOverlapEvents();// 0x4e9907c
	byte GetCollisionResponseToChannel(byte Channel);// 0x4e98ff0
	FName GetCollisionProfileName();// 0x4e98fbc
	byte GetCollisionObjectType();// 0x4e98f80
	byte GetCollisionEnabled();// 0x4e98f44
	float GetClosestPointOnCollision(out const Vector Point, out Vector OutPointOnBody, FName BoneName);// 0x4e98e18
	Vector GetCenterOfMass(FName BoneName);// 0x4e98d90
	float GetAngularDamping();// 0x4e98d54
	MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, MaterialInterface* SourceMaterial, FName OptionalName);// 0x4e98c4c
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, MaterialInterface* Parent);// 0x4e98b7c
	MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);// 0x4e98af0
	PrimitiveComponent*[] CopyArrayOfMoveIgnoreComponents();// 0x4e98a6c
	Actor*[] CopyArrayOfMoveIgnoreActors();// 0x4e989e8
	void ClearMoveIgnoreComponents();// 0x4e989bc
	void ClearMoveIgnoreActors();// 0x4e989a8
	bool CanCharacterStepUp(Pawn* Pawn);// 0x4e98918
	void AddTorqueInRadians(Vector Torque, FName BoneName, bool bAccelChange);// 0x4e98814
	void AddTorqueInDegrees(Vector Torque, FName BoneName, bool bAccelChange);// 0x4e986fc
	void AddTorque(Vector Torque, FName BoneName, bool bAccelChange);// 0x4e985f8
	void AddRadialImpulse(Vector Origin, float Radius, float Strength, byte Falloff, bool bVelChange);// 0x4e98480
	void AddRadialForce(Vector Origin, float Radius, float Strength, byte Falloff, bool bAccelChange);// 0x4e98308
	void AddImpulseAtLocation(Vector Impulse, Vector Location, FName BoneName);// 0x4e98208
	void AddImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x4e98104
	void AddForceAtLocationLocal(Vector Force, Vector Location, FName BoneName);// 0x4e98004
	void AddForceAtLocation(Vector Force, Vector Location, FName BoneName);// 0x4e97f04
	void AddForce(Vector Force, FName BoneName, bool bAccelChange);// 0x4e97e00
	bool AddBoundsAgency(BoundsAgencyVolume* Agency);// 0x4e97d78
	void AddAngularImpulseInRadians(Vector Impulse, FName BoneName, bool bVelChange);// 0x4e97c74
	void AddAngularImpulseInDegrees(Vector Impulse, FName BoneName, bool bVelChange);// 0x4e97b5c
	void AddAngularImpulse(Vector Impulse, FName BoneName, bool bVelChange);// 0x4e97a58
<----------Generated by SSpawner v1.0.2---------->


Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xf8, Size: 0x8]
	SceneComponent* AttachParent;//[Offset: 0x100, Size: 0x8]
	FName AttachSocketName;//[Offset: 0x108, Size: 0x8]
	SceneComponent*[] AttachChildren;//[Offset: 0x110, Size: 0x10]
	SceneComponent*[] ClientAttachedChildren;//[Offset: 0x120, Size: 0x10]
	Vector RelativeLocation;//[Offset: 0x15c, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x168, Size: 0xc]
	Vector RelativeScale3D;//[Offset: 0x174, Size: 0xc]
	Vector ComponentVelocity;//[Offset: 0x1e4, Size: 0xc]
	bool bComponentToWorldUpdated;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x1f0, Size: 0x1]
	bool bAbsoluteLocation;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x1f0, Size: 0x1]
	bool bAbsoluteRotation;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x1f0, Size: 0x1]
	bool bAbsoluteScale;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x1f0, Size: 0x1]
	bool bVisible;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x1f0, Size: 0x1]
	bool bHiddenInGame;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x1f0, Size: 0x1]
	bool bSupportInterpolationRenderMode;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x1f0, Size: 0x1]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x1f1, Size: 0x1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x1f1, Size: 0x1]
	bool bUseAttachParentBound;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x1f1, Size: 0x1]
	bool bAbsoluteTranslation;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x1f1, Size: 0x1]
	byte Mobility;//[Offset: 0x1f2, Size: 0x1]
	byte DetailMode;//[Offset: 0x1f3, Size: 0x1]
	byte LowDeviceDetailMode;//[Offset: 0x1f4, Size: 0x1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x240, Size: 0x10]
	void ToggleVisibility(bool bPropagateToChildren);// 0x4ec1b08
	bool SnapTo(SceneComponent* InParent, FName InSocketName);// 0x4ec1a40
	void SetWorldScale3D(Vector NewScale);// 0x4ec19c4
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);// 0x4ec18f8
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);// 0x4ec1874
	void SetRelativeScale3D(Vector NewScale3D);// 0x4ec17f0
	void SetMobility(byte NewMobility);// 0x4ec176c
	void SetInterpolationState(bool bState);// 0x4ec16e8
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);// 0x4ec161c
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);// 0x4ec1508
	void ResetRelativeTransform();// 0x4ec14f4
	void OnRep_Visibility(bool OldValue);// 0x4ec1470
	void OnRep_Transform();// 0x4ec145c
	void OnRep_AttachSocketName();// 0x4ec1448
	void OnRep_AttachParent();// 0x4ec1434
	void OnRep_AttachChildren();// 0x4ec1420
	void K2_SetWorldTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4ec1240
	void K2_SetWorldRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4ec10d0
	void K2_SetWorldLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4ec0f20
	void K2_SetWorldLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4ec0db0
	void K2_SetRelativeTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4ec0bd0
	void K2_SetRelativeRotation(Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4ec0a60
	void K2_SetRelativeLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4ec08b0
	void K2_SetRelativeLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4ec0740
	Transform K2_GetComponentToWorld();// 0x4ec06cc
	Vector K2_GetComponentScale();// 0x4ec0694
	Rotator K2_GetComponentRotation();// 0x4ec065c
	Vector K2_GetComponentLocation();// 0x4ec0624
	void K2_DetachFromComponent(enum LocationRule, enum RotationRule, enum ScaleRule, bool bCallModify);// 0x4ec04ec
	bool K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x4ec0328
	bool K2_AttachTo(SceneComponent* InParent, FName InSocketName, byte AttachType, bool bWeldSimulatedBodies);// 0x4ec01e0
	void K2_AddWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4ec0000
	void K2_AddWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4ebfe90
	void K2_AddWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4ebfd20
	void K2_AddRelativeRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4ebfbb0
	void K2_AddRelativeLocation(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4ebfa40
	void K2_AddLocalTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4ebf860
	void K2_AddLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4ebf6f0
	void K2_AddLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4ebf580
	bool IsVisible();// 0x4ebf540
	bool IsSimulatingPhysics(FName BoneName);// 0x4ebf4b0
	bool IsAnySimulatingPhysics();// 0x4ebf470
	Vector GetUpVector();// 0x4ebf438
	Transform GetSocketTransform(FName InSocketName, byte TransformSpace);// 0x4ebf330
	Rotator GetSocketRotation(FName InSocketName);// 0x4ebf2a0
	Quat GetSocketQuaternion(FName InSocketName);// 0x4ebf208
	Vector GetSocketLocation(FName InSocketName);// 0x4ebf178
	bool GetShouldUpdatePhysicsVolume();// 0x4ebf158
	Vector GetRightVector();// 0x4ebf120
	Transform GetRelativeTransform();// 0x4ebf0ac
	PhysicsVolume* GetPhysicsVolume();// 0x4ebf078
	void GetParentComponents(out SceneComponent*[] Parents);// 0x4ebefdc
	int GetNumChildrenComponents();// 0x4ebefa8
	Vector GetForwardVector();// 0x4ebef70
	Vector GetComponentVelocity();// 0x4ebef30
	void GetChildrenComponents(bool bIncludeAllDescendants, out SceneComponent*[] Children);// 0x4ebee48
	SceneComponent* GetChildComponent(int ChildIndex);// 0x4ebedc4
	FName GetAttachSocketName();// 0x4ebeda8
	SceneComponent* GetAttachParent();// 0x4ebed8c
	FName[] GetAllSocketNames();// 0x4ebed08
	bool DoesSocketExist(FName InSocketName);// 0x4ebec78
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);// 0x4ebeba8
<----------Generated by SSpawner v1.0.2---------->


Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x30, Size: 0x58]
	FName[] ComponentTags;//[Offset: 0x88, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x98, Size: 0x10]
	bool bReplicates;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xa8, Size: 0x1]
	bool bNetAddressable;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0xa8, Size: 0x1]
	bool bAutoActivate;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0xa9, Size: 0x1]
	bool bIsActive;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xaa, Size: 0x1]
	bool bEditableWhenInherited;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xaa, Size: 0x1]
	bool bCanEverAffectNavigation;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xaa, Size: 0x1]
	bool bIsEditorOnly;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0xaa, Size: 0x1]
	enum CreationMethod;//[Offset: 0xac, Size: 0x1]
	SimpleMemberReference[] UCSModifiedProperties;//[Offset: 0xb0, Size: 0x10]
	delegate OnComponentActivated;//[Offset: 0xc0, Size: 0x10]
	delegate OnComponentDeactivated;//[Offset: 0xd0, Size: 0x10]
	void ToggleActive();// 0x4c8d3dc
	void SetTickGroup(byte NewTickGroup);// 0x4c8d360
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x4c8d2dc
	void SetIsReplicated(bool ShouldReplicate);// 0x4c8d258
	void SetComponentTickInterval(float TickInterval);// 0x4c8d1dc
	void SetComponentTickEnabled(bool bEnabled);// 0x4c8d150
	void SetAutoActivate(bool bNewAutoActivate);// 0x4c8d0c4
	void SetActive(bool bNewActive, bool bReset);// 0x4c8cff4
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x4c8cf70
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x4c8ceec
	void ReceiveTick(float DeltaSeconds);// 0x35332fc
	void ReceiveEndPlay(byte EndPlayReason);// 0x35332fc
	void ReceiveBeginPlay();// 0x35332fc
	void OnRep_IsActive();// 0x4c8ced0
	void K2_DestroyComponent(Object* Object);// 0x4c8ce54
	bool IsComponentTickEnabled();// 0x4c8ce1c
	bool IsBeingDestroyed();// 0x4c8cdfc
	bool IsActive();// 0x4c8cdbc
	Actor* GetOwner();// 0x4c8cda0
	float GetComponentTickInterval();// 0x4c8cd6c
	void Deactivate();// 0x4c8cd50
	bool ComponentHasTag(FName Tag);// 0x4c8ccc8
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x4c8cc44
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x4c8cbc0
	void Activate(bool bReset);// 0x4c8cb34
<----------Generated by SSpawner v1.0.2---------->


Class: ActorComponentTickFunction.TickFunction
<----------Generated by SSpawner v1.0.2---------->


Class: TickFunction
	byte TickGroup;//[Offset: 0x8, Size: 0x1]
	byte EndTickGroup;//[Offset: 0x9, Size: 0x1]
	bool bTickEvenWhenPaused;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bCanEverTick;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bStartWithTickEnabled;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	float TickInterval;//[Offset: 0x40, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: LightingChannels
	bool bChannel0;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bChannel1;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bChannel2;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x378, Size: 0x4]
	int Priority;//[Offset: 0x37c, Size: 0x4]
	float FluidFriction;//[Offset: 0x380, Size: 0x4]
	bool bWaterVolume;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x384, Size: 0x1]
	bool bPhysicsOnContact;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x384, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: Volume.Brush.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x340, Size: 0x1]
	Color BrushColor;//[Offset: 0x344, Size: 0x4]
	int PolyFlags;//[Offset: 0x348, Size: 0x4]
	bool bColored;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x34c, Size: 0x1]
	bool bSolidWhenSelected;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x34c, Size: 0x1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x34c, Size: 0x1]
	bool bNotForClientOrServer;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x34c, Size: 0x1]
	Model* Brush;//[Offset: 0x350, Size: 0x8]
	BrushComponent* BrushComponent;//[Offset: 0x358, Size: 0x8]
	bool bInManipulation;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x360, Size: 0x1]
	GeomSelection[] SavedSelections;//[Offset: 0x368, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x28, Size: 0x58]
	bool bHidden;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bNetTemporary;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
	bool bNetStartup;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x80, Size: 0x1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x80, Size: 0x1]
	bool bAlwaysRelevant;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x80, Size: 0x1]
	bool bReplicateMovement;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x80, Size: 0x1]
	bool bTearOff;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x80, Size: 0x1]
	bool bExchangedRoles;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x80, Size: 0x1]
	bool bNetLoadOnClient;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x81, Size: 0x1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x81, Size: 0x1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x81, Size: 0x1]
	bool bReplayRewindable;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x81, Size: 0x1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x81, Size: 0x1]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x81, Size: 0x1]
	bool bBlockInput;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x81, Size: 0x1]
	bool bCanBeDamaged;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x81, Size: 0x1]
	bool bCollideWhenPlacing;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x82, Size: 0x1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x82, Size: 0x1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x82, Size: 0x1]
	bool bIgnoresOriginShifting;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x82, Size: 0x1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x82, Size: 0x1]
	bool bIsEditorOnlyActor;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x82, Size: 0x1]
	bool bActorSeamlessTraveled;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x82, Size: 0x1]
	bool bReplicates;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x82, Size: 0x1]
	bool bIsLevelBoundsRelevant;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x83, Size: 0x1]
	bool bCanBeInCluster;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x83, Size: 0x1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x83, Size: 0x1]
	bool bActorEnableCollision;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x84, Size: 0x1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x84, Size: 0x1]
	byte RemoteRole;//[Offset: 0x85, Size: 0x1]
	RepMovement ReplicatedMovement;//[Offset: 0x88, Size: 0x34]
	float InitialLifeSpan;//[Offset: 0xbc, Size: 0x4]
	float CustomTimeDilation;//[Offset: 0xc0, Size: 0x4]
	RepAttachment AttachmentReplication;//[Offset: 0xc8, Size: 0x40]
	Actor* Owner;//[Offset: 0x108, Size: 0x8]
	FName NetDriverName;//[Offset: 0x110, Size: 0x8]
	byte Role;//[Offset: 0x118, Size: 0x1]
	byte NetDormancy;//[Offset: 0x119, Size: 0x1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x11a, Size: 0x1]
	byte AutoReceiveInput;//[Offset: 0x11b, Size: 0x1]
	int InputPriority;//[Offset: 0x11c, Size: 0x4]
	InputComponent* InputComponent;//[Offset: 0x120, Size: 0x8]
	float NetCullDistanceSquared;//[Offset: 0x128, Size: 0x4]
	int NetTag;//[Offset: 0x12c, Size: 0x4]
	float NetUpdateFrequency;//[Offset: 0x130, Size: 0x4]
	float MinNetUpdateFrequency;//[Offset: 0x134, Size: 0x4]
	float NetPriority;//[Offset: 0x138, Size: 0x4]
	Pawn* Instigator;//[Offset: 0x140, Size: 0x8]
	Actor*[] Children;//[Offset: 0x148, Size: 0x10]
	SceneComponent* RootComponent;//[Offset: 0x158, Size: 0x8]
	MatineeActor*[] ControllingMatineeActors;//[Offset: 0x160, Size: 0x10]
	FName[] Layers;//[Offset: 0x178, Size: 0x10]
	ChildActorComponent* ParentComponent;//[Offset: 0x188, Size: 0x8]
	FName[] Tags;//[Offset: 0x190, Size: 0x10]
	delegate OnTakeAnyDamage;//[Offset: 0x1a0, Size: 0x10]
	delegate OnTakePointDamage;//[Offset: 0x1b0, Size: 0x10]
	delegate OnTakeRadialDamage;//[Offset: 0x1c0, Size: 0x10]
	delegate OnActorBeginOverlap;//[Offset: 0x1d0, Size: 0x10]
	delegate OnActorEndOverlap;//[Offset: 0x1e0, Size: 0x10]
	delegate OnBeginCursorOver;//[Offset: 0x1f0, Size: 0x10]
	delegate OnEndCursorOver;//[Offset: 0x200, Size: 0x10]
	delegate OnClicked;//[Offset: 0x210, Size: 0x10]
	delegate OnReleased;//[Offset: 0x220, Size: 0x10]
	delegate OnInputTouchBegin;//[Offset: 0x230, Size: 0x10]
	delegate OnInputTouchEnd;//[Offset: 0x240, Size: 0x10]
	delegate OnInputTouchEnter;//[Offset: 0x250, Size: 0x10]
	delegate OnInputTouchLeave;//[Offset: 0x260, Size: 0x10]
	delegate OnActorHit;//[Offset: 0x270, Size: 0x10]
	delegate OnDestroyed;//[Offset: 0x290, Size: 0x10]
	delegate OnEndPlay;//[Offset: 0x2a0, Size: 0x10]
	ActorComponent*[] InstanceComponents;//[Offset: 0x310, Size: 0x10]
	ActorComponent*[] BlueprintCreatedComponents;//[Offset: 0x320, Size: 0x10]
	bool WasRecentlyRendered(float Tolerance);// 0x4c860f8
	void UserConstructionScript();// 0x35332fc
	void TearOff();// 0x4c860dc
	void SnapRootComponentTo(Actor* InParentActor, FName InSocketName);// 0x4c86028
	void SetTickGroup(byte NewTickGroup);// 0x4c85fac
	void SetTickableWhenPaused(bool bTickableWhenPaused);// 0x4c85f28
	void SetReplicates(bool bInReplicates);// 0x4c85ea4
	void SetReplicateMovement(bool bInReplicateMovement);// 0x4c85e18
	void SetOwner(Actor* NewOwner);// 0x4c85d94
	void SetNetDormancy(byte NewDormancy);// 0x4c85d18
	void SetLifeSpan(float InLifespan);// 0x4c85c94
	void SetActorTickInterval(float TickInterval);// 0x4c85c18
	void SetActorTickEnabled(bool bEnabled);// 0x4c85b94
	void SetActorScale3D(Vector NewScale3D);// 0x4c85b18
	void SetActorRelativeScale3D(Vector NewRelativeScale);// 0x4c85a9c
	void SetActorHiddenInGame(bool bNewHidden);// 0x4c85a10
	void SetActorEnableCollision(bool bNewActorEnableCollision);// 0x4c8598c
	void RemoveTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x4c85908
	void RemoveTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x4c85884
	void ReceiveTick(float DeltaSeconds);// 0x35332fc
	void ReceiveRadialDamage(float DamageReceived, const DamageType* DamageType, Vector Origin, out const HitResult HitInfo, Controller* InstigatedBy, Actor* DamageCauser);// 0x35332fc
	void ReceivePointDamage(float Damage, const DamageType* DamageType, Vector HitLocation, Vector HitNormal, PrimitiveComponent* HitComponent, FName BoneName, Vector ShotFromDirection, Controller* InstigatedBy, Actor* DamageCauser, out const HitResult HitInfo);// 0x35332fc
	void ReceiveHit(PrimitiveComponent* MyComp, Actor* Other, PrimitiveComponent* OtherComp, bool bSelfMoved, Vector HitLocation, Vector HitNormal, Vector NormalImpulse, out const HitResult Hit);// 0x35332fc
	void ReceiveEndPlay(byte EndPlayReason);// 0x35332fc
	void ReceiveDestroyed();// 0x35332fc
	void ReceiveBeginPlay();// 0x35332fc
	void ReceiveAnyDamage(float Damage, const DamageType* DamageType, Controller* InstigatedBy, Actor* DamageCauser);// 0x35332fc
	void ReceiveActorOnReleased(Key ButtonReleased);// 0x35332fc
	void ReceiveActorOnInputTouchLeave(const byte FingerIndex);// 0x35332fc
	void ReceiveActorOnInputTouchEnter(const byte FingerIndex);// 0x35332fc
	void ReceiveActorOnInputTouchEnd(const byte FingerIndex);// 0x35332fc
	void ReceiveActorOnInputTouchBegin(const byte FingerIndex);// 0x35332fc
	void ReceiveActorOnClicked(Key ButtonPressed);// 0x35332fc
	void ReceiveActorEndOverlap(Actor* OtherActor);// 0x35332fc
	void ReceiveActorEndCursorOver();// 0x35332fc
	void ReceiveActorBeginOverlap(Actor* OtherActor);// 0x35332fc
	void ReceiveActorBeginCursorOver();// 0x35332fc
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);// 0x4c85778
	void OnRep_ReplicateMovement();// 0x4c8575c
	void OnRep_ReplicatedMovement();// 0x4c85740
	void OnRep_Owner();// 0x4c85724
	void OnRep_Instigator();// 0x4c85708
	void OnRep_AttachmentReplication();// 0x4c856ec
	void MakeNoise(float Loudness, Pawn* NoiseInstigator, Vector NoiseLocation, float MaxRange, FName Tag);// 0x4c8557c
	MaterialInstanceDynamic* MakeMIDForMaterial(MaterialInterface* Parent);// 0x4c854f8
	bool K2_TeleportTo(Vector DestLocation, Rotator DestRotation);// 0x4c85428
	bool K2_SetActorTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c85234
	bool K2_SetActorRotation(Rotator NewRotation, bool bTeleportPhysics);// 0x4c85160
	void K2_SetActorRelativeTransform(out const Transform NewRelativeTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c84f80
	void K2_SetActorRelativeRotation(Rotator NewRelativeRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c84e10
	void K2_SetActorRelativeLocation(Vector NewRelativeLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c84ca0
	bool K2_SetActorLocationAndRotation(Vector NewLocation, Rotator NewRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c84adc
	bool K2_SetActorLocation(Vector NewLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c84958
	void K2_OnReset();// 0x35332fc
	void K2_OnEndViewTarget(PlayerController* PC);// 0x35332fc
	void K2_OnBecomeViewTarget(PlayerController* PC);// 0x35332fc
	SceneComponent* K2_GetRootComponent();// 0x4c8493c
	Rotator K2_GetActorRotation();// 0x4c8483c
	Vector K2_GetActorLocation();// 0x4c847e4
	void K2_DetachFromActor(enum LocationRule, enum RotationRule, enum ScaleRule);// 0x4c846f0
	void K2_DestroyComponent(ActorComponent* Component);// 0x4c84674
	void K2_DestroyActor();// 0x4c84658
	void K2_AttachToComponent(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x4c844ac
	void K2_AttachToActor(Actor* ParentActor, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule, bool bWeldSimulatedBodies);// 0x4c84300
	void K2_AttachRootComponentToActor(Actor* InParentActor, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x4c841cc
	void K2_AttachRootComponentTo(SceneComponent* InParent, FName InSocketName, byte AttachLocationType, bool bWeldSimulatedBodies);// 0x4c84098
	void K2_AddActorWorldTransform(out const Transform DeltaTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c83eb8
	void K2_AddActorWorldRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c83d48
	void K2_AddActorWorldOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c83bd8
	void K2_AddActorLocalTransform(out const Transform NewTransform, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c839f8
	void K2_AddActorLocalRotation(Rotator DeltaRotation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c83888
	void K2_AddActorLocalOffset(Vector DeltaLocation, bool bSweep, out HitResult SweepHitResult, bool bTeleport);// 0x4c83718
	bool IsOverlappingActor(const Actor* Other);// 0x4c83690
	bool IsChildActor();// 0x4c83658
	bool IsActorTickEnabled();// 0x4c83620
	bool IsActorBeingDestroyed();// 0x4c83600
	bool HasAuthority();// 0x4c835dc
	float GetVerticalDistanceTo(const Actor* OtherActor);// 0x4c83558
	Vector GetVelocity();// 0x4c83518
	Transform GetTransform();// 0x4c834a0
	bool GetTickableWhenPaused();// 0x4c83468
	float GetSquaredDistanceTo(const Actor* OtherActor);// 0x4c833e4
	byte GetRemoteRole();// 0x4c833c8
	ChildActorComponent* GetParentComponent();// 0x4c83394
	Actor* GetParentActor();// 0x4c83360
	Actor* GetOwner();// 0x4c83344
	void GetOverlappingComponents(out PrimitiveComponent*[] OverlappingComponents);// 0x4c832a8
	void GetOverlappingActors(out Actor*[] OverlappingActors, class Actor ClassFilter);// 0x4c831c4
	byte GetLocalRole();// 0x4c831a8
	float GetLifeSpan();// 0x4c8316c
	Controller* GetInstigatorController();// 0x4c83138
	Pawn* GetInstigator();// 0x4c83104
	Vector GetInputVectorAxisValue(const Key InputAxisKey);// 0x4c82f98
	float GetInputAxisValue(const FName InputAxisName);// 0x4c82f14
	float GetInputAxisKeyValue(const Key InputAxisKey);// 0x4c82dac
	float GetHorizontalDotProductTo(const Actor* OtherActor);// 0x4c82d28
	float GetHorizontalDistanceTo(const Actor* OtherActor);// 0x4c82ca4
	float GetGameTimeSinceCreation();// 0x4c82c70
	float GetDotProductTo(const Actor* OtherActor);// 0x4c82bec
	float GetDistanceTo(const Actor* OtherActor);// 0x4c82b68
	ActorComponent*[] GetComponentsByTag(class ActorComponent ComponentClass, FName Tag);// 0x4c82a58
	ActorComponent*[] GetComponentsByClass(class ActorComponent ComponentClass);// 0x4c82988
	ActorComponent* GetComponentByClass(class ActorComponent ComponentClass);// 0x4c82904
	FName GetAttachParentSocketName();// 0x4c828d0
	Actor* GetAttachParentActor();// 0x4c8289c
	void GetAttachedActors(out Actor*[] OutActors);// 0x4c82800
	void GetAllChildActors(out Actor*[] ChildActors, bool bIncludeDescendants);// 0x4c82714
	Vector GetActorUpVector();// 0x4c826c0
	float GetActorTimeDilation();// 0x4c8268c
	float GetActorTickInterval();// 0x4c82658
	Vector GetActorScale3D();// 0x4c82620
	Vector GetActorRightVector();// 0x4c825cc
	Vector GetActorRelativeScale3D();// 0x4c82594
	Vector GetActorForwardVector();// 0x4c82540
	void GetActorEyesViewPoint(out Vector OutLocation, out Rotator OutRotation);// 0x4c8245c
	bool GetActorEnableCollision();// 0x4c8243c
	void GetActorBounds(bool bOnlyCollidingComponents, out Vector Origin, out Vector BoxExtent);// 0x4c8231c
	void ForceNetUpdate();// 0x4c82300
	void FlushNetDormancy();// 0x4c822ec
	void EnableInput(PlayerController* PlayerController);// 0x4c82268
	void DisableInput(PlayerController* PlayerController);// 0x4c821e4
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);// 0x4c82160
	void AddTickPrerequisiteComponent(ActorComponent* PrerequisiteComponent);// 0x4c820dc
	void AddTickPrerequisiteActor(Actor* PrerequisiteActor);// 0x4c82058
	ActorComponent* AddComponent(FName TemplateName, bool bManualAttachment, out const Transform RelativeTransform, const Object* ComponentTemplateContext);// 0x4c81eac
	bool ActorHasTag(FName Tag);// 0x4c81e24
<----------Generated by SSpawner v1.0.2---------->


Class: Color
	byte B;//[Offset: 0x0, Size: 0x1]
	byte G;//[Offset: 0x1, Size: 0x1]
	byte R;//[Offset: 0x2, Size: 0x1]
	byte A;//[Offset: 0x3, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ActorTickFunction.TickFunction
<----------Generated by SSpawner v1.0.2---------->


Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0, Size: 0xc]
	Vector AngularVelocity;//[Offset: 0xc, Size: 0xc]
	Vector Location;//[Offset: 0x18, Size: 0xc]
	Rotator Rotation;//[Offset: 0x24, Size: 0xc]
	bool bSimulatedPhysicSleep;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bRepPhysics;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	enum LocationQuantizationLevel;//[Offset: 0x31, Size: 0x1]
	enum VelocityQuantizationLevel;//[Offset: 0x32, Size: 0x1]
	enum RotationQuantizationLevel;//[Offset: 0x33, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: Vector
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: Rotator
	float Pitch;//[Offset: 0x0, Size: 0x4]
	float Yaw;//[Offset: 0x4, Size: 0x4]
	float Roll;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0, Size: 0x8]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x8, Size: 0xc]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x14, Size: 0xc]
	Rotator RotationOffset;//[Offset: 0x20, Size: 0xc]
	FName AttachSocket;//[Offset: 0x2c, Size: 0x8]
	SceneComponent* AttachComponent;//[Offset: 0x38, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: Vector_NetQuantize100.Vector
<----------Generated by SSpawner v1.0.2---------->


Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x5c8, Size: 0x8]
	BodySetup* BrushBodySetup;//[Offset: 0x5d0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x28, Size: 0x58]
	FName BoneName;//[Offset: 0x80, Size: 0x8]
	byte PhysicsType;//[Offset: 0x88, Size: 0x1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x89, Size: 0x1]
	bool bConsiderForBounds;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x89, Size: 0x1]
	bool bMeshCollideAll;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x89, Size: 0x1]
	bool bDoubleSidedGeometry;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x89, Size: 0x1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x89, Size: 0x1]
	bool bSharedCookedData;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x89, Size: 0x1]
	bool bGenerateMirroredCollision;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x89, Size: 0x1]
	byte CollisionReponse;//[Offset: 0x8b, Size: 0x1]
	byte CollisionTraceFlag;//[Offset: 0x8c, Size: 0x1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x90, Size: 0x8]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x98, Size: 0x10]
	BodyInstance DefaultInstance;//[Offset: 0x110, Size: 0x140]
	Vector BuildScale3D;//[Offset: 0x264, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: KAggregateGeom
	KSphereElem[] SphereElems;//[Offset: 0x0, Size: 0x10]
	KBoxElem[] BoxElems;//[Offset: 0x10, Size: 0x10]
	KSphylElem[] SphylElems;//[Offset: 0x20, Size: 0x10]
	KConvexElem[] ConvexElems;//[Offset: 0x30, Size: 0x10]
	KTaperedCapsuleElem[] TaperedCapsuleElems;//[Offset: 0x40, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: KSphereElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	float Radius;//[Offset: 0x3c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: KShapeElem
	float RestOffset;//[Offset: 0x8, Size: 0x4]
	FName Name;//[Offset: 0xc, Size: 0x8]
	bool bContributeToMass;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x18, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: KBoxElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float X;//[Offset: 0x48, Size: 0x4]
	float Y;//[Offset: 0x4c, Size: 0x4]
	float Z;//[Offset: 0x50, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: KSphylElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius;//[Offset: 0x48, Size: 0x4]
	float Length;//[Offset: 0x4c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: KConvexElem.KShapeElem
	Vector[] VertexData;//[Offset: 0x30, Size: 0x10]
	Box ElemBox;//[Offset: 0x40, Size: 0x1c]
	Transform Transform;//[Offset: 0x60, Size: 0x30]
<----------Generated by SSpawner v1.0.2---------->


Class: Transform
	Quat Rotation;//[Offset: 0x0, Size: 0x10]
	Vector Translation;//[Offset: 0x10, Size: 0xc]
	Vector Scale3D;//[Offset: 0x1c, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: Quat
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: KTaperedCapsuleElem.KShapeElem
	Vector Center;//[Offset: 0x30, Size: 0xc]
	Rotator Rotation;//[Offset: 0x3c, Size: 0xc]
	float Radius0;//[Offset: 0x48, Size: 0x4]
	float Radius1;//[Offset: 0x4c, Size: 0x4]
	float Length;//[Offset: 0x50, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x28, Size: 0x4]
	byte FrictionCombineMode;//[Offset: 0x2c, Size: 0x1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x2d, Size: 0x1]
	float Restitution;//[Offset: 0x30, Size: 0x4]
	byte RestitutionCombineMode;//[Offset: 0x34, Size: 0x1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x35, Size: 0x1]
	float Density;//[Offset: 0x38, Size: 0x4]
	float RaiseMassToPower;//[Offset: 0x3c, Size: 0x4]
	float DestructibleDamageThresholdScale;//[Offset: 0x40, Size: 0x4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x48, Size: 0x8]
	byte SurfaceType;//[Offset: 0x50, Size: 0x1]
	float TireFrictionScale;//[Offset: 0x54, Size: 0x4]
	TireFrictionScalePair[] TireFrictionScales;//[Offset: 0x58, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: PhysicalMaterialPropertyBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: TireFrictionScalePair
	TireType* TireType;//[Offset: 0x0, Size: 0x8]
	float FrictionScale;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x30, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0, Size: 0x1]
	float WalkableSlopeAngle;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BodyInstance
	byte ObjectType;//[Offset: 0x6, Size: 0x1]
	byte CollisionEnabled;//[Offset: 0x8, Size: 0x1]
	enum SleepFamily;//[Offset: 0xa, Size: 0x1]
	byte DOFMode;//[Offset: 0xb, Size: 0x1]
	bool bUseCCD;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bSimulatePhysics;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverrideMass;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bEnableGravity;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bAutoWeld;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bStartAwake;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bGenerateWakeEvents;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bLockTranslation;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bLockRotation;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bLockXTranslation;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bLockYTranslation;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bLockZTranslation;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bLockXRotation;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bLockYRotation;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bLockZRotation;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bUseAsyncScene;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bInterpolateWhenSubStepping;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	FName CollisionProfileName;//[Offset: 0x1c, Size: 0x8]
	CollisionResponse CollisionResponses;//[Offset: 0x28, Size: 0x30]
	float MaxDepenetrationVelocity;//[Offset: 0x58, Size: 0x4]
	float MassInKgOverride;//[Offset: 0x5c, Size: 0x4]
	float LinearDamping;//[Offset: 0x68, Size: 0x4]
	float AngularDamping;//[Offset: 0x6c, Size: 0x4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70, Size: 0xc]
	Vector COMNudge;//[Offset: 0x7c, Size: 0xc]
	float MassScale;//[Offset: 0x88, Size: 0x4]
	Vector InertiaTensorScale;//[Offset: 0x8c, Size: 0xc]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa8, Size: 0x10]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb8, Size: 0x8]
	float MaxAngularVelocity;//[Offset: 0xc0, Size: 0x4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xc4, Size: 0x4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc8, Size: 0x4]
	float PhysicsBlendWeight;//[Offset: 0xcc, Size: 0x4]
	int PositionSolverIterationCount;//[Offset: 0xd0, Size: 0x4]
	int VelocitySolverIterationCount;//[Offset: 0xd4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0, Size: 0x20]
	ResponseChannel[] ResponseArray;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0, Size: 0x1]
	byte WorldDynamic;//[Offset: 0x1, Size: 0x1]
	byte Pawn;//[Offset: 0x2, Size: 0x1]
	byte Visibility;//[Offset: 0x3, Size: 0x1]
	byte Camera;//[Offset: 0x4, Size: 0x1]
	byte PhysicsBody;//[Offset: 0x5, Size: 0x1]
	byte Vehicle;//[Offset: 0x6, Size: 0x1]
	byte Destructible;//[Offset: 0x7, Size: 0x1]
	byte EngineTraceChannel1;//[Offset: 0x8, Size: 0x1]
	byte EngineTraceChannel2;//[Offset: 0x9, Size: 0x1]
	byte EngineTraceChannel3;//[Offset: 0xa, Size: 0x1]
	byte EngineTraceChannel4;//[Offset: 0xb, Size: 0x1]
	byte EngineTraceChannel5;//[Offset: 0xc, Size: 0x1]
	byte EngineTraceChannel6;//[Offset: 0xd, Size: 0x1]
	byte GameTraceChannel1;//[Offset: 0xe, Size: 0x1]
	byte GameTraceChannel2;//[Offset: 0xf, Size: 0x1]
	byte GameTraceChannel3;//[Offset: 0x10, Size: 0x1]
	byte GameTraceChannel4;//[Offset: 0x11, Size: 0x1]
	byte GameTraceChannel5;//[Offset: 0x12, Size: 0x1]
	byte GameTraceChannel6;//[Offset: 0x13, Size: 0x1]
	byte GameTraceChannel7;//[Offset: 0x14, Size: 0x1]
	byte GameTraceChannel8;//[Offset: 0x15, Size: 0x1]
	byte GameTraceChannel9;//[Offset: 0x16, Size: 0x1]
	byte GameTraceChannel10;//[Offset: 0x17, Size: 0x1]
	byte GameTraceChannel11;//[Offset: 0x18, Size: 0x1]
	byte GameTraceChannel12;//[Offset: 0x19, Size: 0x1]
	byte GameTraceChannel13;//[Offset: 0x1a, Size: 0x1]
	byte GameTraceChannel14;//[Offset: 0x1b, Size: 0x1]
	byte GameTraceChannel15;//[Offset: 0x1c, Size: 0x1]
	byte GameTraceChannel16;//[Offset: 0x1d, Size: 0x1]
	byte GameTraceChannel17;//[Offset: 0x1e, Size: 0x1]
	byte GameTraceChannel18;//[Offset: 0x1f, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ResponseChannel
	FName Channel;//[Offset: 0x0, Size: 0x8]
	byte Response;//[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: GeomSelection
	int Type;//[Offset: 0x0, Size: 0x4]
	int Index;//[Offset: 0x4, Size: 0x4]
	int SelectionIndex;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: InputComponent.ActorComponent.Object
	CachedKeyToActionInfo[] CachedKeyToActionInfo;//[Offset: 0x160, Size: 0x10]
	bool WasControllerKeyJustReleased(Key Key);// 0x4d72df4
	bool WasControllerKeyJustPressed(Key Key);// 0x4d72c88
	bool IsControllerKeyDown(Key Key);// 0x4d72b1c
	void GetTouchState(int FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x4d729ac
	Vector GetControllerVectorKeyState(Key Key);// 0x4d72840
	void GetControllerMouseDelta(out float DeltaX, out float DeltaY);// 0x4d72764
	float GetControllerKeyTimeDown(Key Key);// 0x4d725fc
	void GetControllerAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x4d724dc
	float GetControllerAnalogKeyState(Key Key);// 0x4d72374
<----------Generated by SSpawner v1.0.2---------->


Class: CachedKeyToActionInfo
	PlayerInput* PlayerInput;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerInput.Object
	KeyBind[] DebugExecBindings;//[Offset: 0x120, Size: 0x10]
	FName[] InvertedAxis;//[Offset: 0x160, Size: 0x10]
	void SetMouseSensitivity(const float SensitivityX, const float SensitivityY);// 0x4e9075c
	void SetBind(FName BindName, FString Command);// 0x4e90694
	void InvertAxisKey(const Key AxisKey);// 0x4e9053c
	void InvertAxis(const FName AxisName);// 0x4e904c0
	void ClearSmoothing();// 0x4e904ac
<----------Generated by SSpawner v1.0.2---------->


Class: KeyBind
	Key Key;//[Offset: 0x0, Size: 0x18]
	FString Command;//[Offset: 0x18, Size: 0x10]
	bool Control;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool Shift;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool Alt;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool Cmd;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCtrl;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool bIgnoreShift;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bIgnoreAlt;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bIgnoreCmd;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bDisabled;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1]
	bool bUseControllerRotationYaw;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x348, Size: 0x1]
	bool bUseControllerRotationRoll;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x348, Size: 0x1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x348, Size: 0x1]
	float BaseEyeHeight;//[Offset: 0x34c, Size: 0x4]
	byte AutoPossessPlayer;//[Offset: 0x350, Size: 0x1]
	enum AutoPossessAI;//[Offset: 0x351, Size: 0x1]
	byte RemoteViewPitch;//[Offset: 0x352, Size: 0x1]
	class Controller* AIControllerClass;//[Offset: 0x358, Size: 0x8]
	PlayerState* PlayerState;//[Offset: 0x360, Size: 0x8]
	Controller* LastHitBy;//[Offset: 0x370, Size: 0x8]
	Controller* Controller;//[Offset: 0x378, Size: 0x8]
	Vector ControlInputVector;//[Offset: 0x384, Size: 0xc]
	Vector LastControlInputVector;//[Offset: 0x390, Size: 0xc]
	void SpawnDefaultController();// 0x4e69148
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);// 0x4e69080
	void ReceiveUnpossessed(Controller* OldController);// 0x35332fc
	void ReceivePossessed(Controller* NewController);// 0x35332fc
	void PawnMakeNoise(float Loudness, Vector NoiseLocation, bool bUseNoiseMakerLocation, Actor* NoiseMaker);// 0x4e68f3c
	void OnRep_PlayerState();// 0x4e68f20
	void OnRep_Controller();// 0x4e68f04
	void LaunchPawn(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x4e68df8
	Vector K2_GetMovementInputVector();// 0x4e68dc0
	bool IsPlayerControlled();// 0x4e68d80
	bool IsMoveInputIgnored();// 0x4e68d40
	bool IsLocallyControlled();// 0x4e68d00
	bool IsControlled();// 0x4e68cc8
	Vector GetPendingMovementInputVector();// 0x4e68c90
	Vector GetNavAgentLocation();// 0x4e68c50
	PawnMovementComponent* GetMovementComponent();// 0x4e68c14
	static Actor* GetMovementBaseActor(const Pawn* Pawn);// 0x4e68b98
	Vector GetLastMovementInputVector();// 0x4e68b60
	Rotator GetControlRotation();// 0x4e68b28
	Controller* GetController();// 0x4e68b0c
	Rotator GetBaseAimRotation();// 0x4e68acc
	void DetachFromControllerPendingDestroy();// 0x4e68ab0
	Vector ConsumeMovementInputVector();// 0x4e68a70
	void AddMovementInput(Vector WorldDirection, float ScaleValue, bool bForce);// 0x4e6896c
	void AddControllerYawInput(float Val);// 0x4e688e8
	void AddControllerRollInput(float Val);// 0x4e68864
	void AddControllerPitchInput(float Val);// 0x4e687e0
<----------Generated by SSpawner v1.0.2---------->


Class: Controller.Actor.Object
	PlayerState* PlayerState;//[Offset: 0x348, Size: 0x8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x358, Size: 0x10]
	FName StateName;//[Offset: 0x368, Size: 0x8]
	Pawn* Pawn;//[Offset: 0x370, Size: 0x8]
	Character* Character;//[Offset: 0x380, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x388, Size: 0x8]
	Rotator ControlRotation;//[Offset: 0x3a8, Size: 0xc]
	bool bAttachToPawn;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3b4, Size: 0x1]
	bool bIsPlayerController;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x3b4, Size: 0x1]
	void UnPossess();// 0x4d04ab0
	void StopMovement();// 0x4d04a94
	void SetInitialLocationAndRotation(out const Vector NewLocation, out const Rotator NewRotation);// 0x4d049b0
	void SetIgnoreMoveInput(bool bNewMoveInput);// 0x4d04924
	void SetIgnoreLookInput(bool bNewLookInput);// 0x4d04898
	void SetControlRotation(out const Rotator NewRotation);// 0x4d04808
	void ResetIgnoreMoveInput();// 0x4d047ec
	void ResetIgnoreLookInput();// 0x4d047d0
	void ResetIgnoreInputFlags();// 0x4d047b4
	void ReceiveInstigatedAnyDamage(float Damage, const DamageType* DamageType, Actor* DamagedActor, Actor* DamageCauser);// 0x35332fc
	void Possess(Pawn* InPawn);// 0x4d04730
	void OnRep_PlayerState();// 0x4d04714
	void OnRep_Pawn();// 0x4d046f8
	bool LineOfSightTo(const Actor* Other, Vector ViewPoint, bool bAlternateChecks);// 0x4d045dc
	Pawn* K2_GetPawn();// 0x4d045a8
	bool IsPlayerController();// 0x4d04588
	bool IsMoveInputIgnored();// 0x4d04548
	bool IsLookInputIgnored();// 0x4d04508
	bool IsLocalPlayerController();// 0x4d044b8
	bool IsLocalController();// 0x4d04478
	Actor* GetViewTarget();// 0x4d0443c
	Rotator GetDesiredRotation();// 0x4d043fc
	Rotator GetControlRotation();// 0x4d043bc
	void ClientSetRotation(Rotator NewRotation, bool bResetCamera);// 0x4d042f4
	void ClientSetLocation(Vector NewLocation, Rotator NewRotation);// 0x4d04230
	PlayerController* CastToPlayerController();// 0x4d041fc
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x340, Size: 0x4]
	FString PlayerName;//[Offset: 0x348, Size: 0x10]
	int PlayerId;//[Offset: 0x368, Size: 0x4]
	byte Ping;//[Offset: 0x36c, Size: 0x1]
	bool bShouldUpdateReplicatedPing;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x36e, Size: 0x1]
	bool bIsSpectator;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x36e, Size: 0x1]
	bool bOnlySpectator;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x36e, Size: 0x1]
	bool bIsABot;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x36e, Size: 0x1]
	bool bIsInactive;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x36e, Size: 0x1]
	bool bFromPreviousLevel;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x36e, Size: 0x1]
	int StartTime;//[Offset: 0x370, Size: 0x4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x378, Size: 0x8]
	FString SavedNetworkAddress;//[Offset: 0x388, Size: 0x10]
	UniqueNetIdRepl UniqueId;//[Offset: 0x398, Size: 0x28]
	Pawn* PawnPrivate;//[Offset: 0x3c8, Size: 0x8]
	FString PlayerNamePrivate;//[Offset: 0x3e0, Size: 0x10]
	void ReceiveOverrideWith(PlayerState* OldPlayerState);// 0x35332fc
	void ReceiveCopyProperties(PlayerState* NewPlayerState);// 0x35332fc
	void OnRep_UniqueId();// 0x4e91594
	void OnRep_Score();// 0x4e91578
	void OnRep_PlayerName();// 0x4e9155c
	void OnRep_PlayerId();// 0x4e91540
	void OnRep_bIsInactive();// 0x4e91524
	FString GetPlayerName();// 0x4e914a0
<----------Generated by SSpawner v1.0.2---------->


Class: Info.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: LocalMessage.Object
<----------Generated by SSpawner v1.0.2---------->


Class: UniqueNetIdRepl.UniqueNetIdWrapper
	byte[] ReplicationBytes;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: UniqueNetIdWrapper
<----------Generated by SSpawner v1.0.2---------->


Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x3a0, Size: 0x8]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x3a8, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x3b0, Size: 0x8]
	BasedMovementInfo BasedMovement;//[Offset: 0x3b8, Size: 0x30]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x3e8, Size: 0x30]
	float AnimRootMotionTranslationScale;//[Offset: 0x418, Size: 0x4]
	Vector BaseTranslationOffset;//[Offset: 0x41c, Size: 0xc]
	Quat BaseRotationOffset;//[Offset: 0x430, Size: 0x10]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x440, Size: 0x4]
	float ReplayLastTransformUpdateTimeStamp;//[Offset: 0x444, Size: 0x4]
	byte ReplicatedMovementMode;//[Offset: 0x448, Size: 0x1]
	bool bInBaseReplication;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x449, Size: 0x1]
	float CrouchedEyeHeight;//[Offset: 0x44c, Size: 0x4]
	bool bIsCrouched;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x450, Size: 0x1]
	bool bProxyIsJumpForceApplied;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x450, Size: 0x1]
	bool bPressedJump;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x450, Size: 0x1]
	bool bClientUpdating;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x450, Size: 0x1]
	bool bClientWasFalling;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x450, Size: 0x1]
	bool bClientResimulateRootMotion;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x450, Size: 0x1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x450, Size: 0x1]
	bool bSimGravityDisabled;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x450, Size: 0x1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x451, Size: 0x1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x451, Size: 0x1]
	bool bWasJumping;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x451, Size: 0x1]
	float JumpKeyHoldTime;//[Offset: 0x454, Size: 0x4]
	float JumpForceTimeRemaining;//[Offset: 0x458, Size: 0x4]
	float ProxyJumpForceStartedTime;//[Offset: 0x45c, Size: 0x4]
	float JumpMaxHoldTime;//[Offset: 0x460, Size: 0x4]
	int JumpMaxCount;//[Offset: 0x464, Size: 0x4]
	int JumpCurrentCount;//[Offset: 0x468, Size: 0x4]
	delegate OnReachedJumpApex;//[Offset: 0x470, Size: 0x10]
	delegate MovementModeChangedDelegate;//[Offset: 0x490, Size: 0x10]
	delegate OnCharacterMovementUpdated;//[Offset: 0x4a0, Size: 0x10]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x4b0, Size: 0xf8]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x5b0, Size: 0x40]
	SimulatedRootMotionReplicatedMove[] RootMotionRepMoves;//[Offset: 0x5f0, Size: 0x10]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x600, Size: 0x158]
	void UnCrouch(bool bClientSimulation);// 0x4cf4084
	void StopJumping();// 0x4cf4068
	void StopAnimMontage(AnimMontage* AnimMontage);// 0x4cf3fe4
	void ServerMoveOld(float OldTimeStamp, Vector_NetQuantize10 OldAccel, byte OldMoveFlags);// 0x4cf3ec0
	void ServerMoveNoBase(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x4cf3c94
	void ServerMoveDualNoBase(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, byte ClientMovementMode);// 0x4cf3958
	void ServerMoveDualHybridRootMotion(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x4cf35a4
	void ServerMoveDual(float TimeStamp0, Vector_NetQuantize10 InAccel0, byte PendingFlags, uint32 View0, float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte NewFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x4cf31f0
	void ServerMove(float Timestamp, Vector_NetQuantize10 InAccel, Vector_NetQuantize100 ClientLoc, byte CompressedMoveFlags, byte ClientRoll, uint32 View, PrimitiveComponent* ClientMovementBase, FName ClientBaseBoneName, byte ClientMovementMode);// 0x4cf2f54
	void RootMotionDebugClientPrintOnScreen(FString inString);// 0x4cf2ec0
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x4cf2db8
	void OnWalkingOffLedge(out const Vector PreviousFloorImpactNormal, out const Vector PreviousFloorContactNormal, out const Vector PreviousLocation, float TimeDelta);// 0x4cf2c40
	void OnRep_RootMotion();// 0x4cf2c2c
	void OnRep_ReplicatedBasedMovement();// 0x4cf2c10
	void OnRep_ReplayLastTransformUpdateTimeStamp();// 0x4cf2bfc
	void OnRep_IsCrouched();// 0x4cf2be0
	void OnLaunched(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x35332fc
	void OnLanded(out const HitResult Hit);// 0x35332fc
	void OnJumped();// 0x4cf2bc4
	void LaunchCharacter(Vector LaunchVelocity, bool bXYOverride, bool bZOverride);// 0x4cf2ab0
	void K2_UpdateCustomMovement(float DeltaTime);// 0x35332fc
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x35332fc
	void K2_OnMovementModeChanged(byte PrevMovementMode, byte NewMovementMode, byte PrevCustomMode, byte NewCustomMode);// 0x35332fc
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);// 0x35332fc
	void Jump();// 0x4cf2a94
	bool IsPlayingRootMotion();// 0x4cf2a5c
	bool IsPlayingNetworkedRootMotionMontage();// 0x4cf2a24
	bool IsJumpProvidingForce();// 0x4cf29e4
	AnimMontage* GetCurrentMontage();// 0x4cf29b0
	Vector GetBaseTranslationOffset();// 0x4cf2988
	Rotator GetBaseRotationOffsetRotator();// 0x4cf2934
	float GetAnimRootMotionTranslationScale();// 0x4cf2900
	void Crouch(bool bClientSimulation);// 0x4cf2874
	void ClientVeryShortAdjustPosition(float Timestamp, Vector NewLoc, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x4cf2678
	void ClientCheatWalk();// 0x4cf265c
	void ClientCheatGhost();// 0x4cf2640
	void ClientCheatFly();// 0x4cf2624
	void ClientAdjustRootMotionSourcePosition(float Timestamp, RootMotionSourceGroup ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x4cf2178
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, Vector ServerLoc, Vector_NetQuantizeNormal ServerRotation, float ServerVelZ, PrimitiveComponent* ServerBase, FName ServerBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x4cf1ec4
	void ClientAdjustPosition(float Timestamp, Vector NewLoc, Vector NewVel, PrimitiveComponent* NewBase, FName NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, byte ServerMovementMode);// 0x4cf1c88
	void ClientAckGoodMove(float Timestamp);// 0x4cf1c0c
	bool CanJumpInternal();// 0x4cf1bcc
	bool CanJump();// 0x4cf1b94
	void CacheInitialMeshOffset(Vector MeshRelativeLocation, Rotator MeshRelativeRotation);// 0x4cf1ad0
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x760, Size: 0x8]
	class AnimInstance* AnimClass;//[Offset: 0x768, Size: 0x8]
	AnimInstance* AnimScriptInstance;//[Offset: 0x770, Size: 0x8]
	AnimInstance*[] SubInstances;//[Offset: 0x778, Size: 0x10]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x788, Size: 0x8]
	SingleAnimationPlayData AnimationData;//[Offset: 0x790, Size: 0x18]
	Vector RootBoneTranslation;//[Offset: 0x7b8, Size: 0xc]
	Vector LineCheckBoundsScale;//[Offset: 0x7c4, Size: 0xc]
	Transform[] CachedBoneSpaceTransforms;//[Offset: 0x7f0, Size: 0x10]
	Transform[] CachedComponentSpaceTransforms;//[Offset: 0x800, Size: 0x10]
	float GlobalAnimRateScale;//[Offset: 0x830, Size: 0x4]
	enum UseAsyncScene;//[Offset: 0x834, Size: 0x1]
	byte KinematicBonesUpdateType;//[Offset: 0x835, Size: 0x1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x836, Size: 0x1]
	byte AnimationMode;//[Offset: 0x838, Size: 0x1]
	bool bDisablePostProcessBlueprint;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x83a, Size: 0x1]
	bool bUpdateOverlapsOnAnimationFinalize;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x83c, Size: 0x1]
	bool bHasValidBodies;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x83c, Size: 0x1]
	bool bBlendPhysics;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x83c, Size: 0x1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x83c, Size: 0x1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x83c, Size: 0x1]
	bool bDisableClothSimulation;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x83d, Size: 0x1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x83d, Size: 0x1]
	bool bDisableAnimCurves;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x83d, Size: 0x1]
	bool bCollideWithEnvironment;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x83d, Size: 0x1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x83d, Size: 0x1]
	bool bLocalSpaceSimulation;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x83e, Size: 0x1]
	bool bResetAfterTeleport;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x83e, Size: 0x1]
	bool bNoSkeletonUpdate;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x83e, Size: 0x1]
	bool bPauseAnims;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x83e, Size: 0x1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x83e, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x83e, Size: 0x1]
	bool bForceRefpose;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x83e, Size: 0x1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x83f, Size: 0x1]
	bool bIsAutonomousTickPose;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x83f, Size: 0x1]
	bool bOldForceRefPose;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x83f, Size: 0x1]
	bool bShowPrePhysBones;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x83f, Size: 0x1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x83f, Size: 0x1]
	bool bAnimTreeInitialised;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x83f, Size: 0x1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x83f, Size: 0x1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x83f, Size: 0x1]
	bool bUseBendingElements;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x840, Size: 0x1]
	bool bUseTetrahedralConstraints;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x840, Size: 0x1]
	bool bUseThinShellVolumeConstraints;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x840, Size: 0x1]
	bool bUseSelfCollisions;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x840, Size: 0x1]
	bool bUseContinuousCollisionDetection;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x840, Size: 0x1]
	bool bPropagateCurvesToSlaves;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x840, Size: 0x1]
	bool bSkipKinematicUpdateWhenInterpolating;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x840, Size: 0x1]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x841, Size: 0x1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x842, Size: 0x2]
	bool bUseSkeletalMeshDrawDistance;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x844, Size: 0x1]
	float ClothBlendWeight;//[Offset: 0x848, Size: 0x4]
	float EdgeStiffness;//[Offset: 0x84c, Size: 0x4]
	float BendingStiffness;//[Offset: 0x850, Size: 0x4]
	float AreaStiffness;//[Offset: 0x854, Size: 0x4]
	float VolumeStiffness;//[Offset: 0x858, Size: 0x4]
	float StrainLimitingStiffness;//[Offset: 0x85c, Size: 0x4]
	float ShapeTargetStiffness;//[Offset: 0x860, Size: 0x4]
	FName[] DisallowedAnimCurves;//[Offset: 0x868, Size: 0x10]
	BodySetup* BodySetup;//[Offset: 0x878, Size: 0x8]
	delegate OnConstraintBroken;//[Offset: 0x888, Size: 0x10]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x898, Size: 0x8]
	float TeleportDistanceThreshold;//[Offset: 0x990, Size: 0x4]
	float TeleportRotationThreshold;//[Offset: 0x994, Size: 0x4]
	uint32 LastPoseTickFrame;//[Offset: 0x9a0, Size: 0x4]
	ClothingSimulationInteractor* ClothingInteractor;//[Offset: 0xa00, Size: 0x8]
	delegate OnAnimInitialized;//[Offset: 0xac0, Size: 0x10]
	delegate OnAnimInitBeforeTick;//[Offset: 0xad0, Size: 0x10]
	bool bAutoRegisterWithBudgetAllocator;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xc58, Size: 0x1]
	bool bAutoCalculateSignificance;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xc58, Size: 0x1]
	bool bShouldUseActorRenderedFlag;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xc58, Size: 0x1]
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);// 0x4ecd7dc
	void ToggleDisablePostProcessBlueprint();// 0x4ecd7c8
	void TermBodiesBelow(FName ParentBoneName);// 0x4ecd74c
	void SuspendClothingSimulation();// 0x4ecd738
	void Stop();// 0x4ecd724
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x4ecd668
	void SetUpdateAnimationInEditor(const bool NewUpdateState);// 0x4ecd5e4
	void SetTeleportRotationThreshold(float Threshold);// 0x4ecd568
	void SetTeleportDistanceThreshold(float Threshold);// 0x4ecd4ec
	void SetPosition(float InPos, bool bFireNotifies);// 0x4ecd42c
	void SetPlayRate(float Rate);// 0x4ecd3b0
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);// 0x4ecd334
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, FName BoneName, bool bIncludeSelf);// 0x4ecd220
	void SetMorphTarget(FName MorphTargetName, float Value, bool bRemoveZeroWeight);// 0x4ecd124
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);// 0x4ecd0a0
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, FName BoneName, bool bIncludeSelf);// 0x4eccf94
	void SetEnableBodyGravity(bool bEnableGravity, FName BoneName);// 0x4eccecc
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);// 0x4ecce48
	void SetDisableAnimCurves(bool bInDisableAnimCurves);// 0x4eccdc4
	void SetConstraintProfileForAll(FName ProfileName, bool bDefaultIfNotFound);// 0x4eccd04
	void SetConstraintProfile(FName JointName, FName ProfileName, bool bDefaultIfNotFound);// 0x4eccc0c
	void SetClothMaxDistanceScale(float Scale);// 0x4eccb90
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, FName BoneName);// 0x4eccac0
	void SetAutoRegisterWithBudgetAllocator(bool bInAutoRegisterWithBudgetAllocator);// 0x4ecca34
	void SetAnimationMode(byte InAnimationMode);// 0x4ecc9b8
	void SetAnimation(AnimationAsset* NewAnimToPlay);// 0x4ecc93c
	void SetAngularLimits(FName InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);// 0x4ecc810
	void SetAllowedAnimCurvesEvaluation(out const FName[] List, bool bAllow);// 0x4ecc724
	void SetAllowAnimCurveEvaluation(bool bInAllow);// 0x4ecc6a0
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x4ecc58c
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);// 0x4ecc478
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);// 0x4ecc344
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);// 0x4ecc2c0
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x4ecc200
	void SetAllBodiesBelowSimulatePhysics(out const FName InBoneName, bool bNewSimulate, bool bIncludeSelf);// 0x4ecc0e0
	void SetAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);// 0x4ecbf84
	void ResumeClothingSimulation();// 0x4ecbf70
	void ResetClothTeleportMode();// 0x4ecbf5c
	void ResetAnimInstanceDynamics(enum InTeleportType);// 0x4ecbee0
	void ResetAllowedAnimCurveEvaluation();// 0x4ecbecc
	void ResetAllBodiesSimulatePhysics();// 0x4ecbeb8
	void PlayAnimation(AnimationAsset* NewAnimToPlay, bool bLooping);// 0x4ecbdf8
	void Play(bool bLooping);// 0x4ecbd74
	void OverrideAnimationData(AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);// 0x4ecbbf4
	void K2_SetAnimInstanceClass(class Object NewClass);// 0x4ecbb70
	bool K2_GetClosestPointOnPhysicsAsset(out const Vector WorldPosition, out Vector ClosestWorldPosition, out Vector Normal, out FName BoneName, out float Distance);// 0x4ecb98c
	bool IsPlaying();// 0x4ecb954
	bool IsClothingSimulationSuspended();// 0x4ecb91c
	bool IsBodyGravityEnabled(FName BoneName);// 0x4ecb894
	bool HasValidAnimationInstance();// 0x4ecb85c
	float GetTeleportRotationThreshold();// 0x4ecb828
	float GetTeleportDistanceThreshold();// 0x4ecb7f4
	AnimInstance* GetSubInstanceByName(FName InName);// 0x4ecb770
	Vector GetSkeletalCenterOfMass();// 0x4ecb738
	AnimInstance* GetPostProcessInstance();// 0x4ecb704
	float GetPosition();// 0x4ecb6d0
	float GetPlayRate();// 0x4ecb69c
	float GetMorphTarget(FName MorphTargetName);// 0x4ecb618
	bool GetDisablePostProcessBlueprint();// 0x4ecb5e0
	bool GetDisableAnimCurves();// 0x4ecb5bc
	void GetCurrentJointAngles(FName InBoneName, out float Swing1Angle, out float TwistAngle, out float Swing2Angle);// 0x4ecb44c
	float GetClothMaxDistanceScale();// 0x4ecb418
	ClothingSimulationInteractor* GetClothingSimulationInteractor();// 0x4ecb3e4
	float GetBoneMass(FName BoneName, bool bScaleMass);// 0x4ecb318
	AnimInstance* GetAnimInstance();// 0x4ecb2e4
	byte GetAnimationMode();// 0x4ecb2b0
	bool GetAllowedAnimCurveEvaluate();// 0x4ecb290
	void ForceClothNextUpdateTeleportAndReset();// 0x4ecb27c
	void ForceClothNextUpdateTeleport();// 0x4ecb268
	FName FindConstraintBoneName(int ConstraintIndex);// 0x4ecb1e4
	void ClearMorphTargets();// 0x4ecb1d0
	void BreakConstraint(Vector Impulse, Vector HitLocation, FName InBoneName);// 0x4ecb0d8
	void BindClothToMasterPoseComponent();// 0x4ecb0c4
	void AllowAnimCurveEvaluation(FName NameOfCurve, bool bAllow);// 0x4ecb004
	void AddImpulseToAllBodiesBelow(Vector Impulse, FName BoneName, bool bVelChange, bool bIncludeSelf);// 0x4ecaeb4
	void AddForceToAllBodiesBelow(Vector Force, FName BoneName, bool bAccelChange, bool bIncludeSelf);// 0x4ecad64
	void AccumulateAllBodiesBelowPhysicsBlendWeight(out const FName InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);// 0x4ecac50
<----------Generated by SSpawner v1.0.2---------->


Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x5f0, Size: 0x8]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x5f8, Size: 0x8]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x6a8, Size: 0x8]
	bool bNoNeedPhysicsAsset;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x6b0, Size: 0x1]
	int ForcedLodModel;//[Offset: 0x6b4, Size: 0x4]
	int MinLodModel;//[Offset: 0x6b8, Size: 0x4]
	int MaxLodModel;//[Offset: 0x6bc, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x6cc, Size: 0x4]
	SkelMeshComponentLODInfo[] LODInfo;//[Offset: 0x6d0, Size: 0x10]
	enum VisibilityBasedAnimTickOption;//[Offset: 0x6f4, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x6fc, Size: 0x1]
	bool bOverrideMaxLod;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x6fc, Size: 0x1]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x6fc, Size: 0x1]
	bool bForceWireframe;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x6fc, Size: 0x1]
	bool bDisplayBones;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x6fc, Size: 0x1]
	bool bDisableMorphTarget;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x6fc, Size: 0x1]
	bool bHideSkin;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x6fc, Size: 0x1]
	bool bPerBoneMotionBlur;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x6fc, Size: 0x1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x6fd, Size: 0x1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x6fd, Size: 0x1]
	bool bSyncAttachParentLOD;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x6fd, Size: 0x1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x6fd, Size: 0x1]
	bool bRecentlyRendered;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x6fd, Size: 0x1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x6fd, Size: 0x1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x6fd, Size: 0x1]
	bool bCPUSkinning;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x6fd, Size: 0x1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x6fe, Size: 0x1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x6fe, Size: 0x1]
	bool bRenderStatic;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x6fe, Size: 0x1]
	bool bIgnoreMasterPoseComponentLOD;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x6fe, Size: 0x1]
	bool bIgnoreSkeletalMeshLODBias;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x6fe, Size: 0x1]
	bool bMobileIsBasePassFirstRender;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x6fe, Size: 0x1]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x70c, Size: 0x1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x70c, Size: 0x1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x710, Size: 0x4]
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x720, Size: 0x1c]
	void UnHideBoneByName(FName BoneName);// 0x4ed8420
	void TransformToBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x4ed8288
	void TransformFromBoneSpace(FName BoneName, Vector InPosition, Rotator InRotation, out Vector OutPosition, out Rotator OutRotation);// 0x4ed80f0
	void ShowMaterialSection(int MaterialID, bool bShow, int LODIndex);// 0x4ed7fec
	void ShowAllMaterialSections(int LODIndex);// 0x4ed7f70
	void SetVertexColorOverride_LinearColor(int LODIndex, out const LinearColor[] VertexColors);// 0x4ed7e98
	void SetTickAnimTimeDilation(float TimeDilation);// 0x4ed7e20
	void SetSkinWeightOverride(int LODIndex, out const SkelMeshSkinWeightInfo[] SkinWeights);// 0x4ed7d48
	void SetSkeletalMesh(SkeletalMesh* NewMesh, bool bReinitPose);// 0x4ed7c80
	void SetRenderStatic(bool bNewValue);// 0x4ed7bfc
	void SetPhysicsAsset(PhysicsAsset* NewPhysicsAsset, bool bForceReInit);// 0x4ed7b34
	void SetMinLOD(int InNewMinLOD);// 0x4ed7ab8
	void SetMaxLOD(int InNewMaxLOD);// 0x4ed7a3c
	void SetMasterPoseComponent(SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);// 0x4ed797c
	void SetForcedLOD(int InNewForcedLOD);// 0x4ed7900
	void SetCastCapsuleIndirectShadow(bool bNewValue);// 0x4ed787c
	void SetCastCapsuleDirectShadow(bool bNewValue);// 0x4ed77f8
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);// 0x4ed777c
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);// 0x4ed76bc
	bool IsBoneHiddenByName(FName BoneName);// 0x4ed7634
	void HideBoneByName(FName BoneName, byte PhysBodyOption);// 0x4ed757c
	float GetTickAnimTimeDilation();// 0x4ed7560
	FName GetSocketBoneName(FName InSocketName);// 0x4ed74dc
	Vector GetRefPosePosition(int BoneIndex);// 0x4ed7454
	FName GetParentBone(FName BoneName);// 0x4ed73d0
	int GetNumLODs();// 0x4ed739c
	int GetNumBones();// 0x4ed7368
	Transform GetDeltaTransformFromRefPose(FName BoneName, FName BaseName);// 0x4ed726c
	FName GetBoneName(int BoneIndex);// 0x4ed71e8
	int GetBoneIndex(FName BoneName);// 0x4ed7164
	FName FindClosestBone_K2(Vector TestLocation, out Vector BoneLocation, float IgnoreScale, bool bRequirePhysicsAsset);// 0x4ed700c
	void ClearVertexColorOverride(int LODIndex);// 0x4ed6f90
	void ClearSkinWeightOverride(int LODIndex);// 0x4ed6f14
	bool BoneIsChildOf(FName BoneName, FName ParentBoneName);// 0x4ed6e4c
<----------Generated by SSpawner v1.0.2---------->


Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	MaterialInterface*[] OverrideMaterials;//[Offset: 0x5c8, Size: 0x10]
	void SetVectorParameterValueOnMaterials(const FName ParameterName, const Vector ParameterValue);// 0x4e2e12c
	void SetScalarParameterValueOnMaterials(const FName ParameterName, const float ParameterValue);// 0x4e2e074
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);// 0x4e2df68
	bool IsMaterialSlotNameValid(FName MaterialSlotName);// 0x4e2ded8
	FName[] GetMaterialSlotNames();// 0x4e2de4c
	MaterialInterface*[] GetMaterials();// 0x4e2ddc0
	int GetMaterialIndex(FName MaterialSlotName);// 0x4e2dd34
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMesh.Object
	Skeleton* Skeleton;//[Offset: 0x48, Size: 0x8]
	float LDMaxDrawDistance;//[Offset: 0x50, Size: 0x4]
	BoxSphereBounds ImportedBounds;//[Offset: 0x54, Size: 0x1c]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x70, Size: 0x1c]
	Vector PositiveBoundsExtension;//[Offset: 0x8c, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0x98, Size: 0xc]
	SkeletalMaterial[] Materials;//[Offset: 0xa8, Size: 0x10]
	BoneMirrorInfo[] SkelMirrorTable;//[Offset: 0xb8, Size: 0x10]
	SkeletalMeshLODInfo[] LODInfo;//[Offset: 0xc8, Size: 0x10]
	PerPlatformInt MinLOD;//[Offset: 0xd8, Size: 0x4]
	byte SkelMirrorAxis;//[Offset: 0xdc, Size: 0x1]
	byte SkelMirrorFlipAxis;//[Offset: 0xdd, Size: 0x1]
	bool bUseFullPrecisionPosition;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xde, Size: 0x1]
	bool bUseFullPrecisionUVs;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xde, Size: 0x1]
	bool bUseHighPrecisionTangentBasis;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xde, Size: 0x1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xde, Size: 0x1]
	bool bHasBeenSimplified;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0xde, Size: 0x1]
	bool bHasVertexColors;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0xde, Size: 0x1]
	bool bEnablePerPolyCollision;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0xde, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0xe0, Size: 0x8]
	PhysicsAsset* PhysicsAsset;//[Offset: 0xe8, Size: 0x8]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0xf0, Size: 0x8]
	NodeMappingContainer*[] NodeMappingData;//[Offset: 0xf8, Size: 0x10]
	MorphTarget*[] MorphTargets;//[Offset: 0x108, Size: 0x10]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x290, Size: 0x8]
	ClothingAssetBase*[] MeshClothingAssets;//[Offset: 0x298, Size: 0x10]
	SkeletalMeshSamplingInfo SamplingInfo;//[Offset: 0x2a8, Size: 0x30]
	AssetUserData*[] AssetUserData;//[Offset: 0x2d8, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x2e8, Size: 0x10]
	void SetLODSettings(SkeletalMeshLODSettings* InLODSettings);// 0x4ec9160
	int NumSockets();// 0x4ec912c
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);// 0x4ec9064
	SkeletalMeshSocket* GetSocketByIndex(int Index);// 0x4ec8fe0
	NodeMappingContainer* GetNodeMappingContainer(Blueprint* SourceAsset);// 0x4ec8f5c
	BoxSphereBounds GetImportedBounds();// 0x4ec8f10
	BoxSphereBounds GetBounds();// 0x4ec8ec4
	SkeletalMeshSocket* FindSocketAndIndex(FName InSocketName, out int OutIndex);// 0x4ec8df0
	SkeletalMeshSocket* FindSocket(FName InSocketName);// 0x4ec8d6c
<----------Generated by SSpawner v1.0.2---------->


Class: Skeleton.Object
	BoneNode[] BoneTree;//[Offset: 0x38, Size: 0x10]
	Transform[] RefLocalPoses;//[Offset: 0x48, Size: 0x10]
	Guid VirtualBoneGuid;//[Offset: 0x170, Size: 0x10]
	VirtualBone[] VirtualBones;//[Offset: 0x180, Size: 0x10]
	SkeletalMeshSocket*[] Sockets;//[Offset: 0x190, Size: 0x10]
	SmartNameContainer SmartNames;//[Offset: 0x240, Size: 0x50]
	BlendProfile*[] BlendProfiles;//[Offset: 0x2b8, Size: 0x10]
	AnimSlotGroup[] SlotGroups;//[Offset: 0x2c8, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x3a0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: BoneNode
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ParentIndex;//[Offset: 0x8, Size: 0x4]
	byte TranslationRetargetingMode;//[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: Guid
	int A;//[Offset: 0x0, Size: 0x4]
	int B;//[Offset: 0x4, Size: 0x4]
	int C;//[Offset: 0x8, Size: 0x4]
	int D;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: VirtualBone
	FName SourceBoneName;//[Offset: 0x0, Size: 0x8]
	FName TargetBoneName;//[Offset: 0x8, Size: 0x8]
	FName VirtualBoneName;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	FName BoneName;//[Offset: 0x30, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x38, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x44, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x50, Size: 0xc]
	bool bForceAlwaysAnimated;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	void InitializeSocketFromLocation(const SkeletalMeshComponent* SkelComp, Vector WorldLocation, Vector WorldNormal);// 0x4ed5014
	Vector GetSocketLocation(const SkeletalMeshComponent* SkelComp);// 0x4ed4f8c
<----------Generated by SSpawner v1.0.2---------->


Class: SmartNameContainer
<----------Generated by SSpawner v1.0.2---------->


Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x30, Size: 0x8]
	BlendProfileBoneEntry[] ProfileEntries;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: BlendProfileBoneEntry
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x14]
	float BlendScale;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BoneReference
	FName BoneName;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimSlotGroup
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	FName[] SlotNames;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: AssetUserData.Object
<----------Generated by SSpawner v1.0.2---------->


Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0, Size: 0xc]
	Vector BoxExtent;//[Offset: 0xc, Size: 0xc]
	float SphereRadius;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x10, Size: 0x14]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x38, Size: 0x8]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x50, Size: 0x14]
	MaterialTextureInfo[] TextureStreamingData;//[Offset: 0x68, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x78, Size: 0x10]
	bool bCanReplaceMaterial;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	MaterialInterface* ReplaceMaterial;//[Offset: 0x90, Size: 0x8]
	enum TransparentUseDownsample;//[Offset: 0x98, Size: 0x1]
	bool bForceTransparentOpaque;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x99, Size: 0x1]
	float LDRAlphaMultiplyFactor;//[Offset: 0x9c, Size: 0x4]
	bool bTranslucentReceiveCSM;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	bool bCharacterStencil;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1]
	bool bOverlookDepthClip;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1]
	bool bAddToOverlookRenderSet;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1]
	bool bSupportMobileSpotLightShadow;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 0x1]
	bool bSupportReceiveMobileSpotLightShadow;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0xa0, Size: 0x1]
	bool bSupportMobilePointLightShadow;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0xa0, Size: 0x1]
	bool bSupportReceiveMobilePointLightShadow;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0xa0, Size: 0x1]
	bool bPrtSkySphere;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xa1, Size: 0x1]
	bool bAffectPrt;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xa1, Size: 0x1]
	bool bReceivePrt;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xa1, Size: 0x1]
	float PrtAffectRatio;//[Offset: 0xa4, Size: 0x4]
	void SetStreamingTextureMipOffset(int NewMipOffset);// 0x4e280b8
	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups);// 0x4e27f68
	void SetCanReplaceMaterial(bool State);// 0x4e27f04
	PhysicalMaterial* GetPhysicalMaterial();// 0x4e27ec8
	Material* GetBaseMaterial();// 0x4e27e94
<----------Generated by SSpawner v1.0.2---------->


Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x28, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: SubsurfaceProfileStruct
	float ScatterRadius;//[Offset: 0x0, Size: 0x4]
	LinearColor SubsurfaceColor;//[Offset: 0x4, Size: 0x10]
	LinearColor FalloffColor;//[Offset: 0x14, Size: 0x10]
	LinearColor BoundaryColorBleed;//[Offset: 0x24, Size: 0x10]
	float ExtinctionScale;//[Offset: 0x34, Size: 0x4]
	float NormalScale;//[Offset: 0x38, Size: 0x4]
	float ScatteringDistribution;//[Offset: 0x3c, Size: 0x4]
	float IOR;//[Offset: 0x40, Size: 0x4]
	float Roughness0;//[Offset: 0x44, Size: 0x4]
	float Roughness1;//[Offset: 0x48, Size: 0x4]
	float LobeMix;//[Offset: 0x4c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: LinearColor
	float R;//[Offset: 0x0, Size: 0x4]
	float G;//[Offset: 0x4, Size: 0x4]
	float B;//[Offset: 0x8, Size: 0x4]
	float A;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: LightmassMaterialInterfaceSettings
	bool bCastShadowAsMasked;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	float EmissiveBoost;//[Offset: 0x4, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x8, Size: 0x4]
	float ExportResolutionScale;//[Offset: 0xc, Size: 0x4]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialTextureInfo
	float SamplingScale;//[Offset: 0x0, Size: 0x4]
	int UVChannelIndex;//[Offset: 0x4, Size: 0x4]
	FName TextureName;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0xb0, Size: 0x8]
	ScalarMaterialInput Metallic;//[Offset: 0xb8, Size: 0xc]
	ScalarMaterialInput Specular;//[Offset: 0xcc, Size: 0xc]
	VectorMaterialInput Normal;//[Offset: 0xe0, Size: 0xc]
	ColorMaterialInput EmissiveColor;//[Offset: 0xf4, Size: 0xc]
	byte MaterialDomain;//[Offset: 0x108, Size: 0x1]
	byte BlendMode;//[Offset: 0x109, Size: 0x1]
	byte DecalBlendMode;//[Offset: 0x10a, Size: 0x1]
	byte MaterialDecalResponse;//[Offset: 0x10b, Size: 0x1]
	byte ShadingModel;//[Offset: 0x10c, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x110, Size: 0x4]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x114, Size: 0x1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x118, Size: 0xc]
	ScalarMaterialInput Refraction;//[Offset: 0x12c, Size: 0xc]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x140, Size: 0x10]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x158, Size: 0xc]
	Vector4MaterialInput PlanarReflectionOffsetScale;//[Offset: 0x16c, Size: 0x20]
	bool bAllowOverridingShadingModel;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x180, Size: 0x1]
	bool bEnableSeparateTranslucency;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x180, Size: 0x1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x180, Size: 0x1]
	bool bFullScreenTranslucency;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x180, Size: 0x1]
	bool bRenderAfterPostProcess;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x180, Size: 0x1]
	bool bEnableResponsiveAA;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x180, Size: 0x1]
	bool bScreenSpaceReflections;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x180, Size: 0x1]
	bool bContactShadows;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x180, Size: 0x1]
	bool TwoSided;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x181, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x181, Size: 0x1]
	bool DitherOpacityMask;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x181, Size: 0x1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x181, Size: 0x1]
	bool bForceGammaSpace;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x181, Size: 0x1]
	bool bForceNotDoGammaInPC;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x181, Size: 0x1]
	int NumCustomizedUVs;//[Offset: 0x184, Size: 0x4]
	byte TranslucencyLightingMode;//[Offset: 0x188, Size: 0x1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x18c, Size: 0x4]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x190, Size: 0x1]
	float TranslucentShadowDensityScale;//[Offset: 0x194, Size: 0x4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x198, Size: 0x4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x19c, Size: 0x4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x1a0, Size: 0x4]
	float TranslucentBackscatteringExponent;//[Offset: 0x1a4, Size: 0x4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x1a8, Size: 0x10]
	float TranslucentShadowStartOffset;//[Offset: 0x1b8, Size: 0x4]
	bool bDisableDepthTest;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x1bc, Size: 0x1]
	bool bInverseDepthTest;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x1bc, Size: 0x1]
	bool bWriteOnlyAlpha;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x1bc, Size: 0x1]
	bool bWriteFakeShadowStencil;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x1bc, Size: 0x1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x1bc, Size: 0x1]
	bool bTangentSpaceNormal;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x1bc, Size: 0x1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x1bc, Size: 0x1]
	bool bBlockGI;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x1bc, Size: 0x1]
	float LDRTonemappingBrightness;//[Offset: 0x1c0, Size: 0x4]
	float AdjustHairShadowDepthMask;//[Offset: 0x1c4, Size: 0x4]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x1c8, Size: 0x1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x1c8, Size: 0x1]
	bool bUsedWithCinematicSkeletalMesh;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x1c8, Size: 0x1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x1c8, Size: 0x1]
	bool bUsedWithParticleSprites;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x1c8, Size: 0x1]
	bool bUsedWithGPUParticleSprites;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x1c8, Size: 0x1]
	bool bUsedWithBeamTrails;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x1c8, Size: 0x1]
	bool bUsedWithMeshParticles;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x1c8, Size: 0x1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x1c9, Size: 0x1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x1c9, Size: 0x1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x1c9, Size: 0x1]
	bool bUsedWithGeometryCache;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x1c9, Size: 0x1]
	bool bUsedWithStaticLighting;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x1c9, Size: 0x1]
	bool bUsedWithMorphTargets;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x1c9, Size: 0x1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x1c9, Size: 0x1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x1c9, Size: 0x1]
	bool bUsedWithInstancedSkelMeshes;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x1ca, Size: 0x1]
	bool bUsedWithSlateBorder;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x1ca, Size: 0x1]
	bool bUsedWithSlateFont;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x1ca, Size: 0x1]
	bool bUsedWithSlateCustom;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x1ca, Size: 0x1]
	bool bSlateShaderDrawDisabledEffect;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x1ca, Size: 0x1]
	bool bUsesDistortion;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x1ca, Size: 0x1]
	bool bUsedWithClothing;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x1ca, Size: 0x1]
	bool bUsedWithUI;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x1ca, Size: 0x1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x1cb, Size: 0x1]
	bool bFullyRough;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x1cb, Size: 0x1]
	bool bUseFullPrecision;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x1cb, Size: 0x1]
	bool bUseAlphaToCoverage;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x1cb, Size: 0x1]
	bool bNotUseFixMobileGGX;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x1cb, Size: 0x1]
	bool bForceFloatUV;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x1cb, Size: 0x1]
	bool bForceMaterialFloat;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x1cb, Size: 0x1]
	bool bForceSimpleShadowMap;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x1cb, Size: 0x1]
	bool bDisableShadowColor;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x1cc, Size: 0x1]
	bool bDisableVertexAnimationInShadow;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x1cc, Size: 0x1]
	bool bDisableLightGrid;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x1cc, Size: 0x1]
	bool bDarkMetallic;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x1cc, Size: 0x1]
	bool bCustomSkylight;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x1cc, Size: 0x1]
	bool bForceUnlitForLow;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x1cc, Size: 0x1]
	bool bKeepNormalForLow;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x1cc, Size: 0x1]
	bool bUseHQPointLight;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x1cc, Size: 0x1]
	bool bFoliageSoft;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x1cd, Size: 0x1]
	bool bEnableExtraBoneInfluence;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x1cd, Size: 0x1]
	bool bUseForGFur;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x1cd, Size: 0x1]
	bool bUseLightmapDirectionality;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x1cd, Size: 0x1]
	bool bBypassMobilePointLight;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x1cd, Size: 0x1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x1cd, Size: 0x1]
	bool bUseAsEarlyZ;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x1cd, Size: 0x1]
	bool bWettable;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x1cd, Size: 0x1]
	bool bForceOutputLinearSpace;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x1ce, Size: 0x1]
	bool bForce4Bone;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x1ce, Size: 0x1]
	bool bFixAlphaProblem;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x1ce, Size: 0x1]
	bool bUseSSGI;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x1ce, Size: 0x1]
	bool bUseSecondSkyLight;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x1ce, Size: 0x1]
	bool bUseHQForwardReflections;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x1ce, Size: 0x1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x1ce, Size: 0x1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x1ce, Size: 0x1]
	byte D3D11TessellationMode;//[Offset: 0x1cf, Size: 0x1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x1d0, Size: 0x1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x1d0, Size: 0x1]
	float MaxDisplacement;//[Offset: 0x1d4, Size: 0x4]
	bool Wireframe;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x1d8, Size: 0x1]
	bool bOutputVelocityOnBasePass;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x1d8, Size: 0x1]
	byte ShadingRate;//[Offset: 0x1d9, Size: 0x1]
	MaterialExpression*[] Expressions;//[Offset: 0x1e0, Size: 0x10]
	MaterialFunctionInfo[] MaterialFunctionInfos;//[Offset: 0x1f0, Size: 0x10]
	MaterialParameterCollectionInfo[] MaterialParameterCollectionInfos;//[Offset: 0x200, Size: 0x10]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1]
	bool bIsMasked;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x210, Size: 0x1]
	bool bIsPreviewMaterial;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x210, Size: 0x1]
	bool bIsFunctionPreviewMaterial;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x210, Size: 0x1]
	bool bUseMaterialAttributes;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x210, Size: 0x1]
	bool bUseTranslucencyVertexFog;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x210, Size: 0x1]
	bool bIsSky;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x210, Size: 0x1]
	bool bComputeFogPerPixel;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x210, Size: 0x1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x211, Size: 0x1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x211, Size: 0x1]
	uint32 UsageFlagWarnings;//[Offset: 0x214, Size: 0x4]
	byte BlendableLocation;//[Offset: 0x218, Size: 0x1]
	int BlendablePriority;//[Offset: 0x21c, Size: 0x4]
	bool BlendableOutputAlpha;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x220, Size: 0x1]
	byte RefractionMode;//[Offset: 0x221, Size: 0x1]
	float RefractionDepthBias;//[Offset: 0x224, Size: 0x4]
	bool bIsForceEnableTranslucencyDepthWrite;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x228, Size: 0x1]
	bool bZWrite;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x228, Size: 0x1]
	bool DisableACESTonemapping;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x229, Size: 0x1]
	bool bHighDefinitionScene;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x22a, Size: 0x1]
	bool bSharedNormalMeshAndParticle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x22b, Size: 0x1]
	Guid StateId;//[Offset: 0x22c, Size: 0x10]
	bool[] CachedQualityLevelsUsed;//[Offset: 0x268, Size: 0x10]
	Texture*[] ExpressionTextureReferences;//[Offset: 0x318, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ScalarMaterialInput.MaterialInput
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: VectorMaterialInput.MaterialInput
<----------Generated by SSpawner v1.0.2---------->


Class: ColorMaterialInput.MaterialInput
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0, Size: 0x4]
	FName ExpressionName;//[Offset: 0x4, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: Vector4MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	Vector4 Constant;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: Vector4
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
	float Z;//[Offset: 0x8, Size: 0x4]
	float W;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x28, Size: 0x8]
	MaterialFunction* Function;//[Offset: 0x30, Size: 0x8]
	bool bIsParameterExpression;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialFunction.MaterialFunctionInterface.Object
	FString Description;//[Offset: 0x40, Size: 0x10]
	bool bExposeToLibrary;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bPrefixParameterNames;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	MaterialExpression*[] FunctionExpressions;//[Offset: 0x58, Size: 0x10]
	bool bReentrantFlag;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialFunctionInterface.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	byte MaterialFunctionUsage;//[Offset: 0x38, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialFunctionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface* Function;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialParameterCollectionInfo
	Guid StateId;//[Offset: 0x0, Size: 0x10]
	MaterialParameterCollection* ParameterCollection;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialParameterCollection.Object
	Guid StateId;//[Offset: 0x28, Size: 0x10]
	CollectionScalarParameter[] ScalarParameters;//[Offset: 0x38, Size: 0x10]
	CollectionVectorParameter[] VectorParameters;//[Offset: 0x48, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: CollectionScalarParameter.CollectionParameterBase
	float DefaultValue;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CollectionParameterBase
	FName ParameterName;//[Offset: 0x0, Size: 0x8]
	Guid ID;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: CollectionVectorParameter.CollectionParameterBase
	LinearColor DefaultValue;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: Texture.Object
	Guid LightingGuid;//[Offset: 0x30, Size: 0x10]
	int MaxTextureSize;//[Offset: 0x40, Size: 0x4]
	int MaxTextureSizePC;//[Offset: 0x44, Size: 0x4]
	int LODBias;//[Offset: 0x48, Size: 0x4]
	int NumCinematicMipLevels;//[Offset: 0x4c, Size: 0x4]
	byte CompressionSettings;//[Offset: 0x50, Size: 0x1]
	byte Filter;//[Offset: 0x51, Size: 0x1]
	byte LODGroup;//[Offset: 0x52, Size: 0x1]
	bool srgb;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x53, Size: 0x1]
	bool bNotUsedInHighHDRQuality;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x53, Size: 0x1]
	bool bNotUsedInHighQuality;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x53, Size: 0x1]
	bool bNotUsedInMediumQuality;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x53, Size: 0x1]
	bool bNotUsedInLowQuality;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x53, Size: 0x1]
	bool NeverStream;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x53, Size: 0x1]
	bool bNoTiling;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x53, Size: 0x1]
	bool bUseCinematicMipLevels;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x53, Size: 0x1]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x54, Size: 0x1]
	int CachedCombinedLODBias;//[Offset: 0x58, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x60, Size: 0x10]
	void UpdateResource();// 0x4f0dd2c
<----------Generated by SSpawner v1.0.2---------->


Class: MeshUVChannelInfo
	bool bInitialized;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverrideDensities;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float LocalUVDensities;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BoneMirrorInfo
	int SourceIndex;//[Offset: 0x0, Size: 0x4]
	byte BoneFlipAxis;//[Offset: 0x4, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshLODInfo
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	int[] LODMaterialMap;//[Offset: 0x8, Size: 0x10]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x18, Size: 0x3c]
	BoneReference[] BonesToRemove;//[Offset: 0x58, Size: 0x10]
	BoneReference[] BonesToPrioritize;//[Offset: 0x68, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x78, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x80, Size: 0x8]
	AnimSequence* BakePoseOverride;//[Offset: 0x88, Size: 0x8]
	FString SourceImportFilename;//[Offset: 0x90, Size: 0x10]
	bool bHasBeenSimplified;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	bool bHasPerLODVertexColors;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: PerPlatformFloat
	float Default;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshOptimizationSettings
	byte TerminationCriterion;//[Offset: 0x0, Size: 0x1]
	float NumOfTrianglesPercentage;//[Offset: 0x4, Size: 0x4]
	float NumOfVertPercentage;//[Offset: 0x8, Size: 0x4]
	uint32 MaxNumOfTriangles;//[Offset: 0xc, Size: 0x4]
	uint32 MaxNumOfVerts;//[Offset: 0x10, Size: 0x4]
	float MaxDeviationPercentage;//[Offset: 0x14, Size: 0x4]
	byte ReductionMethod;//[Offset: 0x18, Size: 0x1]
	byte SilhouetteImportance;//[Offset: 0x19, Size: 0x1]
	byte TextureImportance;//[Offset: 0x1a, Size: 0x1]
	byte ShadingImportance;//[Offset: 0x1b, Size: 0x1]
	byte SkinningImportance;//[Offset: 0x1c, Size: 0x1]
	bool bRemapMorphTargets;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x1d, Size: 0x1]
	bool bRecalcNormals;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x1d, Size: 0x1]
	float WeldingThreshold;//[Offset: 0x20, Size: 0x4]
	float NormalsThreshold;//[Offset: 0x24, Size: 0x4]
	int MaxBonesPerVertex;//[Offset: 0x28, Size: 0x4]
	bool bEnforceBoneBoundaries;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	float VolumeImportance;//[Offset: 0x30, Size: 0x4]
	bool bLockEdges;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x34, Size: 0x1]
	int BaseLOD;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0xa8, Size: 0x4]
	TrackToSkeletonMap[] TrackToSkeletonMapTable;//[Offset: 0xb0, Size: 0x10]
	AnimSequence* RefPoseSeq;//[Offset: 0x168, Size: 0x8]
	int RefFrameIndex;//[Offset: 0x170, Size: 0x4]
	int EncodingPkgVersion;//[Offset: 0x174, Size: 0x4]
	FName RetargetSource;//[Offset: 0x178, Size: 0x8]
	byte AdditiveAnimType;//[Offset: 0x180, Size: 0x1]
	byte RefPoseType;//[Offset: 0x181, Size: 0x1]
	enum interpolation;//[Offset: 0x182, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x183, Size: 0x1]
	bool bEnableRootMotion;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x184, Size: 0x1]
	bool bForceRootLock;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x184, Size: 0x1]
	bool bUseNormalizedRootMotionScale;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x184, Size: 0x1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x184, Size: 0x1]
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x188, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimSequenceBase.AnimationAsset.Object
	AnimNotifyEvent[] Notifies;//[Offset: 0x80, Size: 0x10]
	float SequenceLength;//[Offset: 0x90, Size: 0x4]
	float RateScale;//[Offset: 0x94, Size: 0x4]
	RawCurveTracks RawCurveData;//[Offset: 0x98, Size: 0x10]
	float GetPlayLength();// 0x4cac29c
<----------Generated by SSpawner v1.0.2---------->


Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x38, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x60, Size: 0x10]
	AssetUserData*[] AssetUserData;//[Offset: 0x70, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimNotifyEvent.AnimLinkableElement
	float DisplayTime;//[Offset: 0x30, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x34, Size: 0x4]
	float EndTriggerTimeOffset;//[Offset: 0x38, Size: 0x4]
	float TriggerWeightThreshold;//[Offset: 0x3c, Size: 0x4]
	FName NotifyName;//[Offset: 0x40, Size: 0x8]
	AnimNotify* Notify;//[Offset: 0x48, Size: 0x8]
	AnimNotifyState* NotifyStateClass;//[Offset: 0x50, Size: 0x8]
	float Duration;//[Offset: 0x58, Size: 0x4]
	AnimLinkableElement EndLink;//[Offset: 0x60, Size: 0x30]
	bool bConvertedFromBranchingPoint;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x90, Size: 0x1]
	byte MontageTickType;//[Offset: 0x91, Size: 0x1]
	float NotifyTriggerChance;//[Offset: 0x94, Size: 0x4]
	byte NotifyFilterType;//[Offset: 0x98, Size: 0x1]
	int NotifyFilterLOD;//[Offset: 0x9c, Size: 0x4]
	bool bTriggerOnDedicatedServer;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	bool bTriggerOnFollower;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xa1, Size: 0x1]
	int TrackIndex;//[Offset: 0xa4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimLinkableElement
	AnimMontage* LinkedMontage;//[Offset: 0x8, Size: 0x8]
	int SlotIndex;//[Offset: 0x10, Size: 0x4]
	int SegmentIndex;//[Offset: 0x14, Size: 0x4]
	byte LinkMethod;//[Offset: 0x18, Size: 0x1]
	byte CachedLinkMethod;//[Offset: 0x19, Size: 0x1]
	float SegmentBeginTime;//[Offset: 0x1c, Size: 0x4]
	float SegmentLength;//[Offset: 0x20, Size: 0x4]
	float LinkValue;//[Offset: 0x24, Size: 0x4]
	AnimSequenceBase* LinkedSequence;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimNotify.Object
	bool Received_Notify(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x35332fc
	FString GetNotifyName();// 0x4ca8890
<----------Generated by SSpawner v1.0.2---------->


Class: AnimNotifyState.Object
	bool Received_NotifyTick(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float FrameDeltaTime);// 0x35332fc
	bool Received_NotifyEnd(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation);// 0x35332fc
	bool Received_NotifyBegin(SkeletalMeshComponent* MeshComp, AnimSequenceBase* Animation, float TotalDuration);// 0x35332fc
	FString GetNotifyName();// 0x4ca9ce8
<----------Generated by SSpawner v1.0.2---------->


Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0xa8, Size: 0x38]
	float BlendInTime;//[Offset: 0xe0, Size: 0x4]
	AlphaBlend BlendOut;//[Offset: 0xe8, Size: 0x38]
	float BlendOutTime;//[Offset: 0x120, Size: 0x4]
	float BlendOutTriggerTime;//[Offset: 0x124, Size: 0x4]
	FName SyncGroup;//[Offset: 0x128, Size: 0x8]
	int SyncSlotIndex;//[Offset: 0x130, Size: 0x4]
	MarkerSyncData MarkerData;//[Offset: 0x138, Size: 0x20]
	CompositeSection[] CompositeSections;//[Offset: 0x158, Size: 0x10]
	SlotAnimationTrack[] SlotAnimTracks;//[Offset: 0x168, Size: 0x10]
	BranchingPoint[] BranchingPoints;//[Offset: 0x178, Size: 0x10]
	bool bEnableRootMotionTranslation;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x188, Size: 0x1]
	bool bEnableRootMotionRotation;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x189, Size: 0x1]
	bool bEnableAutoBlendOut;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x18a, Size: 0x1]
	byte RootMotionRootLock;//[Offset: 0x18b, Size: 0x1]
	BranchingPointMarker[] BranchingPointMarkers;//[Offset: 0x190, Size: 0x10]
	int[] BranchingPointStateNotifyIndices;//[Offset: 0x1a0, Size: 0x10]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x1b0, Size: 0x28]
	FName TimeStretchCurveName;//[Offset: 0x1d8, Size: 0x8]
	float GetDefaultBlendOutTime();// 0x4ca25f4
<----------Generated by SSpawner v1.0.2---------->


Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
<----------Generated by SSpawner v1.0.2---------->


Class: AlphaBlend
	enum BlendOption;//[Offset: 0x0, Size: 0x1]
	CurveFloat* CustomCurve;//[Offset: 0x8, Size: 0x8]
	float BlendTime;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x30, Size: 0x70]
	bool bIsEventCurve;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	float GetFloatValue(float InTime);// 0x4d0a6b4
<----------Generated by SSpawner v1.0.2---------->


Class: CurveBase.Object
	void GetValueRange(out float MinValue, out float MaxValue);// 0x4d09ec4
	void GetTimeRange(out float MinTime, out float MaxTime);// 0x4d09de8
<----------Generated by SSpawner v1.0.2---------->


Class: RichCurve.IndexedCurve
	byte PreInfinityExtrap;//[Offset: 0x58, Size: 0x1]
	byte PostInfinityExtrap;//[Offset: 0x59, Size: 0x1]
	float DefaultValue;//[Offset: 0x5c, Size: 0x4]
	RichCurveKey[] Keys;//[Offset: 0x60, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x8, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: KeyHandleMap
<----------Generated by SSpawner v1.0.2---------->


Class: RichCurveKey
	byte InterpMode;//[Offset: 0x0, Size: 0x1]
	byte TangentMode;//[Offset: 0x1, Size: 0x1]
	byte TangentWeightMode;//[Offset: 0x2, Size: 0x1]
	float Time;//[Offset: 0x4, Size: 0x4]
	float Value;//[Offset: 0x8, Size: 0x4]
	float ArriveTangent;//[Offset: 0xc, Size: 0x4]
	float ArriveTangentWeight;//[Offset: 0x10, Size: 0x4]
	float LeaveTangent;//[Offset: 0x14, Size: 0x4]
	float LeaveTangentWeight;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MarkerSyncData
	AnimSyncMarker[] AuthoredSyncMarkers;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimSyncMarker
	FName MarkerName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CompositeSection.AnimLinkableElement
	FName SectionName;//[Offset: 0x30, Size: 0x8]
	float StartTime;//[Offset: 0x38, Size: 0x4]
	FName NextSectionName;//[Offset: 0x3c, Size: 0x8]
	AnimMetaData*[] MetaData;//[Offset: 0x48, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimMetaData.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SlotAnimationTrack
	FName SlotName;//[Offset: 0x0, Size: 0x8]
	AnimTrack AnimTrack;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimTrack
	AnimSegment[] AnimSegments;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimSegment
	AnimSequenceBase* AnimReference;//[Offset: 0x0, Size: 0x8]
	float StartPos;//[Offset: 0x8, Size: 0x4]
	float AnimStartTime;//[Offset: 0xc, Size: 0x4]
	float AnimEndTime;//[Offset: 0x10, Size: 0x4]
	float AnimPlayRate;//[Offset: 0x14, Size: 0x4]
	int LoopingCount;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BranchingPoint.AnimLinkableElement
	FName EventName;//[Offset: 0x30, Size: 0x8]
	float DisplayTime;//[Offset: 0x38, Size: 0x4]
	float TriggerTimeOffset;//[Offset: 0x3c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BranchingPointMarker
	int NotifyIndex;//[Offset: 0x0, Size: 0x4]
	float TriggerTime;//[Offset: 0x4, Size: 0x4]
	byte NotifyEventType;//[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0, Size: 0x4]
	float CurveValueMinPrecision;//[Offset: 0x4, Size: 0x4]
	TimeStretchCurveMarker[] Markers;//[Offset: 0x8, Size: 0x10]
	float Sum_dT_i_by_C_i;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: TimeStretchCurveMarker
	float Time;//[Offset: 0x0, Size: 0x4]
	float Alpha;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: RawCurveTracks
	FloatCurve[] FloatCurves;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: FloatCurve.AnimCurveBase
	RichCurve FloatCurve;//[Offset: 0x18, Size: 0x70]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimCurveBase
	FName LastObservedName;//[Offset: 0x0, Size: 0x8]
	SmartName Name;//[Offset: 0x8, Size: 0xc]
	int CurveTypeFlags;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SmartName
	FName DisplayName;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: TrackToSkeletonMap
	int BoneTreeIndex;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: PerPlatformInt
	int Default;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: PhysicsAsset.Object
	int[] BoundsBodies;//[Offset: 0x30, Size: 0x10]
	SkeletalBodySetup*[] SkeletalBodySetups;//[Offset: 0x40, Size: 0x10]
	PhysicsConstraintTemplate*[] ConstraintSetup;//[Offset: 0x50, Size: 0x10]
	bool bUseAsyncScene;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bNotForDedicatedServer;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0x108, Size: 0x8]
	BodySetup*[] BodySetup;//[Offset: 0x110, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalBodySetup.BodySetup.Object
	bool bSkipScaleFromAnimation;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	PhysicalAnimationProfile[] PhysicalAnimationData;//[Offset: 0x280, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: PhysicalAnimationProfile
	FName ProfileName;//[Offset: 0x0, Size: 0x8]
	PhysicalAnimationData PhysicalAnimationData;//[Offset: 0x8, Size: 0x24]
<----------Generated by SSpawner v1.0.2---------->


Class: PhysicalAnimationData
	FName BodyName;//[Offset: 0x0, Size: 0x8]
	bool bIsLocalSimulation;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	float OrientationStrength;//[Offset: 0xc, Size: 0x4]
	float AngularVelocityStrength;//[Offset: 0x10, Size: 0x4]
	float PositionStrength;//[Offset: 0x14, Size: 0x4]
	float VelocityStrength;//[Offset: 0x18, Size: 0x4]
	float MaxLinearForce;//[Offset: 0x1c, Size: 0x4]
	float MaxAngularForce;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x28, Size: 0x1b8]
	PhysicsConstraintProfileHandle[] ProfileHandles;//[Offset: 0x1e0, Size: 0x10]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1f0, Size: 0x104]
<----------Generated by SSpawner v1.0.2---------->


Class: ConstraintInstance
	FName JointName;//[Offset: 0x18, Size: 0x8]
	FName ConstraintBone1;//[Offset: 0x20, Size: 0x8]
	FName ConstraintBone2;//[Offset: 0x28, Size: 0x8]
	Vector Pos1;//[Offset: 0x30, Size: 0xc]
	Vector PriAxis1;//[Offset: 0x3c, Size: 0xc]
	Vector SecAxis1;//[Offset: 0x48, Size: 0xc]
	Vector Pos2;//[Offset: 0x54, Size: 0xc]
	Vector PriAxis2;//[Offset: 0x60, Size: 0xc]
	Vector SecAxis2;//[Offset: 0x6c, Size: 0xc]
	Rotator AngularRotationOffset;//[Offset: 0x78, Size: 0xc]
	bool bScaleLinearLimits;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x84, Size: 0x1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x8c, Size: 0x104]
<----------Generated by SSpawner v1.0.2---------->


Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0, Size: 0x4]
	float ProjectionAngularTolerance;//[Offset: 0x4, Size: 0x4]
	float LinearBreakThreshold;//[Offset: 0x8, Size: 0x4]
	float AngularBreakThreshold;//[Offset: 0xc, Size: 0x4]
	LinearConstraint LinearLimit;//[Offset: 0x10, Size: 0x1c]
	ConeConstraint ConeLimit;//[Offset: 0x2c, Size: 0x20]
	TwistConstraint TwistLimit;//[Offset: 0x4c, Size: 0x1c]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68, Size: 0x4c]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4, Size: 0x4c]
	bool bDisableCollision;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x100, Size: 0x1]
	bool bParentDominates;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x100, Size: 0x1]
	bool bEnableProjection;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x100, Size: 0x1]
	bool bAngularBreakable;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x100, Size: 0x1]
	bool bLinearBreakable;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x100, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14, Size: 0x4]
	byte XMotion;//[Offset: 0x18, Size: 0x1]
	byte YMotion;//[Offset: 0x19, Size: 0x1]
	byte ZMotion;//[Offset: 0x1a, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float Restitution;//[Offset: 0x8, Size: 0x4]
	float ContactDistance;//[Offset: 0xc, Size: 0x4]
	bool bSoftConstraint;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14, Size: 0x4]
	float Swing2LimitDegrees;//[Offset: 0x18, Size: 0x4]
	byte Swing1Motion;//[Offset: 0x1c, Size: 0x1]
	byte Swing2Motion;//[Offset: 0x1d, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14, Size: 0x4]
	byte TwistMotion;//[Offset: 0x18, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0, Size: 0xc]
	Vector VelocityTarget;//[Offset: 0xc, Size: 0xc]
	ConstraintDrive XDrive;//[Offset: 0x18, Size: 0x10]
	ConstraintDrive YDrive;//[Offset: 0x28, Size: 0x10]
	ConstraintDrive ZDrive;//[Offset: 0x38, Size: 0x10]
	bool bEnablePositionDrive;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x48, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0, Size: 0x4]
	float Damping;//[Offset: 0x4, Size: 0x4]
	float MaxForce;//[Offset: 0x8, Size: 0x4]
	bool bEnablePositionDrive;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bEnableVelocityDrive;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0, Size: 0x10]
	ConstraintDrive SwingDrive;//[Offset: 0x10, Size: 0x10]
	ConstraintDrive SlerpDrive;//[Offset: 0x20, Size: 0x10]
	Rotator OrientationTarget;//[Offset: 0x30, Size: 0xc]
	Vector AngularVelocityTarget;//[Offset: 0x3c, Size: 0xc]
	byte AngularDriveMode;//[Offset: 0x48, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: PhysicsConstraintProfileHandle
	ConstraintProfileProperties ProfileProperties;//[Offset: 0x0, Size: 0x104]
	FName ProfileName;//[Offset: 0x104, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ThumbnailInfo.Object
<----------Generated by SSpawner v1.0.2---------->


Class: NodeMappingContainer.Object
	<FName,NodeItem> SourceItems;//[Offset: 0x28, Size: 0x50]
	<FName,NodeItem> TargetItems;//[Offset: 0x78, Size: 0x50]
	<FName,FName> SourceToTarget;//[Offset: 0xc8, Size: 0x50]
	Object* SourceAsset;//[Offset: 0x118, Size: 0x28]
	Object* TargetAsset;//[Offset: 0x140, Size: 0x28]
<----------Generated by SSpawner v1.0.2---------->


Class: NodeItem
	FName ParentName;//[Offset: 0x0, Size: 0x8]
	Transform Transform;//[Offset: 0x10, Size: 0x30]
<----------Generated by SSpawner v1.0.2---------->


Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimInstance.Object
	Skeleton* CurrentSkeleton;//[Offset: 0x28, Size: 0x8]
	byte RootMotionMode;//[Offset: 0x30, Size: 0x1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x31, Size: 0x1]
	bool bUsingCopyPoseFromMesh;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x31, Size: 0x1]
	bool bQueueMontageEvents;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x31, Size: 0x1]
	delegate OnMontageBlendingOut;//[Offset: 0x48, Size: 0x10]
	delegate OnMontageStarted;//[Offset: 0x58, Size: 0x10]
	delegate OnMontageEnded;//[Offset: 0x68, Size: 0x10]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x78, Size: 0x10]
	AnimNotifyQueue NotifyQueue;//[Offset: 0x108, Size: 0x70]
	AnimNotifyEvent[] ActiveAnimNotifyState;//[Offset: 0x178, Size: 0x10]
	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);// 0x4c9ddc0
	Pawn* TryGetPawnOwner();// 0x4c9dd84
	void StopSlotAnimation(float InBlendOutTime, FName SlotNodeName);// 0x4c9dccc
	void SnapshotPose(out PoseSnapshot Snapshot);// 0x4c9dc08
	void SetRootMotionMode(byte Value);// 0x4c9db84
	void SetMorphTarget(FName MorphTargetName, float Value);// 0x4c9dacc
	void SavePoseSnapshot(FName SnapshotName);// 0x4c9da48
	void ResetDynamics(enum InTeleportType);// 0x4c9d9cc
	AnimMontage* PlaySlotAnimationAsDynamicMontage(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);// 0x4c9d7a4
	float PlaySlotAnimation(AnimSequenceBase* Asset, FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);// 0x4c9d5f0
	void Montage_Stop(float InBlendOutTime, const AnimMontage* Montage);// 0x4c9d538
	void Montage_SetPosition(const AnimMontage* Montage, float NewPosition);// 0x4c9d480
	void Montage_SetPlayRate(const AnimMontage* Montage, float NewPlayRate);// 0x4c9d3c8
	void Montage_SetNextSection(FName SectionNameToChange, FName NextSection, const AnimMontage* Montage);// 0x4c9d2d8
	void Montage_Resume(const AnimMontage* Montage);// 0x4c9d25c
	float Montage_Play(AnimMontage* MontageToPlay, float InPlayRate, enum ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);// 0x4c9d0dc
	void Montage_Pause(const AnimMontage* Montage);// 0x4c9d060
	void Montage_JumpToSectionsEnd(FName SectionName, const AnimMontage* Montage);// 0x4c9cfac
	void Montage_JumpToSection(FName SectionName, const AnimMontage* Montage);// 0x4c9cef8
	bool Montage_IsPlaying(const AnimMontage* Montage);// 0x4c9ce70
	bool Montage_IsActive(const AnimMontage* Montage);// 0x4c9cde8
	float Montage_GetPosition(const AnimMontage* Montage);// 0x4c9cd64
	float Montage_GetPlayRate(const AnimMontage* Montage);// 0x4c9cce0
	bool Montage_GetIsStopped(const AnimMontage* Montage);// 0x4c9cc58
	FName Montage_GetCurrentSection(const AnimMontage* Montage);// 0x4c9cbd4
	float Montage_GetBlendTime(const AnimMontage* Montage);// 0x4c9cb50
	void LockAIResources(bool bLockMovement, bool LockAILogic);// 0x4c9ca88
	bool IsSyncGroupBetweenMarkers(FName InSyncGroupName, FName PreviousMarker, FName NextMarker, bool bRespectMarkerOrder);// 0x4c9c940
	bool IsPlayingSlotAnimation(const AnimSequenceBase* Asset, FName SlotNodeName);// 0x4c9c878
	bool IsAnyMontagePlaying();// 0x4c9c840
	bool HasMarkerBeenHitThisFrame(FName SyncGroup, FName MarkerName);// 0x4c9c778
	bool GetTimeToClosestMarker(FName SyncGroup, FName MarkerName, out float OutMarkerTime);// 0x4c9c664
	MarkerSyncAnimPosition GetSyncGroupPosition(FName InSyncGroupName);// 0x4c9c5c8
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);// 0x4c9c50c
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);// 0x4c9c450
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);// 0x4c9c394
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);// 0x4c9c2d8
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);// 0x4c9c21c
	SkeletalMeshComponent* GetOwningComponent();// 0x4c9c1e8
	Actor* GetOwningActor();// 0x4c9c1b4
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);// 0x4c9c0f8
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);// 0x4c9c03c
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);// 0x4c9bf80
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);// 0x4c9bec4
	float GetInstanceMachineWeight(int MachineIndex);// 0x4c9be40
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);// 0x4c9bdbc
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);// 0x4c9bd38
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);// 0x4c9bcb4
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);// 0x4c9bc30
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);// 0x4c9bbac
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);// 0x4c9bb28
	float GetCurveValue(FName CurveName);// 0x4c9baa4
	FName GetCurrentStateName(int MachineIndex);// 0x4c9ba20
	AnimMontage* GetCurrentActiveMontage();// 0x4c9b9ec
	void GetAllCurveNames(out FName[] OutNames);// 0x4c9b950
	void GetActiveCurveNames(enum CurveType, out FName[] OutNames);// 0x4c9b878
	void ClearMorphTargets();// 0x4c9b864
	float CalculateDirection(out const Vector Velocity, out const Rotator BaseRotation);// 0x4c9b780
	void BlueprintUpdateAnimation(float DeltaTimeX);// 0x35332fc
	void BlueprintPostEvaluateAnimation();// 0x35332fc
	void BlueprintInitializeAnimation();// 0x35332fc
	void BlueprintBeginPlay();// 0x35332fc
<----------Generated by SSpawner v1.0.2---------->


Class: AnimNotifyQueue
	AnimNotifyEventReference[] AnimNotifies;//[Offset: 0x10, Size: 0x10]
	<FName,AnimNotifyArray> UnfilteredMontageAnimNotifies;//[Offset: 0x20, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimNotifyEventReference
	Object* NotifySource;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimNotifyArray
	AnimNotifyEventReference[] Notifies;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: PoseSnapshot
	Transform[] LocalTransforms;//[Offset: 0x0, Size: 0x10]
	FName[] BoneNames;//[Offset: 0x10, Size: 0x10]
	FName SkeletalMeshName;//[Offset: 0x20, Size: 0x8]
	FName SnapshotName;//[Offset: 0x28, Size: 0x8]
	bool bIsValid;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: MarkerSyncAnimPosition
	FName PreviousMarkerName;//[Offset: 0x0, Size: 0x8]
	FName NextMarkerName;//[Offset: 0x8, Size: 0x8]
	float PositionBetweenMarkers;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ClothingAssetBase.Object
	FString ImportedFilePath;//[Offset: 0x28, Size: 0x10]
	Guid AssetGuid;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshSamplingInfo
	SkeletalMeshSamplingRegion[] Regions;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingBuiltData BuiltData;//[Offset: 0x10, Size: 0x20]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshSamplingRegion
	FName Name;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	SkeletalMeshSamplingRegionMaterialFilter[] MaterialFilters;//[Offset: 0x10, Size: 0x10]
	SkeletalMeshSamplingRegionBoneFilter[] BoneFilters;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshSamplingRegionMaterialFilter
	FName MaterialName;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshSamplingRegionBoneFilter
	FName BoneName;//[Offset: 0x0, Size: 0x8]
	bool bIncludeOrExclude;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bApplyToChildren;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshSamplingBuiltData
	SkeletalMeshSamplingLODBuiltData[] WholeMeshBuiltData;//[Offset: 0x0, Size: 0x10]
	SkeletalMeshSamplingRegionBuiltData[] RegionBuiltData;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshSamplingLODBuiltData
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshSamplingRegionBuiltData
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshLODSettings.DataAsset.Object
	PerPlatformInt MinLOD;//[Offset: 0x30, Size: 0x4]
	SkeletalMeshLODGroupSettings[] LODGroups;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SkeletalMeshLODGroupSettings
	PerPlatformFloat ScreenSize;//[Offset: 0x0, Size: 0x4]
	float LODHysteresis;//[Offset: 0x4, Size: 0x4]
	enum BoneFilterActionOption;//[Offset: 0x8, Size: 0x1]
	BoneFilter[] BoneList;//[Offset: 0x10, Size: 0x10]
	FName[] BonesToPrioritize;//[Offset: 0x20, Size: 0x10]
	float WeightOfPrioritization;//[Offset: 0x30, Size: 0x4]
	AnimSequence* BakePose;//[Offset: 0x38, Size: 0x8]
	SkeletalMeshOptimizationSettings ReductionSettings;//[Offset: 0x40, Size: 0x3c]
<----------Generated by SSpawner v1.0.2---------->


Class: BoneFilter
	bool bExcludeSelf;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	FName BoneName;//[Offset: 0x4, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: Blueprint.BlueprintCore.Object
	bool bRecompileOnLoad;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	class Object* ParentClass;//[Offset: 0x50, Size: 0x8]
	Object* PRIVATE_InnermostPreviousCDO;//[Offset: 0x58, Size: 0x8]
	bool bHasBeenRegenerated;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x60, Size: 0x1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x68, Size: 0x8]
	ActorComponent*[] ComponentTemplates;//[Offset: 0x70, Size: 0x10]
	TimelineTemplate*[] Timelines;//[Offset: 0x80, Size: 0x10]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x90, Size: 0x8]
	byte BlueprintType;//[Offset: 0x98, Size: 0x1]
	int BlueprintSystemVersion;//[Offset: 0x9c, Size: 0x4]
	bool bNativize;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xd0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x28, Size: 0x8]
	class Object* GeneratedClass;//[Offset: 0x30, Size: 0x8]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	bool bLegacyGeneratedClassIsAuthoritative;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x39, Size: 0x1]
	Guid BlueprintGuid;//[Offset: 0x3c, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SimpleConstructionScript.Object
	SCS_Node*[] RootNodes;//[Offset: 0x28, Size: 0x10]
	SCS_Node*[] AllNodes;//[Offset: 0x38, Size: 0x10]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x48, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x28, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x30, Size: 0x8]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x38, Size: 0x50]
	FName AttachToName;//[Offset: 0x88, Size: 0x8]
	FName ParentComponentOrVariableName;//[Offset: 0x90, Size: 0x8]
	FName ParentComponentOwnerClassName;//[Offset: 0x98, Size: 0x8]
	bool bIsParentComponentNative;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xa0, Size: 0x1]
	SCS_Node*[] ChildNodes;//[Offset: 0xa8, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0xb8, Size: 0x10]
	Guid VariableGuid;//[Offset: 0xc8, Size: 0x10]
	FName InternalVariableName;//[Offset: 0xd8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: BlueprintCookedComponentInstancingData
	bool bIsValid;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	BlueprintComponentChangedPropertyInfo[] ChangedPropertyList;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: BlueprintComponentChangedPropertyInfo
	FName PropertyName;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* PropertyScope;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: Struct.Field.Object
<----------Generated by SSpawner v1.0.2---------->


Class: Field.Object
<----------Generated by SSpawner v1.0.2---------->


Class: BPVariableMetaDataEntry
	FName DataKey;//[Offset: 0x0, Size: 0x8]
	FString DataValue;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x28, Size: 0x4]
	byte LengthMode;//[Offset: 0x2c, Size: 0x1]
	bool bAutoPlay;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x2d, Size: 0x1]
	bool bLoop;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x2d, Size: 0x1]
	bool bReplicated;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x2d, Size: 0x1]
	bool bValidatedAsWired;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x2d, Size: 0x1]
	bool bIgnoreTimeDilation;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x2d, Size: 0x1]
	TTEventTrack[] EventTracks;//[Offset: 0x30, Size: 0x10]
	TTFloatTrack[] FloatTracks;//[Offset: 0x40, Size: 0x10]
	TTVectorTrack[] VectorTracks;//[Offset: 0x50, Size: 0x10]
	TTLinearColorTrack[] LinearColorTracks;//[Offset: 0x60, Size: 0x10]
	BPVariableMetaDataEntry[] MetaDataArray;//[Offset: 0x70, Size: 0x10]
	Guid TimelineGuid;//[Offset: 0x80, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: TTEventTrack.TTTrackBase
	CurveFloat* CurveKeys;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: TTTrackBase
	FName TrackName;//[Offset: 0x0, Size: 0x8]
	bool bIsExternalCurve;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: TTFloatTrack.TTTrackBase
	CurveFloat* CurveFloat;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: TTVectorTrack.TTTrackBase
	CurveVector* CurveVector;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x70]
	Vector GetVectorValue(float InTime);// 0x4d0c858
<----------Generated by SSpawner v1.0.2---------->


Class: TTLinearColorTrack.TTTrackBase
	CurveLinearColor* CurveLinearColor;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x30, Size: 0x70]
	float AdjustHue;//[Offset: 0x1f0, Size: 0x4]
	float AdjustSaturation;//[Offset: 0x1f4, Size: 0x4]
	float AdjustBrightness;//[Offset: 0x1f8, Size: 0x4]
	float AdjustBrightnessCurve;//[Offset: 0x1fc, Size: 0x4]
	float AdjustVibrance;//[Offset: 0x200, Size: 0x4]
	float AdjustMinAlpha;//[Offset: 0x204, Size: 0x4]
	float AdjustMaxAlpha;//[Offset: 0x208, Size: 0x4]
	LinearColor GetLinearColorValue(float InTime);// 0x4d0ae00
	LinearColor GetClampedLinearColorValue(float InTime);// 0x4d0ad70
<----------Generated by SSpawner v1.0.2---------->


Class: InheritableComponentHandler.Object
	ComponentOverrideRecord[] Records;//[Offset: 0x28, Size: 0x10]
	ActorComponent*[] UnnecessaryComponents;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ComponentOverrideRecord
	class Object* ComponentClass;//[Offset: 0x0, Size: 0x8]
	ActorComponent* ComponentTemplate;//[Offset: 0x8, Size: 0x8]
	ComponentKey ComponentKey;//[Offset: 0x10, Size: 0x20]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x30, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: ComponentKey
	class Object* OwnerClass;//[Offset: 0x0, Size: 0x8]
	FName SCSVariableName;//[Offset: 0x8, Size: 0x8]
	Guid AssociatedGuid;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SkelMeshComponentLODInfo
	bool[] HiddenMaterials;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SkelMeshSkinWeightInfo
	int Bones;//[Offset: 0x0, Size: 0x4]
	byte Weights;//[Offset: 0x20, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0, Size: 0x8]
	bool bSavedLooping;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bSavedPlaying;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	float SavedPosition;//[Offset: 0xc, Size: 0x4]
	float SavedPlayRate;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ClothingSimulationFactory.Object
<----------Generated by SSpawner v1.0.2---------->


Class: ClothingSimulationInteractor.Object
	void PhysicsAssetUpdated();// 0x43f51dc
	void ClothConfigUpdated();// 0x43f51c0
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x188, Size: 0x8]
	float GravityScale;//[Offset: 0x190, Size: 0x4]
	float MaxStepHeight;//[Offset: 0x194, Size: 0x4]
	float JumpZVelocity;//[Offset: 0x198, Size: 0x4]
	float JumpOffJumpZFactor;//[Offset: 0x19c, Size: 0x4]
	float WalkableFloorAngle;//[Offset: 0x1a0, Size: 0x4]
	float WalkableFloorZ;//[Offset: 0x1a4, Size: 0x4]
	byte MovementMode;//[Offset: 0x1a8, Size: 0x1]
	byte CustomMovementMode;//[Offset: 0x1a9, Size: 0x1]
	enum NetworkSmoothingMode;//[Offset: 0x1aa, Size: 0x1]
	float GroundFriction;//[Offset: 0x1ac, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x1cc, Size: 0x4]
	float MaxWalkSpeedCrouched;//[Offset: 0x1d0, Size: 0x4]
	float MaxSwimSpeed;//[Offset: 0x1d4, Size: 0x4]
	float MaxFlySpeed;//[Offset: 0x1d8, Size: 0x4]
	float MaxCustomMovementSpeed;//[Offset: 0x1dc, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x1e0, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x1e4, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x1e8, Size: 0x4]
	float BrakingFriction;//[Offset: 0x1ec, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x1f0, Size: 0x4]
	float BrakingDecelerationFalling;//[Offset: 0x1f4, Size: 0x4]
	float BrakingDecelerationSwimming;//[Offset: 0x1f8, Size: 0x4]
	float BrakingDecelerationFlying;//[Offset: 0x1fc, Size: 0x4]
	float AirControl;//[Offset: 0x200, Size: 0x4]
	float AirControlBoostMultiplier;//[Offset: 0x204, Size: 0x4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x208, Size: 0x4]
	float FallingLateralFriction;//[Offset: 0x20c, Size: 0x4]
	float CrouchedHalfHeight;//[Offset: 0x210, Size: 0x4]
	float Buoyancy;//[Offset: 0x214, Size: 0x4]
	float PerchRadiusThreshold;//[Offset: 0x218, Size: 0x4]
	float PerchAdditionalHeight;//[Offset: 0x21c, Size: 0x4]
	Rotator RotationRate;//[Offset: 0x220, Size: 0xc]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x22c, Size: 0x1]
	bool bApplyGravityWhileJumping;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x22c, Size: 0x1]
	bool bUseControllerDesiredRotation;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x22c, Size: 0x1]
	bool bOrientRotationToMovement;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x22c, Size: 0x1]
	bool bSweepWhileNavWalking;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x22c, Size: 0x1]
	bool bMovementInProgress;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x22c, Size: 0x1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x22c, Size: 0x1]
	bool bForceMaxAccel;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x22d, Size: 0x1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x22d, Size: 0x1]
	bool bForceNextFloorCheck;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x22d, Size: 0x1]
	bool bShrinkProxyCapsule;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x22d, Size: 0x1]
	bool bCanWalkOffLedges;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x22d, Size: 0x1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x22d, Size: 0x1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x22e, Size: 0x1]
	bool bNetworkAlwaysReplicateTransformUpdateTimestamp;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x22e, Size: 0x1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x22e, Size: 0x1]
	bool bEnablePhysicsInteraction;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x22e, Size: 0x1]
	bool bTouchForceScaledToMass;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x22e, Size: 0x1]
	bool bPushForceScaledToMass;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x22e, Size: 0x1]
	bool bPushForceUsingZOffset;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x22e, Size: 0x1]
	bool bScalePushForceToVelocity;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x22e, Size: 0x1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x230, Size: 0x8]
	float MaxOutOfWaterStepHeight;//[Offset: 0x238, Size: 0x4]
	float OutofWaterZ;//[Offset: 0x23c, Size: 0x4]
	float Mass;//[Offset: 0x240, Size: 0x4]
	float StandingDownwardForceScale;//[Offset: 0x244, Size: 0x4]
	float InitialPushForceFactor;//[Offset: 0x248, Size: 0x4]
	float PushForceFactor;//[Offset: 0x24c, Size: 0x4]
	float PushForcePointZOffsetFactor;//[Offset: 0x250, Size: 0x4]
	float TouchForceFactor;//[Offset: 0x254, Size: 0x4]
	float MinTouchForce;//[Offset: 0x258, Size: 0x4]
	float MaxTouchForce;//[Offset: 0x25c, Size: 0x4]
	float RepulsionForce;//[Offset: 0x260, Size: 0x4]
	Vector Acceleration;//[Offset: 0x264, Size: 0xc]
	Quat LastUpdateRotation;//[Offset: 0x270, Size: 0x10]
	Vector LastUpdateLocation;//[Offset: 0x280, Size: 0xc]
	Vector LastUpdateVelocity;//[Offset: 0x28c, Size: 0xc]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x298, Size: 0x4]
	float ServerLastClientGoodMoveAckTime;//[Offset: 0x29c, Size: 0x4]
	float ServerLastClientAdjustmentTime;//[Offset: 0x2a0, Size: 0x4]
	Vector PendingImpulseToApply;//[Offset: 0x2a4, Size: 0xc]
	Vector PendingForceToApply;//[Offset: 0x2b0, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x2bc, Size: 0x4]
	float MaxSimulationTimeStep;//[Offset: 0x2c8, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x2cc, Size: 0x4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x2d0, Size: 0x4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x2d4, Size: 0x4]
	float MaxDepenetrationWithPawn;//[Offset: 0x2d8, Size: 0x4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x2dc, Size: 0x4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x2e0, Size: 0x4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2e4, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2e8, Size: 0x4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2ec, Size: 0x4]
	float NetProxyShrinkRadius;//[Offset: 0x2f0, Size: 0x4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2f4, Size: 0x4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2f8, Size: 0x4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2fc, Size: 0x4]
	float NetworkMinTimeBetweenClientAckGoodMoves;//[Offset: 0x300, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustments;//[Offset: 0x304, Size: 0x4]
	float NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;//[Offset: 0x308, Size: 0x4]
	float NetworkLargeClientCorrectionDistance;//[Offset: 0x30c, Size: 0x4]
	float LedgeCheckThreshold;//[Offset: 0x310, Size: 0x4]
	float JumpOutOfWaterPitch;//[Offset: 0x314, Size: 0x4]
	FindFloorResult CurrentFloor;//[Offset: 0x318, Size: 0x94]
	byte DefaultLandMovementMode;//[Offset: 0x3ac, Size: 0x1]
	byte DefaultWaterMovementMode;//[Offset: 0x3ad, Size: 0x1]
	byte GroundMovementMode;//[Offset: 0x3ae, Size: 0x1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3af, Size: 0x1]
	bool bImpartBaseVelocityX;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x3af, Size: 0x1]
	bool bImpartBaseVelocityY;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x3af, Size: 0x1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x3af, Size: 0x1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x3af, Size: 0x1]
	bool bJustTeleported;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x3af, Size: 0x1]
	bool bNetworkUpdateReceived;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x3af, Size: 0x1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x3af, Size: 0x1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3b0, Size: 0x1]
	bool bNotifyApex;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x3b0, Size: 0x1]
	bool bCheatFlying;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x3b0, Size: 0x1]
	bool bWantsToCrouch;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x3b0, Size: 0x1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x3b0, Size: 0x1]
	bool bIgnoreBaseRotation;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x3b0, Size: 0x1]
	bool bFastAttachedMove;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x3b0, Size: 0x1]
	bool bAlwaysCheckFloor;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x3b0, Size: 0x1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3b1, Size: 0x1]
	bool bPerformingJumpOff;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x3b1, Size: 0x1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x3b1, Size: 0x1]
	bool bUseRVOAvoidance;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x3b1, Size: 0x1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x3b1, Size: 0x1]
	bool bWasSimulatingRootMotion;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x3b1, Size: 0x1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x3b1, Size: 0x1]
	bool bHasRequestedVelocity;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3b2, Size: 0x1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x3b2, Size: 0x1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x3b2, Size: 0x1]
	bool bProjectNavMeshWalking;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x3b2, Size: 0x1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x3b2, Size: 0x1]
	float AvoidanceConsiderationRadius;//[Offset: 0x3c4, Size: 0x4]
	Vector RequestedVelocity;//[Offset: 0x3c8, Size: 0xc]
	int AvoidanceUID;//[Offset: 0x3d4, Size: 0x4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x3d8, Size: 0x4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x3dc, Size: 0x4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x3e0, Size: 0x4]
	float AvoidanceWeight;//[Offset: 0x3e4, Size: 0x4]
	Vector PendingLaunchVelocity;//[Offset: 0x3e8, Size: 0xc]
	float NavMeshProjectionInterval;//[Offset: 0x498, Size: 0x4]
	float NavMeshProjectionTimer;//[Offset: 0x49c, Size: 0x4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x4a0, Size: 0x4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x4a4, Size: 0x4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x4a8, Size: 0x4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x4ac, Size: 0x4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x4b0, Size: 0x58]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x518, Size: 0x4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x520, Size: 0xf8]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x6b0, Size: 0x40]
	Vector AnimRootMotionVelocity;//[Offset: 0x6f0, Size: 0xc]
	void SetWalkableFloorZ(float InWalkableFloorZ);// 0x4cf944c
	void SetWalkableFloorAngle(float InWalkableFloorAngle);// 0x4cf93d0
	void SetMovementMode(byte NewMovementMode, byte NewCustomMode);// 0x4cf9310
	void SetGroupsToIgnoreMask(out const NavAvoidanceMask GroupMask);// 0x4cf9288
	void SetGroupsToIgnore(int GroupFlags);// 0x4cf920c
	void SetGroupsToAvoidMask(out const NavAvoidanceMask GroupMask);// 0x4cf9184
	void SetGroupsToAvoid(int GroupFlags);// 0x4cf9108
	void SetAvoidanceGroupMask(out const NavAvoidanceMask GroupMask);// 0x4cf9080
	void SetAvoidanceGroup(int GroupFlags);// 0x4cf9004
	void SetAvoidanceEnabled(bool bEnable);// 0x4cf8f80
	float K2_GetWalkableFloorZ();// 0x4cf8f4c
	float K2_GetWalkableFloorAngle();// 0x4cf8f18
	float K2_GetModifiedMaxAcceleration();// 0x4cf8edc
	void K2_FindFloor(Vector CapsuleLocation, out FindFloorResult FloorResult);// 0x4cf8df0
	void K2_ComputeFloorDist(Vector CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, out FindFloorResult FloorResult);// 0x4cf8c54
	bool IsWalking();// 0x4cf8c14
	bool IsWalkable(out const HitResult Hit);// 0x4cf8b58
	float GetValidPerchRadius();// 0x4cf8b24
	float GetPerchRadiusThreshold();// 0x4cf8af0
	PrimitiveComponent* GetMovementBase();// 0x4cf8abc
	float GetMinAnalogSpeed();// 0x4cf8a80
	float GetMaxJumpHeightWithJumpTime();// 0x4cf8a44
	float GetMaxJumpHeight();// 0x4cf8a08
	float GetMaxBrakingDeceleration();// 0x4cf89cc
	float GetMaxAcceleration();// 0x4cf8990
	Vector GetLastUpdateVelocity();// 0x4cf8968
	Rotator GetLastUpdateRotation();// 0x4cf892c
	Vector GetLastUpdateLocation();// 0x4cf8908
	Vector GetImpartedMovementBaseVelocity();// 0x4cf88c8
	Vector GetCurrentAcceleration();// 0x4cf8890
	Character* GetCharacterOwner();// 0x4cf8874
	float GetAnalogInputModifier();// 0x4cf8840
	void DisableMovement();// 0x4cf8824
	void ClearAccumulatedForces();// 0x4cf8808
	void CapsuleTouched(PrimitiveComponent* OverlappedComp, Actor* Other, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x4cf8628
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x4cf84e0
	void AddImpulse(Vector Impulse, bool bVelocityChange);// 0x4cf8418
	void AddForce(Vector Force);// 0x4cf8394
<----------Generated by SSpawner v1.0.2---------->


Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x170, Size: 0x8]
	Vector K2_GetInputVector();// 0x4e6c1f4
	bool IsMoveInputIgnored();// 0x4e6c1b4
	Vector GetPendingInputVector();// 0x4e6c17c
	Pawn* GetPawnOwner();// 0x4e6c148
	Vector GetLastInputVector();// 0x4e6c110
	Vector ConsumeInputVector();// 0x4e6c0d0
	void AddInputVector(Vector WorldVector, bool bForce);// 0x4e6c008
<----------Generated by SSpawner v1.0.2---------->


Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0x130, Size: 0x30]
	float FixedPathBrakingDistance;//[Offset: 0x160, Size: 0x4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x164, Size: 0x1]
	bool bUseAccelerationForPaths;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x164, Size: 0x1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x164, Size: 0x1]
	MovementProperties MovementState;//[Offset: 0x165, Size: 0x1]
	Object* PathFollowingComp;//[Offset: 0x168, Size: 0x8]
	void StopMovementKeepPathing();// 0x4e3a118
	void StopActiveMovement();// 0x4e3a0fc
	bool IsSwimming();// 0x4e3a0bc
	bool IsMovingOnGround();// 0x4e3a07c
	bool IsFlying();// 0x4e3a03c
	bool IsFalling();// 0x4e39ffc
	bool IsCrouching();// 0x4e39fbc
<----------Generated by SSpawner v1.0.2---------->


Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xf0, Size: 0x8]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xf8, Size: 0x8]
	Vector Velocity;//[Offset: 0x104, Size: 0xc]
	Vector PlaneConstraintNormal;//[Offset: 0x110, Size: 0xc]
	Vector PlaneConstraintOrigin;//[Offset: 0x11c, Size: 0xc]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x128, Size: 0x1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x128, Size: 0x1]
	bool bTickBeforeOwner;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x128, Size: 0x1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x128, Size: 0x1]
	bool bConstrainToPlane;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x128, Size: 0x1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x128, Size: 0x1]
	bool bAutoRegisterPhysicsVolumeUpdates;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x128, Size: 0x1]
	bool bComponentShouldUpdatePhysicsVolume;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x128, Size: 0x1]
	enum PlaneConstraintAxisSetting;//[Offset: 0x12b, Size: 0x1]
	void StopMovementImmediately();// 0x4e322ec
	void SnapUpdatedComponentToPlane();// 0x4e322d0
	void SetUpdatedComponent(SceneComponent* NewUpdatedComponent);// 0x4e3224c
	void SetPlaneConstraintOrigin(Vector PlaneOrigin);// 0x4e321c8
	void SetPlaneConstraintNormal(Vector PlaneNormal);// 0x4e32144
	void SetPlaneConstraintFromVectors(Vector Forward, Vector Up);// 0x4e32080
	void SetPlaneConstraintEnabled(bool bEnabled);// 0x4e31ff4
	void SetPlaneConstraintAxisSetting(enum NewAxisSetting);// 0x4e31f70
	void PhysicsVolumeChanged(PhysicsVolume* NewVolume);// 0x4e31eec
	bool K2_MoveUpdatedComponent(Vector Delta, Rotator NewRotation, out HitResult OutHit, bool bSweep, bool bTeleport);// 0x4e31d28
	float K2_GetModifiedMaxSpeed();// 0x4e31cec
	float K2_GetMaxSpeedModifier();// 0x4e31cb0
	bool IsExceedingMaxSpeed(float MaxSpeed);// 0x4e31c20
	Vector GetPlaneConstraintOrigin();// 0x4e31be0
	Vector GetPlaneConstraintNormal();// 0x4e31ba0
	enum GetPlaneConstraintAxisSetting();// 0x4e31b84
	PhysicsVolume* GetPhysicsVolume();// 0x4e31b48
	float GetMaxSpeed();// 0x4e31b0c
	float GetGravityZ();// 0x4e31ad0
	Vector ConstrainNormalToPlane(Vector Normal);// 0x4e31a38
	Vector ConstrainLocationToPlane(Vector Location);// 0x4e319a0
	Vector ConstrainDirectionToPlane(Vector Direction);// 0x4e31908
<----------Generated by SSpawner v1.0.2---------->


Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4, Size: 0x4]
	float AgentHeight;//[Offset: 0x8, Size: 0x4]
	float AgentStepHeight;//[Offset: 0xc, Size: 0x4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10, Size: 0x4]
	SoftClassPath PreferredNavData;//[Offset: 0x18, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bCanJump;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bCanWalk;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bCanSwim;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bCanFly;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SoftClassPath.SoftObjectPath
<----------Generated by SSpawner v1.0.2---------->


Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0, Size: 0x8]
	FString SubPathString;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bWalkableFloor;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bLineTrace;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	float FloorDist;//[Offset: 0x4, Size: 0x4]
	float LineDist;//[Offset: 0x8, Size: 0x4]
	HitResult HitResult;//[Offset: 0xc, Size: 0x88]
<----------Generated by SSpawner v1.0.2---------->


Class: HitResult
	bool bBlockingHit;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bStartPenetrating;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	int FaceIndex;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]
	float Distance;//[Offset: 0xc, Size: 0x4]
	Vector_NetQuantize Location;//[Offset: 0x10, Size: 0xc]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x1c, Size: 0xc]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x28, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x34, Size: 0xc]
	Vector_NetQuantize TraceStart;//[Offset: 0x40, Size: 0xc]
	Vector_NetQuantize TraceEnd;//[Offset: 0x4c, Size: 0xc]
	float PenetrationDepth;//[Offset: 0x58, Size: 0x4]
	int Item;//[Offset: 0x5c, Size: 0x4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x60, Size: 0x8]
	Actor* Actor;//[Offset: 0x68, Size: 0x8]
	PrimitiveComponent* Component;//[Offset: 0x70, Size: 0x8]
	FName BoneName;//[Offset: 0x78, Size: 0x8]
	FName MyBoneName;//[Offset: 0x80, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: Vector_NetQuantize.Vector
<----------Generated by SSpawner v1.0.2---------->


Class: Vector_NetQuantizeNormal.Vector
<----------Generated by SSpawner v1.0.2---------->


Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bGroup1;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bGroup2;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bGroup3;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bGroup4;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bGroup5;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bGroup6;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bGroup7;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bGroup8;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bGroup9;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bGroup10;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bGroup11;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bGroup12;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bGroup13;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bGroup14;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bGroup15;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bGroup16;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bGroup17;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bGroup18;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bGroup19;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bGroup20;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bGroup21;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bGroup22;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bGroup23;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bGroup24;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bGroup25;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bGroup26;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bGroup27;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bGroup28;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bGroup29;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bGroup30;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bGroup31;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction
<----------Generated by SSpawner v1.0.2---------->


Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xe8, Size: 0x1]
	bool bHasOverrideSources;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xe8, Size: 0x1]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xe8, Size: 0x1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0xe9, Size: 0x1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0xec, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: Vector_NetQuantize10.Vector
<----------Generated by SSpawner v1.0.2---------->


Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float BlendWeight;//[Offset: 0x4, Size: 0x4]
	Transform RootMotionTransform;//[Offset: 0x10, Size: 0x30]
<----------Generated by SSpawner v1.0.2---------->


Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x5e0, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x5e4, Size: 0x4]
	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);// 0x4cef724
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);// 0x4cef660
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);// 0x4cef59c
	void GetUnscaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x4cef4b4
	void GetUnscaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x4cef3d4
	float GetUnscaledCapsuleRadius();// 0x4cef3b8
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x4cef394
	float GetUnscaledCapsuleHalfHeight();// 0x4cef378
	float GetShapeScale();// 0x4cef338
	void GetScaledCapsuleSize_WithoutHemisphere(out float OutRadius, out float OutHalfHeightWithoutHemisphere);// 0x4cef220
	void GetScaledCapsuleSize(out float OutRadius, out float OutHalfHeight);// 0x4cef124
	float GetScaledCapsuleRadius();// 0x4cef0f4
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x4cef0b4
	float GetScaledCapsuleHalfHeight();// 0x4cef090
<----------Generated by SSpawner v1.0.2---------->


Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ShapeBodySetup;//[Offset: 0x5c8, Size: 0x8]
	Color ShapeColor;//[Offset: 0x5d0, Size: 0x4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x5d4, Size: 0x1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x5d4, Size: 0x1]
	bool bDynamicObstacle;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x5d4, Size: 0x1]
	class NavAreaBase* AreaClass;//[Offset: 0x5d8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: NavAreaBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0, Size: 0x8]
	FName BoneName;//[Offset: 0x8, Size: 0x8]
	Vector_NetQuantize100 Location;//[Offset: 0x10, Size: 0xc]
	Rotator Rotation;//[Offset: 0x1c, Size: 0xc]
	bool bServerHasBaseComponent;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	bool bServerHasVelocity;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x2a, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SimulatedRootMotionReplicatedMove
	float Time;//[Offset: 0x0, Size: 0x4]
	RepRootMotionMontage RootMotion;//[Offset: 0x8, Size: 0x158]
<----------Generated by SSpawner v1.0.2---------->


Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	AnimMontage* AnimMontage;//[Offset: 0x8, Size: 0x8]
	float Position;//[Offset: 0x10, Size: 0x4]
	Vector_NetQuantize100 Location;//[Offset: 0x14, Size: 0xc]
	Rotator Rotation;//[Offset: 0x20, Size: 0xc]
	PrimitiveComponent* MovementBase;//[Offset: 0x30, Size: 0x8]
	FName MovementBaseBoneName;//[Offset: 0x38, Size: 0x8]
	bool bRelativePosition;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x40, Size: 0x1]
	bool bRelativeRotation;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x41, Size: 0x1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x48, Size: 0xf8]
	Vector_NetQuantize10 Acceleration;//[Offset: 0x140, Size: 0xc]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0x14c, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bScaleMomentumByMass;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bRadialDamageVelChange;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	float DamageImpulse;//[Offset: 0x2c, Size: 0x4]
	float DestructibleImpulse;//[Offset: 0x30, Size: 0x4]
	float DestructibleDamageSpreadScale;//[Offset: 0x34, Size: 0x4]
	float DamageFalloff;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerController.Controller.Actor.Object
	player* player;//[Offset: 0x3b8, Size: 0x8]
	Pawn* AcknowledgedPawn;//[Offset: 0x3c0, Size: 0x8]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x3c8, Size: 0x8]
	HUD* MyHUD;//[Offset: 0x3d0, Size: 0x8]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x3d8, Size: 0x8]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x3e0, Size: 0x8]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x3e8, Size: 0x1]
	Rotator TargetViewRotation;//[Offset: 0x3ec, Size: 0xc]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x404, Size: 0x4]
	Actor*[] HiddenActors;//[Offset: 0x410, Size: 0x10]
	PrimitiveComponent*[] HiddenPrimitiveComponents;//[Offset: 0x420, Size: 0x10]
	float LastSpectatorStateSynchTime;//[Offset: 0x434, Size: 0x4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x438, Size: 0xc]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x444, Size: 0xc]
	int ClientCap;//[Offset: 0x450, Size: 0x4]
	CheatManager* CheatManager;//[Offset: 0x458, Size: 0x8]
	class CheatManager* CheatClass;//[Offset: 0x460, Size: 0x8]
	PlayerInput* PlayerInput;//[Offset: 0x468, Size: 0x8]
	ActiveForceFeedbackEffect[] ActiveForceFeedbackEffects;//[Offset: 0x470, Size: 0x10]
	bool bPlayerIsWaiting;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x4f0, Size: 0x1]
	byte NetPlayerIndex;//[Offset: 0x4f1, Size: 0x1]
	NetConnection* PendingSwapConnection;//[Offset: 0x530, Size: 0x8]
	NetConnection* NetConnection;//[Offset: 0x538, Size: 0x8]
	float InputYawScale;//[Offset: 0x54c, Size: 0x4]
	float InputPitchScale;//[Offset: 0x550, Size: 0x4]
	float InputRollScale;//[Offset: 0x554, Size: 0x4]
	bool bShowMouseCursor;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x558, Size: 0x1]
	bool bEnableClickEvents;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x558, Size: 0x1]
	bool bEnableTouchEvents;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x558, Size: 0x1]
	bool bEnableMouseOverEvents;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x558, Size: 0x1]
	bool bEnableTouchOverEvents;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x558, Size: 0x1]
	bool bForceFeedbackEnabled;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x558, Size: 0x1]
	float ForceFeedbackScale;//[Offset: 0x55c, Size: 0x4]
	Key[] ClickEventKeys;//[Offset: 0x560, Size: 0x10]
	byte DefaultMouseCursor;//[Offset: 0x570, Size: 0x1]
	byte CurrentMouseCursor;//[Offset: 0x571, Size: 0x1]
	byte DefaultClickTraceChannel;//[Offset: 0x572, Size: 0x1]
	byte CurrentClickTraceChannel;//[Offset: 0x573, Size: 0x1]
	float HitResultTraceDistance;//[Offset: 0x574, Size: 0x4]
	uint16 SeamlessTravelCount;//[Offset: 0x578, Size: 0x2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x57a, Size: 0x2]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x5f0, Size: 0x8]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x5f8, Size: 0x1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x610, Size: 0x8]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x668, Size: 0x8]
	bool bIsLocalPlayerController;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x674, Size: 0x1]
	Vector SpawnLocation;//[Offset: 0x678, Size: 0xc]
	bool WasInputKeyJustReleased(Key Key);// 0x4e87b48
	bool WasInputKeyJustPressed(Key Key);// 0x4e879dc
	void ToggleSpeaking(bool bInSpeaking);// 0x4e87950
	void SwitchLevel(FString URL);// 0x4e878bc
	void StopHapticEffect(enum Hand);// 0x4e87840
	void StartFire(byte FireModeNum);// 0x4e877bc
	void SetVirtualJoystickVisibility(bool bVisible);// 0x4e87730
	void SetViewTargetWithBlend(Actor* NewViewTarget, float BlendTime, byte BlendFunc, float BlendExp, bool bLockOutgoing);// 0x4e875b4
	void SetName(FString S);// 0x4e87520
	void SetMouseLocation(const int X, const int Y);// 0x4e8746c
	void SetMouseCursorWidget(byte Cursor, UserWidget* CursorWidget);// 0x4e873b4
	void SetHapticsByValue(const float Frequency, const float Amplitude, enum Hand);// 0x4e872c4
	void SetDisableHaptics(bool bNewDisabled);// 0x4e87238
	void SetControllerLightColor(Color Color);// 0x4e871c0
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x4e87014
	void SetAudioListenerOverride(SceneComponent* AttachToComponent, Vector Location, Rotator Rotation);// 0x4e86f18
	void SetAudioListenerAttenuationOverride(SceneComponent* AttachToComponent, Vector AttenuationLocationOVerride);// 0x4e86e5c
	void ServerViewSelf(ViewTargetTransitionParams TransitionParams);// 0x4e86d4c
	void ServerViewPrevPlayer();// 0x4e86cf0
	void ServerViewNextPlayer();// 0x4e86c94
	void ServerVerifyViewTarget();// 0x4e86c38
	void ServerUpdateMultipleLevelsVisibility(const UpdateLevelVisibilityLevelInfo[] LevelVisibilities);// 0x4e86b8c
	void ServerUpdateLevelVisibility(FName PackageName, bool bIsVisible);// 0x4e86aa0
	void ServerUpdateCamera(Vector_NetQuantize CamLoc, int CamPitchAndYaw);// 0x4e869b0
	void ServerUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x4e86708
	void ServerToggleAILogging();// 0x4e866ac
	void ServerShortTimeout();// 0x4e86650
	void ServerSetSpectatorWaiting(bool bWaiting);// 0x4e86598
	void ServerSetSpectatorLocation(Vector NewLoc, Rotator NewRot);// 0x4e864a0
	void ServerRestartPlayer();// 0x4e86444
	void ServerPause();// 0x4e863e8
	void ServerNotifyLoadedWorld(FName WorldPackageName);// 0x4e8634c
	void ServerMutePlayer(UniqueNetIdRepl PlayerId);// 0x4e860a4
	void ServerCheckClientPossessionReliable();// 0x4e86048
	void ServerCheckClientPossession();// 0x4e85fec
	void ServerChangeName(FString S);// 0x4e85f30
	void ServerCamera(FName NewMode);// 0x4e85e84
	void ServerAcknowledgePossession(Pawn* P);// 0x4e85dd8
	void SendToConsole(FString Command);// 0x4e85d44
	void RestartLevel();// 0x4e85d28
	bool ProjectWorldLocationToScreen(Vector WorldLocation, out Vector2D ScreenLocation, bool bPlayerViewportRelative);// 0x4e85c08
	void PlayHapticEffect(HapticFeedbackEffect_Base* HapticEffect, enum Hand, float Scale, bool bLoop);// 0x4e85ad0
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, byte Action, LatentActionInfo LatentInfo);// 0x4e85854
	void Pause();// 0x4e85838
	void OnServerStartedVisualLogger(bool bIsLogging);// 0x4e857ac
	void LocalTravel(FString URL);// 0x4e85718
	bool IsInputKeyDown(Key Key);// 0x4e855ac
	void GetViewportSize(out int SizeX, out int SizeY);// 0x4e854d0
	SpectatorPawn* GetSpectatorPawn();// 0x4e854b4
	bool GetMousePosition(out float LocationX, out float LocationY);// 0x4e853c4
	Vector GetInputVectorKeyState(Key Key);// 0x4e85258
	void GetInputTouchState(byte FingerIndex, out float LocationX, out float LocationY, out bool bIsCurrentlyPressed);// 0x4e850e8
	void GetInputMouseDelta(out float DeltaX, out float DeltaY);// 0x4e8500c
	void GetInputMotionState(out Vector Tilt, out Vector RotationRate, out Vector Gravity, out Vector Acceleration);// 0x4e84e90
	float GetInputKeyTimeDown(Key Key);// 0x4e84d28
	void GetInputAnalogStickState(byte WhichStick, out float StickX, out float StickY);// 0x4e84c08
	float GetInputAnalogKeyState(Key Key);// 0x4e84aa0
	HUD* GetHUD();// 0x4e84a6c
	bool GetHitResultUnderFingerForObjects(byte FingerIndex, out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x4e848d0
	bool GetHitResultUnderFingerByChannel(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x4e84760
	bool GetHitResultUnderFinger(byte FingerIndex, byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x4e845f0
	bool GetHitResultUnderCursorForObjects(out const byte[] ObjectTypes, bool bTraceComplex, out HitResult HitResult);// 0x4e84490
	bool GetHitResultUnderCursorByChannel(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x4e8435c
	bool GetHitResultUnderCursor(byte TraceChannel, bool bTraceComplex, out HitResult HitResult);// 0x4e84228
	Vector GetFocalLocation();// 0x4e841e8
	void FOV(float NewFOV);// 0x4e84164
	void EnableCheats();// 0x4e84148
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, out Vector WorldLocation, out Vector WorldDirection);// 0x4e83fe8
	bool DeprojectMousePositionToWorld(out Vector WorldLocation, out Vector WorldDirection);// 0x4e83f00
	void ConsoleKey(Key Key);// 0x4e83da0
	void ClientWasKicked(const FText KickReason);// 0x4e83cc0
	void ClientVoiceHandshakeComplete();// 0x4e83ca4
	void ClientUpdateMultipleLevelsStreamingStatus(const UpdateLevelStreamingLevelStatus[] LevelStatuses);// 0x4e83c10
	void ClientUpdateLevelStreamingStatus(FName PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);// 0x4e83a78
	void ClientUnmutePlayer(UniqueNetIdRepl PlayerId);// 0x4e838b0
	void ClientTravelInternal(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x4e83758
	void ClientTravel(FString URL, byte TravelType, bool bSeamless, Guid MapPackageGuid);// 0x4e83608
	void ClientTeamMessage(PlayerState* SenderPlayerState, FString S, FName Type, float MsgLifeTime);// 0x4e834c0
	void ClientStopForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, FName Tag);// 0x4e83404
	void ClientStopCameraShake(class CameraShake Shake, bool bImmediately);// 0x4e8333c
	void ClientStopCameraAnim(CameraAnim* AnimToStop);// 0x4e832b8
	void ClientStartOnlineSession();// 0x4e8329c
	void ClientSpawnCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x4e83218
	void ClientSetViewTarget(Actor* A, ViewTargetTransitionParams TransitionParams);// 0x4e8310c
	void ClientSetSpectatorWaiting(bool bWaiting);// 0x4e83080
	void ClientSetHUD(class HUD NewHUDClass);// 0x4e82ffc
	void ClientSetForceMipLevelsToBeResident(MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);// 0x4e82f00
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);// 0x4e82d98
	void ClientSetCameraMode(FName NewCamMode);// 0x4e82d14
	void ClientSetCameraFade(bool bEnableFading, Color FadeColor, Vector2D FadeAlpha, float FadeTime, bool bFadeAudio);// 0x4e82b8c
	void ClientSetBlockOnAsyncLoading();// 0x4e82b70
	void ClientReturnToMainMenuWithTextReason(const FText ReturnReason);// 0x4e82a90
	void ClientReturnToMainMenu(FString ReturnReason);// 0x4e829fc
	void ClientRetryClientRestart(Pawn* NewPawn);// 0x4e82978
	void ClientRestart(Pawn* NewPawn);// 0x4e828f4
	void ClientReset();// 0x4e828d8
	void ClientRepObjRef(Object* Object);// 0x4e82854
	void ClientReceiveLocalizedMessage(class LocalMessage Message, int Switch, PlayerState* RelatedPlayerState, PlayerState* RelatedPlayerState, Object* OptionalObject);// 0x4e826e4
	void ClientPrestreamTextures(Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);// 0x4e825a0
	void ClientPrepareMapChange(FName LevelName, bool bFirst, bool bLast);// 0x4e82490
	void ClientPlaySoundAtLocation(SoundBase* Sound, Vector Location, float VolumeMultiplier, float PitchMultiplier);// 0x4e82358
	void ClientPlaySound(SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);// 0x4e82260
	void ClientPlayForceFeedback(ForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, bool bIgnoreTimeDilation, FName Tag);// 0x4e82110
	void ClientPlayCameraShake(class CameraShake Shake, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x4e81fd4
	void ClientPlayCameraAnim(CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, byte Space, Rotator CustomPlaySpace);// 0x4e81d5c
	void ClientMutePlayer(UniqueNetIdRepl PlayerId);// 0x4e81b94
	void ClientMessage(FString S, FName Type, float MsgLifeTime);// 0x4e81a88
	void ClientIgnoreMoveInput(bool bIgnore);// 0x4e819fc
	void ClientIgnoreLookInput(bool bIgnore);// 0x4e81970
	void ClientGotoState(FName NewState);// 0x4e818ec
	void ClientGameEnded(Actor* EndGameFocus, bool bIsWinner);// 0x4e81824
	void ClientForceGarbageCollection();// 0x4e81808
	void ClientFlushLevelStreaming();// 0x4e817f4
	void ClientEndOnlineSession();// 0x4e817d8
	void ClientEnableNetworkVoice(bool bEnable);// 0x4e8174c
	void ClientCommitMapChange();// 0x4e81730
	void ClientClearCameraLensEffects();// 0x4e81714
	void ClientCapBandwidth(int Cap);// 0x4e81690
	void ClientCancelPendingMapChange();// 0x4e81674
	void ClientAddTextureStreamingLoc(Vector InLoc, float Duration, bool bOverrideLocation);// 0x4e81578
	void ClearAudioListenerOverride();// 0x4e81564
	void ClearAudioListenerAttenuationOverride();// 0x4e81550
	bool CanRestartPlayer();// 0x4e81510
	void Camera(FName NewMode);// 0x4e8148c
	void AddYawInput(float Val);// 0x4e81408
	void AddRollInput(float Val);// 0x4e81384
	void AddPitchInput(float Val);// 0x4e81300
	void ActivateTouchInterface(TouchInterface* NewTouchInterface);// 0x4e8127c
<----------Generated by SSpawner v1.0.2---------->


Class: player.Object
	PlayerController* PlayerController;//[Offset: 0x30, Size: 0x8]
	int CurrentNetSpeed;//[Offset: 0x38, Size: 0x4]
	int ConfiguredInternetSpeed;//[Offset: 0x3c, Size: 0x4]
	int ConfiguredLanSpeed;//[Offset: 0x40, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpTrackInst.Object
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x340, Size: 0x8]
	SceneComponent* TransformComponent;//[Offset: 0x348, Size: 0x8]
	float DefaultFOV;//[Offset: 0x358, Size: 0x4]
	float DefaultOrthoWidth;//[Offset: 0x360, Size: 0x4]
	float DefaultAspectRatio;//[Offset: 0x368, Size: 0x4]
	CameraCacheEntry CameraCache;//[Offset: 0x3b0, Size: 0x5d0]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x980, Size: 0x5d0]
	TViewTarget ViewTarget;//[Offset: 0xf50, Size: 0x5e0]
	TViewTarget PendingViewTarget;//[Offset: 0x1530, Size: 0x5e0]
	int OverrideCullingMask;//[Offset: 0x1b24, Size: 0x4]
	CameraCacheEntry CameraCachePrivate;//[Offset: 0x1b30, Size: 0x5d0]
	CameraCacheEntry LastFrameCameraCachePrivate;//[Offset: 0x2100, Size: 0x5d0]
	CameraModifier*[] ModifierList;//[Offset: 0x26d0, Size: 0x10]
	class CameraModifier[] DefaultModifiers;//[Offset: 0x26e0, Size: 0x10]
	float FreeCamDistance;//[Offset: 0x26f0, Size: 0x4]
	Vector FreeCamOffset;//[Offset: 0x26f4, Size: 0xc]
	Vector ViewTargetOffset;//[Offset: 0x2700, Size: 0xc]
	EmitterCameraLensEffectBase*[] CameraLensEffects;//[Offset: 0x2720, Size: 0x10]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x2730, Size: 0x8]
	CameraAnimInst* AnimInstPool;//[Offset: 0x2738, Size: 0x8]
	PostProcessSettings[] PostProcessBlendCache;//[Offset: 0x2778, Size: 0x10]
	CameraAnimInst*[] ActiveAnims;//[Offset: 0x2798, Size: 0x10]
	CameraAnimInst*[] FreeAnims;//[Offset: 0x27a8, Size: 0x10]
	CameraActor* AnimCameraActor;//[Offset: 0x27b8, Size: 0x8]
	bool bIsOrthographic;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x27c0, Size: 0x1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x27c0, Size: 0x1]
	bool bClientSimulatingViewTarget;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x27c0, Size: 0x1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x27c0, Size: 0x1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x27c1, Size: 0x1]
	float ViewPitchMin;//[Offset: 0x27c4, Size: 0x4]
	float ViewPitchMax;//[Offset: 0x27c8, Size: 0x4]
	float ViewYawMin;//[Offset: 0x27cc, Size: 0x4]
	float ViewYawMax;//[Offset: 0x27d0, Size: 0x4]
	float ViewRollMin;//[Offset: 0x27d4, Size: 0x4]
	float ViewRollMax;//[Offset: 0x27d8, Size: 0x4]
	void StopCameraShake(CameraShake* ShakeInstance, bool bImmediately);// 0x4e7d8e0
	void StopCameraFade();// 0x4e7d8c4
	void StopCameraAnimInst(CameraAnimInst* AnimInst, bool bImmediate);// 0x4e7d7fc
	void StopAllInstancesOfCameraShake(class CameraShake Shake, bool bImmediately);// 0x4e7d734
	void StopAllInstancesOfCameraAnim(CameraAnim* anim, bool bImmediate);// 0x4e7d66c
	void StopAllCameraShakes(bool bImmediately);// 0x4e7d5e0
	void StopAllCameraAnims(bool bImmediate);// 0x4e7d554
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, LinearColor Color, bool bShouldFadeAudio, bool bHoldWhenFinished);// 0x4e7d38c
	void SetManualCameraFade(float InFadeAmount, LinearColor Color, bool bInFadeAudio);// 0x4e7d284
	bool RemoveCameraModifier(CameraModifier* ModifierToRemove);// 0x4e7d1f4
	void RemoveCameraLensEffect(EmitterCameraLensEffectBase* Emitter);// 0x4e7d170
	CameraShake* PlayCameraShake(class CameraShake ShakeClass, float Scale, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x4e7d024
	CameraAnimInst* PlayCameraAnim(CameraAnim* anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, byte PlaySpace, Rotator UserPlaySpaceRot);// 0x4e7cd60
	void PhotographyCameraModify(const Vector NewCameraLocation, const Vector PreviousCameraLocation, const Vector OriginalCameraLocation, out Vector ResultCameraLocation);// 0x4e7cc0c
	void OnPhotographySessionStart();// 0x4e7cbf0
	void OnPhotographySessionEnd();// 0x4e7cbd4
	void OnPhotographyMultiPartCaptureStart();// 0x4e7cbb8
	void OnPhotographyMultiPartCaptureEnd();// 0x4e7cb9c
	PlayerController* GetOwningPlayerController();// 0x4e7cb60
	float GetFOVAngle();// 0x4e7cb24
	float GetCullingMask();// 0x4e7cae8
	Rotator GetCameraRotation();// 0x4e7cab0
	Vector GetCameraLocation();// 0x4e7ca78
	CameraModifier* FindCameraModifierByClass(class CameraModifier ModifierClass);// 0x4e7c9ec
	void ClearCameraLensEffects();// 0x4e7c9d0
	bool BlueprintUpdateCamera(Actor* CameraTarget, out Vector NewCameraLocation, out Rotator NewCameraRotation, out float NewCameraFOV, out int NewCullingMask);// 0x35332fc
	CameraModifier* AddNewCameraModifier(class CameraModifier ModifierClass);// 0x4e7c944
	EmitterCameraLensEffectBase* AddCameraLensEffect(class EmitterCameraLensEffectBase LensEffectEmitterClass);// 0x4e7c8b8
<----------Generated by SSpawner v1.0.2---------->


Class: CameraCacheEntry
	float Timestamp;//[Offset: 0x0, Size: 0x4]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x5c0]
<----------Generated by SSpawner v1.0.2---------->


Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float FOV;//[Offset: 0x18, Size: 0x4]
	float DesiredFOV;//[Offset: 0x1c, Size: 0x4]
	float OrthoWidth;//[Offset: 0x20, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x24, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x28, Size: 0x4]
	float AspectRatio;//[Offset: 0x2c, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x31, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x34, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40, Size: 0x570]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x5b0, Size: 0x8]
	int CullingMask;//[Offset: 0x5b8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bOverride_WhiteTint;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturation;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrast;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGamma;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorGain;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorOffset;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x2, Size: 0x1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x2, Size: 0x1]
	bool bOverride_BlueCorrection;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3, Size: 0x1]
	bool bOverride_ExpandGamut;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmSaturation;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmContrast;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x3, Size: 0x1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmSlope;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmToe;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x4, Size: 0x1]
	bool bOverride_FilmShoulder;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x5, Size: 0x1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneColorTint;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x5, Size: 0x1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x5, Size: 0x1]
	bool bOverride_ChromaticAberrationStartOffset;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x5, Size: 0x1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x5, Size: 0x1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x5, Size: 0x1]
	bool bOverride_BloomMethod;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomIntensity;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x6, Size: 0x1]
	bool bOverride_BloomThreshold;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x6, Size: 0x1]
	bool bOverride_MobileBloom1Scale;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x6, Size: 0x1]
	bool bOverride_MobileBloom2Scale;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x6, Size: 0x1]
	bool bOverride_MobileBloom3Scale;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x6, Size: 0x1]
	bool bOverride_MobileBloom4Scale;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x6, Size: 0x1]
	bool bOverride_MobileSaturationThreshold;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x6, Size: 0x1]
	bool bOverride_MobileSaturationIntensity;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom1Size;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom2Size;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom3Size;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x7, Size: 0x1]
	bool bOverride_Bloom4Size;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom5Size;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x8, Size: 0x1]
	bool bOverride_Bloom6Size;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x8, Size: 0x1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x9, Size: 0x1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xa, Size: 0x1]
	bool bOverride_CameraShutterSpeed;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xa, Size: 0x1]
	bool bOverride_CameraISO;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0xa, Size: 0x1]
	bool bOverride_AutoExposureCalibrationConstant;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xb, Size: 0x1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xb, Size: 0x1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0xb, Size: 0x1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareTint;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0xb, Size: 0x1]
	bool bOverride_LensFlareTints;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0xc, Size: 0x1]
	bool bOverride_GrainIntensity;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0xc, Size: 0x1]
	bool bOverride_GrainJitter;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0xc, Size: 0x1]
	bool bOverride_MobileAOSwitch;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0xc, Size: 0x1]
	bool bOverride_MobileAOInstensity;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xd, Size: 0x1]
	bool bOverride_AOAttenuationDistance;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xd, Size: 0x1]
	bool bOverride_AOAttenuationSpeed;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xd, Size: 0x1]
	bool bOverride_MobileAOFilterMethod;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0xd, Size: 0x1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0xe, Size: 0x1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVIntensity;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0xf, Size: 0x1]
	bool bOverride_LPVSize;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x10, Size: 0x1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x10, Size: 0x1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x11, Size: 0x1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x11, Size: 0x1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x11, Size: 0x1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldMinFstop;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldBladeCount;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x11, Size: 0x1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldMaxBokehSize;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x12, Size: 0x1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldMethod;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x13, Size: 0x1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldBokehShape;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldColorThreshold;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldSizeThreshold;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x13, Size: 0x1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x14, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x15, Size: 0x1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x15, Size: 0x1]
	bool bOverride_SSGISwitch;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x15, Size: 0x1]
	bool bOverride_SSGIInstensity;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x15, Size: 0x1]
	bool bOverride_SSGIDistance;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x15, Size: 0x1]
	bool bOverride_SSGIIndirectMinDiffuse;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x15, Size: 0x1]
	bool bOverride_SSGIVPLMinIntensity;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x15, Size: 0x1]
	bool bOverride_SSGIUpdateInterval;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x15, Size: 0x1]
	bool bOverride_SSGIIndirectResPercent;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x16, Size: 0x1]
	bool bOverride_SSGIRayMarchingResPercent;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x16, Size: 0x1]
	bool bOverride_SSGIMatchDistance;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x16, Size: 0x1]
	bool bOverride_SSGIVPLAge;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x16, Size: 0x1]
	bool bOverride_SSGIVPLReplaceNum;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x16, Size: 0x1]
	bool bOverride_SSGIVPLBias;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x16, Size: 0x1]
	bool bOverride_SSGIVPLCoffiConst;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x16, Size: 0x1]
	bool bOverride_SSGIVPLCoffiLinear;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x16, Size: 0x1]
	bool bOverride_SSGIVPLCoffiQuadric;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x17, Size: 0x1]
	bool bOverride_SSGIVPLGrid;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x17, Size: 0x1]
	bool bOverride_SSGIVPLMinPercent;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x17, Size: 0x1]
	bool bOverride_FsrRcasSharpness;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x17, Size: 0x1]
	bool bOverride_PrtSwitch;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x17, Size: 0x1]
	bool bOverride_PrtIntensity;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x17, Size: 0x1]
	bool bOverride_PrtSkyAOIntensity;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x17, Size: 0x1]
	bool bMobileHQGaussian;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x17, Size: 0x1]
	byte BloomMethod;//[Offset: 0x18, Size: 0x1]
	byte AutoExposureMethod;//[Offset: 0x19, Size: 0x1]
	byte DepthOfFieldMethod;//[Offset: 0x1a, Size: 0x1]
	float WhiteTemp;//[Offset: 0x1c, Size: 0x4]
	float WhiteTint;//[Offset: 0x20, Size: 0x4]
	Vector4 ColorSaturation;//[Offset: 0x30, Size: 0x10]
	Vector4 ColorContrast;//[Offset: 0x40, Size: 0x10]
	Vector4 ColorGamma;//[Offset: 0x50, Size: 0x10]
	Vector4 ColorGain;//[Offset: 0x60, Size: 0x10]
	Vector4 ColorOffset;//[Offset: 0x70, Size: 0x10]
	Vector4 ColorSaturationShadows;//[Offset: 0x80, Size: 0x10]
	Vector4 ColorContrastShadows;//[Offset: 0x90, Size: 0x10]
	Vector4 ColorGammaShadows;//[Offset: 0xa0, Size: 0x10]
	Vector4 ColorGainShadows;//[Offset: 0xb0, Size: 0x10]
	Vector4 ColorOffsetShadows;//[Offset: 0xc0, Size: 0x10]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0, Size: 0x10]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0, Size: 0x10]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0, Size: 0x10]
	Vector4 ColorGainMidtones;//[Offset: 0x100, Size: 0x10]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110, Size: 0x10]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120, Size: 0x10]
	Vector4 ColorContrastHighlights;//[Offset: 0x130, Size: 0x10]
	Vector4 ColorGammaHighlights;//[Offset: 0x140, Size: 0x10]
	Vector4 ColorGainHighlights;//[Offset: 0x150, Size: 0x10]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160, Size: 0x10]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170, Size: 0x4]
	float ColorCorrectionShadowsMax;//[Offset: 0x174, Size: 0x4]
	float BlueCorrection;//[Offset: 0x178, Size: 0x4]
	float ExpandGamut;//[Offset: 0x17c, Size: 0x4]
	float FilmSlope;//[Offset: 0x180, Size: 0x4]
	float FilmToe;//[Offset: 0x184, Size: 0x4]
	float FilmShoulder;//[Offset: 0x188, Size: 0x4]
	float FilmBlackClip;//[Offset: 0x18c, Size: 0x4]
	float FilmWhiteClip;//[Offset: 0x190, Size: 0x4]
	LinearColor FilmWhitePoint;//[Offset: 0x194, Size: 0x10]
	LinearColor FilmShadowTint;//[Offset: 0x1a4, Size: 0x10]
	float FilmShadowTintBlend;//[Offset: 0x1b4, Size: 0x4]
	float FilmShadowTintAmount;//[Offset: 0x1b8, Size: 0x4]
	float FilmSaturation;//[Offset: 0x1bc, Size: 0x4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1c0, Size: 0x10]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1d0, Size: 0x10]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1e0, Size: 0x10]
	float FilmContrast;//[Offset: 0x1f0, Size: 0x4]
	float FilmToeAmount;//[Offset: 0x1f4, Size: 0x4]
	float FilmHealAmount;//[Offset: 0x1f8, Size: 0x4]
	float FilmDynamicRange;//[Offset: 0x1fc, Size: 0x4]
	LinearColor SceneColorTint;//[Offset: 0x200, Size: 0x10]
	float SceneFringeIntensity;//[Offset: 0x210, Size: 0x4]
	float ChromaticAberrationStartOffset;//[Offset: 0x214, Size: 0x4]
	float BloomIntensity;//[Offset: 0x218, Size: 0x4]
	float BloomThreshold;//[Offset: 0x21c, Size: 0x4]
	float MobileBloom1Scale;//[Offset: 0x220, Size: 0x4]
	float MobileBloom2Scale;//[Offset: 0x224, Size: 0x4]
	float MobileBloom3Scale;//[Offset: 0x228, Size: 0x4]
	float MobileBloom4Scale;//[Offset: 0x22c, Size: 0x4]
	float MobileSaturationThreshold;//[Offset: 0x230, Size: 0x4]
	float MobileSaturationIntensity;//[Offset: 0x234, Size: 0x4]
	float BloomSizeScale;//[Offset: 0x238, Size: 0x4]
	float Bloom1Size;//[Offset: 0x23c, Size: 0x4]
	float Bloom2Size;//[Offset: 0x240, Size: 0x4]
	float Bloom3Size;//[Offset: 0x244, Size: 0x4]
	float Bloom4Size;//[Offset: 0x248, Size: 0x4]
	float Bloom5Size;//[Offset: 0x24c, Size: 0x4]
	float Bloom6Size;//[Offset: 0x250, Size: 0x4]
	LinearColor Bloom1Tint;//[Offset: 0x254, Size: 0x10]
	LinearColor Bloom2Tint;//[Offset: 0x264, Size: 0x10]
	LinearColor Bloom3Tint;//[Offset: 0x274, Size: 0x10]
	LinearColor Bloom4Tint;//[Offset: 0x284, Size: 0x10]
	LinearColor Bloom5Tint;//[Offset: 0x294, Size: 0x10]
	LinearColor Bloom6Tint;//[Offset: 0x2a4, Size: 0x10]
	float BloomConvolutionSize;//[Offset: 0x2b4, Size: 0x4]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x2b8, Size: 0x8]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x2c0, Size: 0x8]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2c8, Size: 0x4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2cc, Size: 0x4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2d0, Size: 0x4]
	float BloomConvolutionBufferScale;//[Offset: 0x2d4, Size: 0x4]
	Texture* BloomDirtMask;//[Offset: 0x2d8, Size: 0x8]
	float BloomDirtMaskIntensity;//[Offset: 0x2e0, Size: 0x4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2e4, Size: 0x10]
	LinearColor AmbientCubemapTint;//[Offset: 0x2f4, Size: 0x10]
	float AmbientCubemapIntensity;//[Offset: 0x304, Size: 0x4]
	TextureCube* AmbientCubemap;//[Offset: 0x308, Size: 0x8]
	float CameraShutterSpeed;//[Offset: 0x310, Size: 0x4]
	float CameraISO;//[Offset: 0x314, Size: 0x4]
	float DepthOfFieldFstop;//[Offset: 0x318, Size: 0x4]
	float DepthOfFieldMinFstop;//[Offset: 0x31c, Size: 0x4]
	int DepthOfFieldBladeCount;//[Offset: 0x320, Size: 0x4]
	float AutoExposureBias;//[Offset: 0x324, Size: 0x4]
	float AutoExposureLowPercent;//[Offset: 0x328, Size: 0x4]
	float AutoExposureHighPercent;//[Offset: 0x32c, Size: 0x4]
	float AutoExposureMinBrightness;//[Offset: 0x330, Size: 0x4]
	float AutoExposureMaxBrightness;//[Offset: 0x334, Size: 0x4]
	float AutoExposureSpeedUp;//[Offset: 0x338, Size: 0x4]
	float AutoExposureSpeedDown;//[Offset: 0x33c, Size: 0x4]
	float HistogramLogMin;//[Offset: 0x340, Size: 0x4]
	float HistogramLogMax;//[Offset: 0x344, Size: 0x4]
	float AutoExposureCalibrationConstant;//[Offset: 0x348, Size: 0x4]
	float LensFlareIntensity;//[Offset: 0x34c, Size: 0x4]
	LinearColor LensFlareTint;//[Offset: 0x350, Size: 0x10]
	float LensFlareBokehSize;//[Offset: 0x360, Size: 0x4]
	float LensFlareThreshold;//[Offset: 0x364, Size: 0x4]
	Texture* LensFlareBokehShape;//[Offset: 0x368, Size: 0x8]
	LinearColor LensFlareTints;//[Offset: 0x370, Size: 0x10]
	float VignetteIntensity;//[Offset: 0x3f0, Size: 0x4]
	float GrainJitter;//[Offset: 0x3f4, Size: 0x4]
	float GrainIntensity;//[Offset: 0x3f8, Size: 0x4]
	bool bMobileAOSwitch;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3fc, Size: 0x1]
	float MobileAOInstensity;//[Offset: 0x400, Size: 0x4]
	float AOAttenuationDistance;//[Offset: 0x404, Size: 0x4]
	float AOAttenuationSpeed;//[Offset: 0x408, Size: 0x4]
	byte MobileAOFilterMethod;//[Offset: 0x40c, Size: 0x1]
	float AmbientOcclusionIntensity;//[Offset: 0x410, Size: 0x4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x414, Size: 0x4]
	float AmbientOcclusionRadius;//[Offset: 0x418, Size: 0x4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x41c, Size: 0x1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x420, Size: 0x4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x424, Size: 0x4]
	float AmbientOcclusionDistance;//[Offset: 0x428, Size: 0x4]
	float AmbientOcclusionPower;//[Offset: 0x42c, Size: 0x4]
	float AmbientOcclusionBias;//[Offset: 0x430, Size: 0x4]
	float AmbientOcclusionQuality;//[Offset: 0x434, Size: 0x4]
	float AmbientOcclusionMipBlend;//[Offset: 0x438, Size: 0x4]
	float AmbientOcclusionMipScale;//[Offset: 0x43c, Size: 0x4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x440, Size: 0x4]
	LinearColor IndirectLightingColor;//[Offset: 0x444, Size: 0x10]
	float IndirectLightingIntensity;//[Offset: 0x454, Size: 0x4]
	float ColorGradingIntensity;//[Offset: 0x458, Size: 0x4]
	Texture* ColorGradingLUT;//[Offset: 0x460, Size: 0x8]
	float DepthOfFieldSensorWidth;//[Offset: 0x468, Size: 0x4]
	float DepthOfFieldFocalDistance;//[Offset: 0x46c, Size: 0x4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x470, Size: 0x4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x474, Size: 0x4]
	float DepthOfFieldFocalRegion;//[Offset: 0x478, Size: 0x4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x47c, Size: 0x4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x480, Size: 0x4]
	float DepthOfFieldScale;//[Offset: 0x484, Size: 0x4]
	float DepthOfFieldMaxBokehSize;//[Offset: 0x488, Size: 0x4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x48c, Size: 0x4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x490, Size: 0x4]
	float DepthOfFieldOcclusion;//[Offset: 0x494, Size: 0x4]
	Texture* DepthOfFieldBokehShape;//[Offset: 0x498, Size: 0x8]
	float DepthOfFieldColorThreshold;//[Offset: 0x4a0, Size: 0x4]
	float DepthOfFieldSizeThreshold;//[Offset: 0x4a4, Size: 0x4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x4a8, Size: 0x4]
	float DepthOfFieldVignetteSize;//[Offset: 0x4ac, Size: 0x4]
	float MotionBlurAmount;//[Offset: 0x4b0, Size: 0x4]
	float MotionBlurMax;//[Offset: 0x4b4, Size: 0x4]
	float MotionBlurPerObjectSize;//[Offset: 0x4b8, Size: 0x4]
	float LPVIntensity;//[Offset: 0x4bc, Size: 0x4]
	float LPVVplInjectionBias;//[Offset: 0x4c0, Size: 0x4]
	float LPVSize;//[Offset: 0x4c4, Size: 0x4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x4c8, Size: 0x4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x4cc, Size: 0x4]
	float LPVGeometryVolumeBias;//[Offset: 0x4d0, Size: 0x4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x4d4, Size: 0x4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x4d8, Size: 0x4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x4dc, Size: 0x4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x4e0, Size: 0x4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x4e4, Size: 0x4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x4e8, Size: 0x4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x4ec, Size: 0x4]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4f0, Size: 0x4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x4f4, Size: 0x4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x4f8, Size: 0x4]
	float LPVFadeRange;//[Offset: 0x4fc, Size: 0x4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x500, Size: 0x4]
	float ScreenPercentage;//[Offset: 0x504, Size: 0x4]
	bool SSGISwitch;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x508, Size: 0x1]
	float SSGIInstensity;//[Offset: 0x50c, Size: 0x4]
	int SSGIMatchDistance;//[Offset: 0x510, Size: 0x4]
	int SSGIVPLAge;//[Offset: 0x514, Size: 0x4]
	int SSGIVPLReplaceNum;//[Offset: 0x518, Size: 0x4]
	int SSGIVPLBias;//[Offset: 0x51c, Size: 0x4]
	float SSGIVPLCoffiConst;//[Offset: 0x520, Size: 0x4]
	float SSGIVPLCoffiLinear;//[Offset: 0x524, Size: 0x4]
	float SSGIVPLCoffiQuadric;//[Offset: 0x528, Size: 0x4]
	int SSGIDistance;//[Offset: 0x52c, Size: 0x4]
	float SSGIIndirectMinDiffuse;//[Offset: 0x530, Size: 0x4]
	float SSGIVPLMinIntensity;//[Offset: 0x534, Size: 0x4]
	int SSGIUpdateInterval;//[Offset: 0x538, Size: 0x4]
	int SSGIIndirectResPercent;//[Offset: 0x53c, Size: 0x4]
	int SSGIRayMarchingResPercent;//[Offset: 0x540, Size: 0x4]
	int SSGIVPLGrid;//[Offset: 0x544, Size: 0x4]
	float SSGIVPLMinPercent;//[Offset: 0x548, Size: 0x4]
	float FsrRcasSharpness;//[Offset: 0x54c, Size: 0x4]
	bool PrtSwitch;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]
	float PrtIntensity;//[Offset: 0x554, Size: 0x4]
	float PrtSkyAOIntensity;//[Offset: 0x558, Size: 0x4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x560, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: Texture2D.Texture.Object
	int StreamingIndex;//[Offset: 0xc8, Size: 0x4]
	int LevelIndex;//[Offset: 0xcc, Size: 0x4]
	int FirstResourceMemMip;//[Offset: 0xd0, Size: 0x4]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 0x1]
	bool bIsStreamable;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xd4, Size: 0x1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xd4, Size: 0x1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xd4, Size: 0x1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0xd4, Size: 0x1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0xd4, Size: 0x1]
	byte AddressX;//[Offset: 0xd5, Size: 0x1]
	byte AddressY;//[Offset: 0xd6, Size: 0x1]
	IntPoint ImportedSize;//[Offset: 0xd8, Size: 0x8]
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0xe0, Size: 0x8]
	int Blueprint_GetSizeY();// 0x4f0e440
	int Blueprint_GetSizeX();// 0x4f0e40c
<----------Generated by SSpawner v1.0.2---------->


Class: IntPoint
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: Vector2D
	float X;//[Offset: 0x0, Size: 0x4]
	float Y;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: TextureCube.Texture.Object
<----------Generated by SSpawner v1.0.2---------->


Class: WeightedBlendables
	WeightedBlendable[] Array;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: WeightedBlendable
	float Weight;//[Offset: 0x0, Size: 0x4]
	Object* Object;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: TViewTarget
	Actor* Target;//[Offset: 0x0, Size: 0x8]
	MinimalViewInfo POV;//[Offset: 0x10, Size: 0x5c0]
	PlayerState* PlayerState;//[Offset: 0x5d0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bExclusive;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	byte Priority;//[Offset: 0x29, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x30, Size: 0x8]
	float AlphaInTime;//[Offset: 0x38, Size: 0x4]
	float AlphaOutTime;//[Offset: 0x3c, Size: 0x4]
	float Alpha;//[Offset: 0x40, Size: 0x4]
	bool IsDisabled();// 0x4ce6300
	Actor* GetViewTarget();// 0x4ce62c4
	void EnableModifier();// 0x4ce62a8
	void DisableModifier(bool bImmediate);// 0x4ce621c
	void BlueprintModifyPostProcess(float DeltaTime, out float PostProcessBlendWeight, out PostProcessSettings PostProcessSettings);// 0x35332fc
	void BlueprintModifyCamera(float DeltaTime, Vector ViewLocation, Rotator ViewRotation, float FOV, out Vector NewViewLocation, out Rotator NewViewRotation, out float NewFOV);// 0x35332fc
<----------Generated by SSpawner v1.0.2---------->


Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x390, Size: 0x8]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x398, Size: 0x8]
	PlayerCameraManager* BaseCamera;//[Offset: 0x3a0, Size: 0x8]
	Transform RelativeTransform;//[Offset: 0x3b0, Size: 0x30]
	float BaseFOV;//[Offset: 0x3e0, Size: 0x4]
	bool bAllowMultipleInstances;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3e4, Size: 0x1]
	bool bResetWhenRetriggered;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x3e4, Size: 0x1]
	class EmitterCameraLensEffectBase[] EmittersToTreatAsSame;//[Offset: 0x3e8, Size: 0x10]
	float DistFromCamera;//[Offset: 0x3f8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x340, Size: 0x8]
	bool bDestroyOnSystemFinish;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1]
	bool bPostUpdateTickGroup;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x348, Size: 0x1]
	bool bCurrentlyActive;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x348, Size: 0x1]
	delegate OnParticleSpawn;//[Offset: 0x350, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x360, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x370, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x380, Size: 0x10]
	void ToggleActive();// 0x4d24b04
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x4d24a48
	void SetTemplate(ParticleSystem* NewTemplate);// 0x4d249c4
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x4d24910
	void SetFloatParameter(FName ParameterName, float Param);// 0x4d24858
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x4d2479c
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x4d246e8
	void OnRep_bCurrentlyActive();// 0x4d246cc
	void OnParticleSystemFinished(ParticleSystemComponent* FinishedComponent);// 0x4d24648
	bool IsActive();// 0x4d24610
	void Deactivate();// 0x4d245fc
	void Activate();// 0x4d245e8
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleSystem.Object
	byte SystemUpdateMode;//[Offset: 0x28, Size: 0x1]
	float UpdateTime_FPS;//[Offset: 0x2c, Size: 0x4]
	float UpdateTime_Delta;//[Offset: 0x30, Size: 0x4]
	float WarmupTime;//[Offset: 0x34, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x38, Size: 0x4]
	ParticleEmitter*[] Emitters;//[Offset: 0x40, Size: 0x10]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x50, Size: 0x8]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x58, Size: 0x8]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x60, Size: 0x1]
	float LODDistanceCheckTime;//[Offset: 0x64, Size: 0x4]
	byte LODMethod;//[Offset: 0x68, Size: 0x1]
	float[] LODDistances;//[Offset: 0x70, Size: 0x10]
	bool[] LODPCFlag;//[Offset: 0x80, Size: 0x10]
	float LDMaxDrawDistance;//[Offset: 0x90, Size: 0x4]
	bool bRegenerateLODDuplicate;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x94, Size: 0x1]
	ParticleSystemLOD[] LODSettings;//[Offset: 0x98, Size: 0x10]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	Box FixedRelativeBoundingBox;//[Offset: 0xac, Size: 0x1c]
	float SecondsBeforeInactive;//[Offset: 0xc8, Size: 0x4]
	bool bUnableCustomGlobalCulling;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xcc, Size: 0x1]
	byte FeatureLevel;//[Offset: 0xcd, Size: 0x1]
	bool bShouldResetPeakCounts;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xce, Size: 0x1]
	bool bHasPhysics;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xce, Size: 0x1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xce, Size: 0x1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xce, Size: 0x1]
	float Delay;//[Offset: 0xd0, Size: 0x4]
	float DelayLow;//[Offset: 0xd4, Size: 0x4]
	bool bUseDelayRange;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xd8, Size: 0x1]
	bool bAutoDeactivate;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xd9, Size: 0x1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xdc, Size: 0x4]
	enum InsignificantReaction;//[Offset: 0xe0, Size: 0x1]
	float InsignificanceDelay;//[Offset: 0xe4, Size: 0x4]
	enum MaxSignificanceLevel;//[Offset: 0xe8, Size: 0x1]
	bool IsManageBySignificance;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xe9, Size: 0x1]
	uint32 MaxPoolSize;//[Offset: 0xec, Size: 0x4]
	Vector MacroUVPosition;//[Offset: 0xf0, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xfc, Size: 0x4]
	byte OcclusionBoundsMethod;//[Offset: 0x100, Size: 0x1]
	Box CustomOcclusionBounds;//[Offset: 0x104, Size: 0x1c]
	LODSoloTrack[] SoloTracking;//[Offset: 0x120, Size: 0x10]
	NamedEmitterMaterial[] NamedMaterialSlots;//[Offset: 0x130, Size: 0x10]
	bool ContainsEmitterType(class Object TypeData);// 0x4e63210
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x28, Size: 0x8]
	int SubUVDataOffset;//[Offset: 0x30, Size: 0x4]
	byte EmitterRenderMode;//[Offset: 0x34, Size: 0x1]
	enum SignificanceLevel;//[Offset: 0x35, Size: 0x1]
	bool bUseLegacySpawningBehavior;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x37, Size: 0x1]
	bool bSupportParticleDynamicInstance;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x37, Size: 0x1]
	bool ConvertedModules;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x37, Size: 0x1]
	bool bIsSoloing;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x37, Size: 0x1]
	bool bCookedOut;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x37, Size: 0x1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bDisableWhenInsignficant;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	ParticleLODLevel*[] LODLevels;//[Offset: 0x40, Size: 0x10]
	int PeakActiveParticles;//[Offset: 0x50, Size: 0x4]
	int InitialAllocationCount;//[Offset: 0x54, Size: 0x4]
	float QualityLevelSpawnRateScale;//[Offset: 0x58, Size: 0x4]
	uint32 DetailModeBitmask;//[Offset: 0x5c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x28, Size: 0x4]
	bool bEnabled;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x2c, Size: 0x1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x30, Size: 0x8]
	ParticleModule*[] Modules;//[Offset: 0x38, Size: 0x10]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x48, Size: 0x8]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x50, Size: 0x8]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x58, Size: 0x8]
	ParticleModuleSpawnBase*[] SpawningModules;//[Offset: 0x60, Size: 0x10]
	ParticleModule*[] SpawnModules;//[Offset: 0x70, Size: 0x10]
	ParticleModule*[] UpdateModules;//[Offset: 0x80, Size: 0x10]
	ParticleModuleOrbit*[] OrbitModules;//[Offset: 0x90, Size: 0x10]
	ParticleModuleEventReceiverBase*[] EventReceiverModules;//[Offset: 0xa0, Size: 0x10]
	bool ConvertedModules;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xb0, Size: 0x1]
	int PeakActiveParticles;//[Offset: 0xb4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x30, Size: 0x8]
	Vector EmitterOrigin;//[Offset: 0x38, Size: 0xc]
	Rotator EmitterRotation;//[Offset: 0x44, Size: 0xc]
	byte ScreenAlignment;//[Offset: 0x50, Size: 0x1]
	float MinFacingCameraBlendDistance;//[Offset: 0x54, Size: 0x4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x58, Size: 0x4]
	bool bUseLocalSpace;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x5c, Size: 0x1]
	bool bIgnoreComponentScale;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x5c, Size: 0x1]
	bool bKillOnDeactivate;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x5c, Size: 0x1]
	bool bKillOnCompleted;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x5c, Size: 0x1]
	byte SortMode;//[Offset: 0x5d, Size: 0x1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x5e, Size: 0x1]
	bool bRemoveHMDRoll;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x5e, Size: 0x1]
	float EmitterDuration;//[Offset: 0x60, Size: 0x4]
	float EmitterDurationLow;//[Offset: 0x64, Size: 0x4]
	bool bEmitterDurationUseRange;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	int EmitterLoops;//[Offset: 0x6c, Size: 0x4]
	RawDistributionFloat SpawnRate;//[Offset: 0x70, Size: 0x38]
	byte ParticleBurstMethod;//[Offset: 0xa8, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0xb0, Size: 0x10]
	float EmitterDelay;//[Offset: 0xc0, Size: 0x4]
	float EmitterDelayLow;//[Offset: 0xc4, Size: 0x4]
	bool bEmitterDelayUseRange;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xc8, Size: 0x1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xc8, Size: 0x1]
	byte InterpolationMethod;//[Offset: 0xc9, Size: 0x1]
	int SubImages_Horizontal;//[Offset: 0xcc, Size: 0x4]
	int SubImages_Vertical;//[Offset: 0xd0, Size: 0x4]
	bool bScaleUV;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 0x1]
	float RandomImageTime;//[Offset: 0xd8, Size: 0x4]
	int RandomImageChanges;//[Offset: 0xdc, Size: 0x4]
	bool bOverrideSystemMacroUV;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xe0, Size: 0x1]
	Vector MacroUVPosition;//[Offset: 0xe4, Size: 0xc]
	float MacroUVRadius;//[Offset: 0xf0, Size: 0x4]
	bool bUseMaxDrawCount;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xf4, Size: 0x1]
	int MaxDrawCount;//[Offset: 0xf8, Size: 0x4]
	enum UVFlippingMode;//[Offset: 0xfc, Size: 0x1]
	Texture2D* CutoutTexture;//[Offset: 0x100, Size: 0x8]
	byte BoundingMode;//[Offset: 0x108, Size: 0x1]
	byte OpacitySourceMode;//[Offset: 0x109, Size: 0x1]
	float AlphaThreshold;//[Offset: 0x10c, Size: 0x4]
	int CutoutSubImagesX;//[Offset: 0x110, Size: 0x4]
	int CutoutSubImagesY;//[Offset: 0x114, Size: 0x4]
	byte EmitterNormalsMode;//[Offset: 0x118, Size: 0x1]
	Vector NormalsSphereCenter;//[Offset: 0x11c, Size: 0xc]
	Vector NormalsCylinderDirection;//[Offset: 0x128, Size: 0xc]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x134, Size: 0x1]
	FName[] NamedMaterialOverrides;//[Offset: 0x138, Size: 0x10]
	Vector2D[] UBOBoundingGeometry;//[Offset: 0x148, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bUpdateModule;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool bFinalUpdateModule;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	bool bCurvesAsColor;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x28, Size: 0x1]
	bool b3DDrawMode;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x28, Size: 0x1]
	bool bSupported3DDrawMode;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x28, Size: 0x1]
	bool bEnabled;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x28, Size: 0x1]
	bool bEditable;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x29, Size: 0x1]
	bool LODDuplicate;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x29, Size: 0x1]
	bool bSupportsRandomSeed;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x29, Size: 0x1]
	bool bRequiresLoopingNotification;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x29, Size: 0x1]
	byte LODValidity;//[Offset: 0x2a, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x28, Size: 0x4]
	float MaxValue;//[Offset: 0x2c, Size: 0x4]
	DistributionFloat* Distribution;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0, Size: 0x28]
<----------Generated by SSpawner v1.0.2---------->


Class: DistributionLookupTable
	byte Op;//[Offset: 0x0, Size: 0x1]
	byte EntryCount;//[Offset: 0x1, Size: 0x1]
	byte EntryStride;//[Offset: 0x2, Size: 0x1]
	byte SubEntryStride;//[Offset: 0x3, Size: 0x1]
	float TimeScale;//[Offset: 0x4, Size: 0x4]
	float TimeBias;//[Offset: 0x8, Size: 0x4]
	float[] Values;//[Offset: 0x10, Size: 0x10]
	byte LockFlag;//[Offset: 0x20, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: Distribution.Object
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleBurst
	int Count;//[Offset: 0x0, Size: 0x4]
	int CountLow;//[Offset: 0x4, Size: 0x4]
	float Time;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleModuleTypeDataBase.ParticleModule.Object
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x30, Size: 0x38]
	RawDistributionFloat RateScale;//[Offset: 0x68, Size: 0x38]
	byte ParticleBurstMethod;//[Offset: 0xa0, Size: 0x1]
	ParticleBurst[] BurstList;//[Offset: 0xa8, Size: 0x10]
	RawDistributionFloat BurstScale;//[Offset: 0xb8, Size: 0x38]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bSuspendSpawnInHouse;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
	bool bProcessBurstList;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x2b, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	ParticleEvent_GenerateInfo[] Events;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleModuleEventBase.ParticleModule.Object
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleEvent_GenerateInfo
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Frequency;//[Offset: 0x4, Size: 0x4]
	int ParticleFrequency;//[Offset: 0x8, Size: 0x4]
	bool FirstTimeOnly;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool LastTimeOnly;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool UseReflectedImpactVector;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
	bool bUseOrbitOffset;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xc, Size: 0x1]
	FName CustomName;//[Offset: 0x10, Size: 0x8]
	ParticleModuleEventSendToGame*[] ParticleModuleEventsToSendToGame;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleModuleEventSendToGame.Object
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x2c, Size: 0x1]
	RawDistributionVector OffsetAmount;//[Offset: 0x30, Size: 0x50]
	OrbitOptions OffsetOptions;//[Offset: 0x80, Size: 0x4]
	RawDistributionVector RotationAmount;//[Offset: 0x88, Size: 0x50]
	OrbitOptions RotationOptions;//[Offset: 0xd8, Size: 0x4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xe0, Size: 0x50]
	OrbitOptions RotationRateOptions;//[Offset: 0x130, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x2b, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x28, Size: 0x4]
	float MaxValue;//[Offset: 0x2c, Size: 0x4]
	Vector MinValueVec;//[Offset: 0x30, Size: 0xc]
	Vector MaxValueVec;//[Offset: 0x3c, Size: 0xc]
	DistributionVector* Distribution;//[Offset: 0x48, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bIsDirty;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bBakedDataSuccesfully;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bProcessDuringUpdate;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmitterTime;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x2b, Size: 0x1]
	FName EventName;//[Offset: 0x2c, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x5c8, Size: 0x8]
	MaterialInterface*[] EmitterMaterials;//[Offset: 0x5d0, Size: 0x10]
	SkeletalMeshComponent*[] SkelMeshComponents;//[Offset: 0x5e0, Size: 0x10]
	bool bResetOnDetach;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x5f0, Size: 0x1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x5f1, Size: 0x1]
	bool bAllowRecycling;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x5f1, Size: 0x1]
	bool bAutoManageAttachment;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x5f1, Size: 0x1]
	bool bWarmingUp;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x5f1, Size: 0x1]
	bool bOverrideLODMethod;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x5f2, Size: 0x1]
	bool bUseParticleSystemDrawDistance;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x5f2, Size: 0x1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x5f2, Size: 0x1]
	byte LODMethod;//[Offset: 0x5f5, Size: 0x1]
	enum RequiredSignificance;//[Offset: 0x5f6, Size: 0x1]
	ParticleSysParam[] InstanceParameters;//[Offset: 0x5f8, Size: 0x10]
	delegate OnParticleSpawn;//[Offset: 0x608, Size: 0x10]
	delegate OnParticleBurst;//[Offset: 0x618, Size: 0x10]
	delegate OnParticleDeath;//[Offset: 0x628, Size: 0x10]
	delegate OnParticleCollide;//[Offset: 0x638, Size: 0x10]
	Vector OldPosition;//[Offset: 0x648, Size: 0xc]
	Vector PartSysVelocity;//[Offset: 0x654, Size: 0xc]
	float WarmupTime;//[Offset: 0x660, Size: 0x4]
	float WarmupTickRate;//[Offset: 0x664, Size: 0x4]
	float SecondsBeforeInactive;//[Offset: 0x670, Size: 0x4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x678, Size: 0x4]
	ParticleSystemReplay*[] ReplayClips;//[Offset: 0x6a0, Size: 0x10]
	float CustomTimeDilation;//[Offset: 0x6b8, Size: 0x4]
	SceneComponent* AutoAttachParent;//[Offset: 0x710, Size: 0x8]
	FName AutoAttachSocketName;//[Offset: 0x718, Size: 0x8]
	enum AutoAttachLocationRule;//[Offset: 0x720, Size: 0x1]
	enum AutoAttachRotationRule;//[Offset: 0x721, Size: 0x1]
	enum AutoAttachScaleRule;//[Offset: 0x722, Size: 0x1]
	delegate OnSystemFinished;//[Offset: 0x750, Size: 0x10]
	delegate OnCompleteFinished;//[Offset: 0x760, Size: 0x10]
	void SetVectorParameter(FName ParameterName, Vector Param);// 0x4e65f90
	void SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x4e65e64
	void SetTemplate(ParticleSystem* NewTemplate);// 0x4e65de8
	void SetMaterialParameter(FName ParameterName, MaterialInterface* Param);// 0x4e65d34
	void SetFloatParameter(FName ParameterName, float Param);// 0x4e65c7c
	void SetEmitterEnable(FName EmitterName, bool bNewEnableState);// 0x4e65bb4
	void SetColorParameter(FName ParameterName, LinearColor Param);// 0x4e65af8
	void SetBeamTargetTangent(int EmitterIndex, Vector NewTangentPoint, int TargetIndex);// 0x4e659f8
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);// 0x4e658fc
	void SetBeamTargetPoint(int EmitterIndex, Vector NewTargetPoint, int TargetIndex);// 0x4e657fc
	void SetBeamSourceTangent(int EmitterIndex, Vector NewTangentPoint, int SourceIndex);// 0x4e656fc
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);// 0x4e65600
	void SetBeamSourcePoint(int EmitterIndex, Vector NewSourcePoint, int SourceIndex);// 0x4e65500
	void SetBeamEndPoint(int EmitterIndex, Vector NewEndPoint);// 0x4e6543c
	void SetAutoAttachParams(SceneComponent* Parent, FName SocketName, byte LocationType);// 0x4e6532c
	void SetAutoAttachmentParameters(SceneComponent* Parent, FName SocketName, enum LocationRule, enum RotationRule, enum ScaleRule);// 0x4e651a4
	void SetActorParameter(FName ParameterName, Actor* Param);// 0x4e650f0
	void ReleaseToPool();// 0x4e650dc
	int GetNumActiveParticles();// 0x4e650a8
	MaterialInterface* GetNamedMaterial(FName InName);// 0x4e6501c
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, out Vector OutTangentPoint);// 0x4e64f00
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, out float OutTargetStrength);// 0x4e64de0
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, out Vector OutTargetPoint);// 0x4e64cc4
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, out Vector OutTangentPoint);// 0x4e64ba8
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, out float OutSourceStrength);// 0x4e64a88
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, out Vector OutSourcePoint);// 0x4e6496c
	bool GetBeamEndPoint(int EmitterIndex, out Vector OutEndPoint);// 0x4e6488c
	void GenerateParticleEvent(const FName InEventName, const float InEmitterTime, const Vector InLocation, const Vector InDirection, const Vector InVelocity);// 0x4e64710
	void EndTrails();// 0x4e646fc
	MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(FName InName, MaterialInterface* SourceMaterial);// 0x4e64630
	void BeginTrails(FName InFirstSocketName, FName InSecondSocketName, byte InWidthMode, float InWidth);// 0x4e64504
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleSysParam
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte ParamType;//[Offset: 0x8, Size: 0x1]
	float Scalar;//[Offset: 0xc, Size: 0x4]
	float Scalar_Low;//[Offset: 0x10, Size: 0x4]
	Vector Vector;//[Offset: 0x14, Size: 0xc]
	Vector Vector_Low;//[Offset: 0x20, Size: 0xc]
	Color Color;//[Offset: 0x2c, Size: 0x4]
	Actor* Actor;//[Offset: 0x30, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x38, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	void SetVectorParameterValue(FName ParameterName, LinearColor Value);// 0x4e26f5c
	void SetTextureParameterValue(FName ParameterName, Texture* Value);// 0x4e26ea8
	void SetScalarParameterValue(FName ParameterName, float Value);// 0x4e26df0
	void K2_InterpolateMaterialInstanceParams(MaterialInstance* SourceA, MaterialInstance* SourceB, float Alpha);// 0x4e26d00
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x4e26c78
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x4e26bf4
	float K2_GetScalarParameterValue(FName ParameterName);// 0x4e26b70
	void K2_CopyMaterialInstanceParameters(MaterialInterface* Source, bool bQuickParametersOnly);// 0x4e26ab0
	void CopyParameterOverrides(MaterialInstance* MaterialInstance);// 0x4e26a34
	void CopyInterpParameters(MaterialInstance* Source);// 0x4e269b8
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0xb0, Size: 0x8]
	MaterialInterface* Parent;//[Offset: 0xb8, Size: 0x8]
	bool bHasStaticPermutationResource;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	ScalarParameterValue[] ScalarParameterValues;//[Offset: 0xc8, Size: 0x10]
	VectorParameterValue[] VectorParameterValues;//[Offset: 0xd8, Size: 0x10]
	TextureParameterValue[] TextureParameterValues;//[Offset: 0xe8, Size: 0x10]
	FontParameterValue[] FontParameterValues;//[Offset: 0xf8, Size: 0x10]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x108, Size: 0x50]
	bool bOverrideBaseProperties;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x158, Size: 0x1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0x15c, Size: 0x38]
	Texture*[] PermutationTextureReferences;//[Offset: 0x1c0, Size: 0x10]
	StaticParameterSet StaticParameters;//[Offset: 0x1d0, Size: 0x40]
<----------Generated by SSpawner v1.0.2---------->


Class: ScalarParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	float ParameterValue;//[Offset: 0x10, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialParameterInfo
	FName Name;//[Offset: 0x0, Size: 0x8]
	byte Association;//[Offset: 0x8, Size: 0x1]
	int Index;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: VectorParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	LinearColor ParameterValue;//[Offset: 0x10, Size: 0x10]
	Guid ExpressionGUID;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: TextureParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Texture* ParameterValue;//[Offset: 0x10, Size: 0x8]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: FontParameterValue
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	Font* FontValue;//[Offset: 0x10, Size: 0x8]
	int FontPage;//[Offset: 0x18, Size: 0x4]
	Guid ExpressionGUID;//[Offset: 0x1c, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: Font.Object
	enum FontCacheType;//[Offset: 0x30, Size: 0x1]
	FontCharacter[] Characters;//[Offset: 0x38, Size: 0x10]
	Texture2D*[] Textures;//[Offset: 0x48, Size: 0x10]
	int IsRemapped;//[Offset: 0x58, Size: 0x4]
	float EmScale;//[Offset: 0x5c, Size: 0x4]
	float Ascent;//[Offset: 0x60, Size: 0x4]
	float Descent;//[Offset: 0x64, Size: 0x4]
	float Leading;//[Offset: 0x68, Size: 0x4]
	int Kerning;//[Offset: 0x6c, Size: 0x4]
	FontImportOptionsData ImportOptions;//[Offset: 0x70, Size: 0xa8]
	int NumCharacters;//[Offset: 0x118, Size: 0x4]
	int[] MaxCharHeight;//[Offset: 0x120, Size: 0x10]
	float ScalingFactor;//[Offset: 0x130, Size: 0x4]
	int LegacyFontSize;//[Offset: 0x134, Size: 0x4]
	FName LegacyFontName;//[Offset: 0x138, Size: 0x8]
	CompositeFont CompositeFont;//[Offset: 0x140, Size: 0x38]
<----------Generated by SSpawner v1.0.2---------->


Class: FontCharacter
	int StartU;//[Offset: 0x0, Size: 0x4]
	int StartV;//[Offset: 0x4, Size: 0x4]
	int USize;//[Offset: 0x8, Size: 0x4]
	int VSize;//[Offset: 0xc, Size: 0x4]
	byte TextureIndex;//[Offset: 0x10, Size: 0x1]
	int VerticalOffset;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0, Size: 0x10]
	float Height;//[Offset: 0x10, Size: 0x4]
	bool bEnableAntialiasing;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x14, Size: 0x1]
	bool bEnableBold;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x14, Size: 0x1]
	bool bEnableItalic;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x14, Size: 0x1]
	bool bEnableUnderline;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x14, Size: 0x1]
	bool bAlphaOnly;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x14, Size: 0x1]
	byte CharacterSet;//[Offset: 0x15, Size: 0x1]
	FString Chars;//[Offset: 0x18, Size: 0x10]
	FString UnicodeRange;//[Offset: 0x28, Size: 0x10]
	FString CharsFilePath;//[Offset: 0x38, Size: 0x10]
	FString CharsFileWildcard;//[Offset: 0x48, Size: 0x10]
	bool bCreatePrintableOnly;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x58, Size: 0x1]
	bool bIncludeASCIIRange;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x58, Size: 0x1]
	LinearColor ForegroundColor;//[Offset: 0x5c, Size: 0x10]
	bool bEnableDropShadow;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x6c, Size: 0x1]
	int TexturePageWidth;//[Offset: 0x70, Size: 0x4]
	int TexturePageMaxHeight;//[Offset: 0x74, Size: 0x4]
	int XPadding;//[Offset: 0x78, Size: 0x4]
	int YPadding;//[Offset: 0x7c, Size: 0x4]
	int ExtendBoxTop;//[Offset: 0x80, Size: 0x4]
	int ExtendBoxBottom;//[Offset: 0x84, Size: 0x4]
	int ExtendBoxRight;//[Offset: 0x88, Size: 0x4]
	int ExtendBoxLeft;//[Offset: 0x8c, Size: 0x4]
	bool bEnableLegacyMode;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x90, Size: 0x1]
	int Kerning;//[Offset: 0x94, Size: 0x4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x98, Size: 0x1]
	int DistanceFieldScaleFactor;//[Offset: 0x9c, Size: 0x4]
	float DistanceFieldScanRadiusScale;//[Offset: 0xa0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0, Size: 0x10]
	CompositeFallbackFont FallbackTypeface;//[Offset: 0x10, Size: 0x18]
	CompositeSubFont[] SubTypefaces;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: Typeface
	TypefaceEntry[] Fonts;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: TypefaceEntry
	FName Name;//[Offset: 0x0, Size: 0x8]
	FontData Font;//[Offset: 0x8, Size: 0x20]
<----------Generated by SSpawner v1.0.2---------->


Class: FontData
	FString FontFilename;//[Offset: 0x0, Size: 0x10]
	enum Hinting;//[Offset: 0x10, Size: 0x1]
	enum LoadingPolicy;//[Offset: 0x11, Size: 0x1]
	int SubFaceIndex;//[Offset: 0x14, Size: 0x4]
	Object* FontFaceAsset;//[Offset: 0x18, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CompositeFallbackFont
	Typeface Typeface;//[Offset: 0x0, Size: 0x10]
	float ScalingFactor;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CompositeSubFont.CompositeFallbackFont
	Int32Range[] CharacterRanges;//[Offset: 0x18, Size: 0x10]
	FString Cultures;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: Int32Range
	Int32RangeBound LowerBound;//[Offset: 0x0, Size: 0x8]
	Int32RangeBound UpperBound;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: Int32RangeBound
	byte Type;//[Offset: 0x0, Size: 0x1]
	int Value;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bOverride_LDRTonemappingBrightness;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	bool bOverride_BlendMode;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x2, Size: 0x1]
	bool bOverride_ShadingModel;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x3, Size: 0x1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	bool bOverride_TwoSided;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x6, Size: 0x1]
	bool bOverride_TransparentDownSampleUsage;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x7, Size: 0x1]
	bool bOverride_ForceTransparentOpaque;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool bOverride_LDRAlphaMultiplyFactor;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	bool bOverride_TranslucentReceiveCSM;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xa, Size: 0x1]
	bool bOverride_UseSecondSkyLight;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xb, Size: 0x1]
	bool bOverride_CharacterStencil;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
	bool bOverride_OverlookDepthClip;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xd, Size: 0x1]
	bool bOverride_AdjustHairShadowDepthMask;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xe, Size: 0x1]
	bool bOverride_AddToOverlookRenderSet;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xf, Size: 0x1]
	bool bOverride_SupportMobileSpotLightShadow;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bOverride_SupportReceiveMobileSpotLightShadow;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool bOverride_SupportMobilePointLightShadow;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	bool bOverride_SupportReceiveMobilePointLightShadow;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]
	bool bOverride_PrtSkySphere;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	bool bOverride_AffectPrt;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x15, Size: 0x1]
	bool bOverride_ReceivePrt;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x16, Size: 0x1]
	bool bOverride_PrtAffectRatio;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x17, Size: 0x1]
	float OpacityMaskClipValue;//[Offset: 0x18, Size: 0x4]
	float LDRTonemappingBrightness;//[Offset: 0x1c, Size: 0x4]
	byte BlendMode;//[Offset: 0x20, Size: 0x1]
	byte ShadingModel;//[Offset: 0x21, Size: 0x1]
	bool TwoSided;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x22, Size: 0x1]
	bool DitheredLODTransition;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x22, Size: 0x1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x22, Size: 0x1]
	bool ForceTransparentOpaque;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x22, Size: 0x1]
	enum TransparentDownsampleUsage;//[Offset: 0x23, Size: 0x1]
	float LDRAlphaMultiplyFactor;//[Offset: 0x24, Size: 0x4]
	bool bTranslucentReceiveCSM;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool UseSecondSkyLight;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x28, Size: 0x1]
	bool CharacterStencil;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x28, Size: 0x1]
	bool OverlookDepthClip;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x28, Size: 0x1]
	float AdjustHairShadowDepthMask;//[Offset: 0x2c, Size: 0x4]
	bool AddToOverlookRenderSet;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bSupportMobileSpotLightShadow;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bSupportReceiveMobileSpotLightShadow;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bSupportMobilePointLightShadow;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bSupportReceiveMobilePointLightShadow;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool PrtSkySphere;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	bool AffectPrt;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x30, Size: 0x1]
	bool ReceivePrt;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x30, Size: 0x1]
	float PrtAffectRatio;//[Offset: 0x34, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: StaticParameterSet
	StaticSwitchParameter[] StaticSwitchParameters;//[Offset: 0x0, Size: 0x10]
	StaticComponentMaskParameter[] StaticComponentMaskParameters;//[Offset: 0x10, Size: 0x10]
	StaticTerrainLayerWeightParameter[] TerrainLayerWeightParameters;//[Offset: 0x20, Size: 0x10]
	StaticMaterialLayersParameter[] MaterialLayersParameters;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: StaticSwitchParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool Value;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool bOverride;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: StaticComponentMaskParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool R;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	bool G;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
	bool B;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x12, Size: 0x1]
	bool A;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x13, Size: 0x1]
	bool bOverride;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: StaticTerrainLayerWeightParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	bool bOverride;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x14, Size: 0x10]
	int WeightmapIndex;//[Offset: 0x24, Size: 0x4]
	bool bWeightBasedBlend;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: StaticMaterialLayersParameter
	MaterialParameterInfo ParameterInfo;//[Offset: 0x0, Size: 0x10]
	MaterialLayersFunctions Value;//[Offset: 0x10, Size: 0x40]
	bool bOverride;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	Guid ExpressionGUID;//[Offset: 0x54, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialLayersFunctions
	MaterialFunctionInterface*[] Layers;//[Offset: 0x0, Size: 0x10]
	MaterialFunctionInterface*[] Blends;//[Offset: 0x10, Size: 0x10]
	bool[] LayerStates;//[Offset: 0x20, Size: 0x10]
	FString KeyString;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpCurveEdSetup.Object
	CurveEdTab[] Tabs;//[Offset: 0x28, Size: 0x10]
	int ActiveTab;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CurveEdTab
	FString TabName;//[Offset: 0x0, Size: 0x10]
	CurveEdEntry[] Curves;//[Offset: 0x10, Size: 0x10]
	float ViewStartInput;//[Offset: 0x20, Size: 0x4]
	float ViewEndInput;//[Offset: 0x24, Size: 0x4]
	float ViewStartOutput;//[Offset: 0x28, Size: 0x4]
	float ViewEndOutput;//[Offset: 0x2c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CurveEdEntry
	Object* CurveObject;//[Offset: 0x0, Size: 0x8]
	Color CurveColor;//[Offset: 0x8, Size: 0x4]
	FString CurveName;//[Offset: 0x10, Size: 0x10]
	int bHideCurve;//[Offset: 0x20, Size: 0x4]
	int bColorCurve;//[Offset: 0x24, Size: 0x4]
	int bFloatingPointColorCurve;//[Offset: 0x28, Size: 0x4]
	int bClamp;//[Offset: 0x2c, Size: 0x4]
	float ClampLow;//[Offset: 0x30, Size: 0x4]
	float ClampHigh;//[Offset: 0x34, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleSystemLOD
<----------Generated by SSpawner v1.0.2---------->


Class: LODSoloTrack
	byte[] SoloEnableSetting;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: NamedEmitterMaterial
	FName Name;//[Offset: 0x0, Size: 0x8]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraModifier_CameraShake.CameraModifier.Object
	CameraShake*[] ActiveShakes;//[Offset: 0x48, Size: 0x10]
	float SplitScreenShakeScale;//[Offset: 0x58, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float OscillationDuration;//[Offset: 0x2c, Size: 0x4]
	float OscillationBlendInTime;//[Offset: 0x30, Size: 0x4]
	float OscillationBlendOutTime;//[Offset: 0x34, Size: 0x4]
	ROscillator RotOscillation;//[Offset: 0x38, Size: 0x24]
	VOscillator LocOscillation;//[Offset: 0x5c, Size: 0x24]
	FOscillator FOVOscillation;//[Offset: 0x80, Size: 0xc]
	float AnimPlayRate;//[Offset: 0x8c, Size: 0x4]
	float AnimScale;//[Offset: 0x90, Size: 0x4]
	float AnimBlendInTime;//[Offset: 0x94, Size: 0x4]
	float AnimBlendOutTime;//[Offset: 0x98, Size: 0x4]
	float RandomAnimSegmentDuration;//[Offset: 0x9c, Size: 0x4]
	CameraAnim* anim;//[Offset: 0xa0, Size: 0x8]
	bool bRandomAnimSegment;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xa8, Size: 0x1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xb8, Size: 0x8]
	float ShakeScale;//[Offset: 0x148, Size: 0x4]
	float OscillatorTimeRemaining;//[Offset: 0x14c, Size: 0x4]
	CameraAnimInst* AnimInst;//[Offset: 0x150, Size: 0x8]
	void ReceiveStopShake(bool bImmediately);// 0x35332fc
	void ReceivePlayShake(float Scale);// 0x35332fc
	bool ReceiveIsFinished();// 0x4cea88c
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, out const MinimalViewInfo POV, out MinimalViewInfo ModifiedPOV);// 0x35332fc
<----------Generated by SSpawner v1.0.2---------->


Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0, Size: 0xc]
	FOscillator Yaw;//[Offset: 0xc, Size: 0xc]
	FOscillator Roll;//[Offset: 0x18, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: FOscillator
	float Amplitude;//[Offset: 0x0, Size: 0x4]
	float Frequency;//[Offset: 0x4, Size: 0x4]
	byte InitialOffset;//[Offset: 0x8, Size: 0x1]
	enum Waveform;//[Offset: 0x9, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: VOscillator
	FOscillator X;//[Offset: 0x0, Size: 0xc]
	FOscillator Y;//[Offset: 0xc, Size: 0xc]
	FOscillator Z;//[Offset: 0x18, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x28, Size: 0x8]
	float AnimLength;//[Offset: 0x30, Size: 0x4]
	Box BoundingBox;//[Offset: 0x34, Size: 0x1c]
	bool bRelativeToInitialTransform;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bRelativeToInitialFOV;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	float BaseFOV;//[Offset: 0x54, Size: 0x4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x60, Size: 0x570]
	float BasePostProcessBlendWeight;//[Offset: 0x5d0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpGroup.Object
	InterpTrack*[] InterpTracks;//[Offset: 0x30, Size: 0x10]
	FName GroupName;//[Offset: 0x40, Size: 0x8]
	Color GroupColor;//[Offset: 0x48, Size: 0x4]
	bool bCollapsed;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x4c, Size: 0x1]
	bool bVisible;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x4c, Size: 0x1]
	bool bIsFolder;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x4c, Size: 0x1]
	bool bIsParented;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x4c, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x4c, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpTrack.Object
	InterpTrack*[] SubTracks;//[Offset: 0x38, Size: 0x10]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x48, Size: 0x8]
	byte ActiveCondition;//[Offset: 0x50, Size: 0x1]
	FString TrackTitle;//[Offset: 0x58, Size: 0x10]
	bool bOnePerGroup;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x68, Size: 0x1]
	bool bDirGroupOnly;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x68, Size: 0x1]
	bool bDisableTrack;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x68, Size: 0x1]
	bool bIsSelected;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x68, Size: 0x1]
	bool bIsAnimControlTrack;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x68, Size: 0x1]
	bool bSubTrackOnly;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x68, Size: 0x1]
	bool bVisible;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x68, Size: 0x1]
	bool bIsRecording;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x68, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x28, Size: 0x8]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x30, Size: 0x8]
	float PlayRate;//[Offset: 0x50, Size: 0x4]
	InterpTrackMove* MoveTrack;//[Offset: 0x68, Size: 0x8]
	InterpTrackInstMove* MoveInst;//[Offset: 0x70, Size: 0x8]
	byte PlaySpace;//[Offset: 0x78, Size: 0x1]
	void Stop(bool bImmediate);// 0x4ce42b4
	void SetScale(float NewDuration);// 0x4ce4238
	void SetDuration(float NewDuration);// 0x4ce41bc
<----------Generated by SSpawner v1.0.2---------->


Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x28, Size: 0x8]
	Actor* GroupActor;//[Offset: 0x30, Size: 0x8]
	InterpTrackInst*[] TrackInst;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x70, Size: 0x18]
	InterpCurveVector EulerTrack;//[Offset: 0x88, Size: 0x18]
	InterpLookupTrack LookupTrack;//[Offset: 0xa0, Size: 0x10]
	FName LookAtGroupName;//[Offset: 0xb0, Size: 0x8]
	float LinCurveTension;//[Offset: 0xb8, Size: 0x4]
	float AngCurveTension;//[Offset: 0xbc, Size: 0x4]
	bool bUseQuatInterpolation;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xc0, Size: 0x1]
	bool bShowArrowAtKeys;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xc0, Size: 0x1]
	bool bDisableMovement;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xc0, Size: 0x1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xc0, Size: 0x1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0xc0, Size: 0x1]
	bool bHide3DTrack;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0xc0, Size: 0x1]
	byte RotMode;//[Offset: 0xc1, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpCurveVector
	InterpCurvePointVector[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpCurvePointVector
	float InVal;//[Offset: 0x0, Size: 0x4]
	Vector OutVal;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	byte InterpMode;//[Offset: 0x28, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpLookupTrack
	InterpLookupPoint[] Points;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpLookupPoint
	FName GroupName;//[Offset: 0x0, Size: 0x8]
	float Time;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x28, Size: 0xc]
	Rotator ResetRotation;//[Offset: 0x34, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x340, Size: 0x1]
	CameraComponent* CameraComponent;//[Offset: 0x348, Size: 0x8]
	SceneComponent* SceneComponent;//[Offset: 0x350, Size: 0x8]
	bool bConstrainAspectRatio;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x360, Size: 0x1]
	float AspectRatio;//[Offset: 0x364, Size: 0x4]
	float FOVAngle;//[Offset: 0x368, Size: 0x4]
	float PostProcessBlendWeight;//[Offset: 0x36c, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x370, Size: 0x570]
	int GetAutoActivatePlayerIndex();// 0x4ce3704
<----------Generated by SSpawner v1.0.2---------->


Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x278, Size: 0x4]
	float OrthoWidth;//[Offset: 0x27c, Size: 0x4]
	float OrthoNearClipPlane;//[Offset: 0x280, Size: 0x4]
	float OrthoFarClipPlane;//[Offset: 0x284, Size: 0x4]
	float AspectRatio;//[Offset: 0x288, Size: 0x4]
	int CullingMask;//[Offset: 0x28c, Size: 0x4]
	bool bConstrainAspectRatio;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x290, Size: 0x1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x290, Size: 0x1]
	bool bLockToHmd;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x290, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x290, Size: 0x1]
	byte ProjectionMode;//[Offset: 0x291, Size: 0x1]
	float PostProcessBlendWeight;//[Offset: 0x2d0, Size: 0x4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x300, Size: 0x570]
	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);// 0x4ce5218
	void SetProjectionMode(byte InProjectionMode);// 0x4ce51a0
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);// 0x4ce5128
	void SetOrthoWidth(float InOrthoWidth);// 0x4ce50b0
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);// 0x4ce5038
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);// 0x4ce4fc0
	void SetFieldOfView(float InFieldOfView);// 0x4ce4f48
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);// 0x4ce4ebc
	void SetAspectRatio(float InAspectRatio);// 0x4ce4e44
	void RemoveBlendable(interface classNone InBlendableObject);// 0x4ce4d44
	void GetCameraView(float DeltaTime, out MinimalViewInfo DesiredView);// 0x4ce4be4
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x4ce4ab0
<----------Generated by SSpawner v1.0.2---------->


Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x28, Size: 0x8]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x30, Size: 0x8]
	void Walk();// 0x4cfdc8c
	void ViewSelf();// 0x4cfdc70
	void ViewPlayer(FString S);// 0x4cfdbdc
	void ViewClass(class Actor DesiredClass);// 0x4cfdb58
	void ViewActor(FName ActorName);// 0x4cfdad4
	void UpdateSafeArea();// 0x4cfdac0
	void ToggleServerStatReplicatorUpdateStatNet();// 0x4cfdaac
	void ToggleServerStatReplicatorClientOverwrite();// 0x4cfda98
	void ToggleDebugCamera();// 0x4cfda7c
	void ToggleAILogging();// 0x4cfda60
	void TestCollisionDistance();// 0x4cfda44
	void Teleport();// 0x4cfda28
	void Summon(FString ClassName);// 0x4cfd994
	void StreamLevelOut(FName PackageName);// 0x4cfd910
	void StreamLevelIn(FName PackageName);// 0x4cfd88c
	void SpawnServerStatReplicator();// 0x4cfd878
	void Slomo(float NewTimeDilation);// 0x4cfd7f4
	void SetWorldOrigin();// 0x4cfd7e0
	void SetMouseSensitivityToDefault();// 0x4cfd7c4
	void ServerToggleAILogging();// 0x4cfd768
	void ReceiveInitCheatManager();// 0x35332fc
	void ReceiveEndPlay();// 0x35332fc
	void PlayersOnly();// 0x4cfd74c
	void OnlyLoadLevel(FName PackageName);// 0x4cfd6c8
	void LogLoc();// 0x4cfd6ac
	void InvertMouse();// 0x4cfd690
	void God();// 0x4cfd674
	void Ghost();// 0x4cfd658
	void FreezeFrame(float Delay);// 0x4cfd5d4
	void Fly();// 0x4cfd5b8
	void FlushLog();// 0x4cfd59c
	void EnableDebugCamera();// 0x4cfd580
	void DumpVoiceMutingState();// 0x4cfd564
	void DumpPartyState();// 0x4cfd548
	void DumpOnlineSessionState();// 0x4cfd52c
	void DumpChatState();// 0x4cfd510
	void DisableDebugCamera();// 0x4cfd4f4
	void DestroyTarget();// 0x4cfd4d8
	void DestroyServerStatReplicator();// 0x4cfd4c4
	void DestroyPawns(class Pawn aClass);// 0x4cfd440
	void DestroyAllPawnsExceptTarget();// 0x4cfd424
	void DestroyAll(class Actor aClass);// 0x4cfd3a0
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);// 0x4cfd2e4
	void DebugCapsuleSweepPawn();// 0x4cfd2c8
	void DebugCapsuleSweepComplex(bool bTraceComplex);// 0x4cfd23c
	void DebugCapsuleSweepClear();// 0x4cfd220
	void DebugCapsuleSweepChannel(byte Channel);// 0x4cfd19c
	void DebugCapsuleSweepCapture();// 0x4cfd180
	void DebugCapsuleSweep();// 0x4cfd164
	void DamageTarget(float DamageAmount);// 0x4cfd0e0
	void CheatScript(FString ScriptName);// 0x4cfd000
	void ChangeSize(float F);// 0x4cfcf7c
	void BugItStringCreator(Vector ViewLocation, Rotator ViewRotation, out FString GoString, out FString LocString);// 0x4cfcdf4
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);// 0x4cfcc4c
	void BugIt(FString ScreenShotDescription);// 0x4cfcbb8
<----------Generated by SSpawner v1.0.2---------->


Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x685, Size: 0x1]
	bool bIsFrozenRendering;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x685, Size: 0x1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x688, Size: 0x8]
	float SpeedScale;//[Offset: 0x6b0, Size: 0x4]
	float InitialMaxSpeed;//[Offset: 0x6b4, Size: 0x4]
	float InitialAccel;//[Offset: 0x6b8, Size: 0x4]
	float InitialDecel;//[Offset: 0x6bc, Size: 0x4]
	void ToggleDisplay();// 0x4d0ee30
	void ShowDebugSelectedInfo();// 0x4d0ee14
	void SetPawnMovementSpeedScale(float NewSpeedScale);// 0x4d0ed98
	void ReceiveOnDeactivate(PlayerController* RestoredPC);// 0x35332fc
	void ReceiveOnActorSelected(Actor* NewSelectedActor, out const Vector SelectHitLocation, out const Vector SelectHitNormal, out const HitResult Hit);// 0x35332fc
	void ReceiveOnActivate(PlayerController* OriginalPC);// 0x35332fc
	Actor* GetSelectedActor();// 0x4d0ed64
<----------Generated by SSpawner v1.0.2---------->


Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x5c8, Size: 0x4]
	float FrustumAngle;//[Offset: 0x5cc, Size: 0x4]
	float FrustumAspectRatio;//[Offset: 0x5d0, Size: 0x4]
	float FrustumStartDist;//[Offset: 0x5d4, Size: 0x4]
	float FrustumEndDist;//[Offset: 0x5d8, Size: 0x4]
	Texture* Texture;//[Offset: 0x5e0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ActiveForceFeedbackEffect
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ForceFeedbackEffect.Object
	ForceFeedbackChannelDetails[] ChannelDetails;//[Offset: 0x28, Size: 0x10]
	float Duration;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ForceFeedbackChannelDetails
	bool bAffectsLeftLarge;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bAffectsLeftSmall;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightLarge;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bAffectsRightSmall;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	RuntimeFloatCurve Curve;//[Offset: 0x8, Size: 0x78]
<----------Generated by SSpawner v1.0.2---------->


Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0, Size: 0x70]
	CurveFloat* ExternalCurve;//[Offset: 0x70, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: NetConnection.player.Object
	ChildConnection*[] Children;//[Offset: 0x48, Size: 0x10]
	NetDriver* Driver;//[Offset: 0x58, Size: 0x8]
	class PackageMap* PackageMapClass;//[Offset: 0x60, Size: 0x8]
	PackageMap* PackageMap;//[Offset: 0x68, Size: 0x8]
	Channel*[] OpenChannels;//[Offset: 0x70, Size: 0x10]
	Actor*[] SentTemporaries;//[Offset: 0x80, Size: 0x10]
	Actor* ViewTarget;//[Offset: 0x90, Size: 0x8]
	Actor* OwningActor;//[Offset: 0x98, Size: 0x8]
	int MaxPacket;//[Offset: 0xa0, Size: 0x4]
	bool InternalAck;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xa4, Size: 0x1]
	UniqueNetIdRepl PlayerId;//[Offset: 0x158, Size: 0x28]
	double LastReceiveTime;//[Offset: 0x1e8, Size: 0x8]
	Channel*[] ChannelsToTick;//[Offset: 0x17c0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ChildConnection.NetConnection.player.Object
	NetConnection* Parent;//[Offset: 0x1918, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x30, Size: 0x10]
	FString ReplicationDriverClassName;//[Offset: 0x40, Size: 0x10]
	int MaxDownloadSize;//[Offset: 0x50, Size: 0x4]
	bool bClampListenServerTickRate;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x54, Size: 0x1]
	int NetServerMaxTickRate;//[Offset: 0x58, Size: 0x4]
	int MaxInternetClientRate;//[Offset: 0x5c, Size: 0x4]
	int MaxClientRate;//[Offset: 0x60, Size: 0x4]
	float ServerTravelPause;//[Offset: 0x64, Size: 0x4]
	float SpawnPrioritySeconds;//[Offset: 0x68, Size: 0x4]
	float RelevantTimeout;//[Offset: 0x6c, Size: 0x4]
	float KeepAliveTime;//[Offset: 0x70, Size: 0x4]
	float InitialConnectTimeout;//[Offset: 0x74, Size: 0x4]
	float ConnectionTimeout;//[Offset: 0x78, Size: 0x4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x7c, Size: 0x4]
	bool bNoTimeouts;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	NetConnection* ServerConnection;//[Offset: 0x88, Size: 0x8]
	NetConnection*[] ClientConnections;//[Offset: 0x90, Size: 0x10]
	World* World;//[Offset: 0x128, Size: 0x8]
	Package* WorldPackage;//[Offset: 0x130, Size: 0x8]
	class Object* NetConnectionClass;//[Offset: 0x158, Size: 0x8]
	class Object* ReplicationDriverClass;//[Offset: 0x160, Size: 0x8]
	Property* RoleProperty;//[Offset: 0x168, Size: 0x8]
	Property* RemoteRoleProperty;//[Offset: 0x170, Size: 0x8]
	FName NetDriverName;//[Offset: 0x178, Size: 0x8]
	Channel*[] ActorChannelPool;//[Offset: 0x1c0, Size: 0x10]
	float Time;//[Offset: 0x1d8, Size: 0x4]
	ReplicationDriver* ReplicationDriver;//[Offset: 0x670, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: Package.Object
<----------Generated by SSpawner v1.0.2---------->


Class: Property.Field.Object
<----------Generated by SSpawner v1.0.2---------->


Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ReplicationDriver.Object
<----------Generated by SSpawner v1.0.2---------->


Class: PackageMap.Object
<----------Generated by SSpawner v1.0.2---------->


Class: TouchInterface.Object
	TouchInputControl[] Controls;//[Offset: 0x28, Size: 0x10]
	float ActiveOpacity;//[Offset: 0x38, Size: 0x4]
	float InactiveOpacity;//[Offset: 0x3c, Size: 0x4]
	float TimeUntilDeactive;//[Offset: 0x40, Size: 0x4]
	float TimeUntilReset;//[Offset: 0x44, Size: 0x4]
	float ActivationDelay;//[Offset: 0x48, Size: 0x4]
	bool bPreventRecenter;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	float StartupDelay;//[Offset: 0x50, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: TouchInputControl
	Texture2D* Image1;//[Offset: 0x0, Size: 0x8]
	Texture2D* Image2;//[Offset: 0x8, Size: 0x8]
	Vector2D Center;//[Offset: 0x10, Size: 0x8]
	Vector2D VisualSize;//[Offset: 0x18, Size: 0x8]
	Vector2D ThumbSize;//[Offset: 0x20, Size: 0x8]
	Vector2D InteractionSize;//[Offset: 0x28, Size: 0x8]
	Vector2D InputScale;//[Offset: 0x30, Size: 0x8]
	Key MainInputKey;//[Offset: 0x38, Size: 0x18]
	Key AltInputKey;//[Offset: 0x50, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x39c, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0x3a0, Size: 0x4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x3a8, Size: 0x8]
	SphereComponent* CollisionComponent;//[Offset: 0x3b0, Size: 0x8]
	StaticMeshComponent* MeshComponent;//[Offset: 0x3b8, Size: 0x8]
	bool bAddDefaultMovementBindings;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3c0, Size: 0x1]
	void TurnAtRate(float Rate);// 0x4d117b4
	void MoveUp_World(float Val);// 0x4d11730
	void MoveRight(float Val);// 0x4d116ac
	void MoveForward(float Val);// 0x4d11628
	void LookUpAtRate(float Rate);// 0x4d115a4
<----------Generated by SSpawner v1.0.2---------->


Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x5e0, Size: 0x4]
	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);// 0x4ef180c
	float GetUnscaledSphereRadius();// 0x4ef17f0
	float GetShapeScale();// 0x4ef17b0
	float GetScaledSphereRadius();// 0x4ef1768
<----------Generated by SSpawner v1.0.2---------->


Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x5ec, Size: 0x4]
	int PreviousLODLevel;//[Offset: 0x5f0, Size: 0x4]
	int MinLOD;//[Offset: 0x5f4, Size: 0x4]
	int SubDivisionStepSize;//[Offset: 0x5f8, Size: 0x4]
	StaticMesh* StaticMesh;//[Offset: 0x600, Size: 0x8]
	Color WireframeColorOverride;//[Offset: 0x608, Size: 0x4]
	OrientedBox OrientedBox;//[Offset: 0x60c, Size: 0x3c]
	bool bOverrideWireframeColor;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x648, Size: 0x1]
	bool bOverrideMinLod;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x648, Size: 0x1]
	bool bOverrideNavigationExport;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x648, Size: 0x1]
	bool bForceNavigationObstacle;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x648, Size: 0x1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x648, Size: 0x1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x648, Size: 0x1]
	bool bOverrideLightMapRes;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x648, Size: 0x1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x648, Size: 0x1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x649, Size: 0x1]
	bool bUseSubDivisions;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x649, Size: 0x1]
	bool bUseDefaultCollision;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x649, Size: 0x1]
	bool bReverseCulling;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x649, Size: 0x1]
	bool bUseStaticMeshDrawDistance;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x649, Size: 0x1]
	bool IsDynamicInstancingParametersEnabled;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x649, Size: 0x1]
	bool bMobileIsBasePassFirstRender;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x649, Size: 0x1]
	int OverriddenLightMapRes;//[Offset: 0x64c, Size: 0x4]
	float DistanceFieldIndirectShadowMinVisibility;//[Offset: 0x650, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x654, Size: 0x4]
	float StreamingDistanceMultiplier;//[Offset: 0x658, Size: 0x4]
	StaticMeshComponentLODInfo[] LODData;//[Offset: 0x660, Size: 0x10]
	StreamingTextureBuildInfo[] StreamingTextureData;//[Offset: 0x670, Size: 0x10]
	<FString,Vector4> DynamicInstancingParameters;//[Offset: 0x680, Size: 0x50]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x6d0, Size: 0x18]
	IdeaBakingPrimitiveSettings IdeaBakingSettings;//[Offset: 0x6e8, Size: 0x14]
	bool SetStaticMesh(StaticMesh* NewMesh);// 0x4f04e98
	void SetReverseCulling(bool ReverseCulling);// 0x4f04e14
	void SetForcedLodModel(int NewForcedLodModel);// 0x4f04d98
	void SetDistanceFieldSelfShadowBias(float NewValue);// 0x4f04d1c
	void OnRep_StaticMesh(StaticMesh* OldStaticMesh);// 0x4f04ca0
	void GetLocalBounds(out Vector Min, out Vector Max);// 0x4f04bc4
<----------Generated by SSpawner v1.0.2---------->


Class: StaticMesh.Object
	float LDMaxDrawDistance;//[Offset: 0x48, Size: 0x4]
	PerPlatformInt MinLOD;//[Offset: 0x4c, Size: 0x4]
	float LpvBiasMultiplier;//[Offset: 0x50, Size: 0x4]
	StaticMaterial[] StaticMaterials;//[Offset: 0x58, Size: 0x10]
	float LightmapUVDensity;//[Offset: 0x68, Size: 0x4]
	int LightMapResolution;//[Offset: 0x6c, Size: 0x4]
	int LightMapCoordinateIndex;//[Offset: 0x70, Size: 0x4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x74, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x78, Size: 0x8]
	int LODForCollision;//[Offset: 0x80, Size: 0x4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xac, Size: 0x1]
	bool bUseOrientedBox;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xac, Size: 0x1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xac, Size: 0x1]
	bool bHasNavigationData;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xac, Size: 0x1]
	bool bSupportLowLODShadow;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0xac, Size: 0x1]
	bool bIsStreamable;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0xac, Size: 0x1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xad, Size: 0x1]
	bool bAllowCPUAccess;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xad, Size: 0x1]
	bool bMaliLowEndInstancingWorkaround;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0xad, Size: 0x1]
	bool bHasExtraAttributes;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0xad, Size: 0x1]
	bool bForceMipStreaming;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0xad, Size: 0x1]
	StaticMeshSocket*[] Sockets;//[Offset: 0xd0, Size: 0x10]
	Vector PositiveBoundsExtension;//[Offset: 0xf0, Size: 0xc]
	Vector NegativeBoundsExtension;//[Offset: 0xfc, Size: 0xc]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x108, Size: 0x1c]
	OrientedBox ExtendedOrientedBox;//[Offset: 0x124, Size: 0x3c]
	int ElementToIgnoreForTexFactor;//[Offset: 0x160, Size: 0x4]
	AssetUserData*[] AssetUserData;//[Offset: 0x168, Size: 0x10]
	Object* EditableMesh;//[Offset: 0x178, Size: 0x8]
	NavCollisionBase* NavCollision;//[Offset: 0x180, Size: 0x8]
	int GetNumSections(int inLod);// 0x4f03340
	int GetNumLODs();// 0x4f0330c
	int GetMaterialIndex(FName MaterialSlotName);// 0x4f03288
	MaterialInterface* GetMaterial(int MaterialIndex);// 0x4f03204
	BoxSphereBounds GetBounds();// 0x4f031b8
	Box GetBoundingBox();// 0x4f0316c
<----------Generated by SSpawner v1.0.2---------->


Class: StaticMaterial
	MaterialInterface* MaterialInterface;//[Offset: 0x0, Size: 0x8]
	FName MaterialSlotName;//[Offset: 0x8, Size: 0x8]
	FName ImportedMaterialSlotName;//[Offset: 0x10, Size: 0x8]
	MeshUVChannelInfo UVChannelData;//[Offset: 0x18, Size: 0x14]
<----------Generated by SSpawner v1.0.2---------->


Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x28, Size: 0x8]
	Vector RelativeLocation;//[Offset: 0x30, Size: 0xc]
	Rotator RelativeRotation;//[Offset: 0x3c, Size: 0xc]
	Vector RelativeScale;//[Offset: 0x48, Size: 0xc]
	FString Tag;//[Offset: 0x58, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: OrientedBox
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Vector AxisX;//[Offset: 0xc, Size: 0xc]
	Vector AxisY;//[Offset: 0x18, Size: 0xc]
	Vector AxisZ;//[Offset: 0x24, Size: 0xc]
	float ExtentX;//[Offset: 0x30, Size: 0x4]
	float ExtentY;//[Offset: 0x34, Size: 0x4]
	float ExtentZ;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: NavCollisionBase.Object
	bool bIsDynamicObstacle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: StaticMeshComponentLODInfo
	PaintedVertex[] PaintedVertices;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: PaintedVertex
	Vector Position;//[Offset: 0x0, Size: 0xc]
	Vector4 Normal;//[Offset: 0x10, Size: 0x10]
	Color Color;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: StreamingTextureBuildInfo
	uint32 PackedRelativeBox;//[Offset: 0x0, Size: 0x4]
	int TextureLevelIndex;//[Offset: 0x4, Size: 0x4]
	float TexelFactor;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bShadowIndirectOnly;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4, Size: 0x4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8, Size: 0x4]
	float EmissiveBoost;//[Offset: 0xc, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x10, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: IdeaBakingPrimitiveSettings
	float IdeaMaterialDiffuse;//[Offset: 0x0, Size: 0x4]
	float LightmapBoost;//[Offset: 0x4, Size: 0x4]
	float DiscardPixelFrontfaceFactor;//[Offset: 0x8, Size: 0x4]
	float SunIntensity;//[Offset: 0xc, Size: 0x4]
	float LocalLightsAffectMaxDistance;//[Offset: 0x10, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0x128, Size: 0x10]
	delegate AnimationBindEvent;//[Offset: 0x138, Size: 0x10]
	delegate ColorAndOpacityDelegate;//[Offset: 0x148, Size: 0x10]
	SlateColor ForegroundColor;//[Offset: 0x158, Size: 0x28]
	delegate ForegroundColorDelegate;//[Offset: 0x180, Size: 0x10]
	Margin Padding;//[Offset: 0x190, Size: 0x10]
	UMGSequencePlayer*[] ActiveSequencePlayers;//[Offset: 0x1a0, Size: 0x10]
	UMGSequencePlayer*[] StoppedSequencePlayers;//[Offset: 0x1b0, Size: 0x10]
	NamedSlotBinding[] NamedSlotBindings;//[Offset: 0x1c0, Size: 0x10]
	WidgetTree* WidgetTree;//[Offset: 0x1d0, Size: 0x8]
	int Priority;//[Offset: 0x1d8, Size: 0x4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x1dc, Size: 0x1]
	bool bIsFocusable;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x1dc, Size: 0x1]
	bool bStopAction;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x1dc, Size: 0x1]
	bool bHasScriptImplementedTick;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x1dc, Size: 0x1]
	bool bHasScriptImplementedPaint;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x1dc, Size: 0x1]
	bool bPaintOutLine;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x1dc, Size: 0x1]
	enum TickFrequency;//[Offset: 0x1dd, Size: 0x1]
	InputComponent* InputComponent;//[Offset: 0x1e0, Size: 0x8]
	AnimationEventBinding[] AnimationCallbacks;//[Offset: 0x1e8, Size: 0x10]
	void UnregisterInputComponent();// 0x4305814
	void UnbindFromAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x430572c
	void UnbindFromAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x4305644
	void UnbindAllFromAnimationStarted(WidgetAnimation* Animation);// 0x43055c8
	void UnbindAllFromAnimationFinished(WidgetAnimation* Animation);// 0x430554c
	void Tick(Geometry MyGeometry, float InDeltaTime);// 0x35332fc
	void StopListeningForInputAction(FName ActionName, byte EventType);// 0x430548c
	void StopListeningForAllInputActions();// 0x4305478
	void StopAnimationsAndLatentActions();// 0x4305464
	void StopAnimation(const WidgetAnimation* InAnimation);// 0x43053e8
	void StopAllAnimations();// 0x43053d4
	void SetPositionInViewport(Vector2D Position, bool bRemoveDPIScale);// 0x4305318
	void SetPlaybackSpeed(const WidgetAnimation* InAnimation, float PlaybackSpeed);// 0x4305260
	void SetPadding(Margin InPadding);// 0x43051e0
	void SetOwningPlayer(PlayerController* LocalPlayerController);// 0x4305164
	void SetNumLoopsToPlay(const WidgetAnimation* InAnimation, int NumLoopsToPlay);// 0x43050ac
	void SetInputActionPriority(int NewPriority);// 0x4305030
	void SetInputActionBlocking(bool bShouldBlock);// 0x4304fac
	void SetForegroundColor(SlateColor InForegroundColor);// 0x4304e40
	void SetDesiredSizeInViewport(Vector2D Size);// 0x4304dc8
	void SetColorAndOpacity(LinearColor InColorAndOpacity);// 0x4304d4c
	void SetAnchorsInViewport(Anchors Anchors);// 0x4304ccc
	void SetAlignmentInViewport(Vector2D Alignment);// 0x4304c54
	void ReverseAnimation(const WidgetAnimation* InAnimation);// 0x4304bd8
	void RemoveFromViewport();// 0x4304bc4
	void RegisterInputComponent();// 0x4304bb0
	void PreConstruct(bool IsDesignTime);// 0x35332fc
	void PlaySound(SoundBase* SoundToPlay);// 0x4304b34
	void PlayAnimationTo(WidgetAnimation* InAnimation, float StartAtTime, float EndAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x4304990
	void PlayAnimationByName(FString Name);// 0x4304904
	void PlayAnimation(WidgetAnimation* InAnimation, float StartAtTime, int NumLoopsToPlay, byte PlayMode, float PlaybackSpeed);// 0x4304798
	float PauseAnimation(const WidgetAnimation* InAnimation);// 0x4304714
	EventReply OnTouchStarted(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x35332fc
	EventReply OnTouchMoved(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x35332fc
	EventReply OnTouchGesture(Geometry MyGeometry, out const PointerEvent GestureEvent);// 0x35332fc
	EventReply OnTouchForceChanged(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x35332fc
	EventReply OnTouchEnded(Geometry MyGeometry, out const PointerEvent InTouchEvent);// 0x35332fc
	void OnRemovedFromFocusPath(FocusEvent InFocusEvent);// 0x35332fc
	EventReply OnPreviewMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x35332fc
	EventReply OnPreviewKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x35332fc
	void OnPaint(out PaintContext Context);// 0x35332fc
	EventReply OnMouseWheel(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x35332fc
	EventReply OnMouseMove(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x35332fc
	void OnMouseLeave(out const PointerEvent MouseEvent);// 0x35332fc
	void OnMouseEnter(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x35332fc
	void OnMouseCaptureLost();// 0x35332fc
	EventReply OnMouseButtonUp(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x35332fc
	EventReply OnMouseButtonDown(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x35332fc
	EventReply OnMouseButtonDoubleClick(Geometry InMyGeometry, out const PointerEvent InMouseEvent);// 0x35332fc
	EventReply OnMotionDetected(Geometry MyGeometry, MotionEvent InMotionEvent);// 0x35332fc
	EventReply OnKeyUp(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x35332fc
	EventReply OnKeyDown(Geometry MyGeometry, KeyEvent InKeyEvent);// 0x35332fc
	EventReply OnKeyChar(Geometry MyGeometry, CharacterEvent InCharacterEvent);// 0x35332fc
	void OnInitialized();// 0x35332fc
	EventReply OnFocusReceived(Geometry MyGeometry, FocusEvent InFocusEvent);// 0x35332fc
	void OnFocusLost(FocusEvent InFocusEvent);// 0x35332fc
	bool OnDrop(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x35332fc
	bool OnDragOver(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x35332fc
	void OnDragLeave(PointerEvent PointerEvent, DragDropOperation* Operation);// 0x35332fc
	void OnDragEnter(Geometry MyGeometry, PointerEvent PointerEvent, DragDropOperation* Operation);// 0x35332fc
	void OnDragDetected(Geometry MyGeometry, out const PointerEvent PointerEvent, out DragDropOperation* Operation);// 0x35332fc
	void OnDragCancelled(out const PointerEvent PointerEvent, DragDropOperation* Operation);// 0x35332fc
	void OnAnimationStarted(const WidgetAnimation* Animation);// 0x4304690
	void OnAnimationFinished(const WidgetAnimation* Animation);// 0x430460c
	EventReply OnAnalogValueChanged(Geometry MyGeometry, AnalogInputEvent InAnalogInputEvent);// 0x35332fc
	void OnAddedToFocusPath(FocusEvent InFocusEvent);// 0x35332fc
	void ListenForInputAction(FName ActionName, byte EventType, bool bConsume, delegate callback);// 0x430449c
	bool IsPlayingAnimation();// 0x4304478
	bool IsListeningForInputAction(FName ActionName);// 0x43043f0
	bool IsInViewport();// 0x43043b8
	bool IsInteractable();// 0x35332fc
	bool IsAnyAnimationPlaying();// 0x4304380
	bool IsAnimationPlayingForward(const WidgetAnimation* InAnimation);// 0x43042f8
	bool IsAnimationPlaying(const WidgetAnimation* InAnimation);// 0x4304270
	Pawn* GetOwningPlayerPawn();// 0x430423c
	bool GetIsVisible();// 0x4304204
	float GetAnimationCurrentTime(const WidgetAnimation* InAnimation);// 0x4304180
	WidgetAnimation* GetAnimationByName(FString Name);// 0x43040e4
	Anchors GetAnchorsInViewport();// 0x43040ac
	Vector2D GetAlignmentInViewport();// 0x4304078
	void EnablePaintOutLine(bool bEnable);// 0x4303ff4
	void Destruct();// 0x35332fc
	void Construct();// 0x35332fc
	void CancelLatentActions();// 0x4303fe0
	void BindToAnimationStartedForLua(WidgetAnimation* Animation);// 0x4303f64
	void BindToAnimationStarted(WidgetAnimation* Animation, delegate Delegate);// 0x4303e7c
	void BindToAnimationFinishedForLua(WidgetAnimation* Animation);// 0x4303e00
	void BindToAnimationFinished(WidgetAnimation* Animation, delegate Delegate);// 0x4303d18
	void BindToAnimationEvent(WidgetAnimation* Animation, delegate Delegate, enum AnimationEvent, FName UserTag);// 0x4303bb8
	void AddToViewport(int ZOrder);// 0x4303b3c
	bool AddToPlayerScreen(int ZOrder);// 0x4303ab4
<----------Generated by SSpawner v1.0.2---------->


Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x28, Size: 0x8]
	delegate bIsEnabledDelegate;//[Offset: 0x30, Size: 0x10]
	FText ToolTipText;//[Offset: 0x40, Size: 0x18]
	delegate ToolTipTextDelegate;//[Offset: 0x58, Size: 0x10]
	Widget* ToolTipWidget;//[Offset: 0x68, Size: 0x8]
	delegate ToolTipWidgetDelegate;//[Offset: 0x70, Size: 0x10]
	delegate VisibilityDelegate;//[Offset: 0x80, Size: 0x10]
	delegate bIsCircleHitTestDelegate;//[Offset: 0x90, Size: 0x10]
	WidgetTransform RenderTransform;//[Offset: 0xa0, Size: 0x1c]
	Vector2D RenderTransformPivot;//[Offset: 0xbc, Size: 0x8]
	bool bIsVariable;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xc4, Size: 0x1]
	bool bCreatedByConstructionScript;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xc4, Size: 0x1]
	bool bIsEnabled;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xc4, Size: 0x1]
	bool bOverride_Cursor;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xc4, Size: 0x1]
	bool bIsVolatile;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0xc4, Size: 0x1]
	byte UsedLayerPolicy;//[Offset: 0xc5, Size: 0x1]
	byte PreservedLayerNum;//[Offset: 0xc6, Size: 0x1]
	int ShowLayerID;//[Offset: 0xc8, Size: 0x4]
	int OffestLayerPara;//[Offset: 0xcc, Size: 0x4]
	bool bDrawEffectNoPixel;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xd0, Size: 0x1]
	byte Cursor;//[Offset: 0xd1, Size: 0x1]
	enum Clipping;//[Offset: 0xd2, Size: 0x1]
	enum Visibility;//[Offset: 0xd3, Size: 0x1]
	bool bIsCircleHitTest;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xd4, Size: 0x1]
	float RenderOpacity;//[Offset: 0xd8, Size: 0x4]
	WidgetNavigation* Navigation;//[Offset: 0xe0, Size: 0x8]
	PropertyBinding*[] NativeBindings;//[Offset: 0x110, Size: 0x10]
	void SetVisibility(enum InVisibility);// 0x430d0f4
	void SetUserFocus(PlayerController* PlayerController);// 0x430d078
	void SetToolTipText(out const FText InToolTipText);// 0x430cf90
	void SetToolTip(Widget* Widget);// 0x430cf14
	void SetRenderTranslation(Vector2D Translation);// 0x430ce9c
	void SetRenderTransformPivot(Vector2D Pivot);// 0x430ce24
	void SetRenderTransform(WidgetTransform InTransform);// 0x430cd78
	void SetRenderShear(Vector2D Shear);// 0x430cd00
	void SetRenderScale(Vector2D Scale);// 0x430cc88
	void SetRenderOpacity(float InOpacity);// 0x430cc0c
	void SetRenderAngle(float Angle);// 0x430cb90
	void SetNavigationRule(enum Direction, enum Rule, FName WidgetToFocus);// 0x430ca9c
	void SetKeyboardFocus();// 0x430ca88
	void SetIsEnabled(bool bInIsEnabled);// 0x430c9fc
	void SetIsCircleHitTest(bool bInIsCircleHitTest);// 0x430c970
	void SetCursor(byte InCursor);// 0x430c8f4
	void SetClipping(enum InClipping);// 0x430c878
	void SetAllNavigationRules(enum Rule, FName WidgetToFocus);// 0x430c7c0
	void ResetCursor();// 0x430c7ac
	void RemoveFromParent();// 0x430c790
	EventReply OnReply__DelegateSignature();// 0x35332fc
	EventReply OnPointerEvent__DelegateSignature(Geometry MyGeometry, out const PointerEvent MouseEvent);// 0x35332fc
	bool IsVisible();// 0x430c758
	bool IsHovered();// 0x430c718
	void InvalidateLayoutAndVolatility();// 0x430c704
	bool HasUserFocusedDescendants(PlayerController* PlayerController);// 0x430c67c
	bool HasUserFocus(PlayerController* PlayerController);// 0x430c5f4
	bool HasMouseCaptureByUser(int UserIndex, int PointerIndex);// 0x430c534
	bool HasMouseCapture();// 0x430c4fc
	bool HasKeyboardFocus();// 0x430c4c4
	bool HasFocusedDescendants();// 0x430c48c
	bool HasAnyUserFocus();// 0x430c454
	Widget* GetWidget__DelegateSignature();// 0x35332fc
	enum GetVisibility();// 0x430c420
	FText GetText__DelegateSignature();// 0x35332fc
	enum GetSlateVisibility__DelegateSignature();// 0x35332fc
	SlateColor GetSlateColor__DelegateSignature();// 0x35332fc
	SlateBrush GetSlateBrush__DelegateSignature();// 0x35332fc
	float GetRenderOpacity();// 0x430c3ec
	PanelWidget* GetParent();// 0x430c3b8
	PlayerController* GetOwningPlayer();// 0x430c37c
	LocalPlayer* GetOwningLocalPlayer();// 0x430c340
	byte GetMouseCursor__DelegateSignature();// 0x35332fc
	LinearColor GetLinearColor__DelegateSignature();// 0x35332fc
	bool GetIsEnabled();// 0x430c308
	bool GetIsCircleHitTest();// 0x430c2d0
	int GetInt32__DelegateSignature();// 0x35332fc
	float GetFloat__DelegateSignature();// 0x35332fc
	Vector2D GetDesiredSize();// 0x430c29c
	enum GetClipping();// 0x430c268
	enum GetCheckBoxState__DelegateSignature();// 0x35332fc
	Geometry GetCachedGeometry();// 0x430c230
	bool GetBool__DelegateSignature();// 0x35332fc
	Widget* GenerateWidgetForString__DelegateSignature(FString Item);// 0x35332fc
	Widget* GenerateWidgetForObject__DelegateSignature(Object* Item);// 0x35332fc
	void ForceVolatile(bool bForce);// 0x430c1ac
	void ForceLayoutPrepass();// 0x430c198
	void DrawEffectNoPixel(bool noPixel);// 0x430c114
<----------Generated by SSpawner v1.0.2---------->


Class: Visual.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0, Size: 0x10]
	byte ColorUseRule;//[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: Margin
	float Left;//[Offset: 0x0, Size: 0x4]
	float Top;//[Offset: 0x4, Size: 0x4]
	float Right;//[Offset: 0x8, Size: 0x4]
	float Bottom;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x28, Size: 0x8]
	Widget* Content;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: PanelWidget.Widget.Visual.Object
	PanelSlot*[] Slots;//[Offset: 0x120, Size: 0x10]
	bool RemoveChildAt(int Index);// 0x42e8408
	bool RemoveChild(Widget* Content);// 0x42e8380
	bool HasChild(Widget* Content);// 0x42e82f8
	bool HasAnyChildren();// 0x42e82c0
	int GetChildrenCount();// 0x42e828c
	int GetChildIndex(Widget* Content);// 0x42e8208
	Widget* GetChildAt(int Index);// 0x42e8184
	void ClearChildren();// 0x42e8170
	PanelSlot* AddChild(Widget* Content);// 0x42e80ec
<----------Generated by SSpawner v1.0.2---------->


Class: UMGSequencePlayer.Object
	WidgetAnimation* Animation;//[Offset: 0x380, Size: 0x8]
	void SetUserTag(FName InUserTag);// 0x42fb4a8
	FName GetUserTag();// 0x42fb48c
<----------Generated by SSpawner v1.0.2---------->


Class: WidgetAnimation.MovieSceneSequence.MovieSceneSignedObject.Object
	MovieScene* MovieScene;//[Offset: 0x348, Size: 0x8]
	WidgetAnimationBinding[] AnimationBindings;//[Offset: 0x350, Size: 0x10]
	bool bLegacyFinishOnStop;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	FString DisplayLabel;//[Offset: 0x368, Size: 0x10]
	float GetStartTime();// 0x430fc64
	float GetEndTime();// 0x430fc30
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSequence.MovieSceneSignedObject.Object
	MovieSceneEvaluationTemplate PrecompiledEvaluationTemplate;//[Offset: 0x50, Size: 0x2f0]
	enum DefaultCompletionMode;//[Offset: 0x340, Size: 0x1]
	bool bParentContextsAreSignificant;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSignedObject.Object
	Guid Signature;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneEvaluationTemplate
	<MovieSceneTrackIdentifier,MovieSceneEvaluationTrack> Tracks;//[Offset: 0x0, Size: 0x50]
	MovieSceneEvaluationField EvaluationField;//[Offset: 0xa0, Size: 0x30]
	MovieSceneSequenceHierarchy Hierarchy;//[Offset: 0xd0, Size: 0xa0]
	Guid SequenceSignature;//[Offset: 0x170, Size: 0x10]
	MovieSceneEvaluationTemplateSerialNumber TemplateSerialNumber;//[Offset: 0x180, Size: 0x4]
	MovieSceneTemplateGenerationLedger TemplateLedger;//[Offset: 0x188, Size: 0xa8]
	MovieSceneTrackFieldData TrackFieldData;//[Offset: 0x230, Size: 0x60]
	MovieSceneSubSectionFieldData SubSectionFieldData;//[Offset: 0x290, Size: 0x60]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneTrackIdentifier
	uint32 Value;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneEvaluationTrack
	Guid ObjectBindingId;//[Offset: 0x0, Size: 0x10]
	uint16 EvaluationPriority;//[Offset: 0x10, Size: 0x2]
	enum EvaluationMethod;//[Offset: 0x12, Size: 0x1]
	MovieSceneEvaluationTrackSegments Segments;//[Offset: 0x18, Size: 0x20]
	MovieSceneTrack* SourceTrack;//[Offset: 0x38, Size: 0x8]
	SectionEvaluationDataTree EvaluationTree;//[Offset: 0x40, Size: 0x60]
	MovieSceneEvalTemplatePtr[] ChildTemplates;//[Offset: 0xa0, Size: 0x10]
	MovieSceneTrackImplementationPtr TrackTemplate;//[Offset: 0xb0, Size: 0x38]
	FName EvaluationGroup;//[Offset: 0xe8, Size: 0x8]
	bool bEvaluateInPreroll;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xf0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xf0, Size: 0x1]
	bool bIsActive;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneEvaluationTrackSegments
	int[] SegmentIdentifierToIndex;//[Offset: 0x0, Size: 0x10]
	MovieSceneSegment[] SortedSegments;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSegment
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneTrack.MovieSceneSignedObject.Object
	MovieSceneTrackEvalOptions EvalOptions;//[Offset: 0x50, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneTrackEvalOptions
	bool bCanEvaluateNearestSection;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bEvalNearestSection;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPreroll;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bEvaluateInPostroll;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bEvaluateNearestSection;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SectionEvaluationDataTree
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneEvalTemplatePtr
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneTrackImplementationPtr
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneEvaluationField
	MovieSceneFrameRange[] Ranges;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationGroup[] Groups;//[Offset: 0x10, Size: 0x10]
	MovieSceneEvaluationMetaData[] MetaData;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneFrameRange
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneEvaluationGroup
	MovieSceneEvaluationGroupLUTIndex[] LUTIndices;//[Offset: 0x0, Size: 0x10]
	MovieSceneEvaluationFieldSegmentPtr[] SegmentPtrLUT;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneEvaluationGroupLUTIndex
	int LUTOffset;//[Offset: 0x0, Size: 0x4]
	int NumInitPtrs;//[Offset: 0x4, Size: 0x4]
	int NumEvalPtrs;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneEvaluationFieldSegmentPtr.MovieSceneEvaluationFieldTrackPtr
	MovieSceneSegmentIdentifier SegmentID;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneEvaluationFieldTrackPtr
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSequenceID
	uint32 Value;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSegmentIdentifier
	int IdentifierIndex;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneEvaluationMetaData
	MovieSceneSequenceID[] ActiveSequences;//[Offset: 0x0, Size: 0x10]
	MovieSceneOrderedEvaluationKey[] ActiveEntities;//[Offset: 0x10, Size: 0x10]
	<MovieSceneSequenceID,uint32> SubTemplateSerialNumbers;//[Offset: 0x20, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneOrderedEvaluationKey
	MovieSceneEvaluationKey Key;//[Offset: 0x0, Size: 0xc]
	uint32 EvaluationIndex;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneEvaluationKey
	MovieSceneSequenceID SequenceID;//[Offset: 0x0, Size: 0x4]
	MovieSceneTrackIdentifier TrackIdentifier;//[Offset: 0x4, Size: 0x4]
	uint32 SectionIndex;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSequenceHierarchy
	<MovieSceneSequenceID,MovieSceneSubSequenceData> SubSequences;//[Offset: 0x0, Size: 0x50]
	<MovieSceneSequenceID,MovieSceneSequenceHierarchyNode> Hierarchy;//[Offset: 0x50, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSubSequenceData
	SoftObjectPath Sequence;//[Offset: 0x0, Size: 0x18]
	MovieSceneSequenceTransform RootToSequenceTransform;//[Offset: 0x18, Size: 0xc]
	FrameRate TickResolution;//[Offset: 0x24, Size: 0x8]
	MovieSceneSequenceID DeterministicSequenceID;//[Offset: 0x2c, Size: 0x4]
	MovieSceneFrameRange PlayRange;//[Offset: 0x30, Size: 0x10]
	MovieSceneFrameRange PreRollRange;//[Offset: 0x40, Size: 0x10]
	MovieSceneFrameRange PostRollRange;//[Offset: 0x50, Size: 0x10]
	int HierarchicalBias;//[Offset: 0x60, Size: 0x4]
	MovieSceneSequenceInstanceDataPtr InstanceData;//[Offset: 0x68, Size: 0x18]
	Guid SubSectionSignature;//[Offset: 0x88, Size: 0x10]
	MovieSceneSequenceTransform OuterToInnerTransform;//[Offset: 0x98, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSequenceTransform
	float TimeScale;//[Offset: 0x0, Size: 0x4]
	FrameTime Offset;//[Offset: 0x4, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: FrameTime
	FrameNumber FrameNumber;//[Offset: 0x0, Size: 0x4]
	float SubFrame;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: FrameNumber
	int Value;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: FrameRate
	int Numerator;//[Offset: 0x0, Size: 0x4]
	int Denominator;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSequenceInstanceDataPtr
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSequenceHierarchyNode
	MovieSceneSequenceID ParentId;//[Offset: 0x0, Size: 0x4]
	MovieSceneSequenceID[] Children;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneEvaluationTemplateSerialNumber
	uint32 Value;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneTemplateGenerationLedger
	MovieSceneTrackIdentifier LastTrackIdentifier;//[Offset: 0x0, Size: 0x4]
	<Guid,MovieSceneTrackIdentifier> TrackSignatureToTrackIdentifier;//[Offset: 0x8, Size: 0x50]
	<Guid,MovieSceneFrameRange> SubSectionRanges;//[Offset: 0x58, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneTrackFieldData
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSubSectionFieldData
<----------Generated by SSpawner v1.0.2---------->


Class: MovieScene.MovieSceneSignedObject.Object
	MovieSceneSpawnable[] Spawnables;//[Offset: 0x50, Size: 0x10]
	MovieScenePossessable[] Possessables;//[Offset: 0x60, Size: 0x10]
	MovieSceneBinding[] ObjectBindings;//[Offset: 0x70, Size: 0x10]
	MovieSceneTrack*[] MasterTracks;//[Offset: 0x80, Size: 0x10]
	MovieSceneTrack* CameraCutTrack;//[Offset: 0x90, Size: 0x8]
	MovieSceneFrameRange SelectionRange;//[Offset: 0x98, Size: 0x10]
	MovieSceneFrameRange PlaybackRange;//[Offset: 0xa8, Size: 0x10]
	FrameRate TickResolution;//[Offset: 0xb8, Size: 0x8]
	FrameRate DisplayRate;//[Offset: 0xc0, Size: 0x8]
	enum EvaluationType;//[Offset: 0xc8, Size: 0x1]
	enum ClockSource;//[Offset: 0xc9, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneSpawnable
	Transform SpawnTransform;//[Offset: 0x0, Size: 0x30]
	FName[] Tags;//[Offset: 0x30, Size: 0x10]
	Guid Guid;//[Offset: 0x40, Size: 0x10]
	FString Name;//[Offset: 0x50, Size: 0x10]
	Object* ObjectTemplate;//[Offset: 0x60, Size: 0x8]
	Guid[] ChildPossessables;//[Offset: 0x68, Size: 0x10]
	enum Ownership;//[Offset: 0x78, Size: 0x1]
	FName LevelName;//[Offset: 0x7c, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieScenePossessable
	FName[] Tags;//[Offset: 0x0, Size: 0x10]
	Guid Guid;//[Offset: 0x10, Size: 0x10]
	FString Name;//[Offset: 0x20, Size: 0x10]
	class Object* PossessedObjectClass;//[Offset: 0x30, Size: 0x8]
	Guid ParentGuid;//[Offset: 0x38, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: MovieSceneBinding
	Guid ObjectGuid;//[Offset: 0x0, Size: 0x10]
	FString BindingName;//[Offset: 0x10, Size: 0x10]
	MovieSceneTrack*[] Tracks;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: WidgetAnimationBinding
	FName WidgetName;//[Offset: 0x0, Size: 0x8]
	FName SlotWidgetName;//[Offset: 0x8, Size: 0x8]
	Guid AnimationGuid;//[Offset: 0x10, Size: 0x10]
	bool bIsRootWidget;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x20, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: NamedSlotBinding
	FName Name;//[Offset: 0x0, Size: 0x8]
	Widget* Content;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimationEventBinding
	WidgetAnimation* Animation;//[Offset: 0x0, Size: 0x8]
	delegate Delegate;//[Offset: 0x8, Size: 0x10]
	enum AnimationEvent;//[Offset: 0x18, Size: 0x1]
	FName UserTag;//[Offset: 0x1c, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: Geometry
<----------Generated by SSpawner v1.0.2---------->


Class: Anchors
	Vector2D Minimum;//[Offset: 0x0, Size: 0x8]
	Vector2D Maximum;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x28, Size: 0x8]
	bool bDebug;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x30, Size: 0x1]
	bool bOverrideConcurrency;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x30, Size: 0x1]
	bool bOutputToBusOnly;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x30, Size: 0x1]
	bool bIgnoreFocus;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x30, Size: 0x1]
	bool bHasDelayNode;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x30, Size: 0x1]
	bool bHasConcatenatorNode;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x30, Size: 0x1]
	bool bHasVirtualizeWhenSilent;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x30, Size: 0x1]
	bool bBypassVolumeScaleForPriority;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x30, Size: 0x1]
	SoundConcurrency* SoundConcurrencySettings;//[Offset: 0x38, Size: 0x8]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0x40, Size: 0xc]
	float Duration;//[Offset: 0x4c, Size: 0x4]
	float MaxDistance;//[Offset: 0x50, Size: 0x4]
	float TotalSamples;//[Offset: 0x54, Size: 0x4]
	float Priority;//[Offset: 0x58, Size: 0x4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x60, Size: 0x8]
	SoundSubmix* SoundSubmixObject;//[Offset: 0x68, Size: 0x8]
	SoundSubmixSendInfo[] SoundSubmixSends;//[Offset: 0x70, Size: 0x10]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x80, Size: 0x8]
	SoundSourceBusSendInfo[] BusSends;//[Offset: 0x88, Size: 0x10]
	SoundSourceBusSendInfo[] PreEffectBusSends;//[Offset: 0x98, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x28, Size: 0x28]
	SoundClass*[] ChildClasses;//[Offset: 0x50, Size: 0x10]
	PassiveSoundMixModifier[] PassiveSoundMixModifiers;//[Offset: 0x60, Size: 0x10]
	SoundClass* ParentClass;//[Offset: 0x70, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundClassProperties
	float Volume;//[Offset: 0x0, Size: 0x4]
	float Pitch;//[Offset: 0x4, Size: 0x4]
	float StereoBleed;//[Offset: 0x8, Size: 0x4]
	float LFEBleed;//[Offset: 0xc, Size: 0x4]
	float VoiceCenterChannelVolume;//[Offset: 0x10, Size: 0x4]
	float RadioFilterVolume;//[Offset: 0x14, Size: 0x4]
	float RadioFilterVolumeThreshold;//[Offset: 0x18, Size: 0x4]
	bool bApplyEffects;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
	bool bAlwaysPlay;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x1c, Size: 0x1]
	bool bIsUISound;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x1c, Size: 0x1]
	bool bIsMusic;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x1c, Size: 0x1]
	bool bReverb;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x1c, Size: 0x1]
	float Default2DReverbSendAmount;//[Offset: 0x20, Size: 0x4]
	bool bCenterChannelOnly;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x24, Size: 0x1]
	bool bApplyAmbientVolumes;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x24, Size: 0x1]
	byte OutputTarget;//[Offset: 0x25, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: PassiveSoundMixModifier
	SoundMix* SoundMix;//[Offset: 0x0, Size: 0x8]
	float MinVolumeThreshold;//[Offset: 0x8, Size: 0x4]
	float MaxVolumeThreshold;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	float EQPriority;//[Offset: 0x2c, Size: 0x4]
	AudioEQEffect EQSettings;//[Offset: 0x30, Size: 0x38]
	SoundClassAdjuster[] SoundClassEffects;//[Offset: 0x68, Size: 0x10]
	float InitialDelay;//[Offset: 0x78, Size: 0x4]
	float FadeInTime;//[Offset: 0x7c, Size: 0x4]
	float Duration;//[Offset: 0x80, Size: 0x4]
	float FadeOutTime;//[Offset: 0x84, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AudioEQEffect
	float FrequencyCenter0;//[Offset: 0x8, Size: 0x4]
	float Gain0;//[Offset: 0xc, Size: 0x4]
	float Bandwidth0;//[Offset: 0x10, Size: 0x4]
	float FrequencyCenter1;//[Offset: 0x14, Size: 0x4]
	float Gain1;//[Offset: 0x18, Size: 0x4]
	float Bandwidth1;//[Offset: 0x1c, Size: 0x4]
	float FrequencyCenter2;//[Offset: 0x20, Size: 0x4]
	float Gain2;//[Offset: 0x24, Size: 0x4]
	float Bandwidth2;//[Offset: 0x28, Size: 0x4]
	float FrequencyCenter3;//[Offset: 0x2c, Size: 0x4]
	float Gain3;//[Offset: 0x30, Size: 0x4]
	float Bandwidth3;//[Offset: 0x34, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundClassAdjuster
	SoundClass* SoundClassObject;//[Offset: 0x0, Size: 0x8]
	float VolumeAdjuster;//[Offset: 0x8, Size: 0x4]
	float PitchAdjuster;//[Offset: 0xc, Size: 0x4]
	bool bApplyToChildren;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	float VoiceCenterChannelVolumeAdjuster;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x28, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	bool bLimitToOwner;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x4, Size: 0x1]
	byte ResolutionRule;//[Offset: 0x5, Size: 0x1]
	float VolumeScale;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x28, Size: 0x2a8]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	bool bSpatialize;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xa0, Size: 0x1]
	bool bAttenuateWithLPF;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xa0, Size: 0x1]
	bool bEnableListenerFocus;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xa0, Size: 0x1]
	bool bEnableFocusInterpolation;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0xa0, Size: 0x1]
	bool bEnableOcclusion;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0xa0, Size: 0x1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0xa0, Size: 0x1]
	bool bEnableReverbSend;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0xa0, Size: 0x1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xa1, Size: 0x1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xa1, Size: 0x1]
	byte SpatializationAlgorithm;//[Offset: 0xa2, Size: 0x1]
	enum AbsorptionMethod;//[Offset: 0xa3, Size: 0x1]
	byte OcclusionTraceChannel;//[Offset: 0xa4, Size: 0x1]
	enum ReverbSendMethod;//[Offset: 0xa5, Size: 0x1]
	float OmniRadius;//[Offset: 0xa8, Size: 0x4]
	float StereoSpread;//[Offset: 0xac, Size: 0x4]
	float LPFRadiusMin;//[Offset: 0xb0, Size: 0x4]
	float LPFRadiusMax;//[Offset: 0xb4, Size: 0x4]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xb8, Size: 0x78]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0x130, Size: 0x78]
	float LPFFrequencyAtMin;//[Offset: 0x1a8, Size: 0x4]
	float LPFFrequencyAtMax;//[Offset: 0x1ac, Size: 0x4]
	float HPFFrequencyAtMin;//[Offset: 0x1b0, Size: 0x4]
	float HPFFrequencyAtMax;//[Offset: 0x1b4, Size: 0x4]
	float FocusAzimuth;//[Offset: 0x1b8, Size: 0x4]
	float NonFocusAzimuth;//[Offset: 0x1bc, Size: 0x4]
	float FocusDistanceScale;//[Offset: 0x1c0, Size: 0x4]
	float NonFocusDistanceScale;//[Offset: 0x1c4, Size: 0x4]
	float FocusPriorityScale;//[Offset: 0x1c8, Size: 0x4]
	float NonFocusPriorityScale;//[Offset: 0x1cc, Size: 0x4]
	float FocusVolumeAttenuation;//[Offset: 0x1d0, Size: 0x4]
	float NonFocusVolumeAttenuation;//[Offset: 0x1d4, Size: 0x4]
	float FocusAttackInterpSpeed;//[Offset: 0x1d8, Size: 0x4]
	float FocusReleaseInterpSpeed;//[Offset: 0x1dc, Size: 0x4]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x1e0, Size: 0x4]
	float OcclusionVolumeAttenuation;//[Offset: 0x1e4, Size: 0x4]
	float OcclusionInterpolationTime;//[Offset: 0x1e8, Size: 0x4]
	float ReverbWetLevelMin;//[Offset: 0x1ec, Size: 0x4]
	float ReverbWetLevelMax;//[Offset: 0x1f0, Size: 0x4]
	float ReverbDistanceMin;//[Offset: 0x1f4, Size: 0x4]
	float ReverbDistanceMax;//[Offset: 0x1f8, Size: 0x4]
	float ManualReverbSendLevel;//[Offset: 0x1fc, Size: 0x4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x200, Size: 0x78]
	SoundAttenuationPluginSettings PluginSettings;//[Offset: 0x278, Size: 0x30]
<----------Generated by SSpawner v1.0.2---------->


Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x8, Size: 0x1]
	byte AttenuationShape;//[Offset: 0x9, Size: 0x1]
	float dBAttenuationAtMax;//[Offset: 0xc, Size: 0x4]
	Vector AttenuationShapeExtents;//[Offset: 0x10, Size: 0xc]
	float ConeOffset;//[Offset: 0x1c, Size: 0x4]
	float FalloffDistance;//[Offset: 0x20, Size: 0x4]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x28, Size: 0x78]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundAttenuationPluginSettings
	SpatializationPluginSourceSettingsBase*[] SpatializationPluginSettingsArray;//[Offset: 0x0, Size: 0x10]
	OcclusionPluginSourceSettingsBase*[] OcclusionPluginSettingsArray;//[Offset: 0x10, Size: 0x10]
	ReverbPluginSourceSettingsBase*[] ReverbPluginSettingsArray;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SpatializationPluginSourceSettingsBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: OcclusionPluginSourceSettingsBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: ReverbPluginSourceSettingsBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SoundSubmix.Object
	SoundSubmix*[] ChildSubmixes;//[Offset: 0x28, Size: 0x10]
	SoundSubmix* ParentSubmix;//[Offset: 0x38, Size: 0x8]
	enum ChannelFormat;//[Offset: 0x40, Size: 0x1]
	SoundEffectSubmixPreset*[] SubmixEffectChain;//[Offset: 0x48, Size: 0x10]
	AmbisonicsSubmixSettingsBase* AmbisonicsPluginSettings;//[Offset: 0x58, Size: 0x8]
	int EnvelopeFollowerAttackTime;//[Offset: 0x60, Size: 0x4]
	int EnvelopeFollowerReleaseTime;//[Offset: 0x64, Size: 0x4]
	delegate OnSubmixRecordedFileDone;//[Offset: 0x68, Size: 0x10]
	void StopRecordingOutput(const Object* WorldContextObject, enum ExportType, FString Name, FString path, SoundWave* ExistingSoundWaveToOverwrite);// 0x4ef03f4
	void StopEnvelopeFollowing(const Object* WorldContextObject);// 0x4ef0378
	void StartRecordingOutput(const Object* WorldContextObject, float ExpectedDuration);// 0x4ef02c0
	void StartEnvelopeFollowing(const Object* WorldContextObject);// 0x4ef0244
	void AddEnvelopeFollowerDelegate(const Object* WorldContextObject, out const delegate OnSubmixEnvelopeBP);// 0x4ef0140
<----------Generated by SSpawner v1.0.2---------->


Class: SoundEffectSubmixPreset.SoundEffectPreset.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SoundEffectPreset.Object
<----------Generated by SSpawner v1.0.2---------->


Class: AmbisonicsSubmixSettingsBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0xa8, Size: 0x4]
	int StreamingPriority;//[Offset: 0xac, Size: 0x4]
	enum SampleRateQuality;//[Offset: 0xb0, Size: 0x1]
	byte SoundGroup;//[Offset: 0xb2, Size: 0x1]
	bool bLooping;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xb3, Size: 0x1]
	bool bStreaming;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xb3, Size: 0x1]
	bool bMature;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0xb3, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xb4, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xb4, Size: 0x1]
	bool bVirtualizeWhenSilent;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xb4, Size: 0x1]
	bool bIsAmbisonics;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xb4, Size: 0x1]
	FString SpokenText;//[Offset: 0xc8, Size: 0x10]
	float SubtitlePriority;//[Offset: 0xd8, Size: 0x4]
	float Volume;//[Offset: 0xdc, Size: 0x4]
	float Pitch;//[Offset: 0xe0, Size: 0x4]
	int NumChannels;//[Offset: 0xe4, Size: 0x4]
	int SampleRate;//[Offset: 0xe8, Size: 0x4]
	SubtitleCue[] Subtitles;//[Offset: 0xf0, Size: 0x10]
	LocalizedSubtitle[] LocalizedSubtitles;//[Offset: 0x100, Size: 0x10]
	CurveTable* Curves;//[Offset: 0x110, Size: 0x8]
	CurveTable* InternalCurves;//[Offset: 0x118, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SubtitleCue
	FText Text;//[Offset: 0x0, Size: 0x18]
	float Time;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: LocalizedSubtitle
	FString LanguageExt;//[Offset: 0x0, Size: 0x10]
	SubtitleCue[] Subtitles;//[Offset: 0x10, Size: 0x10]
	bool bMature;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x20, Size: 0x1]
	bool bManualWordWrap;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x20, Size: 0x1]
	bool bSingleLine;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x20, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: CurveTable.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SoundSubmixSendInfo
	float SendLevel;//[Offset: 0x0, Size: 0x4]
	SoundSubmix* SoundSubmix;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundEffectSourcePresetChain.Object
	SourceEffectChainEntry[] Chain;//[Offset: 0x28, Size: 0x10]
	bool bPlayEffectChainTails;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SourceEffectChainEntry
	SoundEffectSourcePreset* Preset;//[Offset: 0x0, Size: 0x8]
	bool bBypass;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundEffectSourcePreset.SoundEffectPreset.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SoundSourceBusSendInfo
	float SendLevel;//[Offset: 0x0, Size: 0x4]
	SoundSourceBus* SoundSourceBus;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x208, Size: 0x1]
	float SourceBusDuration;//[Offset: 0x20c, Size: 0x4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x210, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: PointerEvent.InputEvent
<----------Generated by SSpawner v1.0.2---------->


Class: InputEvent
<----------Generated by SSpawner v1.0.2---------->


Class: EventReply
<----------Generated by SSpawner v1.0.2---------->


Class: FocusEvent
<----------Generated by SSpawner v1.0.2---------->


Class: KeyEvent.InputEvent
<----------Generated by SSpawner v1.0.2---------->


Class: PaintContext
<----------Generated by SSpawner v1.0.2---------->


Class: MotionEvent.InputEvent
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterEvent.InputEvent
<----------Generated by SSpawner v1.0.2---------->


Class: DragDropOperation.Object
	FString Tag;//[Offset: 0x28, Size: 0x10]
	Object* Payload;//[Offset: 0x38, Size: 0x8]
	Widget* DefaultDragVisual;//[Offset: 0x40, Size: 0x8]
	enum Pivot;//[Offset: 0x48, Size: 0x1]
	Vector2D Offset;//[Offset: 0x4c, Size: 0x8]
	delegate OnDrop;//[Offset: 0x58, Size: 0x10]
	delegate OnDragCancelled;//[Offset: 0x68, Size: 0x10]
	delegate OnDragged;//[Offset: 0x78, Size: 0x10]
	void Drop(out const PointerEvent PointerEvent);// 0x42d2d04
	void Dragged(out const PointerEvent PointerEvent);// 0x42d2bbc
	void DragCancelled(out const PointerEvent PointerEvent);// 0x42d2a74
<----------Generated by SSpawner v1.0.2---------->


Class: AnalogInputEvent.KeyEvent.InputEvent
<----------Generated by SSpawner v1.0.2---------->


Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0, Size: 0x8]
	Vector2D Scale;//[Offset: 0x8, Size: 0x8]
	Vector2D Shear;//[Offset: 0x10, Size: 0x8]
	float Angle;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x28, Size: 0x24]
	WidgetNavigationData Down;//[Offset: 0x4c, Size: 0x24]
	WidgetNavigationData Left;//[Offset: 0x70, Size: 0x24]
	WidgetNavigationData Right;//[Offset: 0x94, Size: 0x24]
	WidgetNavigationData Next;//[Offset: 0xb8, Size: 0x24]
	WidgetNavigationData Previous;//[Offset: 0xdc, Size: 0x24]
<----------Generated by SSpawner v1.0.2---------->


Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0, Size: 0x1]
	FName WidgetToFocus;//[Offset: 0x4, Size: 0x8]
	Widget* Widget;//[Offset: 0xc, Size: 0x8]
	delegate CustomDelegate;//[Offset: 0x14, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: PropertyBinding.Object
	Object* SourceObject;//[Offset: 0x28, Size: 0x8]
	DynamicPropertyPath SourcePath;//[Offset: 0x30, Size: 0x28]
	FName DestinationProperty;//[Offset: 0x58, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: DynamicPropertyPath.CachedPropertyPath
<----------Generated by SSpawner v1.0.2---------->


Class: CachedPropertyPath
	PropertyPathSegment[] Segments;//[Offset: 0x0, Size: 0x10]
	Function* CachedFunction;//[Offset: 0x18, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: PropertyPathSegment
	FName Name;//[Offset: 0x0, Size: 0x8]
	int ArrayIndex;//[Offset: 0x8, Size: 0x4]
	Struct* Struct;//[Offset: 0x10, Size: 0x8]
	Field* Field;//[Offset: 0x18, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: Function.Struct.Field.Object
<----------Generated by SSpawner v1.0.2---------->


Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x8, Size: 0x8]
	Margin Margin;//[Offset: 0x10, Size: 0x10]
	SlateColor TintColor;//[Offset: 0x20, Size: 0x28]
	Object* ResourceObject;//[Offset: 0x48, Size: 0x8]
	FName ResourceName;//[Offset: 0x50, Size: 0x8]
	Box2D UVRegion;//[Offset: 0x58, Size: 0x14]
	byte DrawAs;//[Offset: 0x6c, Size: 0x1]
	byte Tiling;//[Offset: 0x6d, Size: 0x1]
	byte Mirroring;//[Offset: 0x6e, Size: 0x1]
	byte ImageType;//[Offset: 0x6f, Size: 0x1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
	bool bHasUObject;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x80, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: Box2D
	Vector2D Min;//[Offset: 0x0, Size: 0x8]
	Vector2D Max;//[Offset: 0x8, Size: 0x8]
	byte bIsValid;//[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: LocalPlayer.player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x70, Size: 0x8]
	byte AspectRatioAxisConstraint;//[Offset: 0x94, Size: 0x1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x98, Size: 0x8]
	bool bSentSplitJoin;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xa0, Size: 0x1]
	int ControllerId;//[Offset: 0x108, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x40, Size: 0x8]
	DebugDisplayProperty[] DebugProperties;//[Offset: 0x48, Size: 0x10]
	World* World;//[Offset: 0x70, Size: 0x8]
	GameInstance* GameInstance;//[Offset: 0x78, Size: 0x8]
	void SSSwapControllers();// 0x4d65b78
	void ShowTitleSafeArea();// 0x4d65b5c
	void SetConsoleTarget(int PlayerIndex);// 0x4d65ad8
<----------Generated by SSpawner v1.0.2---------->


Class: ScriptViewportClient.Object
<----------Generated by SSpawner v1.0.2---------->


Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x38, Size: 0x8]
	Texture2D* DefaultTexture_Black;//[Offset: 0x40, Size: 0x8]
	Texture2D* DefaultTexture_White;//[Offset: 0x48, Size: 0x8]
	FString[] HistoryBuffer;//[Offset: 0x68, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: DebugDisplayProperty
	Object* Obj;//[Offset: 0x0, Size: 0x8]
	class Object* WithinClass;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: GameInstance.Object
	LocalPlayer*[] LocalPlayers;//[Offset: 0x38, Size: 0x10]
	OnlineSession* OnlineSession;//[Offset: 0x48, Size: 0x8]
	Object*[] ReferencedObjects;//[Offset: 0x50, Size: 0x10]
	void ReceiveShutdown();// 0x35332fc
	void ReceiveInit();// 0x35332fc
	void HandleTravelError(byte FailureType);// 0x35332fc
	void HandleNetworkError(byte FailureType, bool bIsServer);// 0x35332fc
	void DebugRemovePlayer(int ControllerId);// 0x4d4b7bc
	void DebugCreatePlayer(int ControllerId);// 0x4d4b738
<----------Generated by SSpawner v1.0.2---------->


Class: OnlineSession.Object
<----------Generated by SSpawner v1.0.2---------->


Class: ViewTargetTransitionParams
	float BlendTime;//[Offset: 0x0, Size: 0x4]
	byte BlendFunction;//[Offset: 0x4, Size: 0x1]
	float BlendExp;//[Offset: 0x8, Size: 0x4]
	bool bLockOutgoing;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: UpdateLevelVisibilityLevelInfo
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	bool bIsVisible;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: HapticFeedbackEffect_Base.Object
<----------Generated by SSpawner v1.0.2---------->


Class: LatentActionInfo
	int Linkage;//[Offset: 0x0, Size: 0x4]
	int UUID;//[Offset: 0x4, Size: 0x4]
	FName ExecutionFunction;//[Offset: 0x8, Size: 0x8]
	Object* CallbackTarget;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: UpdateLevelStreamingLevelStatus
	FName PackageName;//[Offset: 0x0, Size: 0x8]
	int LODIndex;//[Offset: 0x8, Size: 0x4]
	bool bNewShouldBeLoaded;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBeVisible;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xc, Size: 0x1]
	bool bNewShouldBlockOnLoad;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x340, Size: 0x8]
	FName MatineeControllerName;//[Offset: 0x348, Size: 0x8]
	float PlayRate;//[Offset: 0x350, Size: 0x4]
	bool bPlayOnLevelLoad;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x354, Size: 0x1]
	bool bForceStartPos;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x354, Size: 0x1]
	float ForceStartPosition;//[Offset: 0x358, Size: 0x4]
	bool bLooping;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x35c, Size: 0x1]
	bool bRewindOnPlay;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x35c, Size: 0x1]
	bool bNoResetOnRewind;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x35c, Size: 0x1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x35c, Size: 0x1]
	bool bDisableRadioFilter;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x35c, Size: 0x1]
	bool bClientSideOnly;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x35c, Size: 0x1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x35c, Size: 0x1]
	bool bIsSkippable;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x35c, Size: 0x1]
	int PreferredSplitScreenNum;//[Offset: 0x360, Size: 0x4]
	bool bDisableMovementInput;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x364, Size: 0x1]
	bool bDisableLookAtInput;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x364, Size: 0x1]
	bool bHidePlayer;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x364, Size: 0x1]
	bool bHideHud;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x364, Size: 0x1]
	InterpGroupActorInfo[] GroupActorInfos;//[Offset: 0x368, Size: 0x10]
	bool bShouldShowGore;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x378, Size: 0x1]
	InterpGroupInst*[] GroupInst;//[Offset: 0x380, Size: 0x10]
	CameraCutInfo[] CameraCuts;//[Offset: 0x390, Size: 0x10]
	bool bIsPlaying;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3a0, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x3a0, Size: 0x1]
	bool bPaused;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x3a0, Size: 0x1]
	bool bPendingStop;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x3a0, Size: 0x1]
	float InterpPosition;//[Offset: 0x3a4, Size: 0x4]
	byte ReplicationForceIsPlaying;//[Offset: 0x3ac, Size: 0x1]
	delegate OnPlay;//[Offset: 0x3b0, Size: 0x10]
	delegate OnStop;//[Offset: 0x3c0, Size: 0x10]
	delegate OnPause;//[Offset: 0x3d0, Size: 0x10]
	void Stop();// 0x4e2c8ec
	void SetPosition(float NewPosition, bool bJump);// 0x4e2c82c
	void SetLoopingState(bool bNewLooping);// 0x4e2c7a0
	void Reverse();// 0x4e2c784
	void Play();// 0x4e2c768
	void Pause();// 0x4e2c74c
	void EnableGroupByName(FString GroupName, bool bEnable);// 0x4e2c628
	void ChangePlaybackDirection();// 0x4e2c60c
<----------Generated by SSpawner v1.0.2---------->


Class: InterpData.Object
	float InterpLength;//[Offset: 0x28, Size: 0x4]
	float PathBuildTime;//[Offset: 0x2c, Size: 0x4]
	InterpGroup*[] InterpGroups;//[Offset: 0x30, Size: 0x10]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40, Size: 0x8]
	float EdSectionStart;//[Offset: 0x48, Size: 0x4]
	float EdSectionEnd;//[Offset: 0x4c, Size: 0x4]
	bool bShouldBakeAndPrune;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x58, Size: 0x8]
	FName[] AllEventNames;//[Offset: 0x60, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpGroupDirector.InterpGroup.Object
<----------Generated by SSpawner v1.0.2---------->


Class: InterpGroupActorInfo
	FName ObjectName;//[Offset: 0x0, Size: 0x8]
	Actor*[] Actors;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: CameraCutInfo
	Vector Location;//[Offset: 0x0, Size: 0xc]
	float Timestamp;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x278, Size: 0x8]
	Actor* ChildActor;//[Offset: 0x280, Size: 0x8]
	Actor* ChildActorTemplate;//[Offset: 0x288, Size: 0x8]
	void SetChildActorClass(class Actor InClass);// 0x4cffee8
<----------Generated by SSpawner v1.0.2---------->


Class: BoundsAgencyVolume.Volume.Brush.Actor.Object
	bool bCulledAsHugePlane;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x378, Size: 0x1]
	bool bUseComplexOccCulling;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x378, Size: 0x1]
	float MaxCullDistance;//[Offset: 0x37c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0, Size: 0x8]
	FName MemberName;//[Offset: 0x8, Size: 0x8]
	Guid MemberGuid;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: PrimitiveComponentPostPhysicsTickFunction.TickFunction
<----------Generated by SSpawner v1.0.2---------->


Class: LevelActorContainer.Object
	Actor*[] Actors;//[Offset: 0x28, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x340, Size: 0x1]
	void WorldOriginLocationChanged(IntVector OldOriginLocation, IntVector NewOriginLocation);// 0x35332fc
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);// 0x4df47e4
	bool RemoteEvent(FName EventName);// 0x4df4754
	void LevelReset();// 0x35332fc
<----------Generated by SSpawner v1.0.2---------->


Class: IntVector
	int X;//[Offset: 0x0, Size: 0x4]
	int Y;//[Offset: 0x4, Size: 0x4]
	int Z;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x348, Size: 0x8]
	BillboardComponent* GoodSprite;//[Offset: 0x350, Size: 0x8]
	BillboardComponent* BadSprite;//[Offset: 0x358, Size: 0x8]
	bool bIsPIEPlayerStart;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x360, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x5c8, Size: 0x8]
	bool bIsScreenSizeScaled;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x5d0, Size: 0x1]
	float ScreenSize;//[Offset: 0x5d4, Size: 0x4]
	float U;//[Offset: 0x5d8, Size: 0x4]
	float UL;//[Offset: 0x5dc, Size: 0x4]
	float V;//[Offset: 0x5e0, Size: 0x4]
	float VL;//[Offset: 0x5e4, Size: 0x4]
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);// 0x4cc8d30
	void SetSpriteAndUV(Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);// 0x4cc8bc4
	void SetSprite(Texture2D* NewSprite);// 0x4cc8b40
<----------Generated by SSpawner v1.0.2---------->


Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x28, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: WorldSettings.Info.Actor.Object
	bool bEnableWorldBoundsChecks;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1]
	bool bEnableNavigationSystem;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x348, Size: 0x1]
	bool bEnableAISystem;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x348, Size: 0x1]
	bool bEnableWorldComposition;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x348, Size: 0x1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x348, Size: 0x1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x348, Size: 0x1]
	bool bWorldGravitySet;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x348, Size: 0x1]
	bool bGlobalGravitySet;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x348, Size: 0x1]
	bool bHasWater;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x349, Size: 0x1]
	NavigationSystemConfig* NavigationSystemConfig;//[Offset: 0x350, Size: 0x8]
	NavigationSystemConfig* NavigationSystemConfigOverride;//[Offset: 0x358, Size: 0x8]
	float KillZ;//[Offset: 0x360, Size: 0x4]
	class DamageType* KillZDamageType;//[Offset: 0x368, Size: 0x8]
	float WorldGravityZ;//[Offset: 0x370, Size: 0x4]
	float GlobalGravityZ;//[Offset: 0x374, Size: 0x4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x378, Size: 0x8]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x380, Size: 0x8]
	class GameModeBase* DefaultGameMode;//[Offset: 0x388, Size: 0x8]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x390, Size: 0x8]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x398, Size: 0x4]
	bool bMinimizeBSPSections;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x39c, Size: 0x1]
	Vector DefaultColorScale;//[Offset: 0x3a0, Size: 0xc]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x3ac, Size: 0x4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x3b0, Size: 0x4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x3b4, Size: 0x4]
	bool bPrecomputeVisibility;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3c0, Size: 0x1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x3c0, Size: 0x1]
	int VisibilityCellSize;//[Offset: 0x3c4, Size: 0x4]
	byte VisibilityAggressiveness;//[Offset: 0x3c8, Size: 0x1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3c9, Size: 0x1]
	bool bAllowPrtProbe;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x3ca, Size: 0x1]
	float PrtIntensity;//[Offset: 0x3cc, Size: 0x4]
	float PrtSkyAOIntensity;//[Offset: 0x3d0, Size: 0x4]
	LightmassWorldInfoSettings LightmassSettings;//[Offset: 0x3d4, Size: 0x54]
	IdeaBakingWorldInfoSettings IdeaBakingSettings;//[Offset: 0x428, Size: 0x40]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x468, Size: 0x20]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x488, Size: 0x24]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x4b0, Size: 0x8]
	float WorldToMeters;//[Offset: 0x4b8, Size: 0x4]
	float MonoCullingDistance;//[Offset: 0x4bc, Size: 0x4]
	BookMark* BookMarks;//[Offset: 0x4c0, Size: 0x8]
	float TimeDilation;//[Offset: 0x510, Size: 0x4]
	float MatineeTimeDilation;//[Offset: 0x514, Size: 0x4]
	float DemoPlayTimeDilation;//[Offset: 0x518, Size: 0x4]
	float MinGlobalTimeDilation;//[Offset: 0x51c, Size: 0x4]
	float MaxGlobalTimeDilation;//[Offset: 0x520, Size: 0x4]
	float MinUndilatedFrameTime;//[Offset: 0x524, Size: 0x4]
	float MaxUndilatedFrameTime;//[Offset: 0x528, Size: 0x4]
	PlayerState* Pauser;//[Offset: 0x530, Size: 0x8]
	bool bHighPriorityLoading;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x538, Size: 0x1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x538, Size: 0x1]
	NetViewer[] ReplicationViewers;//[Offset: 0x540, Size: 0x10]
	bool bOverrideDefaultBroadphaseSettings;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x550, Size: 0x1]
	BroadphaseSettings BroadphaseSettings;//[Offset: 0x554, Size: 0x24]
	AssetUserData*[] AssetUserData;//[Offset: 0x578, Size: 0x10]
	int MaxNumberOfBookmarks;//[Offset: 0x588, Size: 0x4]
	class BookmarkBase* DefaultBookmarkClass;//[Offset: 0x590, Size: 0x8]
	BookmarkBase*[] BookmarkArray;//[Offset: 0x598, Size: 0x10]
	class BookmarkBase* LastBookmarkClass;//[Offset: 0x5a8, Size: 0x8]
	void OnRep_WorldGravityZ();// 0x4f28994
<----------Generated by SSpawner v1.0.2---------->


Class: NavigationSystemConfig.Object
	SoftClassPath NavigationSystemClass;//[Offset: 0x28, Size: 0x18]
	bool bIsOverriden;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x28, Size: 0x4]
	float ImpactReFireDelay;//[Offset: 0x2c, Size: 0x4]
	SoundBase* DefaultImpactSound;//[Offset: 0x30, Size: 0x8]
	float LastImpactSoundTime;//[Offset: 0x38, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x340, Size: 0x10]
	class GameSession* GameSessionClass;//[Offset: 0x350, Size: 0x8]
	class GameStateBase* GameStateClass;//[Offset: 0x358, Size: 0x8]
	class PlayerController* PlayerControllerClass;//[Offset: 0x360, Size: 0x8]
	class PlayerState* PlayerStateClass;//[Offset: 0x368, Size: 0x8]
	class HUD* HUDClass;//[Offset: 0x370, Size: 0x8]
	class Pawn* DefaultPawnClass;//[Offset: 0x378, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x380, Size: 0x8]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x388, Size: 0x8]
	class ServerStatReplicator* ServerStatReplicatorClass;//[Offset: 0x390, Size: 0x8]
	GameSession* GameSession;//[Offset: 0x398, Size: 0x8]
	GameStateBase* GameState;//[Offset: 0x3a0, Size: 0x8]
	ServerStatReplicator* ServerStatReplicator;//[Offset: 0x3a8, Size: 0x8]
	FText DefaultPlayerName;//[Offset: 0x3b0, Size: 0x18]
	bool bUseSeamlessTravel;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3c8, Size: 0x1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x3c8, Size: 0x1]
	bool bPauseable;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x3c8, Size: 0x1]
	void StartPlay();// 0x4d4e508
	Pawn* SpawnDefaultPawnFor(Controller* NewPlayer, Actor* StartSpot);// 0x4d4e43c
	Pawn* SpawnDefaultPawnAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x4d4e314
	bool ShouldReset(Actor* ActorToReset);// 0x4d4e284
	void ReturnToMainMenuHost();// 0x4d4e268
	void RestartPlayerAtTransform(Controller* NewPlayer, out const Transform SpawnTransform);// 0x4d4e148
	void RestartPlayerAtPlayerStart(Controller* NewPlayer, Actor* StartSpot);// 0x4d4e08c
	void RestartPlayer(Controller* NewPlayer);// 0x4d4e008
	void ResetLevel();// 0x4d4dfec
	bool PlayerCanRestart(PlayerController* player);// 0x4d4df5c
	bool MustSpectate(PlayerController* NewPlayerController);// 0x4d4decc
	void K2_PostLogin(PlayerController* NewPlayer);// 0x35332fc
	void K2_OnSwapPlayerControllers(PlayerController* OldPC, PlayerController* NewPC);// 0x35332fc
	void K2_OnRestartPlayer(Controller* NewPlayer);// 0x35332fc
	void K2_OnLogout(Controller* ExitingController);// 0x35332fc
	void K2_OnChangeName(Controller* Other, FString NewName, bool bNameChange);// 0x35332fc
	Actor* K2_FindPlayerStart(Controller* player, FString IncomingName);// 0x4d4ddf8
	void InitStartSpot(Actor* StartSpot, Controller* NewPlayer);// 0x4d4dd3c
	void InitializeHUDForPlayer(PlayerController* NewPlayer);// 0x4d4dcb8
	bool HasMatchStarted();// 0x4d4dc78
	void HandleStartingNewPlayer(PlayerController* NewPlayer);// 0x4d4dbf4
	int GetNumSpectators();// 0x4d4dbb8
	int GetNumPlayers();// 0x4d4db7c
	class Object GetDefaultPawnClassForController(Controller* InController);// 0x4d4daf0
	Actor* FindPlayerStart(Controller* player, FString IncomingName);// 0x4d4da14
	Actor* ChoosePlayerStart(Controller* player);// 0x4d4d988
	void ChangeName(Controller* Controller, FString NewName, bool bNameChange);// 0x4d4d874
	bool CanSpectate(PlayerController* Viewer, PlayerState* ViewTarget);// 0x4d4d7a4
<----------Generated by SSpawner v1.0.2---------->


Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x340, Size: 0x4]
	int MaxPlayers;//[Offset: 0x344, Size: 0x4]
	int MaxPartySize;//[Offset: 0x348, Size: 0x4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x34c, Size: 0x1]
	bool bRequiresPushToTalk;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x34d, Size: 0x1]
	FName SessionName;//[Offset: 0x350, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x340, Size: 0x8]
	GameModeBase* AuthorityGameMode;//[Offset: 0x348, Size: 0x8]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x350, Size: 0x8]
	PlayerState*[] PlayerArray;//[Offset: 0x358, Size: 0x10]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x36c, Size: 0x4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x370, Size: 0x4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x374, Size: 0x4]
	void OnRep_SpectatorClass();// 0x4d60f00
	void OnRep_ReplicatedWorldTimeSeconds();// 0x4d60ee4
	void OnRep_ReplicatedHasBegunPlay();// 0x4d60ec8
	void OnRep_GameModeClass();// 0x4d60eac
	bool HasMatchStarted();// 0x4d60e6c
	bool HasBegunPlay();// 0x4d60e2c
	float GetServerWorldTimeSeconds();// 0x4d60df0
	float GetPlayerStartTime(Controller* Controller);// 0x4d60d64
	float GetPlayerRespawnDelay(Controller* Controller);// 0x4d60cd8
<----------Generated by SSpawner v1.0.2---------->


Class: ServerStatReplicator.Info.Actor.Object
	bool bUpdateStatNet;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
	bool bOverwriteClientStats;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x341, Size: 0x1]
	uint32 Channels;//[Offset: 0x344, Size: 0x4]
	uint32 InRate;//[Offset: 0x348, Size: 0x4]
	uint32 OutRate;//[Offset: 0x34c, Size: 0x4]
	uint32 OutSaturation;//[Offset: 0x350, Size: 0x4]
	uint32 MaxPacketOverhead;//[Offset: 0x354, Size: 0x4]
	uint32 InRateClientMax;//[Offset: 0x358, Size: 0x4]
	uint32 InRateClientMin;//[Offset: 0x35c, Size: 0x4]
	uint32 InRateClientAvg;//[Offset: 0x360, Size: 0x4]
	uint32 InPacketsClientMax;//[Offset: 0x364, Size: 0x4]
	uint32 InPacketsClientMin;//[Offset: 0x368, Size: 0x4]
	uint32 InPacketsClientAvg;//[Offset: 0x36c, Size: 0x4]
	uint32 OutRateClientMax;//[Offset: 0x370, Size: 0x4]
	uint32 OutRateClientMin;//[Offset: 0x374, Size: 0x4]
	uint32 OutRateClientAvg;//[Offset: 0x378, Size: 0x4]
	uint32 OutPacketsClientMax;//[Offset: 0x37c, Size: 0x4]
	uint32 OutPacketsClientMin;//[Offset: 0x380, Size: 0x4]
	uint32 OutPacketsClientAvg;//[Offset: 0x384, Size: 0x4]
	uint32 NetNumClients;//[Offset: 0x388, Size: 0x4]
	uint32 InPackets;//[Offset: 0x38c, Size: 0x4]
	uint32 OutPackets;//[Offset: 0x390, Size: 0x4]
	uint32 InBunches;//[Offset: 0x394, Size: 0x4]
	uint32 OutBunches;//[Offset: 0x398, Size: 0x4]
	uint32 OutLoss;//[Offset: 0x39c, Size: 0x4]
	uint32 InLoss;//[Offset: 0x3a0, Size: 0x4]
	uint32 VoiceBytesSent;//[Offset: 0x3a4, Size: 0x4]
	uint32 VoiceBytesRecv;//[Offset: 0x3a8, Size: 0x4]
	uint32 VoicePacketsSent;//[Offset: 0x3ac, Size: 0x4]
	uint32 VoicePacketsRecv;//[Offset: 0x3b0, Size: 0x4]
	uint32 PercentInVoice;//[Offset: 0x3b4, Size: 0x4]
	uint32 PercentOutVoice;//[Offset: 0x3b8, Size: 0x4]
	uint32 NumActorChannels;//[Offset: 0x3bc, Size: 0x4]
	uint32 NumConsideredActors;//[Offset: 0x3c0, Size: 0x4]
	uint32 PrioritizedActors;//[Offset: 0x3c4, Size: 0x4]
	uint32 NumRelevantActors;//[Offset: 0x3c8, Size: 0x4]
	uint32 NumRelevantDeletedActors;//[Offset: 0x3cc, Size: 0x4]
	uint32 NumReplicatedActorAttempts;//[Offset: 0x3d0, Size: 0x4]
	uint32 NumReplicatedActors;//[Offset: 0x3d4, Size: 0x4]
	uint32 NumActors;//[Offset: 0x3d8, Size: 0x4]
	uint32 NumNetActors;//[Offset: 0x3dc, Size: 0x4]
	uint32 NumDormantActors;//[Offset: 0x3e0, Size: 0x4]
	uint32 NumInitiallyDormantActors;//[Offset: 0x3e4, Size: 0x4]
	uint32 NumNetGUIDsAckd;//[Offset: 0x3e8, Size: 0x4]
	uint32 NumNetGUIDsPending;//[Offset: 0x3ec, Size: 0x4]
	uint32 NumNetGUIDsUnAckd;//[Offset: 0x3f0, Size: 0x4]
	uint32 ObjPathBytes;//[Offset: 0x3f4, Size: 0x4]
	uint32 NetGUIDOutRate;//[Offset: 0x3f8, Size: 0x4]
	uint32 NetGUIDInRate;//[Offset: 0x3fc, Size: 0x4]
	uint32 NetSaturated;//[Offset: 0x400, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: GameNetworkManager.Info.Actor.Object
	int AdjustedNetSpeed;//[Offset: 0x340, Size: 0x4]
	float LastNetSpeedUpdateTime;//[Offset: 0x344, Size: 0x4]
	int TotalNetBandwidth;//[Offset: 0x348, Size: 0x4]
	int MinDynamicBandwidth;//[Offset: 0x34c, Size: 0x4]
	int MaxDynamicBandwidth;//[Offset: 0x350, Size: 0x4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x354, Size: 0x1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x354, Size: 0x1]
	float StandbyRxCheatTime;//[Offset: 0x358, Size: 0x4]
	float StandbyTxCheatTime;//[Offset: 0x35c, Size: 0x4]
	int BadPingThreshold;//[Offset: 0x360, Size: 0x4]
	float PercentMissingForRxStandby;//[Offset: 0x364, Size: 0x4]
	float PercentMissingForTxStandby;//[Offset: 0x368, Size: 0x4]
	float PercentForBadPing;//[Offset: 0x36c, Size: 0x4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x370, Size: 0x4]
	float MoveRepSize;//[Offset: 0x374, Size: 0x4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x378, Size: 0x4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x37c, Size: 0x4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x380, Size: 0x4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x384, Size: 0x4]
	float MaxClientForcedUpdateDuration;//[Offset: 0x388, Size: 0x4]
	float MaxMoveDeltaTime;//[Offset: 0x38c, Size: 0x4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x390, Size: 0x4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x394, Size: 0x4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x398, Size: 0x4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x39c, Size: 0x4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x3a0, Size: 0x4]
	bool ClientAuthorativePosition;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 0x1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x3a8, Size: 0x4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac, Size: 0x1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x3ad, Size: 0x1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x3b0, Size: 0x4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x3b4, Size: 0x4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x3b8, Size: 0x4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x3bc, Size: 0x4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x3c1, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: LightmassWorldInfoSettings
	float StaticLightingLevelScale;//[Offset: 0x0, Size: 0x4]
	int NumIndirectLightingBounces;//[Offset: 0x4, Size: 0x4]
	int NumSkyLightingBounces;//[Offset: 0x8, Size: 0x4]
	float IndirectLightingQuality;//[Offset: 0xc, Size: 0x4]
	float IndirectLightingSmoothness;//[Offset: 0x10, Size: 0x4]
	Color EnvironmentColor;//[Offset: 0x14, Size: 0x4]
	float EnvironmentIntensity;//[Offset: 0x18, Size: 0x4]
	float EmissiveBoost;//[Offset: 0x1c, Size: 0x4]
	float DiffuseBoost;//[Offset: 0x20, Size: 0x4]
	byte VolumeLightingMethod;//[Offset: 0x24, Size: 0x1]
	float VolumetricLightmapDetailCellSize;//[Offset: 0x28, Size: 0x4]
	float VolumetricLightmapMaximumBrickMemoryMb;//[Offset: 0x2c, Size: 0x4]
	float VolumetricLightmapSphericalHarmonicSmoothing;//[Offset: 0x30, Size: 0x4]
	float VolumeLightSamplePlacementScale;//[Offset: 0x34, Size: 0x4]
	bool bUseAmbientOcclusion;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bGenerateAmbientOcclusionMaterialMask;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
	float DirectIlluminationOcclusionFraction;//[Offset: 0x3c, Size: 0x4]
	float IndirectIlluminationOcclusionFraction;//[Offset: 0x40, Size: 0x4]
	float OcclusionExponent;//[Offset: 0x44, Size: 0x4]
	float FullyOccludedSamplesFraction;//[Offset: 0x48, Size: 0x4]
	float MaxOcclusionDistance;//[Offset: 0x4c, Size: 0x4]
	bool bVisualizeMaterialDiffuse;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x50, Size: 0x1]
	bool bVisualizeAmbientOcclusion;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x50, Size: 0x1]
	bool bCompressLightmaps;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x50, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: IdeaBakingWorldInfoSettings
	enum BakingLayout;//[Offset: 0x0, Size: 0x1]
	int NumCoarseSamples;//[Offset: 0x4, Size: 0x4]
	int NumSamples;//[Offset: 0x8, Size: 0x4]
	int NumLightingBounces;//[Offset: 0xc, Size: 0x4]
	float LightmapBoost;//[Offset: 0x10, Size: 0x4]
	float SunHardness;//[Offset: 0x14, Size: 0x4]
	enum BakingMode;//[Offset: 0x18, Size: 0x1]
	bool bUseParallelBaking;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x19, Size: 0x1]
	bool bUseConservativeRasterization;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x19, Size: 0x1]
	bool bUseLocalOcclusion;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x19, Size: 0x1]
	float LocalOcclusionTracingDistance;//[Offset: 0x1c, Size: 0x4]
	float LocalOcclusionPower;//[Offset: 0x20, Size: 0x4]
	int NumDenoisingIterators;//[Offset: 0x24, Size: 0x4]
	int NumDilationIterators;//[Offset: 0x28, Size: 0x4]
	float RayTraceMaxDistance;//[Offset: 0x2c, Size: 0x4]
	float RetraceDistance;//[Offset: 0x30, Size: 0x4]
	float SmallestTexelRadius;//[Offset: 0x34, Size: 0x4]
	uint32 AreaLightSampleCount;//[Offset: 0x38, Size: 0x4]
	bool bWithPortalDirectLighting;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	byte ReverbType;//[Offset: 0x1, Size: 0x1]
	ReverbEffect* ReverbEffect;//[Offset: 0x8, Size: 0x8]
	SoundEffectSubmixPreset* ReverbPluginEffect;//[Offset: 0x10, Size: 0x8]
	float Volume;//[Offset: 0x18, Size: 0x4]
	float FadeTime;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ReverbEffect.Object
	float Density;//[Offset: 0x28, Size: 0x4]
	float Diffusion;//[Offset: 0x2c, Size: 0x4]
	float Gain;//[Offset: 0x30, Size: 0x4]
	float GainHF;//[Offset: 0x34, Size: 0x4]
	float DecayTime;//[Offset: 0x38, Size: 0x4]
	float DecayHFRatio;//[Offset: 0x3c, Size: 0x4]
	float ReflectionsGain;//[Offset: 0x40, Size: 0x4]
	float ReflectionsDelay;//[Offset: 0x44, Size: 0x4]
	float LateGain;//[Offset: 0x48, Size: 0x4]
	float LateDelay;//[Offset: 0x4c, Size: 0x4]
	float AirAbsorptionGainHF;//[Offset: 0x50, Size: 0x4]
	float RoomRolloffFactor;//[Offset: 0x54, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	float ExteriorVolume;//[Offset: 0x4, Size: 0x4]
	float ExteriorTime;//[Offset: 0x8, Size: 0x4]
	float ExteriorLPF;//[Offset: 0xc, Size: 0x4]
	float ExteriorLPFTime;//[Offset: 0x10, Size: 0x4]
	float InteriorVolume;//[Offset: 0x14, Size: 0x4]
	float InteriorTime;//[Offset: 0x18, Size: 0x4]
	float InteriorLPF;//[Offset: 0x1c, Size: 0x4]
	float InteriorLPFTime;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BookMark.BookmarkBase.Object
	Vector Location;//[Offset: 0x28, Size: 0xc]
	Rotator Rotation;//[Offset: 0x34, Size: 0xc]
	FString[] HiddenLevels;//[Offset: 0x40, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: BookmarkBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: NetViewer
	NetConnection* Connection;//[Offset: 0x0, Size: 0x8]
	Actor* InViewer;//[Offset: 0x8, Size: 0x8]
	Actor* ViewTarget;//[Offset: 0x10, Size: 0x8]
	Vector ViewLocation;//[Offset: 0x18, Size: 0xc]
	Vector ViewDir;//[Offset: 0x24, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: BroadphaseSettings
	bool bUseMBPOnClient;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool bUseMBPOnServer;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	Box MBPBounds;//[Offset: 0x4, Size: 0x1c]
	uint32 MBPNumSubdivs;//[Offset: 0x20, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ReplicatedStaticActorDestructionInfo
	class Object* ObjClass;//[Offset: 0x20, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.2---------->


Class: LevelStreaming.Object
	World* WorldAsset;//[Offset: 0x28, Size: 0x28]
	FName PackageNameToLoad;//[Offset: 0x50, Size: 0x8]
	FName[] LODPackageNames;//[Offset: 0x58, Size: 0x10]
	Transform LevelTransform;//[Offset: 0x80, Size: 0x30]
	int LevelLODIndex;//[Offset: 0xb0, Size: 0x4]
	bool bShouldBeVisible;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xb6, Size: 0x1]
	bool bShouldBeLoaded;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xb6, Size: 0x1]
	bool bLocked;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0xb6, Size: 0x1]
	bool bIsStatic;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0xb6, Size: 0x1]
	bool bShouldBlockOnLoad;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0xb6, Size: 0x1]
	bool bShouldBlockOnUnload;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0xb6, Size: 0x1]
	bool bDisableDistanceStreaming;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xb7, Size: 0x1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xb7, Size: 0x1]
	LinearColor LevelColor;//[Offset: 0xb8, Size: 0x10]
	LevelStreamingVolume*[] EditorStreamingVolumes;//[Offset: 0xc8, Size: 0x10]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xd8, Size: 0x4]
	delegate OnLevelLoaded;//[Offset: 0xe0, Size: 0x10]
	delegate OnLevelUnloaded;//[Offset: 0xf0, Size: 0x10]
	delegate OnLevelShown;//[Offset: 0x100, Size: 0x10]
	delegate OnLevelHidden;//[Offset: 0x110, Size: 0x10]
	Level* LoadedLevel;//[Offset: 0x120, Size: 0x8]
	Level* PendingUnloadLevel;//[Offset: 0x128, Size: 0x8]
	Level*[] UnloadingLevels;//[Offset: 0x130, Size: 0x10]
	bool ShouldBeLoaded();// 0x4df5554
	void SetShouldBeVisible(bool bInShouldBeVisible);// 0x4df54d0
	void SetShouldBeLoaded(bool bInShouldBeLoaded);// 0x4df5444
	void SetLevelLODIndex(int LODIndex);// 0x4df53c8
	bool IsStreamingStatePending();// 0x4df5390
	bool IsLevelVisible();// 0x4df5358
	bool IsLevelLoaded();// 0x4df5334
	FName GetWorldAssetPackageFName();// 0x4df5300
	LevelScriptActor* GetLevelScriptActor();// 0x4df52cc
	LevelStreaming* CreateInstance(FString UniqueInstanceName);// 0x4df5230
<----------Generated by SSpawner v1.0.2---------->


Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	FName[] StreamingLevelNames;//[Offset: 0x378, Size: 0x10]
	bool bEditorPreVisOnly;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x388, Size: 0x1]
	bool bDisabled;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x388, Size: 0x1]
	byte StreamingUsage;//[Offset: 0x389, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: DemoNetDriver.NetDriver.Object
	<FString,RollbackNetStartupActorInfo> RollbackNetStartupActors;//[Offset: 0x798, Size: 0x50]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0xb8c, Size: 0x4]
	bool bIsLocalReplay;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xbc0, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: RollbackNetStartupActorInfo
	Object* Archetype;//[Offset: 0x8, Size: 0x8]
	Level* Level;//[Offset: 0x28, Size: 0x8]
	Object*[] ObjReferences;//[Offset: 0x90, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleEventManager.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: NavigationSystemBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x28, Size: 0x18]
	FName AISystemModuleName;//[Offset: 0x40, Size: 0x8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x30, Size: 0x4]
	float LockTimeAfterAvoid;//[Offset: 0x34, Size: 0x4]
	float LockTimeAfterClean;//[Offset: 0x38, Size: 0x4]
	float DeltaTimeToPredict;//[Offset: 0x3c, Size: 0x4]
	float ArtificialRadiusExpansion;//[Offset: 0x40, Size: 0x4]
	float TestHeightDifference;//[Offset: 0x44, Size: 0x4]
	float HeightCheckMargin;//[Offset: 0x48, Size: 0x4]
	bool RegisterMovementComponent(MovementComponent* MovementComp, float AvoidanceWeight);// 0x4cc82e8
	int GetObjectCount();// 0x4cc82b4
	int GetNewAvoidanceUID();// 0x4cc8280
	Vector GetAvoidanceVelocityForComponent(MovementComponent* MovementComp);// 0x4cc81f8
<----------Generated by SSpawner v1.0.2---------->


Class: LevelCollection
	GameStateBase* GameState;//[Offset: 0x8, Size: 0x8]
	NetDriver* NetDriver;//[Offset: 0x10, Size: 0x8]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x18, Size: 0x8]
	Level* PersistentLevel;//[Offset: 0x20, Size: 0x8]
	<Level*> Levels;//[Offset: 0x28, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: Canvas.Object
	float OrgX;//[Offset: 0x28, Size: 0x4]
	float OrgY;//[Offset: 0x2c, Size: 0x4]
	float ClipX;//[Offset: 0x30, Size: 0x4]
	float ClipY;//[Offset: 0x34, Size: 0x4]
	Color DrawColor;//[Offset: 0x38, Size: 0x4]
	bool bCenterX;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bCenterY;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bNoSmooth;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	int SizeX;//[Offset: 0x40, Size: 0x4]
	int SizeY;//[Offset: 0x44, Size: 0x4]
	Plane ColorModulate;//[Offset: 0x50, Size: 0x10]
	Texture2D* DefaultTexture;//[Offset: 0x60, Size: 0x8]
	Texture2D* GradientTexture0;//[Offset: 0x68, Size: 0x8]
	ReporterGraph* ReporterGraph;//[Offset: 0x70, Size: 0x8]
	Vector2D K2_TextSize(Font* RenderFont, FString RenderText, Vector2D Scale);// 0x4ced040
	Vector2D K2_StrLen(Font* RenderFont, FString RenderText);// 0x4cecf6c
	Vector K2_Project(Vector WorldLocation);// 0x4cecedc
	void K2_DrawTriangle(Texture* RenderTexture, CanvasUVTri[] Triangles);// 0x4cecdb8
	void K2_DrawTexture(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, byte BlendMode, float Rotation, Vector2D PivotPoint);// 0x4cecb44
	void K2_DrawText(Font* RenderFont, FString RenderText, Vector2D ScreenPosition, Vector2D Scale, LinearColor RenderColor, float Kerning, LinearColor ShadowColor, Vector2D ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, LinearColor OutlineColor);// 0x4cec7dc
	void K2_DrawPolygon(Texture* RenderTexture, Vector2D ScreenPosition, Vector2D Radius, int NumberOfSides, LinearColor RenderColor);// 0x4cec66c
	void K2_DrawMaterialTriangle(MaterialInterface* RenderMaterial, CanvasUVTri[] Triangles);// 0x4cec548
	void K2_DrawMaterial(MaterialInterface* RenderMaterial, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, float Rotation, Vector2D PivotPoint, bool bReverseCulling);// 0x4cec318
	void K2_DrawLine(Vector2D ScreenPositionA, Vector2D ScreenPositionB, float Thickness, LinearColor RenderColor);// 0x4cec1d8
	void K2_DrawBox(Vector2D ScreenPosition, Vector2D ScreenSize, float Thickness, LinearColor RenderColor);// 0x4cec098
	void K2_DrawBorder(Texture* BorderTexture, Texture* BackgroundTexture, Texture* LeftBorderTexture, Texture* RightBorderTexture, Texture* TopBorderTexture, Texture* BottomBorderTexture, Vector2D ScreenPosition, Vector2D ScreenSize, Vector2D CoordinatePosition, Vector2D CoordinateSize, LinearColor RenderColor, Vector2D BorderScale, Vector2D BackgroundScale, float Rotation, Vector2D PivotPoint, Vector2D CornerSize);// 0x4cebc84
	void K2_Deproject(Vector2D ScreenPosition, out Vector WorldOrigin, out Vector WorldDirection);// 0x4cebb70
<----------Generated by SSpawner v1.0.2---------->


Class: Plane.Vector
	float W;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ReporterGraph.ReporterBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: ReporterBase.Object
<----------Generated by SSpawner v1.0.2---------->


Class: CanvasUVTri
	Vector2D V0_Pos;//[Offset: 0x0, Size: 0x8]
	Vector2D V0_UV;//[Offset: 0x8, Size: 0x8]
	LinearColor V0_Color;//[Offset: 0x10, Size: 0x10]
	Vector2D V1_Pos;//[Offset: 0x20, Size: 0x8]
	Vector2D V1_UV;//[Offset: 0x28, Size: 0x8]
	LinearColor V1_Color;//[Offset: 0x30, Size: 0x10]
	Vector2D V2_Pos;//[Offset: 0x40, Size: 0x8]
	Vector2D V2_UV;//[Offset: 0x48, Size: 0x8]
	LinearColor V2_Color;//[Offset: 0x50, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: WorldComposition.Object
	bool bUseLayerNameFilter;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	FString[] FilterLayerNames;//[Offset: 0x50, Size: 0x10]
	bool bPlayerBorned;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool bUseInitViewpoint;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	Vector InitViewPoint;//[Offset: 0x64, Size: 0xc]
	LevelStreaming*[] TilesStreaming;//[Offset: 0x70, Size: 0x10]
	double TilesStreamingTimeThreshold;//[Offset: 0x80, Size: 0x8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x89, Size: 0x1]
	float RebaseOriginDistance;//[Offset: 0x8c, Size: 0x4]
	Object* CurrentTopHighActor;//[Offset: 0xa0, Size: 0x8]
	void SetUseExViewPoints(bool bInUseExViewPoints);// 0x4f2643c
	void SetInitViewPoint(out const Vector InVector);// 0x4f263b4
	void RescanNewLevels();// 0x4f263a0
	int GetVisibleLevelToLoadNum(out const Vector CenterLocation);// 0x4f26308
	float GetVisibleLevelLoadPercent(out const Vector CenterLocation);// 0x4f26270
	int GetVisibleLevelLoadedNum(out const Vector CenterLocation);// 0x4f261d8
	int GetNumOfVisibleLevelToLoad();// 0x4f261a4
	int GetNumOfVisibleLevelLoaded();// 0x4f26170
	float GetLoadPercentOfVisibleLevel();// 0x4f2613c
	void GetExViewPoints(out Vector[] OutExViewPoints);// 0x4f260a0
	void EmptyExViewPoints();// 0x4f2608c
	void AddExViewPoint(out const Vector InExViewPoint);// 0x4f26004
<----------Generated by SSpawner v1.0.2---------->


Class: WorldPSCPool
	<ParticleSystem*,PSCPool> WorldParticleSystemPools;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: PSCPool
	PSCPoolElem[] FreeElements;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: PSCPoolElem
	ParticleSystemComponent* PSC;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: Landscape.LandscapeProxy.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x340, Size: 0x8]
	Guid LandscapeGuid;//[Offset: 0x348, Size: 0x10]
	IntPoint LandscapeSectionOffset;//[Offset: 0x358, Size: 0x8]
	int MaxLODLevel;//[Offset: 0x360, Size: 0x4]
	float LODDistanceFactor;//[Offset: 0x364, Size: 0x4]
	byte LODFalloff;//[Offset: 0x368, Size: 0x1]
	float ComponentScreenSizeToUseSubSections;//[Offset: 0x36c, Size: 0x4]
	float[] LODValues;//[Offset: 0x378, Size: 0x10]
	int TriangleCount;//[Offset: 0x388, Size: 0x4]
	bool EnableSlopeLOD;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x38d, Size: 0x1]
	bool EnableSlopeLOD_Baked;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x38e, Size: 0x1]
	float LODFixedScreenSize;//[Offset: 0x390, Size: 0x4]
	float LODFixedScreenSize_Baked;//[Offset: 0x394, Size: 0x4]
	float LODFixedSlope;//[Offset: 0x398, Size: 0x4]
	float LODFixedSlope_Baked;//[Offset: 0x39c, Size: 0x4]
	float TessellationComponentScreenSize;//[Offset: 0x3a0, Size: 0x4]
	bool UseTessellationComponentScreenSizeFalloff;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4, Size: 0x1]
	float TessellationComponentScreenSizeFalloff;//[Offset: 0x3a8, Size: 0x4]
	int OccluderGeometryLOD;//[Offset: 0x3ac, Size: 0x4]
	int StaticLightingLOD;//[Offset: 0x3b0, Size: 0x4]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x3b8, Size: 0x8]
	float StreamingDistanceMultiplier;//[Offset: 0x3c0, Size: 0x4]
	MaterialInterface* LandscapeMaterial;//[Offset: 0x3c8, Size: 0x8]
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x3d0, Size: 0x8]
	LandscapeProxyMaterialOverride[] LandscapeMaterialsOverride;//[Offset: 0x3d8, Size: 0x10]
	float NegativeZBoundsExtension;//[Offset: 0x3e8, Size: 0x4]
	float PositiveZBoundsExtension;//[Offset: 0x3ec, Size: 0x4]
	LandscapeComponent*[] LandscapeComponents;//[Offset: 0x3f0, Size: 0x10]
	LandscapeHeightfieldCollisionComponent*[] CollisionComponents;//[Offset: 0x400, Size: 0x10]
	HierarchicalInstancedStaticMeshComponent*[] FoliageComponents;//[Offset: 0x410, Size: 0x10]
	bool bHasLandscapeGrass;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x484, Size: 0x1]
	float StaticLightingResolution;//[Offset: 0x488, Size: 0x4]
	bool bCastStaticShadow;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x48c, Size: 0x1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x48c, Size: 0x1]
	bool bCastFarShadow;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x48c, Size: 0x1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x48c, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x48d, Size: 0x1]
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x48e, Size: 0x1]
	bool bRenderCustomDepth;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x48e, Size: 0x1]
	int CustomDepthStencilValue;//[Offset: 0x490, Size: 0x4]
	bool bRenderOverlookDepth;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x494, Size: 0x1]
	float LDMaxDrawDistance;//[Offset: 0x498, Size: 0x4]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x49c, Size: 0x18]
	int CollisionMipLevel;//[Offset: 0x4b4, Size: 0x4]
	int SimpleCollisionMipLevel;//[Offset: 0x4b8, Size: 0x4]
	float CollisionThickness;//[Offset: 0x4bc, Size: 0x4]
	BodyInstance BodyInstance;//[Offset: 0x4c0, Size: 0x140]
	bool bGenerateOverlapEvents;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x600, Size: 0x1]
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x600, Size: 0x1]
	int ComponentSizeQuads;//[Offset: 0x604, Size: 0x4]
	int SubsectionSizeQuads;//[Offset: 0x608, Size: 0x4]
	int NumSubsections;//[Offset: 0x60c, Size: 0x4]
	bool bUsedForNavigation;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x610, Size: 0x1]
	bool bUseDynamicMaterialInstance;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x611, Size: 0x1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x612, Size: 0x1]
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x613, Size: 0x1]
	void SetLandscapeMaterialVectorParameterValue(FName ParameterName, LinearColor Value);// 0x40615dc
	void SetLandscapeMaterialTextureParameterValue(FName ParameterName, Texture* Value);// 0x4061528
	void SetLandscapeMaterialScalarParameterValue(FName ParameterName, float Value);// 0x4061470
	void EditorSetLandscapeMaterial(MaterialInterface* NewLandscapeMaterial);// 0x40613f4
	void EditorApplySpline(SplineComponent* InSplineComponent, float StartWidth, float EndWidth, float StartSideFalloff, float EndSideFalloff, float StartRoll, float EndRoll, int NumSubdivisions, bool bRaiseHeights, bool bLowerHeights, LandscapeLayerInfoObject* PaintLayer);// 0x4061110
	void ChangeUseTessellationComponentScreenSizeFalloff(bool InComponentScreenSizeToUseSubSections);// 0x4061084
	void ChangeTessellationComponentScreenSizeFalloff(float InUseTessellationComponentScreenSizeFalloff);// 0x4061000
	void ChangeTessellationComponentScreenSize(float InTessellationComponentScreenSize);// 0x4060f7c
	void ChangeLODDistanceFactor(float InLODDistanceFactor);// 0x4060ef8
	void ChangeComponentScreenSizeToUseSubSections(float InComponentScreenSizeToUseSubSections);// 0x4060e74
	void BakeSlopFactors();// 0x4060e58
<----------Generated by SSpawner v1.0.2---------->


Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeSplineControlPoint*[] ControlPoints;//[Offset: 0x5c8, Size: 0x10]
	LandscapeSplineSegment*[] Segments;//[Offset: 0x5d8, Size: 0x10]
	MeshComponent*[] CookedForeignMeshComponents;//[Offset: 0x5e8, Size: 0x10]
	SplineMeshComponent*[] GetSplineMeshComponents();// 0x4062d48
<----------Generated by SSpawner v1.0.2---------->


Class: LandscapeSplineControlPoint.Object
	Vector Location;//[Offset: 0x28, Size: 0xc]
	Rotator Rotation;//[Offset: 0x34, Size: 0xc]
	float Width;//[Offset: 0x40, Size: 0x4]
	float SideFalloff;//[Offset: 0x44, Size: 0x4]
	float EndFalloff;//[Offset: 0x48, Size: 0x4]
	LandscapeSplineConnection[] ConnectedSegments;//[Offset: 0x50, Size: 0x10]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x60, Size: 0x10]
	Box Bounds;//[Offset: 0x70, Size: 0x1c]
	ControlPointMeshComponent* LocalMeshComponent;//[Offset: 0x90, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: LandscapeSplineConnection
	LandscapeSplineSegment* Segment;//[Offset: 0x0, Size: 0x8]
	bool End;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: LandscapeSplineSegment.Object
	LandscapeSplineSegmentConnection Connections;//[Offset: 0x28, Size: 0x18]
	InterpCurveVector SplineInfo;//[Offset: 0x58, Size: 0x18]
	LandscapeSplineInterpPoint[] Points;//[Offset: 0x70, Size: 0x10]
	Box Bounds;//[Offset: 0x80, Size: 0x1c]
	SplineMeshComponent*[] LocalMeshComponents;//[Offset: 0xa0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: LandscapeSplineSegmentConnection
	LandscapeSplineControlPoint* ControlPoint;//[Offset: 0x0, Size: 0x8]
	float TangentLen;//[Offset: 0x8, Size: 0x4]
	FName SocketName;//[Offset: 0xc, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: LandscapeSplineInterpPoint
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Vector Left;//[Offset: 0xc, Size: 0xc]
	Vector Right;//[Offset: 0x18, Size: 0xc]
	Vector FalloffLeft;//[Offset: 0x24, Size: 0xc]
	Vector FalloffRight;//[Offset: 0x30, Size: 0xc]
	float StartEndFalloff;//[Offset: 0x3c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x708, Size: 0x58]
	Vector SplineUpDir;//[Offset: 0x760, Size: 0xc]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x76c, Size: 0x1]
	bool bSmoothInterpRollScale;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x76c, Size: 0x1]
	byte ForwardAxis;//[Offset: 0x76d, Size: 0x1]
	float SplineBoundaryMin;//[Offset: 0x770, Size: 0x4]
	float SplineBoundaryMax;//[Offset: 0x774, Size: 0x4]
	BodySetup* BodySetup;//[Offset: 0x778, Size: 0x8]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x780, Size: 0x10]
	bool bMeshDirty;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x790, Size: 0x1]
	void UpdateMesh();// 0x4efec4c
	void SetStartTangent(Vector StartTangent, bool bUpdateMesh);// 0x4efeb8c
	void SetStartScale(Vector2D StartScale, bool bUpdateMesh);// 0x4efead0
	void SetStartRoll(float StartRoll, bool bUpdateMesh);// 0x4efea10
	void SetStartPosition(Vector StartPos, bool bUpdateMesh);// 0x4efe950
	void SetStartOffset(Vector2D StartOffset, bool bUpdateMesh);// 0x4efe894
	void SetStartAndEnd(Vector StartPos, Vector StartTangent, Vector EndPos, Vector EndTangent, bool bUpdateMesh);// 0x4efe704
	void SetSplineUpDir(out const Vector InSplineUpDir, bool bUpdateMesh);// 0x4efe62c
	void SetForwardAxis(byte InForwardAxis, bool bUpdateMesh);// 0x4efe56c
	void SetEndTangent(Vector EndTangent, bool bUpdateMesh);// 0x4efe4ac
	void SetEndScale(Vector2D EndScale, bool bUpdateMesh);// 0x4efe3f0
	void SetEndRoll(float EndRoll, bool bUpdateMesh);// 0x4efe330
	void SetEndPosition(Vector EndPos, bool bUpdateMesh);// 0x4efe270
	void SetEndOffset(Vector2D EndOffset, bool bUpdateMesh);// 0x4efe1b4
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);// 0x4efe0f4
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);// 0x4efe034
	Vector GetStartTangent();// 0x4efdffc
	Vector2D GetStartScale();// 0x4efdfc8
	float GetStartRoll();// 0x4efdf94
	Vector GetStartPosition();// 0x4efdf5c
	Vector2D GetStartOffset();// 0x4efdf28
	Vector GetSplineUpDir();// 0x4efdef0
	byte GetForwardAxis();// 0x4efdebc
	Vector GetEndTangent();// 0x4efde84
	Vector2D GetEndScale();// 0x4efde50
	float GetEndRoll();// 0x4efde1c
	Vector GetEndPosition();// 0x4efdde4
	Vector2D GetEndOffset();// 0x4efddb0
	float GetBoundaryMin();// 0x4efdd7c
	float GetBoundaryMax();// 0x4efdd48
<----------Generated by SSpawner v1.0.2---------->


Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0, Size: 0xc]
	Vector StartTangent;//[Offset: 0xc, Size: 0xc]
	Vector2D StartScale;//[Offset: 0x18, Size: 0x8]
	float StartRoll;//[Offset: 0x20, Size: 0x4]
	Vector2D StartOffset;//[Offset: 0x24, Size: 0x8]
	Vector EndPos;//[Offset: 0x2c, Size: 0xc]
	Vector EndTangent;//[Offset: 0x38, Size: 0xc]
	Vector2D EndScale;//[Offset: 0x44, Size: 0x8]
	float EndRoll;//[Offset: 0x4c, Size: 0x4]
	Vector2D EndOffset;//[Offset: 0x50, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ControlPointMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.2---------->


Class: LandscapeProxyMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: LandscapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int SectionBaseX;//[Offset: 0x5c8, Size: 0x4]
	int SectionBaseY;//[Offset: 0x5cc, Size: 0x4]
	int ComponentSizeQuads;//[Offset: 0x5d0, Size: 0x4]
	int SubsectionSizeQuads;//[Offset: 0x5d4, Size: 0x4]
	int NumSubsections;//[Offset: 0x5d8, Size: 0x4]
	MaterialInterface* OverrideMaterial;//[Offset: 0x5e0, Size: 0x8]
	MaterialInterface* OverrideHoleMaterial;//[Offset: 0x5e8, Size: 0x8]
	LandscapeComponentMaterialOverride[] OverrideMaterials;//[Offset: 0x5f0, Size: 0x10]
	MaterialInstanceConstant*[] MaterialInstances;//[Offset: 0x600, Size: 0x10]
	MaterialInstanceDynamic*[] MaterialInstancesDynamic;//[Offset: 0x610, Size: 0x10]
	int8[] LODIndexToMaterialIndex;//[Offset: 0x620, Size: 0x10]
	int8[] MaterialIndexToDisabledTessellationMaterial;//[Offset: 0x630, Size: 0x10]
	WeightmapLayerAllocationInfo[] WeightmapLayerAllocations;//[Offset: 0x640, Size: 0x10]
	Texture2D*[] WeightmapTextures;//[Offset: 0x650, Size: 0x10]
	Texture2D* XYOffsetmapTexture;//[Offset: 0x660, Size: 0x8]
	Vector4 WeightmapScaleBias;//[Offset: 0x670, Size: 0x10]
	float WeightmapSubsectionOffset;//[Offset: 0x680, Size: 0x4]
	Vector4 HeightmapScaleBias;//[Offset: 0x690, Size: 0x10]
	Texture2D* HeightmapTexture;//[Offset: 0x6a0, Size: 0x8]
	Box CachedLocalBox;//[Offset: 0x6a8, Size: 0x1c]
	LandscapeHeightfieldCollisionComponent* CollisionComponent;//[Offset: 0x6c4, Size: 0x1c]
	Guid MapBuildDataId;//[Offset: 0x6e0, Size: 0x10]
	Guid[] IrrelevantLights;//[Offset: 0x6f0, Size: 0x10]
	int CollisionMipLevel;//[Offset: 0x700, Size: 0x4]
	int SimpleCollisionMipLevel;//[Offset: 0x704, Size: 0x4]
	float NegativeZBoundsExtension;//[Offset: 0x708, Size: 0x4]
	float PositiveZBoundsExtension;//[Offset: 0x70c, Size: 0x4]
	float StaticLightingResolution;//[Offset: 0x710, Size: 0x4]
	int ForcedLOD;//[Offset: 0x714, Size: 0x4]
	int LODBias;//[Offset: 0x718, Size: 0x4]
	float[] LODSlopeFactors;//[Offset: 0x720, Size: 0x10]
	float[] LODHeightFactors;//[Offset: 0x730, Size: 0x10]
	float[] LODFixedSlopeRecommendValues;//[Offset: 0x740, Size: 0x10]
	Guid StateId;//[Offset: 0x750, Size: 0x10]
	Guid BakedTextureMaterialGuid;//[Offset: 0x760, Size: 0x10]
	Texture2D* GIBakedBaseColorTexture;//[Offset: 0x770, Size: 0x8]
	byte MobileBlendableLayerMask;//[Offset: 0x778, Size: 0x1]
	MaterialInterface* MobileMaterialInterface;//[Offset: 0x780, Size: 0x8]
	MaterialInterface*[] MobileMaterialInterfaces;//[Offset: 0x788, Size: 0x10]
	Texture2D*[] MobileWeightmapTextures;//[Offset: 0x798, Size: 0x10]
	Vector4 BakedDataScale;//[Offset: 0x7b0, Size: 0x10]
	Texture2D* BakedTexture;//[Offset: 0x7c0, Size: 0x8]
	MaterialInstanceDynamic* GetMaterialInstanceDynamic(int InIndex);// 0x405cd6c
<----------Generated by SSpawner v1.0.2---------->


Class: LandscapeComponentMaterialOverride
	PerPlatformInt LODIndex;//[Offset: 0x0, Size: 0x4]
	MaterialInterface* Material;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object
	LinearColor K2_GetVectorParameterValue(FName ParameterName);// 0x4e263ac
	Texture* K2_GetTextureParameterValue(FName ParameterName);// 0x4e26328
	float K2_GetScalarParameterValue(FName ParameterName);// 0x4e262a4
<----------Generated by SSpawner v1.0.2---------->


Class: WeightmapLayerAllocationInfo
	LandscapeLayerInfoObject* LayerInfo;//[Offset: 0x0, Size: 0x8]
	byte WeightmapTextureIndex;//[Offset: 0x8, Size: 0x1]
	byte WeightmapTextureChannel;//[Offset: 0x9, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: LandscapeLayerInfoObject.Object
	FName LayerName;//[Offset: 0x28, Size: 0x8]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x30, Size: 0x8]
	float Hardness;//[Offset: 0x38, Size: 0x4]
	LinearColor LayerUsageDebugColor;//[Offset: 0x3c, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: LandscapeHeightfieldCollisionComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	LandscapeLayerInfoObject*[] ComponentLayerInfos;//[Offset: 0x5c8, Size: 0x10]
	int SectionBaseX;//[Offset: 0x5d8, Size: 0x4]
	int SectionBaseY;//[Offset: 0x5dc, Size: 0x4]
	int CollisionSizeQuads;//[Offset: 0x5e0, Size: 0x4]
	float CollisionScale;//[Offset: 0x5e4, Size: 0x4]
	int SimpleCollisionSizeQuads;//[Offset: 0x5e8, Size: 0x4]
	byte[] CollisionQuadFlags;//[Offset: 0x5f0, Size: 0x10]
	Guid HeightfieldGuid;//[Offset: 0x600, Size: 0x10]
	Box CachedLocalBox;//[Offset: 0x610, Size: 0x1c]
	LandscapeComponent* RenderComponent;//[Offset: 0x62c, Size: 0x1c]
	PhysicalMaterial*[] CookedPhysicalMaterials;//[Offset: 0x658, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int[] SortedInstances;//[Offset: 0x7a8, Size: 0x10]
	int NumBuiltInstances;//[Offset: 0x7b8, Size: 0x4]
	Box BuiltInstanceBounds;//[Offset: 0x7c0, Size: 0x1c]
	Box UnbuiltInstanceBounds;//[Offset: 0x7dc, Size: 0x1c]
	Box[] UnbuiltInstanceBoundsList;//[Offset: 0x7f8, Size: 0x10]
	int OcclusionLayerNumNodes;//[Offset: 0x810, Size: 0x4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x814, Size: 0x1c]
	bool bEnableDensityScaling;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x830, Size: 0x1]
	bool bDisableCollision;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x830, Size: 0x1]
	int InstanceCountToRender;//[Offset: 0x834, Size: 0x4]
	bool RemoveInstances(out const int[] InstancesToRemove);// 0x4d675a8
<----------Generated by SSpawner v1.0.2---------->


Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	InstancedStaticMeshInstanceData[] PerInstanceSMData;//[Offset: 0x700, Size: 0x10]
	int InstancingRandomSeed;//[Offset: 0x710, Size: 0x4]
	int InstanceStartCullDistance;//[Offset: 0x714, Size: 0x4]
	int InstanceEndCullDistance;//[Offset: 0x718, Size: 0x4]
	int[] InstanceReorderTable;//[Offset: 0x720, Size: 0x10]
	int[] IdeaOutlineInstances;//[Offset: 0x730, Size: 0x10]
	int NumPendingLightmaps;//[Offset: 0x780, Size: 0x4]
	InstancedStaticMeshMappingInfo[] CachedMappings;//[Offset: 0x788, Size: 0x10]
	bool UpdateInstanceTransform(int InstanceIndex, out const Transform NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);// 0x4d772bc
	void SetCullDistances(int StartCullDistance, int EndCullDistance);// 0x4d77208
	bool RemoveInstance(int InstanceIndex);// 0x4d77178
	bool GetInstanceTransform(int InstanceIndex, out Transform OutInstanceTransform, bool bWorldSpace);// 0x4d77008
	int[] GetInstancesOverlappingSphere(out const Vector Center, float Radius, bool bSphereInWorldSpace);// 0x4d76e9c
	int[] GetInstancesOverlappingBox(out const Box Box, bool bBoxInWorldSpace);// 0x4d76d44
	int GetInstanceCount();// 0x4d76d10
	void ClearInstances();// 0x4d76cf4
	bool CancelOutlineInstance(int InstanceIndex);// 0x4d76c64
	bool AddOutlineInstance(int InstanceIndex);// 0x4d76bd4
	int AddInstanceWorldSpace(out const Transform WorldTransform);// 0x4d76af0
	int AddInstance(out const Transform InstanceTransform);// 0x4d76a04
<----------Generated by SSpawner v1.0.2---------->


Class: InstancedStaticMeshInstanceData
	Matrix Transform;//[Offset: 0x0, Size: 0x40]
<----------Generated by SSpawner v1.0.2---------->


Class: Matrix
	Plane XPlane;//[Offset: 0x0, Size: 0x10]
	Plane YPlane;//[Offset: 0x10, Size: 0x10]
	Plane ZPlane;//[Offset: 0x20, Size: 0x10]
	Plane WPlane;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: InstancedStaticMeshMappingInfo
<----------Generated by SSpawner v1.0.2---------->


Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x5c8, Size: 0x60]
	InterpCurveVector SplineInfo;//[Offset: 0x628, Size: 0x18]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x640, Size: 0x18]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x658, Size: 0x18]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x670, Size: 0x18]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x688, Size: 0x1]
	int ReparamStepsPerSegment;//[Offset: 0x68c, Size: 0x4]
	float Duration;//[Offset: 0x690, Size: 0x4]
	bool bStationaryEndpoints;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x694, Size: 0x1]
	bool bSplineHasBeenEdited;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x695, Size: 0x1]
	bool bModifiedByConstructionScript;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x696, Size: 0x1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x697, Size: 0x1]
	bool bDrawDebug;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x698, Size: 0x1]
	bool bClosedLoop;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x699, Size: 0x1]
	bool bLoopPositionOverride;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x69a, Size: 0x1]
	float LoopPosition;//[Offset: 0x69c, Size: 0x4]
	Vector DefaultUpVector;//[Offset: 0x6a0, Size: 0xc]
	void UpdateSpline();// 0x4ef6e28
	void SetWorldLocationAtSplinePoint(int PointIndex, out const Vector InLocation);// 0x4ef6d5c
	void SetUpVectorAtSplinePoint(int PointIndex, out const Vector InUpVector, byte CoordinateSpace, bool bUpdateSpline);// 0x4ef6c0c
	void SetUnselectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x4ef6b84
	void SetTangentsAtSplinePoint(int PointIndex, out const Vector InArriveTangent, out const Vector InLeaveTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x4ef69e8
	void SetTangentAtSplinePoint(int PointIndex, out const Vector InTangent, byte CoordinateSpace, bool bUpdateSpline);// 0x4ef6898
	void SetSplineWorldPoints(out const Vector[] Points);// 0x4ef67f4
	void SetSplinePointType(int PointIndex, byte Type, bool bUpdateSpline);// 0x4ef66f8
	void SetSplinePoints(out const Vector[] Points, byte CoordinateSpace, bool bUpdateSpline);// 0x4ef65d0
	void SetSplineLocalPoints(out const Vector[] Points);// 0x4ef652c
	void SetSelectedSplineSegmentColor(out const LinearColor SegmentColor);// 0x4ef64a4
	void SetLocationAtSplinePoint(int PointIndex, out const Vector InLocation, byte CoordinateSpace, bool bUpdateSpline);// 0x4ef6354
	void SetDrawDebug(bool bShow);// 0x4ef62d0
	void SetDefaultUpVector(out const Vector UpVector, byte CoordinateSpace);// 0x4ef6200
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);// 0x4ef60f4
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);// 0x4ef602c
	void RemoveSplinePoint(int Index, bool bUpdateSpline);// 0x4ef5f70
	bool IsClosedLoop();// 0x4ef5f38
	Vector GetWorldTangentAtDistanceAlongSpline(float Distance);// 0x4ef5eac
	Rotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);// 0x4ef5ddc
	Rotator GetWorldRotationAtDistanceAlongSpline(float Distance);// 0x4ef5d50
	Vector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);// 0x4ef5c80
	Vector GetWorldLocationAtSplinePoint(int PointIndex);// 0x4ef5bf4
	Vector GetWorldLocationAtDistanceAlongSpline(float Distance);// 0x4ef5b68
	Vector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);// 0x4ef5a98
	Vector GetWorldDirectionAtDistanceAlongSpline(float Distance);// 0x4ef5a0c
	Vector GetUpVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4ef58fc
	Vector GetUpVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4ef5838
	Vector GetUpVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4ef5774
	Transform GetTransformAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);// 0x4ef55e4
	Transform GetTransformAtSplinePoint(int PointIndex, byte CoordinateSpace, bool bUseScale);// 0x4ef54a0
	Transform GetTransformAtDistanceAlongSpline(float Distance, byte CoordinateSpace, bool bUseScale);// 0x4ef535c
	Vector GetTangentAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4ef524c
	Vector GetTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4ef5188
	Vector GetTangentAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4ef50c4
	byte GetSplinePointType(int PointIndex);// 0x4ef5040
	float GetSplineLength();// 0x4ef500c
	Vector GetScaleAtTime(float Time, bool bUseConstantVelocity);// 0x4ef4f40
	Vector GetScaleAtSplinePoint(int PointIndex);// 0x4ef4eb8
	Vector GetScaleAtDistanceAlongSpline(float Distance);// 0x4ef4e30
	Rotator GetRotationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4ef4d20
	Rotator GetRotationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4ef4c5c
	Rotator GetRotationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4ef4b98
	float GetRollAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4ef4a8c
	float GetRollAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4ef49cc
	float GetRollAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4ef490c
	Vector GetRightVectorAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4ef47fc
	Vector GetRightVectorAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4ef4738
	Vector GetRightVectorAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4ef4674
	int GetNumberOfSplinePoints();// 0x4ef4640
	Vector GetLocationAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4ef4530
	Vector GetLocationAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4ef446c
	Vector GetLocationAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4ef43a8
	void GetLocationAndTangentAtSplinePoint(int PointIndex, out Vector Location, out Vector Tangent, byte CoordinateSpace);// 0x4ef4250
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, out Vector LocalLocation, out Vector LocalTangent);// 0x4ef4134
	Vector GetLeaveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4ef4070
	float GetInputKeyAtDistanceAlongSpline(float Distance);// 0x4ef3fec
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);// 0x4ef3f68
	Vector GetDirectionAtTime(float Time, byte CoordinateSpace, bool bUseConstantVelocity);// 0x4ef3e58
	Vector GetDirectionAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4ef3d94
	Vector GetDirectionAtDistanceAlongSpline(float Distance, byte CoordinateSpace);// 0x4ef3cd0
	Vector GetDefaultUpVector(byte CoordinateSpace);// 0x4ef3c48
	Vector GetArriveTangentAtSplinePoint(int PointIndex, byte CoordinateSpace);// 0x4ef3b84
	Vector FindUpVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4ef3aa8
	Transform FindTransformClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace, bool bUseScale);// 0x4ef394c
	Vector FindTangentClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4ef3870
	Vector FindScaleClosestToWorldLocation(out const Vector WorldLocation);// 0x4ef37d4
	Rotator FindRotationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4ef36f8
	float FindRollClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4ef3620
	Vector FindRightVectorClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4ef3544
	Vector FindLocationClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4ef3468
	float FindInputKeyClosestToWorldLocation(out const Vector WorldLocation);// 0x4ef33d0
	Vector FindDirectionClosestToWorldLocation(out const Vector WorldLocation, byte CoordinateSpace);// 0x4ef32f4
	void ClearSplinePoints(bool bUpdateSpline);// 0x4ef3270
	void AddSplineWorldPoint(out const Vector Position);// 0x4ef31e0
	void AddSplinePointAtIndex(out const Vector Position, int Index, byte CoordinateSpace, bool bUpdateSpline);// 0x4ef3090
	void AddSplinePoint(out const Vector Position, byte CoordinateSpace, bool bUpdateSpline);// 0x4ef2f7c
	void AddSplineLocalPoint(out const Vector Position);// 0x4ef2eec
	void AddPoints(out const SplinePoint[] Points, bool bUpdateSpline);// 0x4ef2e00
	void AddPoint(out const SplinePoint Point, bool bUpdateSpline);// 0x4ef2d04
<----------Generated by SSpawner v1.0.2---------->


Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0, Size: 0x18]
	InterpCurveQuat Rotation;//[Offset: 0x18, Size: 0x18]
	InterpCurveVector Scale;//[Offset: 0x30, Size: 0x18]
	InterpCurveFloat ReparamTable;//[Offset: 0x48, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpCurveQuat
	InterpCurvePointQuat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpCurvePointQuat
	float InVal;//[Offset: 0x0, Size: 0x4]
	Quat OutVal;//[Offset: 0x10, Size: 0x10]
	Quat ArriveTangent;//[Offset: 0x20, Size: 0x10]
	Quat LeaveTangent;//[Offset: 0x30, Size: 0x10]
	byte InterpMode;//[Offset: 0x40, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpCurveFloat
	InterpCurvePointFloat[] Points;//[Offset: 0x0, Size: 0x10]
	bool bIsLooped;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	float LoopKeyOffset;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpCurvePointFloat
	float InVal;//[Offset: 0x0, Size: 0x4]
	float OutVal;//[Offset: 0x4, Size: 0x4]
	float ArriveTangent;//[Offset: 0x8, Size: 0x4]
	float LeaveTangent;//[Offset: 0xc, Size: 0x4]
	byte InterpMode;//[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: SplinePoint
	float InputKey;//[Offset: 0x0, Size: 0x4]
	Vector Position;//[Offset: 0x4, Size: 0xc]
	Vector ArriveTangent;//[Offset: 0x10, Size: 0xc]
	Vector LeaveTangent;//[Offset: 0x1c, Size: 0xc]
	Rotator Rotation;//[Offset: 0x28, Size: 0xc]
	Vector Scale;//[Offset: 0x34, Size: 0xc]
	byte Type;//[Offset: 0x40, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: LandscapeGizmoActiveActor.LandscapeGizmoActor.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: LandscapeGizmoActor.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: IdeaLandscape.Actor.Object
	RuntimeMeshComponent* Mesh;//[Offset: 0x340, Size: 0x8]
	IdeaLandscapeGeometry* LandscapeGeometry;//[Offset: 0x348, Size: 0x8]
	Material* LandscapeMat;//[Offset: 0x350, Size: 0x8]
	bool bPerformBackfaceCulling;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	float BackfaceCullingHeightBias;//[Offset: 0x35c, Size: 0x4]
	bool bPerformDistanceCulling;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	float DistanceCullingValue;//[Offset: 0x364, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	RuntimeMesh* RuntimeMeshReference;//[Offset: 0x5f8, Size: 0x8]
	BodySetup* BodySetup;//[Offset: 0x600, Size: 0x8]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x608, Size: 0x10]
	void UpdateMeshSectionPacked_Blueprint(int SectionIndex, out const RuntimeMeshBlueprintVertexSimple[] Vertices, out const int[] Triangles, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles);// 0x1d45a60
	void UpdateMeshSectionFromBuilder(int SectionID, RuntimeBlueprintMeshBuilder* MeshData);// 0x1d459a8
	void UpdateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const LinearColor[] Colors, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles);// 0x1d45474
	bool ShouldSerializeMeshData();// 0x1d45450
	void SetShouldSerializeMeshData(bool bShouldSerialize);// 0x1d453c4
	void SetSectionMaterial(int SectionID, MaterialInterface* Material);// 0x1d45308
	void SetRuntimeMeshMobility(enum NewMobility);// 0x1d45278
	void SetRuntimeMesh(RuntimeMesh* NewMesh);// 0x1d451fc
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x1d450c0
	void SetMeshSectionCollisionEnabled(int SectionIndex, bool bNewCollisionEnabled);// 0x1d44f84
	void SetMeshSectionCastsShadow(int SectionIndex, bool bNewCastsShadow);// 0x1d44e48
	void SetMeshCollisionSection(int CollisionSectionIndex, out const Vector[] Vertices, out const int[] Triangles);// 0x1d44c74
	void SetConvexCollisionSection(int ConvexSectionIndex, Vector[] ConvexVerts);// 0x1d44af4
	void SetCollisionUseComplexAsSimple(bool bNewValue);// 0x1d44a64
	void SetCollisionUseAsyncCooking(bool bNewValue);// 0x1d449d8
	void SetCollisionSpheres(out const RuntimeMeshCollisionSphere[] NewSpheres);// 0x1d448b4
	void SetCollisionMode(enum NewMode);// 0x1d44830
	void SetCollisionCapsules(out const RuntimeMeshCollisionCapsule[] NewCapsules);// 0x1d4470c
	void SetCollisionBoxes(out const RuntimeMeshCollisionBox[] NewBoxes);// 0x1d445e8
	void RemoveCollisionSphere(int Index);// 0x1d444ec
	void RemoveCollisionCapsule(int Index);// 0x1d443f0
	void RemoveCollisionBox(int Index);// 0x1d442f4
	bool IsMeshSectionVisible(int SectionIndex);// 0x1d441e0
	bool IsMeshSectionCollisionEnabled(int SectionIndex);// 0x1d440cc
	bool IsMeshSectionCastingShadows(int SectionIndex);// 0x1d43fb8
	bool IsCollisionUsingComplexAsSimple();// 0x1d43f88
	bool IsCollisionUsingAsyncCooking();// 0x1d43f64
	MaterialInterface* GetSectionMaterial(int SectionID);// 0x1d43ec0
	int GetSectionIdFromCollisionFaceIndex(int FaceIndex);// 0x1d43e3c
	Box GetSectionBoundingBox(int SectionIndex);// 0x1d43d00
	enum GetRuntimeMeshMobility();// 0x1d43cd0
	RuntimeMesh* GetRuntimeMesh();// 0x1d43cb4
	RuntimeMesh* GetOrCreateRuntimeMesh();// 0x1d43c78
	int GetNumSections();// 0x1d43bb4
	int GetAvailableSectionIndex();// 0x1d43af0
	bool DoesSectionExist(int SectionIndex);// 0x1d439dc
	void CreateMeshSectionPacked_Blueprint(int SectionIndex, out const RuntimeMeshBlueprintVertexSimple[] Vertices, out const int[] Triangles, bool bCreateCollision, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles, enum UpdateFrequency, bool bUseHighPrecisionTangents, bool bUseHighPrecisionUVs);// 0x1d435d8
	void CreateMeshSectionFromBuilder(int SectionID, RuntimeBlueprintMeshBuilder* MeshData, bool bCreateCollision, enum UpdateFrequency);// 0x1d43498
	void CreateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const LinearColor[] Colors, bool bCreateCollision, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles, enum UpdateFrequency, bool bUseHighPrecisionTangents, bool bUseHighPrecisionUVs);// 0x1d42efc
	void CookCollisionNow();// 0x1d42ec8
	void ClearMeshSection(int SectionIndex);// 0x1d42dd8
	void ClearMeshCollisionSection(int CollisionSectionIndex);// 0x1d42cdc
	void ClearConvexCollisionSection(int ConvexSectionIndex);// 0x1d42be0
	void ClearCollisionSpheres();// 0x1d42b2c
	void ClearCollisionCapsules();// 0x1d42a78
	void ClearCollisionBoxes();// 0x1d429c4
	void ClearAllMeshSections();// 0x1d42914
	void ClearAllMeshCollisionSections();// 0x1d42860
	void ClearAllConvexCollisionSections();// 0x1d427ac
	int AddConvexCollisionSection(Vector[] ConvexVerts);// 0x1d4265c
	int AddCollisionSphere(out const RuntimeMeshCollisionSphere NewSphere);// 0x1d42518
	int AddCollisionCapsule(out const RuntimeMeshCollisionCapsule NewCapsule);// 0x1d423b8
	int AddCollisionBox(out const RuntimeMeshCollisionBox NewBox);// 0x1d42254
<----------Generated by SSpawner v1.0.2---------->


Class: RuntimeMesh.Object
	MaterialInterface*[] Materials;//[Offset: 0x40, Size: 0x10]
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	bool bUseAsyncCooking;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x71, Size: 0x1]
	bool bShouldSerializeMeshData;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x72, Size: 0x1]
	enum CollisionMode;//[Offset: 0x73, Size: 0x1]
	BodySetup* BodySetup;//[Offset: 0x78, Size: 0x8]
	BodySetup*[] AsyncBodySetupQueue;//[Offset: 0x80, Size: 0x10]
	delegate CollisionUpdated;//[Offset: 0x90, Size: 0x10]
	void UpdateMeshSectionPacked_Blueprint(int SectionIndex, out const RuntimeMeshBlueprintVertexSimple[] Vertices, out const int[] Triangles, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles);// 0x1d3a8c0
	void UpdateMeshSectionFromBuilder(int SectionID, RuntimeBlueprintMeshBuilder* MeshData);// 0x1d3a714
	void UpdateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const LinearColor[] Colors, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles);// 0x1d3a1f8
	bool ShouldSerializeMeshData();// 0x1d3a1dc
	void SetShouldSerializeMeshData(bool bShouldSerialize);// 0x1d3a15c
	void SetSectionTessellationTriangles(int SectionID, out const int[] Triangles);// 0x1d3a018
	void SetSectionMaterial(int SectionID, MaterialInterface* Material);// 0x1d39f60
	void SetMeshSectionVisible(int SectionIndex, bool bNewVisibility);// 0x1d39e30
	void SetMeshSectionCollisionEnabled(int SectionIndex, bool bNewCollisionEnabled);// 0x1d39d00
	void SetMeshSectionCastsShadow(int SectionIndex, bool bNewCastsShadow);// 0x1d39bd0
	void SetMeshCollisionSection(int CollisionSectionIndex, out const Vector[] Vertices, out const int[] Triangles);// 0x1d39a20
	void SetConvexCollisionSection(int ConvexSectionIndex, Vector[] ConvexVerts);// 0x1d398fc
	void SetCollisionUseComplexAsSimple(bool bNewValue);// 0x1d39874
	void SetCollisionUseAsyncCooking(bool bNewValue);// 0x1d397f4
	void SetCollisionSpheres(out const RuntimeMeshCollisionSphere[] NewSpheres);// 0x1d396ec
	void SetCollisionMode(enum NewMode);// 0x1d39674
	void SetCollisionCapsules(out const RuntimeMeshCollisionCapsule[] NewCapsules);// 0x1d3956c
	void SetCollisionBoxes(out const RuntimeMeshCollisionBox[] NewBoxes);// 0x1d39464
	void RemoveCollisionSphere(int Index);// 0x1d3937c
	void RemoveCollisionCapsule(int Index);// 0x1d39294
	void RemoveCollisionBox(int Index);// 0x1d391ac
	bool IsMeshSectionVisible(int SectionIndex);// 0x1d390a8
	bool IsMeshSectionCollisionEnabled(int SectionIndex);// 0x1d38fa4
	bool IsMeshSectionCastingShadows(int SectionIndex);// 0x1d38ea0
	bool IsCollisionUsingComplexAsSimple();// 0x1d38e84
	bool IsCollisionUsingAsyncCooking();// 0x1d38e68
	MaterialInterface* GetSectionMaterial(int SectionID);// 0x1d38dcc
	int GetSectionIdFromCollisionFaceIndex(int FaceIndex);// 0x1d38d48
	Box GetSectionBoundingBox(int SectionIndex);// 0x1d38c3c
	int GetNumSections();// 0x1d38b88
	MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, out int SectionIndex);// 0x1d38ab8
	enum GetCollisionMode();// 0x1d38a9c
	int GetAvailableSectionIndex();// 0x1d389e8
	bool DoesSectionExist(int SectionIndex);// 0x1d388e4
	void CreateMeshSectionPacked_Blueprint(int SectionIndex, out const RuntimeMeshBlueprintVertexSimple[] Vertices, out const int[] Triangles, bool bCreateCollision, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles, enum UpdateFrequency, bool bUseHighPrecisionTangents, bool bUseHighPrecisionUVs);// 0x1d384f8
	void CreateMeshSectionFromBuilder(int SectionID, RuntimeBlueprintMeshBuilder* MeshData, bool bCreateCollision, enum UpdateFrequency);// 0x1d382cc
	void CreateMeshSection_Blueprint(int SectionIndex, out const Vector[] Vertices, out const int[] Triangles, out const Vector[] Normals, out const RuntimeMeshTangent[] Tangents, out const Vector2D[] UV0, out const Vector2D[] UV1, out const Vector2D[] UV2, out const LinearColor[] Colors, bool bCreateCollision, bool bCalculateNormalTangent, bool bShouldCreateHardTangents, bool bGenerateTessellationTriangles, enum UpdateFrequency, bool bUseHighPrecisionTangents, bool bUseHighPrecisionUVs);// 0x1d37c60
	void CookCollisionNow();// 0x1d37c4c
	void ClearMeshSection(int SectionIndex);// 0x1d37b64
	void ClearMeshCollisionSection(int CollisionSectionIndex);// 0x1d37a7c
	void ClearConvexCollisionSection(int ConvexSectionIndex);// 0x1d37994
	void ClearCollisionSpheres();// 0x1d378ec
	void ClearCollisionCapsules();// 0x1d37844
	void ClearCollisionBoxes();// 0x1d3779c
	void ClearAllMeshSections();// 0x1d376f4
	void ClearAllMeshCollisionSections();// 0x1d3764c
	void ClearAllConvexCollisionSections();// 0x1d375a4
	int AddConvexCollisionSection(Vector[] ConvexVerts);// 0x1d374b8
	int AddCollisionSphere(out const RuntimeMeshCollisionSphere NewSphere);// 0x1d37390
	int AddCollisionCapsule(out const RuntimeMeshCollisionCapsule NewCapsule);// 0x1d3724c
	int AddCollisionBox(out const RuntimeMeshCollisionBox NewBox);// 0x1d37104
<----------Generated by SSpawner v1.0.2---------->


Class: RuntimeMeshBlueprintVertexSimple
	Vector Position;//[Offset: 0x0, Size: 0xc]
	Vector Normal;//[Offset: 0xc, Size: 0xc]
	RuntimeMeshTangent Tangent;//[Offset: 0x18, Size: 0x10]
	LinearColor Color;//[Offset: 0x28, Size: 0x10]
	Vector2D UV0;//[Offset: 0x38, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: RuntimeMeshTangent
	Vector TangentX;//[Offset: 0x0, Size: 0xc]
	bool bFlipTangentY;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: RuntimeBlueprintMeshBuilder.RuntimeBlueprintMeshAccessor.Object
	int SetVertex(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, Vector InPosition, Vector Normal, RuntimeMeshTangent Tangent, Vector2D UV0, LinearColor Color);// 0x1d4012c
	int SetUV(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, Vector2D Value, int Channel);// 0x1d3ffcc
	int SetTangents(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, Vector TangentX, Vector TangentY, Vector TangentZ);// 0x1d3fe24
	int SetTangent(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, RuntimeMeshTangent Value);// 0x1d3fcf4
	int SetPosition(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, Vector Value);// 0x1d3fbcc
	void SetNumVertices(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int NewNum);// 0x1d3fafc
	void SetNumIndices(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int NewNum);// 0x1d3fa28
	int SetNormalTangent(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, Vector Normal, RuntimeMeshTangent Tangent);// 0x1d3f8c0
	int SetNormal(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, out const Vector4 Value);// 0x1d3f78c
	void SetIndex(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, int Value);// 0x1d3f680
	int SetColor(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, LinearColor Value);// 0x1d3f548
	int NumVertices(out RuntimeBlueprintMeshBuilder* OutMeshBuilder);// 0x1d3f4b0
	int NumUVChannels(out RuntimeBlueprintMeshBuilder* OutMeshBuilder);// 0x1d3f418
	int NumIndices(out RuntimeBlueprintMeshBuilder* OutMeshBuilder);// 0x1d3f37c
	bool IsUsingHighPrecisionUVs(out RuntimeBlueprintMeshBuilder* OutMeshBuilder);// 0x1d3f2e4
	bool IsUsingHighPrecisionTangents(out RuntimeBlueprintMeshBuilder* OutMeshBuilder);// 0x1d3f24c
	bool IsUsing32BitIndices(out RuntimeBlueprintMeshBuilder* OutMeshBuilder);// 0x1d3f1b4
	bool IsReadonly(out RuntimeBlueprintMeshBuilder* OutMeshBuilder);// 0x1d3f10c
	Vector2D GetUV(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index, int Channel);// 0x1d3eff8
	Vector GetTangent(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index);// 0x1d3ef18
	Vector GetPosition(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index);// 0x1d3ee38
	Vector4 GetNormal(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index);// 0x1d3ed58
	int GetIndex(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index);// 0x1d3ec78
	LinearColor GetColor(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index);// 0x1d3eb88
	void EmptyVertices(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Slack);// 0x1d3eab8
	void EmptyIndices(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Slack);// 0x1d3e9e4
	int AddVertex(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, Vector InPosition, Vector Normal, RuntimeMeshTangent Tangent, Vector2D UV0, LinearColor Color);// 0x1d3e78c
	int AddTriangle(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int Index0, int Index1, int Index2);// 0x1d3e638
	int AddIndex(out RuntimeBlueprintMeshBuilder* OutMeshBuilder, int NewIndex);// 0x1d3e558
<----------Generated by SSpawner v1.0.2---------->


Class: RuntimeBlueprintMeshAccessor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: RuntimeMeshCollisionSphere
	Vector Center;//[Offset: 0x0, Size: 0xc]
	float Radius;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: RuntimeMeshCollisionCapsule
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	float Radius;//[Offset: 0x18, Size: 0x4]
	float Length;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: RuntimeMeshCollisionBox
	Vector Center;//[Offset: 0x0, Size: 0xc]
	Rotator Rotation;//[Offset: 0xc, Size: 0xc]
	Vector Extents;//[Offset: 0x18, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: IdeaLandscapeGeometry.DataAsset.Object
	Vector[] Vertex;//[Offset: 0x30, Size: 0x10]
	Vector[] Normals;//[Offset: 0x40, Size: 0x10]
	Vector2D[] UV;//[Offset: 0x50, Size: 0x10]
	int[] Indices;//[Offset: 0x60, Size: 0x10]
	<IntPoint,int> ComponentIndexOffset;//[Offset: 0x70, Size: 0x50]
	int ComponentIndexCount;//[Offset: 0xc0, Size: 0x4]
	int ComponentVertexCount;//[Offset: 0xc4, Size: 0x4]
	<FString,SubLevelComponentMapValue> SubLevelComponentMap;//[Offset: 0xc8, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: SubLevelComponentMapValue
	FString Name;//[Offset: 0x0, Size: 0x10]
	int[] IndexOffsetArray;//[Offset: 0x10, Size: 0x10]
	int[] IndexCountArray;//[Offset: 0x20, Size: 0x10]
	int[] BorderIndex1;//[Offset: 0x30, Size: 0x10]
	int[] BorderIndex2;//[Offset: 0x40, Size: 0x10]
	int[] BorderIndex3;//[Offset: 0x50, Size: 0x10]
	int[] BorderIndex4;//[Offset: 0x60, Size: 0x10]
	int[] UnderBorderIndex1;//[Offset: 0x70, Size: 0x10]
	int[] UnderBorderIndex2;//[Offset: 0x80, Size: 0x10]
	int[] UnderBorderIndex3;//[Offset: 0x90, Size: 0x10]
	int[] UnderBorderIndex4;//[Offset: 0xa0, Size: 0x10]
	int[] BorderIndicesBuffer1;//[Offset: 0xb0, Size: 0x10]
	int[] BorderIndicesBuffer2;//[Offset: 0xc0, Size: 0x10]
	int[] BorderIndicesBuffer3;//[Offset: 0xd0, Size: 0x10]
	int[] BorderIndicesBuffer4;//[Offset: 0xe0, Size: 0x10]
	FString Sibling1Name;//[Offset: 0xf0, Size: 0x10]
	FString Sibling2Name;//[Offset: 0x100, Size: 0x10]
	FString Sibling3Name;//[Offset: 0x110, Size: 0x10]
	FString Sibling4Name;//[Offset: 0x120, Size: 0x10]
	int Sibling1Idx;//[Offset: 0x130, Size: 0x4]
	int Sibling2Idx;//[Offset: 0x134, Size: 0x4]
	int Sibling3Idx;//[Offset: 0x138, Size: 0x4]
	int Sibling4Idx;//[Offset: 0x13c, Size: 0x4]
	Box Bounds;//[Offset: 0x140, Size: 0x1c]
<----------Generated by SSpawner v1.0.2---------->


Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x340, Size: 0x8]
	bool bEnabled;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1]
	void OnRep_bEnabled();// 0x4d3ed3c
<----------Generated by SSpawner v1.0.2---------->


Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	bool EnableCEHF;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x278, Size: 0x1]
	float FogDensity;//[Offset: 0x27c, Size: 0x4]
	LinearColor FogInscatteringColor;//[Offset: 0x280, Size: 0x10]
	float FogDensityFar;//[Offset: 0x290, Size: 0x4]
	LinearColor FogInscatteringColorFar;//[Offset: 0x294, Size: 0x10]
	float FogHeightFalloffFar;//[Offset: 0x2a4, Size: 0x4]
	float FogMaxOpacityFar;//[Offset: 0x2a8, Size: 0x4]
	float StartDistanceFar;//[Offset: 0x2ac, Size: 0x4]
	float FogDensityFarthest;//[Offset: 0x2b0, Size: 0x4]
	LinearColor FogInscatteringColorFarthest;//[Offset: 0x2b4, Size: 0x10]
	float FogHeightFalloffFarthest;//[Offset: 0x2c4, Size: 0x4]
	float FogMaxOpacityFarthest;//[Offset: 0x2c8, Size: 0x4]
	float StartDistanceFarthest;//[Offset: 0x2cc, Size: 0x4]
	float FogDensityLow;//[Offset: 0x2d0, Size: 0x4]
	float FogHeightLow;//[Offset: 0x2d4, Size: 0x4]
	LinearColor FogInscatteringColorLow;//[Offset: 0x2d8, Size: 0x10]
	float StartDistanceLow;//[Offset: 0x2e8, Size: 0x4]
	float EndDistanceLow;//[Offset: 0x2ec, Size: 0x4]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x2f0, Size: 0x8]
	float InscatteringColorCubemapAngle;//[Offset: 0x2f8, Size: 0x4]
	LinearColor InscatteringTextureTint;//[Offset: 0x2fc, Size: 0x10]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x30c, Size: 0x4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x310, Size: 0x4]
	float DirectionalInscatteringExponent;//[Offset: 0x314, Size: 0x4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x318, Size: 0x4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x31c, Size: 0x10]
	float FogHeightFalloff;//[Offset: 0x32c, Size: 0x4]
	float FogMaxOpacity;//[Offset: 0x330, Size: 0x4]
	float StartDistance;//[Offset: 0x334, Size: 0x4]
	float FogCutoffDistance;//[Offset: 0x338, Size: 0x4]
	bool FogDarkenEnable;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x33c, Size: 0x1]
	float FogDarkenFadeDistance;//[Offset: 0x340, Size: 0x4]
	float FogDarkenStartDistance;//[Offset: 0x344, Size: 0x4]
	float FogDarkenIntensity;//[Offset: 0x348, Size: 0x4]
	bool bEnableVolumetricFog;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x34c, Size: 0x1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x350, Size: 0x4]
	Color VolumetricFogAlbedo;//[Offset: 0x354, Size: 0x4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x358, Size: 0x10]
	float VolumetricFogExtinctionScale;//[Offset: 0x368, Size: 0x4]
	float VolumetricFogDistance;//[Offset: 0x36c, Size: 0x4]
	float VolumetricFogStartDistance;//[Offset: 0x370, Size: 0x4]
	float VolumetricFogHeightFalloff;//[Offset: 0x374, Size: 0x4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x378, Size: 0x4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 0x1]
	void SetVolumetricFogStartDistance(float NewValue);// 0x4d405b8
	void SetVolumetricFogScatteringDistribution(float NewValue);// 0x4d4053c
	void SetVolumetricFogHeightFalloff(float NewValue);// 0x4d404c0
	void SetVolumetricFogExtinctionScale(float NewValue);// 0x4d40444
	void SetVolumetricFogEmissive(LinearColor NewValue);// 0x4d403c8
	void SetVolumetricFogDistance(float NewValue);// 0x4d4034c
	void SetVolumetricFogAlbedo(Color NewValue);// 0x4d402d4
	void SetVolumetricFog(bool bNewValue);// 0x4d40250
	void SetStartDistanceLow(float Value);// 0x4d401d4
	void SetStartDistanceFarthest(float Value);// 0x4d40158
	void SetStartDistanceFar(float Value);// 0x4d400dc
	void SetStartDistance(float Value);// 0x4d40060
	void SetNonDirectionalInscatteringColorDistance(float Value);// 0x4d3ffe4
	void SetInscatteringTextureTint(LinearColor Value);// 0x4d3ff68
	void SetInscatteringColorCubemapAngle(float Value);// 0x4d3feec
	void SetInscatteringColorCubemap(TextureCube* Value);// 0x4d3fe70
	void SetFullyDirectionalInscatteringColorDistance(float Value);// 0x4d3fdf4
	void SetFogMaxOpacityFarthest(float Value);// 0x4d3fd78
	void SetFogMaxOpacityFar(float Value);// 0x4d3fcfc
	void SetFogMaxOpacity(float Value);// 0x4d3fc80
	void SetFogInscatteringColorLow(LinearColor Value);// 0x4d3fc04
	void SetFogInscatteringColorFarthest(LinearColor Value);// 0x4d3fb88
	void SetFogInscatteringColorFar(LinearColor Value);// 0x4d3fb0c
	void SetFogInscatteringColor(LinearColor Value);// 0x4d3fa90
	void SetFogHeightLow(float Value);// 0x4d3fa14
	void SetFogHeightFalloffFarthest(float Value);// 0x4d3f998
	void SetFogHeightFalloffFar(float Value);// 0x4d3f91c
	void SetFogHeightFalloff(float Value);// 0x4d3f8a0
	void SetFogDensityLow(float Value);// 0x4d3f824
	void SetFogDensityFarthest(float Value);// 0x4d3f7a8
	void SetFogDensityFar(float Value);// 0x4d3f72c
	void SetFogDensity(float Value);// 0x4d3f6b0
	void SetFogDarkenStartDistance(float Value);// 0x4d3f634
	void SetFogDarkenIntensity(float Value);// 0x4d3f5b8
	void SetFogDarkenFadeDistance(float Value);// 0x4d3f53c
	void SetFogDarkenEnable(bool Value);// 0x4d3f4b8
	void SetFogCutoffDistance(float Value);// 0x4d3f43c
	void SetEndDistanceLow(float Value);// 0x4d3f3c0
	void SetDirectionalInscatteringStartDistance(float Value);// 0x4d3f344
	void SetDirectionalInscatteringExponent(float Value);// 0x4d3f2c8
	void SetDirectionalInscatteringColor(LinearColor Value);// 0x4d3f24c
<----------Generated by SSpawner v1.0.2---------->


Class: XWaterVolume.PhysicsVolume.Volume.Brush.Actor.Object
	void OnEndOverlap(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x523d418
	void OnBeginOverlap(PrimitiveComponent* OverlappedComp, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x523d240
<----------Generated by SSpawner v1.0.2---------->


Class: ToaaGameModeBase.GameModeBase.Info.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: Newland_C.ParentLevelScriptActor.LevelScriptActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x348, Size: 0x8]
	void SwapMaterialInternal(PrimitiveComponent* Target, int MaterialID, int Temp_int_Variable, int Temp_int_Variable1, int Temp_int_Variable2, int Temp_int_Variable3, MaterialInterface* CallFunc_GetMaterial_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, int CallFunc_GetConsoleVariableInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue1, bool CallFunc_BooleanAND_ReturnValue, int K2Node_Select_Default);// 0x35332fc
	void WeatherSelection(FString WeatherID);// 0x35332fc
	void SyncHeightFog();// 0x35332fc
	void SaveWeather(FString WeatherIndex);// 0x35332fc
	void WeatherLogin(FString WeatherID, bool NoError);// 0x35332fc
	void WeatherGlobalSwitch(bool Switch);// 0x35332fc
	void OpenPPV();// 0x35332fc
	void ReWrite();// 0x35332fc
	void OpenWeatherSource();// 0x35332fc
	void BPE_LoadAsset();// 0x35332fc
	void Level(FName LevelName, bool isLoad, bool IsVisible);// 0x35332fc
	void SwitchParticles();// 0x35332fc
	void ReceiveBeginPlay();// 0x35332fc
	void ExecuteUbergraph_Newland(int EntryPoint, FString K2Node_Event_WeatherID1, FString K2Node_Event_WeatherIndex, FString K2Node_Event_WeatherID, bool K2Node_Event_NoError, bool K2Node_Event_Switch, FName K2Node_Event_LevelName, bool K2Node_Event_isLoad, bool K2Node_Event_isVisible);// 0x35332fc
	MaterialInterface* SwapMaterial;//[Offset: 0x350, Size: 0x8]
	int UserQualityID;//[Offset: 0x358, Size: 0x4]
	StaticMeshActor*[] WaterArray;//[Offset: 0x360, Size: 0x10]
	BP_XDWeather_C* Wref;//[Offset: 0x370, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ParentLevelScriptActor.LevelScriptActor.Actor.Object
	void ShowLoading();// 0x3096e90
<----------Generated by SSpawner v1.0.2---------->


Class: PointerToUberGraphFrame
<----------Generated by SSpawner v1.0.2---------->


Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x340, Size: 0x8]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x349, Size: 0x1]
	void SetMobility(byte InMobility);// 0x4f04074
<----------Generated by SSpawner v1.0.2---------->


Class: BP_XDWeather_C.XDWeather.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x3d8, Size: 0x8]
	void FindDataInternal(out DataTable*[] DataTableArray, FName WeatherRowName, out bool WeatherRowFound, out WeatherIdStruct WeatherRow, WeatherIdStruct RowFound, bool Found, int CallFunc_Array_Length_ReturnValue, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, DataTable* CallFunc_Array_Get_Item, WeatherIdStruct CallFunc_GetDataTableRowFromName_OutRow, bool CallFunc_GetDataTableRowFromName_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_BooleanAND_ReturnValue);// 0x35332fc
	void LerpPgWater(out const PG_Water A, out const PG_Water B, float Alpha, out PG_Water StructOut, PG_Water LocalData, bool CallFunc_Greater_FloatFloat_ReturnValue, LinearColor CallFunc_LinearColorLerp_ReturnValue, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue1, float CallFunc_Lerp_ReturnValue2, float CallFunc_Lerp_ReturnValue3, float CallFunc_Lerp_ReturnValue4, float CallFunc_Lerp_ReturnValue5, LinearColor CallFunc_LinearColorLerp_ReturnValue1, float CallFunc_Lerp_ReturnValue6, LinearColor CallFunc_LinearColorLerp_ReturnValue2, float CallFunc_Lerp_ReturnValue7, float CallFunc_Lerp_ReturnValue8, LinearColor CallFunc_LinearColorLerp_ReturnValue3, float CallFunc_Lerp_ReturnValue9, float CallFunc_Lerp_ReturnValue10, float CallFunc_Lerp_ReturnValue11, LinearColor CallFunc_LinearColorLerp_ReturnValue4, float CallFunc_Lerp_ReturnValue12, float CallFunc_Lerp_ReturnValue13, LinearColor CallFunc_LinearColorLerp_ReturnValue5, LinearColor CallFunc_LinearColorLerp_ReturnValue6, float CallFunc_Lerp_ReturnValue14, float CallFunc_Lerp_ReturnValue15, float CallFunc_Lerp_ReturnValue16, float CallFunc_Lerp_ReturnValue17, float CallFunc_Lerp_ReturnValue18, float CallFunc_Lerp_ReturnValue19, float CallFunc_Lerp_ReturnValue20, LinearColor CallFunc_LinearColorLerp_ReturnValue7, float CallFunc_Lerp_ReturnValue21, LinearColor CallFunc_LinearColorLerp_ReturnValue8, LinearColor CallFunc_LinearColorLerp_ReturnValue9, LinearColor CallFunc_LinearColorLerp_ReturnValue10, float CallFunc_Lerp_ReturnValue22, float CallFunc_Lerp_ReturnValue23, float CallFunc_Lerp_ReturnValue24, LinearColor CallFunc_LinearColorLerp_ReturnValue11, LinearColor CallFunc_LinearColorLerp_ReturnValue12);// 0x35332fc
	void None(interface classNone CallFunc_SwitchParticles_self_CastInput);// 0x35332fc
	void ClearPreWeatherTex(bool CallFunc_GreaterEqual_FloatFloat_ReturnValue);// 0x35332fc
	void SetWeatherData(class WeatherLightClass_C lightData, bool CallFunc_EqualEqual_ClassClass_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue);// 0x35332fc
	void TransitionUpdate(int CallFunc_GetDeviceLevel_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x35332fc
	void LerpSpecial(out const LightStruct Light1, out const LightStruct Light2, SkyBoxStruct SKYBOX1, SkyBoxStruct SKYBOX2, float Alpha, out LightStruct StructOutLIGHT, out SkyBoxStruct StructOutSKYBOX, SkyBoxStruct LocalSKYBOX, LightStruct LocalLIGHT, Rotator CallFunc_RLerp_ReturnValue, float CallFunc_Fraction_ReturnValue, float CallFunc_Fraction_ReturnValue1, float CallFunc_Lerp_ReturnValue);// 0x35332fc
	void UpdateSpecialLerpData(LightStruct CallFunc_LerpSpecial_StructOutLIGHT, SkyBoxStruct CallFunc_LerpSpecial_StructOutSKYBOX);// 0x35332fc
	void SetPPR();// 0x35332fc
	void LerpAmbient(out const AmbientStruct A, out const AmbientStruct B, float Alpha, out AmbientStruct StructOut, AmbientStruct LocalData, LinearColor CallFunc_LinearColorLerp_ReturnValue, float CallFunc_Lerp_ReturnValue, LinearColor CallFunc_LinearColorLerp_ReturnValue1, LinearColor CallFunc_LinearColorLerp_ReturnValue2, LinearColor CallFunc_LinearColorLerp_ReturnValue3, LinearColor CallFunc_LinearColorLerp_ReturnValue4, float CallFunc_Lerp_ReturnValue1, float CallFunc_Lerp_ReturnValue2, float CallFunc_Lerp_ReturnValue3, LinearColor CallFunc_LinearColorLerp_ReturnValue5, LinearColor CallFunc_LinearColorLerp_ReturnValue6);// 0x35332fc
	void LerpFog(out const FogStruct A, out const FogStruct B, float Alpha, out FogStruct StructOut, FogStruct LocalData, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue1, float CallFunc_Lerp_ReturnValue2, LinearColor CallFunc_LinearColorLerp_ReturnValue, float CallFunc_Lerp_ReturnValue3, LinearColor CallFunc_LinearColorLerp_ReturnValue1, float CallFunc_Lerp_ReturnValue4, float CallFunc_Lerp_ReturnValue5, float CallFunc_Lerp_ReturnValue6, float CallFunc_Lerp_ReturnValue7, float CallFunc_Lerp_ReturnValue8, LinearColor CallFunc_LinearColorLerp_ReturnValue2, float CallFunc_Lerp_ReturnValue9, float CallFunc_Lerp_ReturnValue10, float CallFunc_Lerp_ReturnValue11, float CallFunc_Lerp_ReturnValue12, LinearColor CallFunc_LinearColorLerp_ReturnValue3, float CallFunc_Lerp_ReturnValue13, float CallFunc_Lerp_ReturnValue14, float CallFunc_Lerp_ReturnValue15, float CallFunc_Lerp_ReturnValue16, LinearColor CallFunc_LinearColorLerp_ReturnValue4);// 0x35332fc
	void LerpDyCloud(out const DyCloudSturct A, out const DyCloudSturct B, float Alpha, out DyCloudSturct StructOut, DyCloudSturct LocalData, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue1, float CallFunc_Lerp_ReturnValue2, float CallFunc_Lerp_ReturnValue3, float CallFunc_Lerp_ReturnValue4, float CallFunc_Lerp_ReturnValue5, float CallFunc_Lerp_ReturnValue6, float CallFunc_Lerp_ReturnValue7, float CallFunc_Lerp_ReturnValue8, float CallFunc_Lerp_ReturnValue9, float CallFunc_Lerp_ReturnValue10, float CallFunc_Lerp_ReturnValue11, float CallFunc_Lerp_ReturnValue12, float CallFunc_Lerp_ReturnValue13, float CallFunc_Lerp_ReturnValue14, float CallFunc_Lerp_ReturnValue15, float CallFunc_Lerp_ReturnValue16, float CallFunc_Lerp_ReturnValue17, float CallFunc_Lerp_ReturnValue18, float CallFunc_Lerp_ReturnValue19, float CallFunc_Lerp_ReturnValue20, float CallFunc_Lerp_ReturnValue21, float CallFunc_Lerp_ReturnValue22, float CallFunc_Lerp_ReturnValue23, float CallFunc_Lerp_ReturnValue24);// 0x35332fc
	void LerpSkybox(out const SkyBoxStruct A, out const SkyBoxStruct B, float Alpha, out SkyBoxStruct StructOut, SkyBoxStruct LocalData, float CallFunc_MultiplyMultiply_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_BreakColor_R, float CallFunc_BreakColor_G, float CallFunc_BreakColor_B, float CallFunc_BreakColor_A, float CallFunc_MultiplyMultiply_FloatFloat_ReturnValue1, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue1, float CallFunc_Add_FloatFloat_ReturnValue1, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue1, float CallFunc_Lerp_ReturnValue2, LinearColor CallFunc_LinearColorLerp_ReturnValue, LinearColor CallFunc_LinearColorLerp_ReturnValue1, LinearColor CallFunc_LinearColorLerp_ReturnValue2, LinearColor CallFunc_LinearColorLerp_ReturnValue3, LinearColor CallFunc_LinearColorLerp_ReturnValue4, LinearColor CallFunc_LinearColorLerp_ReturnValue5, Rotator CallFunc_RLerp_ReturnValue, LinearColor CallFunc_LinearColorLerp_ReturnValue6, float CallFunc_Lerp_ReturnValue3, LinearColor CallFunc_LinearColorLerp_ReturnValue7, float CallFunc_Lerp_ReturnValue4, float CallFunc_BreakColor_R1, float CallFunc_BreakColor_G1, float CallFunc_BreakColor_B1, float CallFunc_BreakColor_A1, LinearColor CallFunc_LinearColorLerp_ReturnValue8, float CallFunc_Add_FloatFloat_ReturnValue2, LinearColor CallFunc_LinearColorLerp_ReturnValue9, float CallFunc_Add_FloatFloat_ReturnValue3, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float CallFunc_SelectFloat_ReturnValue, float CallFunc_Lerp_ReturnValue5);// 0x35332fc
	void LerpLight(out const LightStruct A, out const LightStruct B, float Alpha, out LightStruct StructOut, LightStruct LocalData, float CallFunc_Lerp_ReturnValue, LinearColor CallFunc_LinearColorLerp_ReturnValue, float CallFunc_Lerp_ReturnValue1, LinearColor CallFunc_LinearColorLerp_ReturnValue1, float CallFunc_Lerp_ReturnValue2, LinearColor CallFunc_LinearColorLerp_ReturnValue2, LinearColor CallFunc_LinearColorLerp_ReturnValue3, LinearColor CallFunc_LinearColorLerp_ReturnValue4, LinearColor CallFunc_LinearColorLerp_ReturnValue5, LinearColor CallFunc_LinearColorLerp_ReturnValue6, LinearColor CallFunc_LinearColorLerp_ReturnValue7, float CallFunc_Lerp_ReturnValue3, float CallFunc_Lerp_ReturnValue4, LinearColor CallFunc_LinearColorLerp_ReturnValue8, LinearColor CallFunc_LinearColorLerp_ReturnValue9, LinearColor CallFunc_LinearColorLerp_ReturnValue10);// 0x35332fc
	void BP_UpdateSkyParameters(float DeltaTime, int CallFunc_GetDeviceLevel_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x35332fc
	void SetExternalActors(int CallFunc_GetDeviceLevel_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, Rotator CallFunc_MakeRotator_ReturnValue, Color CallFunc_Conv_LinearColorToColor_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult1, bool CallFunc_IsValid_ReturnValue1, bool CallFunc_IsValid_ReturnValue2, bool CallFunc_IsValid_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FMax_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue1);// 0x35332fc
	void SetNightParameters(float CallFunc_BreakColor_R, float CallFunc_BreakColor_G, float CallFunc_BreakColor_B, float CallFunc_BreakColor_A, LinearColor CallFunc_Multiply_LinearColorFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue1, Vector CallFunc_Multiply_VectorFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0x35332fc
	void SetSunParameters(int CallFunc_GetDeviceDefaultLevel_ReturnValue, int CallFunc_GetDeviceLevel_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue1, byte CallFunc_GetValidValue_ReturnValue, byte CallFunc_GetValidValue_ReturnValue1, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum1_CmpSuccess, bool K2Node_SwitchEnum2_CmpSuccess, bool CallFunc_Greater_FloatFloat_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakColor_R, float CallFunc_BreakColor_G, float CallFunc_BreakColor_B, float CallFunc_BreakColor_A, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue1, bool CallFunc_Greater_FloatFloat_ReturnValue1, bool CallFunc_BooleanAND_ReturnValue);// 0x35332fc
	void SetCloudsParameters(float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_BreakColor_R, float CallFunc_BreakColor_G, float CallFunc_BreakColor_B, float CallFunc_BreakColor_A, LinearColor K2Node_MakeStruct_LinearColor, float CallFunc_Add_FloatFloat_ReturnValue, LinearColor CallFunc_Multiply_LinearColorLinearColor_ReturnValue, LinearColor CallFunc_Multiply_LinearColorFloat_ReturnValue, LinearColor CallFunc_Multiply_LinearColorFloat_ReturnValue1, float CallFunc_BreakColor_R1, float CallFunc_BreakColor_G1, float CallFunc_BreakColor_B1, float CallFunc_BreakColor_A1, LinearColor CallFunc_MakeColor_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Dot_VectorVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue1, Vector CallFunc_MakeVector_ReturnValue2, float CallFunc_Dot_VectorVector_ReturnValue1, Vector CallFunc_MakeVector_ReturnValue3, Vector CallFunc_VLerp_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Vector CallFunc_VLerp_ReturnValue1, LinearColor CallFunc_MakeColor_ReturnValue1, float CallFunc_BreakVector_X1, float CallFunc_BreakVector_Y1, float CallFunc_BreakVector_Z1, LinearColor CallFunc_MakeColor_ReturnValue2);// 0x35332fc
	void SetHorizonParameters(Vector CallFunc_MakeVector_ReturnValue, float CallFunc_BreakColor_R, float CallFunc_BreakColor_G, float CallFunc_BreakColor_B, float CallFunc_BreakColor_A, float CallFunc_Dot_VectorVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue1, Vector CallFunc_MakeVector_ReturnValue2, float CallFunc_Dot_VectorVector_ReturnValue1, Vector CallFunc_MakeVector_ReturnValue3, float CallFunc_Multiply_FloatFloat_ReturnValue, Vector CallFunc_VLerp_ReturnValue, Vector CallFunc_VLerp_ReturnValue1, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X1, float CallFunc_BreakVector_Y1, float CallFunc_BreakVector_Z1, LinearColor CallFunc_MakeColor_ReturnValue, LinearColor CallFunc_MakeColor_ReturnValue1, LinearColor CallFunc_Multiply_LinearColorFloat_ReturnValue, LinearColor CallFunc_Multiply_LinearColorFloat_ReturnValue1, float CallFunc_BreakColor_R1, float CallFunc_BreakColor_G1, float CallFunc_BreakColor_B1, float CallFunc_BreakColor_A1, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue1, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, LinearColor CallFunc_MakeColor_ReturnValue2, LinearColor CallFunc_Multiply_LinearColorFloat_ReturnValue2, LinearColor CallFunc_Multiply_LinearColorLinearColor_ReturnValue, Vector CallFunc_GetForwardVector_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_MakeVector_ReturnValue4, Vector CallFunc_Multiply_VectorFloat_ReturnValue1, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, LinearColor CallFunc_MakeColor_ReturnValue3);// 0x35332fc
	void BP_UpdateLayersParameters(float DeltaTime, bool CallFunc_EqualEqual_FloatFloat_ReturnValue, LinearColor CallFunc_Multiply_LinearColorFloat_ReturnValue, float CallFunc_BreakColor_R, float CallFunc_BreakColor_G, float CallFunc_BreakColor_B, float CallFunc_BreakColor_A, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue1, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue3, LinearColor CallFunc_MakeColor_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, LinearColor CallFunc_Multiply_LinearColorFloat_ReturnValue1, LinearColor CallFunc_Multiply_LinearColorFloat_ReturnValue2, float CallFunc_BreakColor_R1, float CallFunc_BreakColor_G1, float CallFunc_BreakColor_B1, float CallFunc_BreakColor_A1, float CallFunc_Add_FloatFloat_ReturnValue4, float CallFunc_Add_FloatFloat_ReturnValue5, float CallFunc_Add_FloatFloat_ReturnValue6, float CallFunc_Add_FloatFloat_ReturnValue7, LinearColor CallFunc_MakeColor_ReturnValue1, float CallFunc_Multiply_FloatFloat_ReturnValue1, float CallFunc_DegCos_ReturnValue, float CallFunc_DegSin_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_DegCos_ReturnValue1, float CallFunc_DegSin_ReturnValue1, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3, LinearColor CallFunc_Multiply_LinearColorFloat_ReturnValue3, float CallFunc_Multiply_FloatFloat_ReturnValue4, float CallFunc_Multiply_FloatFloat_ReturnValue5, float CallFunc_Multiply_FloatFloat_ReturnValue6, float CallFunc_Add_FloatFloat_ReturnValue8, float CallFunc_Subtract_FloatFloat_ReturnValue1, float CallFunc_BreakVector2D_X1, float CallFunc_BreakVector2D_Y1, Vector2D CallFunc_MakeVector2D_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue7, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue1, float CallFunc_Multiply_FloatFloat_ReturnValue8, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_Multiply_FloatFloat_ReturnValue9, float CallFunc_Multiply_FloatFloat_ReturnValue10, float CallFunc_Add_FloatFloat_ReturnValue9, float CallFunc_Subtract_FloatFloat_ReturnValue2, Vector2D CallFunc_MakeVector2D_ReturnValue1, Vector2D CallFunc_Multiply_Vector2DFloat_ReturnValue2, float CallFunc_BreakVector2D_X3, float CallFunc_BreakVector2D_Y3, LinearColor K2Node_MakeStruct_LinearColor, LinearColor CallFunc_Multiply_LinearColorFloat_ReturnValue4);// 0x35332fc
	void UpdateDeviceHigh();// 0x35332fc
	void LerpLightLow(LightLowStruct A, LightLowStruct B, float Alpha, out LightLowStruct StructOut, LightLowStruct LocalData, float CallFunc_Lerp_ReturnValue, LinearColor CallFunc_LinearColorLerp_ReturnValue, float CallFunc_Lerp_ReturnValue1, LinearColor CallFunc_LinearColorLerp_ReturnValue1);// 0x35332fc
	void UpdateLightLow(float DeltaTime, LightLowStruct CallFunc_LerpLightLow_StructOut, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_FClamp_ReturnValue);// 0x35332fc
	void SetLightLowExternal(int CallFunc_GetDeviceLevel_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x35332fc
	void LerpFogLow(FogStruct A, FogStruct B, float Alpha, out FogStruct StructOut, FogStruct LocalData, float CallFunc_Lerp_ReturnValue, float CallFunc_Lerp_ReturnValue1, float CallFunc_Lerp_ReturnValue2, float CallFunc_Lerp_ReturnValue3, float CallFunc_Lerp_ReturnValue4, LinearColor CallFunc_LinearColorLerp_ReturnValue);// 0x35332fc
	void SetDeviceLow(bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue1, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float CallFunc_Subtract_FloatFloat_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult, float CallFunc_Multiply_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, HitResult CallFunc_K2_SetWorldRotation_SweepHitResult1, bool CallFunc_IsValid_ReturnValue2, float CallFunc_FMax_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue);// 0x35332fc
	void UpdateFogLow(bool CallFunc_Less_FloatFloat_ReturnValue, FogStruct CallFunc_LerpFogLow_StructOut);// 0x35332fc
	void None(bool CallFunc_IsValid_ReturnValue, interface classNone K2Node_DynamicCast_AsBPI_Weather, bool K2Node_DynamicCast_bSuccess);// 0x35332fc
	void EditorFindID(FString RegionNum, FString WeatherNum, FString TODNum, bool CallFunc_EqualEqual_ByteByte_ReturnValue, FString CallFunc_Conv_IntToString_ReturnValue, Lab_RegionLeveMap_C* K2Node_DynamicCast_AsLab_Region_Leve_Map, bool K2Node_DynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, bool CallFunc_EqualEqual_ByteByte_ReturnValue1, bool K2Node_SwitchEnum1_CmpSuccess, bool K2Node_SwitchEnum2_CmpSuccess, bool K2Node_SwitchEnum3_CmpSuccess, bool K2Node_SwitchEnum4_CmpSuccess, FString CallFunc_Concat_StrStr_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue1);// 0x35332fc
	void FindData(FString WeatherIDint, bool NoError, FString CallFunc_Concat_StrStr_ReturnValue, FName CallFunc_Conv_StringToName_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue1, bool CallFunc_FindDataInternal_WeatherRowFound, WeatherIdStruct CallFunc_FindDataInternal_WeatherRow, bool CallFunc_FindDataInternal_WeatherRowFound1, WeatherIdStruct CallFunc_FindDataInternal_WeatherRow1, bool CallFunc_FindDataInternal_WeatherRowFound2, WeatherIdStruct CallFunc_FindDataInternal_WeatherRow2);// 0x35332fc
	void UpdateAmbient(PG_Water CallFunc_LerpPgWater_StructOut, AmbientStruct CallFunc_LerpAmbient_StructOut);// 0x35332fc
	void SetAmbientExternal(int CallFunc_GetDeviceLevel_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x35332fc
	void UpdatePostProcess(bool CallFunc_IsValid_ReturnValue, float CallFunc_FClamp_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue);// 0x35332fc
	void SetPostExternal();// 0x35332fc
	void None();// 0x35332fc
	void RefreshSkyLowerColor(bool CallFunc_IsValid_ReturnValue);// 0x35332fc
	void SetAmbientColor(int CallFunc_GetDeviceLevel_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, float CallFunc_FClamp_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_Multiply_FloatFloat_ReturnValue);// 0x35332fc
	void None(interface classNone K2Node_DynamicCast_AsBPI_Weather, bool K2Node_DynamicCast_bSuccess);// 0x35332fc
	void UpdateSkyBox(float CallFunc_Ease_ReturnValue, SkyBoxStruct CallFunc_LerpSkybox_StructOut);// 0x35332fc
	Vector LightningPosition(Vector B, float CallFunc_RandomFloatInRange_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue1, float CallFunc_RandomFloatInRange_ReturnValue2, Pawn* CallFunc_GetPlayerPawn_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Vector CallFunc_GetActorForwardVector_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, Rotator CallFunc_ComposeRotators_ReturnValue, Vector CallFunc_Conv_RotatorToVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_BreakVector_X1, float CallFunc_BreakVector_Y1, float CallFunc_BreakVector_Z1, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue1, Vector CallFunc_MakeVector_ReturnValue1, Vector CallFunc_Add_VectorVector_ReturnValue);// 0x35332fc
	void SetSkyTexExternal();// 0x35332fc
	void UpdateMaterialSwitch(float CallFunc_BreakColor_R, float CallFunc_BreakColor_G, float CallFunc_BreakColor_B, float CallFunc_BreakColor_A, int CallFunc_GetDeviceLevel_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess);// 0x35332fc
	void UpdateSkyTexture(LinearColor NewLocalVar, int CallFunc_GetDeviceLevel_ReturnValue, bool CallFunc_IsValid_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue1, float CallFunc_FMin_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue1, float CallFunc_FMin_ReturnValue1, float CallFunc_Divide_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_FMin_ReturnValue2, bool CallFunc_Greater_FloatFloat_ReturnValue);// 0x35332fc
	void DisplayWeather(LinearColor NewLocalVar, bool CallFunc_IsValid_ReturnValue, bool CallFunc_IsValid_ReturnValue1, FString CallFunc_Right_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue1, bool CallFunc_EqualEqual_StrStr_ReturnValue2, bool CallFunc_EqualEqual_StrStr_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue1, bool CallFunc_BooleanOR_ReturnValue2, int CallFunc_SelectInt_ReturnValue);// 0x35332fc
	void SetFogExternal();// 0x35332fc
	void UpdateFogPreset(FogStruct CallFunc_LerpFog_StructOut);// 0x35332fc
	void SetLightExternal(bool K2Node_SwitchEnum_CmpSuccess);// 0x35332fc
	void UpdateLightning(class LightningPreset_C Preset, CurveFloat* Scale, float Intensity, int CallFunc_GetDeviceLevel_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, float CallFunc_FClamp_ReturnValue, bool K2Node_SwitchEnum_CmpSuccess, float CallFunc_Conv_BoolToFloat_ReturnValue, float CallFunc_GetPlaybackPosition_ReturnValue, float CallFunc_GetFloatValue_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, LinearColor CallFunc_Multiply_LinearColorFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue1, float CallFunc_Multiply_FloatFloat_ReturnValue2);// 0x35332fc
	void SetLightning(class LightningPreset_C Preset, CurveFloat* Scale, int Iterations, Vector Epicenter, ParticleSystem* CallFunc_Array_Get_Item, float CallFunc_BreakVector2D_X, float CallFunc_BreakVector2D_Y, Vector CallFunc_LightningPosition_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue, float CallFunc_BreakVector2D_X1, float CallFunc_BreakVector2D_Y1, float CallFunc_BreakVector2D_X2, float CallFunc_BreakVector2D_Y2, float CallFunc_RandomFloatInRange_ReturnValue1, float CallFunc_RandomFloatInRange_ReturnValue2, Vector CallFunc_LightningPosition_ReturnValue1, Pawn* CallFunc_GetPlayerPawn_ReturnValue, int CallFunc_PostEventAtLocation_ReturnValue, bool CallFunc_IsValid_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, ParticleSystem*[] K2Node_MakeArray_Array, Pawn* CallFunc_GetPlayerPawn_ReturnValue1, Vector CallFunc_GetActorForwardVector_ReturnValue, float CallFunc_RandomFloatInRange_ReturnValue3, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, bool CallFunc_RandomBool_ReturnValue, Rotator CallFunc_ComposeRotators_ReturnValue, Vector CallFunc_Conv_RotatorToVector_ReturnValue, int CallFunc_SelectInt_ReturnValue, Vector CallFunc_Normal_ReturnValue, ParticleSystem* CallFunc_Array_Get_Item1, Vector CallFunc_Multiply_VectorFloat_ReturnValue, ParticleSystemComponent* CallFunc_SpawnEmitterAtLocation_ReturnValue1, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, LinearColor K2Node_MakeStruct_LinearColor, bool CallFunc_NotEqual_IntInt_ReturnValue, ParticleSystem*[] K2Node_MakeArray_Array1, ParticleSystem*[] K2Node_MakeArray_Array2, int CallFunc_Subtract_IntInt_ReturnValue, FString CallFunc_Right_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool K2Node_SwitchString_CmpSuccess);// 0x35332fc
	void UpdateLightData(LightLowStruct CallFunc_LerpLightLow_StructOut, float CallFunc_Ease_ReturnValue, LightStruct CallFunc_LerpLight_StructOut);// 0x35332fc
	void SetDyCloudExternal();// 0x35332fc
	void UpdateDyCloud(float CallFunc_Ease_ReturnValue, DyCloudSturct CallFunc_LerpDyCloud_StructOut);// 0x35332fc
	void UserConstructionScript(bool CallFunc_IsValid_ReturnValue, DirectionalLightComponent* K2Node_DynamicCast_AsDirectional_Light_Component, bool K2Node_DynamicCast_bSuccess, bool CallFunc_IsValid_ReturnValue1, int CallFunc_GetDeviceLevel_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue1, bool K2Node_SwitchEnum_CmpSuccess);// 0x35332fc
	void LightningTimeline__FinishedFunc();// 0x35332fc
	void LightningTimeline__UpdateFunc();// 0x35332fc
	void OnLoaded_4A5BAE4A430DFFD6E36D5C933A7BFBBD(class Object Loaded);// 0x35332fc
	void OnLoaded_4A5BAE4A430DFFD6E36D5C938C1D97AC(class Object Loaded);// 0x35332fc
	void SyncHeightFog();// 0x35332fc
	void SaveWeather(FString WeatherIndex);// 0x35332fc
	void WeatherGlobalSwitch(bool Switch);// 0x35332fc
	void OpenPPV();// 0x35332fc
	void ReWrite();// 0x35332fc
	void OpenWeatherSource();// 0x35332fc
	void BPE_LoadAsset();// 0x35332fc
	void Level(FName LevelName, bool isLoad, bool IsVisible);// 0x35332fc
	void SwitchParticles();// 0x35332fc
	void ReceiveBeginPlay();// 0x35332fc
	void ReceiveTick(float DeltaSeconds);// 0x35332fc
	void PlayLightning(class LightningPreset_C Preset, CurveFloat* Scale, float Delay, float Intensity);// 0x35332fc
	void PostConstructionScript(bool NoError);// 0x35332fc
	void GoToWeather(bool NoError);// 0x35332fc
	void WeatherSelection(FString WeatherID);// 0x35332fc
	void WeatherLogin(FString WeatherID, bool NoError);// 0x35332fc
	void WeatherChangeImmediately(FString WeatherID, bool Sync);// 0x35332fc
	void WeatherChange(FString WeatherID, bool Sync);// 0x35332fc
	void recap();// 0x35332fc
	void ProvisionalEvent();// 0x35332fc
	void BindXDSelf();// 0x35332fc
	void LeadingPlayerEnterAircraft();// 0x35332fc
	void LeadingPlayerLeaveAircraft();// 0x35332fc
	void LensFlareSwitch(bool Hidden);// 0x35332fc
	void FinishedEvent();// 0x35332fc
	void TransitioningEvent();// 0x35332fc
	void ExecuteUbergraph_BP_XDWeather(int EntryPoint, bool CallFunc_IsValid_ReturnValue, class Object Temp_class_Variable, class WeatherLightClass_C K2Node_ClassDynamicCast_AsWeather_Light_Class, bool K2Node_ClassDynamicCast_bSuccess, bool K2Node_SwitchEnum_CmpSuccess, delegate K2Node_CreateDelegate_OutputDelegate, class Object K2Node_CustomEvent_Loaded, bool CallFunc_Less_FloatFloat_ReturnValue, bool CallFunc_IsValid_ReturnValue1, DirectionalLightComponent* K2Node_DynamicCast_AsDirectional_Light_Component, bool K2Node_DynamicCast_bSuccess, bool CallFunc_Less_FloatFloat_ReturnValue1, bool CallFunc_IsValid_ReturnValue2, class Object Temp_class_Variable1, class WeatherLightClass_C K2Node_ClassDynamicCast_AsWeather_Light_Class1, bool K2Node_ClassDynamicCast_bSuccess1, class Object K2Node_CustomEvent_Loaded1, int CallFunc_GetDeviceLevel_ReturnValue, byte CallFunc_Conv_IntToByte_ReturnValue, byte CallFunc_GetValidValue_ReturnValue, bool K2Node_SwitchEnum1_CmpSuccess, FString CallFunc_Conv_SoftClassReferenceToString_ReturnValue, class Object CallFunc_LoadClassSync_ReturnValue, class WeatherLightClass_C K2Node_ClassDynamicCast_AsWeather_Light_Class2, bool K2Node_ClassDynamicCast_bSuccess2, bool CallFunc_IsValid_ReturnValue3, FString CallFunc_Conv_SoftClassReferenceToString_ReturnValue1, bool Temp_bool_Has_Been_Initd_Variable, class Object CallFunc_LoadClassSync_ReturnValue1, class WeatherLightClass_C K2Node_ClassDynamicCast_AsWeather_Light_Class3, bool K2Node_ClassDynamicCast_bSuccess3, bool Temp_bool_IsClosed_Variable, bool Temp_bool_Has_Been_Initd_Variable1, bool Temp_bool_IsClosed_Variable1, bool Temp_bool_Has_Been_Initd_Variable2, bool Temp_bool_IsClosed_Variable2, bool CallFunc_IsValid_ReturnValue4, int CallFunc_GetDeviceLevel_ReturnValue1, byte CallFunc_Conv_IntToByte_ReturnValue1, byte CallFunc_GetValidValue_ReturnValue1, bool K2Node_SwitchEnum2_CmpSuccess, bool CallFunc_IsValid_ReturnValue5, int CallFunc_GetDeviceLevel_ReturnValue2, byte CallFunc_Conv_IntToByte_ReturnValue2, byte CallFunc_GetValidValue_ReturnValue2, int CallFunc_GetDeviceLevel_ReturnValue3, bool K2Node_SwitchEnum3_CmpSuccess, byte CallFunc_Conv_IntToByte_ReturnValue3, byte CallFunc_GetValidValue_ReturnValue3, bool K2Node_SwitchEnum4_CmpSuccess, bool K2Node_SwitchEnum5_CmpSuccess, int CallFunc_GetDeviceLevel_ReturnValue4, byte CallFunc_Conv_IntToByte_ReturnValue4, byte CallFunc_GetValidValue_ReturnValue4, bool K2Node_SwitchEnum6_CmpSuccess, FString K2Node_Event_WeatherIndex, bool K2Node_Event_Switch, FName K2Node_Event_LevelName, bool K2Node_Event_isLoad, bool K2Node_Event_isVisible, float K2Node_Event_DeltaSeconds, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue1, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue1, float CallFunc_FClamp_ReturnValue, float CallFunc_FClamp_ReturnValue1, class LightningPreset_C K2Node_CustomEvent_Preset, CurveFloat* K2Node_CustomEvent_Scale, float K2Node_CustomEvent_Delay, float K2Node_CustomEvent_Intensity, float CallFunc_GetTimeRange_MinTime, float CallFunc_GetTimeRange_MaxTime, bool K2Node_CustomEvent_NoError1, bool K2Node_CustomEvent_NoError, FString K2Node_Event_WeatherID1, FString K2Node_Event_WeatherID, bool K2Node_Event_NoError, bool CallFunc_NotEqual_StrStr_ReturnValue, FString K2Node_CustomEvent_WeatherID1, bool K2Node_CustomEvent_Sync1, FString K2Node_CustomEvent_WeatherID, bool K2Node_CustomEvent_Sync, bool CallFunc_IsValid_ReturnValue6, interface classNone CallFunc_WeatherLogin_self_CastInput, FString CallFunc_Right_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue, bool CallFunc_EqualEqual_StrStr_ReturnValue1, bool CallFunc_EqualEqual_StrStr_ReturnValue2, bool CallFunc_EqualEqual_StrStr_ReturnValue3, bool CallFunc_BooleanOR_ReturnValue, bool CallFunc_BooleanOR_ReturnValue1, bool CallFunc_BooleanOR_ReturnValue2, delegate K2Node_CreateDelegate_OutputDelegate1, float CallFunc_Divide_FloatFloat_ReturnValue2, class Object CallFunc_GetWeatherLightSetSync_ReturnValue, class WeatherLightClass_C K2Node_ClassDynamicCast_AsWeather_Light_Class4, bool K2Node_ClassDynamicCast_bSuccess4, BP_LightManage_C*[] CallFunc_GetAllActorsOfClass_OutActors, BP_LightManage_C* CallFunc_Array_Get_Item, int CallFunc_GetDeviceLevel_ReturnValue5, byte CallFunc_Conv_IntToByte_ReturnValue5, byte CallFunc_GetValidValue_ReturnValue5, delegate K2Node_CreateDelegate_OutputDelegate2, bool K2Node_SwitchEnum7_CmpSuccess, bool K2Node_CustomEvent_Hidden, bool CallFunc_EqualEqual_StrStr_ReturnValue4, float CallFunc_Divide_FloatFloat_ReturnValue3, int CallFunc_SelectInt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue4);// 0x35332fc
	void TestUI__DelegateSignature();// 0x35332fc
	void LoginDispatcher__DelegateSignature();// 0x35332fc
	void WeatherChangeDispatcher__DelegateSignature();// 0x35332fc
	StaticMeshComponent* SunPlane;//[Offset: 0x3e0, Size: 0x8]
	ChildActorComponent* BP_Sun_LensFlare;//[Offset: 0x3e8, Size: 0x8]
	StaticMeshComponent* SumoonPlane;//[Offset: 0x3f0, Size: 0x8]
	SceneComponent* MoonRoot;//[Offset: 0x3f8, Size: 0x8]
	PostProcessComponent* PostProcessFrom;//[Offset: 0x400, Size: 0x8]
	StaticMeshComponent* StarsSphere;//[Offset: 0x408, Size: 0x8]
	StaticMeshComponent* SkyMesh;//[Offset: 0x410, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x418, Size: 0x8]
	byte LightningTimeline__Direction_F96B14EF4E637E770014A3B52D13E35A;//[Offset: 0x420, Size: 0x1]
	TimelineComponent* LightningTimeline;//[Offset: 0x428, Size: 0x8]
	float WeatherChangeDuration;//[Offset: 0x430, Size: 0x4]
	bool None;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x434, Size: 0x1]
	AIRequestID ================;//[Offset: 0x438, Size: 0x4]
	byte None;//[Offset: 0x43c, Size: 0x1]
	LightStruct Light0;//[Offset: 0x440, Size: 0x100]
	DataTable*[] DataTable_Array;//[Offset: 0x540, Size: 0x10]
	DataTable*[] DataTable_Array_Caves;//[Offset: 0x550, Size: 0x10]
	DataTable*[] DataTable_Array_SubRegion;//[Offset: 0x560, Size: 0x10]
	MaterialInstanceConstant* SkydomeMaterial;//[Offset: 0x570, Size: 0x8]
	MaterialInterface* StarsMaterial;//[Offset: 0x578, Size: 0x8]
	DirectionalLight* SunLightSource;//[Offset: 0x580, Size: 0x8]
	DirectionalLight* SunCsBuilding;//[Offset: 0x588, Size: 0x8]
	ExponentialHeightFog* HeightFog;//[Offset: 0x590, Size: 0x8]
	SkyLight* SkyLight;//[Offset: 0x598, Size: 0x8]
	float Saturation;//[Offset: 0x5a0, Size: 0x4]
	float UVHorizon;//[Offset: 0x5a4, Size: 0x4]
	float UVScale;//[Offset: 0x5a8, Size: 0x4]
	None* BPE_Ref;//[Offset: 0x5b0, Size: 0x8]
	Texture* CloudsLayer1;//[Offset: 0x5b8, Size: 0x8]
	Texture* CloudsLayer2;//[Offset: 0x5c0, Size: 0x8]
	Vector2D WindForce;//[Offset: 0x5c8, Size: 0x8]
	float SunShine;//[Offset: 0x5d0, Size: 0x4]
	Rotator SunDirection;//[Offset: 0x5d4, Size: 0xc]
	float StarsBrightness;//[Offset: 0x5e0, Size: 0x4]
	DyCloudSturct DyCloudFrom;//[Offset: 0x5e4, Size: 0x64]
	DyCloudSturct DyCloudTo;//[Offset: 0x648, Size: 0x64]
	LinearColor WorldLayerColor;//[Offset: 0x6ac, Size: 0x10]
	float SkyLightRecaptureTime;//[Offset: 0x6bc, Size: 0x4]
	float TimeOfDayFrom;//[Offset: 0x6c0, Size: 0x4]
	float TimeOfDayTo;//[Offset: 0x6c4, Size: 0x4]
	float TimeOfDayTransitionDuration;//[Offset: 0x6c8, Size: 0x4]
	XDWeatherLightStruct LightFrom;//[Offset: 0x6d0, Size: 0xb8]
	XDWeatherLightStruct LightTo;//[Offset: 0x788, Size: 0xb8]
	float WeatherInterp;//[Offset: 0x840, Size: 0x4]
	int LightningIterations;//[Offset: 0x844, Size: 0x4]
	FogStruct Fog0;//[Offset: 0x848, Size: 0xcc]
	float ChangeDuration;//[Offset: 0x914, Size: 0x4]
	FogStruct FogFrom;//[Offset: 0x918, Size: 0xcc]
	FogStruct FogTo;//[Offset: 0x9e4, Size: 0xcc]
	bool isDyCouldy;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xab0, Size: 0x1]
	float SkyTexInterp;//[Offset: 0xab4, Size: 0x4]
	float DyCloudyAlpha;//[Offset: 0xab8, Size: 0x4]
	bool isRainy;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xabc, Size: 0x1]
	float RainRoughParam;//[Offset: 0xac0, Size: 0x4]
	ParticleSystem*[] LightningParticle;//[Offset: 0xac8, Size: 0x10]
	SkyBoxStruct Skybox0;//[Offset: 0xad8, Size: 0xdc]
	DyCloudSturct DyCloud0;//[Offset: 0xbb4, Size: 0x64]
	class WeatherLightClass_C* LightDataTarget;//[Offset: 0xc18, Size: 0x8]
	class PostProcessClass_C* PostProcessTarget;//[Offset: 0xc20, Size: 0x8]
	class AmbientClass_C* AmbientTarget;//[Offset: 0xc28, Size: 0x8]
	class DyCloudClass_C* DyCloudTarget;//[Offset: 0xc30, Size: 0x8]
	SkyBoxStruct SkyboxForm;//[Offset: 0xc38, Size: 0xdc]
	SkyBoxStruct SkyboxTo;//[Offset: 0xd14, Size: 0xdc]
	FString WeatherIndex;//[Offset: 0xdf0, Size: 0x10]
	<int,class DyCloudClass_C> DyCloudList;//[Offset: 0xe00, Size: 0x50]
	Texture* SkyTextureTarget;//[Offset: 0xe50, Size: 0x8]
	Texture* SkyTextureFrom;//[Offset: 0xe58, Size: 0x8]
	bool isLightning;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xe60, Size: 0x1]
	PostProcessVolume* PPVolume;//[Offset: 0xe68, Size: 0x8]
	float DurationTime;//[Offset: 0xe70, Size: 0x4]
	<int,class PostProcessClass_C> PostProcessList;//[Offset: 0xe78, Size: 0x50]
	float PostPresetInterp;//[Offset: 0xec8, Size: 0x4]
	PostProcessSettings PostSetting;//[Offset: 0xed0, Size: 0x570]
	delegate WeatherChangeDispatcher;//[Offset: 0x1440, Size: 0x10]
	<int,class AmbientClass_C> AmbientList;//[Offset: 0x1450, Size: 0x50]
	AmbientStruct Ambient0;//[Offset: 0x14a0, Size: 0x8c]
	AmbientStruct AmbientTo;//[Offset: 0x152c, Size: 0x8c]
	AmbientStruct AmbientFrom;//[Offset: 0x15b8, Size: 0x8c]
	TextureCube* SkyCubeFrom;//[Offset: 0x1648, Size: 0x8]
	TextureCube* SkyCubeTo;//[Offset: 0x1650, Size: 0x8]
	TextureCube* SkyCubePrev;//[Offset: 0x1658, Size: 0x8]
	delegate LoginDispatcher;//[Offset: 0x1660, Size: 0x10]
	bool isEditorTime;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1670, Size: 0x1]
	WeatherIdStruct TargetRow;//[Offset: 0x1678, Size: 0x60]
	byte None;//[Offset: 0x16d8, Size: 0x1]
	PrimaryDataAsset* None;//[Offset: 0x16e0, Size: 0x8]
	byte None;//[Offset: 0x16e8, Size: 0x1]
	AIRequestID ----;//[Offset: 0x16ec, Size: 0x4]
	int None;//[Offset: 0x16f0, Size: 0x4]
	<int,FString> None;//[Offset: 0x16f8, Size: 0x50]
	AIRequestID -----;//[Offset: 0x1748, Size: 0x4]
	byte None;//[Offset: 0x174c, Size: 0x1]
	byte None;//[Offset: 0x174d, Size: 0x1]
	AIRequestID ===============;//[Offset: 0x1750, Size: 0x4]
	FString EditorWeatherID;//[Offset: 0x1758, Size: 0x10]
	FString ManualID;//[Offset: 0x1768, Size: 0x10]
	bool None;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1778, Size: 0x1]
	AmbientStruct AmbientFrom;//[Offset: 0x177c, Size: 0x8c]
	AmbientStruct AmbientTo;//[Offset: 0x1808, Size: 0x8c]
	FogStruct FogFrom;//[Offset: 0x1894, Size: 0xcc]
	FogStruct FogTo;//[Offset: 0x1960, Size: 0xcc]
	bool TestBool;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1a2c, Size: 0x1]
	class LightLowClass_C* DeviceLowTarget;//[Offset: 0x1a30, Size: 0x8]
	LightLowStruct LightLowFrom;//[Offset: 0x1a38, Size: 0xc4]
	LightLowStruct LightLowTo;//[Offset: 0x1afc, Size: 0xc4]
	LightLowStruct LightLow0;//[Offset: 0x1bc0, Size: 0xc4]
	float DeviceLowInterp;//[Offset: 0x1c84, Size: 0x4]
	FString[] None;//[Offset: 0x1c88, Size: 0x10]
	LinearColor FinalBaseLayerScale;//[Offset: 0x1c98, Size: 0x10]
	LinearColor FinalSecondLayerScale;//[Offset: 0x1ca8, Size: 0x10]
	LinearColor FinalBaseLayerSpeed;//[Offset: 0x1cb8, Size: 0x10]
	LinearColor FinalSecondLayerSpeed;//[Offset: 0x1cc8, Size: 0x10]
	LightStruct Light_From;//[Offset: 0x1cd8, Size: 0x100]
	LightStruct Light_To;//[Offset: 0x1dd8, Size: 0x100]
	DirectionalLightComponent* DirLitComp;//[Offset: 0x1ed8, Size: 0x8]
	bool PlayInP4V;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ee0, Size: 0x1]
	Rotator SunAnglePreset;//[Offset: 0x1ee4, Size: 0xc]
	delegate TestUI;//[Offset: 0x1ef0, Size: 0x10]
	int LightningInt;//[Offset: 0x1f00, Size: 0x4]
	float SpecialInterp;//[Offset: 0x1f04, Size: 0x4]
	float SpecialDurationTime;//[Offset: 0x1f08, Size: 0x4]
	bool SetTargetTexture;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0c, Size: 0x1]
	BP_LightManage_C* LitManageRef;//[Offset: 0x1f10, Size: 0x8]
	Vector Ls_Direct;//[Offset: 0x1f18, Size: 0xc]
	bool isSync;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f24, Size: 0x1]
	int ServerID Holder;//[Offset: 0x1f28, Size: 0x4]
	bool ChangeFinished;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2c, Size: 0x1]
	MaterialInstanceConstant* SkyMaterialSimplified;//[Offset: 0x1f30, Size: 0x8]
	MaterialInstanceDynamic* SkyMatSimplified;//[Offset: 0x1f38, Size: 0x8]
	MaterialInstanceDynamic* SkyMat;//[Offset: 0x1f40, Size: 0x8]
	PG_Water PgWater0;//[Offset: 0x1f48, Size: 0x4a8]
	PG_Water PgWaterTo;//[Offset: 0x23f0, Size: 0x4a8]
	PG_Water PgWaterFrom;//[Offset: 0x2898, Size: 0x4a8]
	TextureCube* SkyCubeFrom;//[Offset: 0x2d40, Size: 0x8]
	TextureCube* SkyCubeTo;//[Offset: 0x2d48, Size: 0x8]
	TextureCube* SkyCubePrev;//[Offset: 0x2d50, Size: 0x8]
	bool isDs;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x2d58, Size: 0x1]
	bool isSubRegion;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x2d59, Size: 0x1]
	int WDT_ArrayID;//[Offset: 0x2d5c, Size: 0x4]
	float NextSetCubemapBlendAvailableInterp;//[Offset: 0x2d60, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: XDWeather.Actor.Object
	MaterialInstanceDynamic* SkyMaterialInst;//[Offset: 0x340, Size: 0x8]
	MaterialInstanceDynamic* StarsMaterialInst;//[Offset: 0x348, Size: 0x8]
	float UVHorizon;//[Offset: 0x350, Size: 0x4]
	Vector2D WindForce;//[Offset: 0x354, Size: 0x8]
	float UVScale;//[Offset: 0x35c, Size: 0x4]
	float Saturation;//[Offset: 0x360, Size: 0x4]
	Rotator SunDirection;//[Offset: 0x364, Size: 0xc]
	LinearColor WorldLayerColor;//[Offset: 0x370, Size: 0x10]
	float SunShine;//[Offset: 0x380, Size: 0x4]
	float StarsBrightness;//[Offset: 0x384, Size: 0x4]
	LinearColor UVBaseLayerPosition;//[Offset: 0x388, Size: 0x10]
	LinearColor UVSecondLayerPosition;//[Offset: 0x398, Size: 0x10]
	LinearColor UVBaseLayerSize;//[Offset: 0x3a8, Size: 0x10]
	LinearColor UVSecondLayerSize;//[Offset: 0x3b8, Size: 0x10]
	float HorizonTilt;//[Offset: 0x3c8, Size: 0x4]
	float CloudsBloom;//[Offset: 0x3cc, Size: 0x4]
	float LightningIntensity;//[Offset: 0x3d0, Size: 0x4]
	void ReleasePreviousWeatherTex(MaterialInstanceDynamic* MatSky, Texture* TexSkyFrom, Texture* TexSkyTo, SkyLightComponent* SkyLight, TextureCube* CubemapFrom, TextureCube* CubemapTo);// 0x31888b4
	void ReleasePreviousWeatherLight(class Object LightSet);// 0x31887e8
	class Object GetWeatherLightSetSync(class Object ClassName);// 0x318870c
	int GetWeatherLevel();// 0x31886d8
<----------Generated by SSpawner v1.0.2---------->


Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x28, Size: 0x8]
	bool bStripFromClientBuilds;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x80, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ScriptStruct.Struct.Field.Object
<----------Generated by SSpawner v1.0.2---------->


Class: WeatherIdStruct
	FString WeatherName_21_28B751D645CBC94D58932090BF2BC212;//[Offset: 0x0, Size: 0x10]
	bool isValid_16_755F305341F773AC6383FA9FDC3E7C89;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
	class WeatherLightClass_C* LightSet_43_72529BB148C5DA4A8CE308B9D4FC84B0;//[Offset: 0x18, Size: 0x28]
	class PostProcessClass_C* PostProcess_30_B170377447D764917478139D5B47240A;//[Offset: 0x40, Size: 0x8]
	class DyCloudClass_C* DyCloud_31_0EE640744CC6CF100A3682926B09E02A;//[Offset: 0x48, Size: 0x8]
	class AmbientClass_C* Ambient_32_5D945A774B375B36E90AD3A4867D87C0;//[Offset: 0x50, Size: 0x8]
	class LightLowClass_C* LightLow_35_CDB8674940EACA657A81F38B7E21DA69;//[Offset: 0x58, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: WeatherLightClass_C.Object
	LightStruct Light;//[Offset: 0x28, Size: 0x100]
	FogStruct Fog;//[Offset: 0x128, Size: 0xcc]
	SkyBoxStruct SkyBox;//[Offset: 0x1f4, Size: 0xdc]
<----------Generated by SSpawner v1.0.2---------->


Class: LightStruct
	float SunIntensity_8_1FF8914C4148BC1391C34F903EB92A0C;//[Offset: 0x0, Size: 0x4]
	LinearColor SunLightColor_9_B19BF2624E32A2A369329BA76007AD4E;//[Offset: 0x4, Size: 0x10]
	LinearColor SunShadowColor_18_B13B61B14E758D857AD40F81F6AAB82B;//[Offset: 0x14, Size: 0x10]
	LinearColor SunShadowColorFar_43_9D1B617940FCDA55D3BD91871346FC2E;//[Offset: 0x24, Size: 0x10]
	float ShadowColorTransition_46_C5232B6B4BDC9A92412E27AF02B02D79;//[Offset: 0x34, Size: 0x4]
	TextureCube* SkyLitHDR_40_1C0323964722FD39BE0B2397BB63CE9C;//[Offset: 0x38, Size: 0x8]
	float SkyLitIntensity_12_1B4CF4A748DD0FBC620167B88F365C45;//[Offset: 0x40, Size: 0x4]
	LinearColor SkyLitColor_13_CCCAB5A549E46D49B4672EA64CF9C1CA;//[Offset: 0x44, Size: 0x10]
	LinearColor LowerHemisphereColor_16_1CB9CA9546327B63298B978BDE7F68E6;//[Offset: 0x54, Size: 0x10]
	Texture* SkyTexture_25_147D6D2A440B41DDBD142581D85F6A38;//[Offset: 0x68, Size: 0x8]
	float SkyTextureRotation_49_FD15C9F3461A85C28FF7889B26FA384C;//[Offset: 0x70, Size: 0x4]
	LinearColor CBD_GI_32_87D3E9184500097B56F676ADFF04E4DE;//[Offset: 0x74, Size: 0x10]
	LinearColor CBD_Sun_33_6F6927784823D7A035381AB7B46BBA53;//[Offset: 0x84, Size: 0x10]
	LinearColor CBD_Sky_35_27C83A434462F1851402FBAE50F61E47;//[Offset: 0x94, Size: 0x10]
	LinearColor CBD_LF_37_01CC605F49C840894F54428F6CA2247B;//[Offset: 0xa4, Size: 0x10]
	bool None;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xb4, Size: 0x1]
	float SunIntensity_2_68_C93A378B4C362923708CC586156D0FE3;//[Offset: 0xb8, Size: 0x4]
	LinearColor SunLightColor_2_71_EE828B594FCB6D4E474E8883880605CD;//[Offset: 0xbc, Size: 0x10]
	TextureCube* SkyLitHDR_2_52_3ED180D24D0D45F624EB94AB5AD7EE31;//[Offset: 0xd0, Size: 0x8]
	float SkyLitIntensity_2_58_4BC8F5D94354FEDB9E0369B9200BD2B3;//[Offset: 0xd8, Size: 0x4]
	LinearColor SkyLitColor_2_61_59D8332B4D8F6CE34D867F918934D7B3;//[Offset: 0xdc, Size: 0x10]
	LinearColor LowerHemisphereColor_2_64_9CAC4D5C43493AAC14A0EB882D6C619C;//[Offset: 0xec, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: FogStruct
	bool -----------1-------------_84_AD6A29434955F0B6518C0199513CC87A;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float FogDensity_3_1FF8914C4148BC1391C34F903EB92A0C;//[Offset: 0x4, Size: 0x4]
	LinearColor FogColor_6_ACBA930A4026FC7499D6FFB27B3EA1FF;//[Offset: 0x8, Size: 0x10]
	float FogFalloff_9_2A29AF0244C90ABA5ED1D1A066B2E4AC;//[Offset: 0x18, Size: 0x4]
	float FogOpacity_11_2265F5E4444A97EC390C55B2D8E6D339;//[Offset: 0x1c, Size: 0x4]
	float FogStartDistance_13_97413C0C4D40FEE5A3FFDC805598FFEF;//[Offset: 0x20, Size: 0x4]
	bool -----------2-------------_86_1D37C40041D3DAF7C40B91B169B653C5;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	float FogDensity_1_28_2DC8C803462FC91D726E519DC20C2810;//[Offset: 0x28, Size: 0x4]
	LinearColor FogColor_1_31_E72658E440F1BDC3DAE2CBA3C564D560;//[Offset: 0x2c, Size: 0x10]
	float FogFalloff_1_32_2FC81E0F446E827D73267C9ED200ED8E;//[Offset: 0x3c, Size: 0x4]
	float FogOpacity_1_37_9EFFC9A24133544A81713FAAAC98D9EB;//[Offset: 0x40, Size: 0x4]
	float FogDistance_1_38_6F8549DE4FDDF2B42FD2C7AB0AC779DE;//[Offset: 0x44, Size: 0x4]
	bool -----------3-------------_88_0659DFC649AF37AEA0BD678796558007;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x48, Size: 0x1]
	float FogDensity_2_44_88AC4AAB428887B174FD808C1A40AFDD;//[Offset: 0x4c, Size: 0x4]
	LinearColor FogColor_2_49_3AD4B4794AF56946A5825E8BAEED0E0C;//[Offset: 0x50, Size: 0x10]
	float FogFalloff_2_46_FB575B66490553F2CF41478CA04574CB;//[Offset: 0x60, Size: 0x4]
	float FogOpacity_2_47_D00E0ACE4DD0FFCDA29439963AF4DF36;//[Offset: 0x64, Size: 0x4]
	float FogDistance_2_48_305D0E10444C0FFF3DA6CE9A9C0D6DB6;//[Offset: 0x68, Size: 0x4]
	float Ins_Exponent_55_F2FD97D54FA046D9E7B59586CF592A26;//[Offset: 0x6c, Size: 0x4]
	float Ins_StartDistance_57_12A962024210BCC084FB039828AD1C04;//[Offset: 0x70, Size: 0x4]
	LinearColor Ins_Color_60_A047F3B544B5C40BE670908D4C5EDEFB;//[Offset: 0x74, Size: 0x10]
	bool None_91_B44AB0414703A185F88B14AEA9211AAD;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x84, Size: 0x1]
	bool DyCloud_15_4FAC79254BCD47CDC9CBB5913C563D9F;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x85, Size: 0x1]
	bool Rain_17_77F881E34C76B364730432ACDEE0D562;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x86, Size: 0x1]
	float WindParam_23_1FF64DBB4F7F0915CAA6A6A91706641B;//[Offset: 0x88, Size: 0x4]
	bool Lightning_21_C883D3244E02EA10386AF7ABAD356718;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x8c, Size: 0x1]
	float FL_Density_72_48F473D44C40E9C792FB75B8A3FA2659;//[Offset: 0x90, Size: 0x4]
	LinearColor FL_Color_77_A09FDB1E4C85090F57A2EEB83DBD6489;//[Offset: 0x94, Size: 0x10]
	float FL_Falloff_74_5626E3664606E4668B51ED90C0A023E8;//[Offset: 0xa4, Size: 0x4]
	float FL_Distance_76_621C3CF74C783A5E1DC492A78A47DED4;//[Offset: 0xa8, Size: 0x4]
	float FL_EndDistance_82_4DBA95C44B4B857C9435EB99D6FFA15D;//[Offset: 0xac, Size: 0x4]
	LinearColor PPR_Color_81_A0FC00F84EFB479BE459F0862986F0E9;//[Offset: 0xb0, Size: 0x10]
	float DyCloudyAlpha_94_5245A54A43047D558C7C73ABB3991A59;//[Offset: 0xc0, Size: 0x4]
	float RainRoughParam_96_E53143094B2C39137D6A6593735DCCBF;//[Offset: 0xc4, Size: 0x4]
	float Ripples_99_5CB700E645BC85AE54B18F91D9ECD9AE;//[Offset: 0xc8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SkyBoxStruct
	bool ---------SunMoon----------_36_762633AA4BFA407E23228B82BB7A8AD3;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	float LitShaft_Scale_42_7D5BEDD64E399C8F35850E859213DBAA;//[Offset: 0x4, Size: 0x4]
	LinearColor LitShaft_Tint_90_B838AFA94A3EAB02518FAF9E58ABB6B5;//[Offset: 0x8, Size: 0x10]
	LinearColor SunColor_6_1669F2914B1618EA07D76AB6D6684DA2;//[Offset: 0x18, Size: 0x10]
	float SunSize_104_F2740AAE4AB69A74BF03A0B9C5135087;//[Offset: 0x28, Size: 0x4]
	LinearColor MoonColor_8_5924A1F64BD1600FFCA93BA38899D542;//[Offset: 0x2c, Size: 0x10]
	float MoonSize_105_39B24A5D479FEE089340E4865638B2E7;//[Offset: 0x3c, Size: 0x4]
	LinearColor StartColor_28_7CAC6E9F40F94817673D92A13454ADCC;//[Offset: 0x40, Size: 0x10]
	Rotator SunRotation_2_E828809B49646FC88084F4A7751B0B08;//[Offset: 0x50, Size: 0xc]
	byte SunAnglePreset_97_57F8BC5D433624C4D8E10BAD611B8E5A;//[Offset: 0x5c, Size: 0x1]
	Rotator MoonRotation_11_36552E0946BD1230968797BAED437802;//[Offset: 0x60, Size: 0xc]
	float Sun_LensFlareIntensity_107_F9628D9A407A2AB9471ABFA2A524775C;//[Offset: 0x6c, Size: 0x4]
	bool ---------Skybox------------_35_49747E0248A1E0A08A2DF8BE1EB9BF79;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x70, Size: 0x1]
	LinearColor SkyUpperColor_16_171EB71644A9C08E5CF8009332FD0D73;//[Offset: 0x74, Size: 0x10]
	LinearColor SkyLowerColor_18_97BCD0D2441A92293D10F4BEA7EAD15A;//[Offset: 0x84, Size: 0x10]
	LinearColor CloudsUpperColor_20_134B88C3494183F9C80B3F8E39404E34;//[Offset: 0x94, Size: 0x10]
	LinearColor CloudsLowerColor_22_E94AB8C54FDCF56803B74FADB14C4316;//[Offset: 0xa4, Size: 0x10]
	LinearColor CloudsSecondaryColor_27_0252190540182FA041C5B2BFE493B69E;//[Offset: 0xb4, Size: 0x10]
	LinearColor CloudsBackground_24_30A497F94FA2097F6E32DBA65F043590;//[Offset: 0xc4, Size: 0x10]
	float Galaxy_93_03FE548A4D953D92013A139A9415B44C;//[Offset: 0xd4, Size: 0x4]
	float Aurora_100_E52974C54D18AF0A578AD68990546960;//[Offset: 0xd8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: PostProcessClass_C.Object
	PostProcessSettings Post;//[Offset: 0x30, Size: 0x570]
<----------Generated by SSpawner v1.0.2---------->


Class: DyCloudClass_C.Object
	DyCloudSturct DyCloudData;//[Offset: 0x28, Size: 0x64]
<----------Generated by SSpawner v1.0.2---------->


Class: DyCloudSturct
	float CloudsScale_6_46BD2FFD4101E62C58B396AE3DAA8046;//[Offset: 0x0, Size: 0x4]
	float CloudsDensity_8_C959F15B494C31785AB9BDA43B1D7D13;//[Offset: 0x4, Size: 0x4]
	float CloudsHarness_10_C035BB69421FE083D844959BBFE947D1;//[Offset: 0x8, Size: 0x4]
	float CloudsTranslucent_18_6BF1A8914FAA8F67988B9DADC914CBC6;//[Offset: 0xc, Size: 0x4]
	float CloudsBlend_17_0B0902B849FFF532D0FA73AD750162A7;//[Offset: 0x10, Size: 0x4]
	float CloudsDistotion_19_FF8260554CA3B701D6C62A87A392E3BA;//[Offset: 0x14, Size: 0x4]
	float CloudsScattering_20_EA03A384445C04BBBC4EA2A3A28674D9;//[Offset: 0x18, Size: 0x4]
	float CloudsUpperBrightness_47_80E6F59C44C0E63FF352E1ACA405DEAD;//[Offset: 0x1c, Size: 0x4]
	float CloudsLowerBrightness_48_C275CDC444671D9809D344A043817F24;//[Offset: 0x20, Size: 0x4]
	float CloudsAmbient_26_B3DE5189457AF2F2C9061DAE095629E4;//[Offset: 0x24, Size: 0x4]
	float CloudsShadowSize_32_30070F544C29A5175B4905A3CAA43C9B;//[Offset: 0x28, Size: 0x4]
	float CloudsShadowSoft_33_242397844998748E4CE442A82FABD76E;//[Offset: 0x2c, Size: 0x4]
	float CloudsBackground_34_81AB1CD743507906283E26BC8179CD02;//[Offset: 0x30, Size: 0x4]
	float CloudsHorizonDensity_35_A9DA12E04BD1ACCE877556A07AFC0A81;//[Offset: 0x34, Size: 0x4]
	float CloudsHorizonAlpha_36_B5FE09604EE51B66C6109689DD26A633;//[Offset: 0x38, Size: 0x4]
	float CloudsHorizonScattering_38_96C12A72485C8C653890E983ADECA031;//[Offset: 0x3c, Size: 0x4]
	float HorizonFalloff_41_7ADEA15D4BAFCED09051BDAAB67D0E6E;//[Offset: 0x40, Size: 0x4]
	float WindForceScale_42_494196B04350B9CE2B731E97799FE070;//[Offset: 0x44, Size: 0x4]
	float WindDynamic_45_4BD5C5EC4B00477CD0BAC8857B6087F7;//[Offset: 0x48, Size: 0x4]
	float WindDispersing_46_747C4F2B40612E5FE76792B0CB7C4E90;//[Offset: 0x4c, Size: 0x4]
	float SkylightBrightness_52_D0DC0C2C48095A9468CA2A8ECC6B512B;//[Offset: 0x50, Size: 0x4]
	float SecondLayerColor_71_16427994489B87788D8B02B67E7E863B;//[Offset: 0x54, Size: 0x4]
	float SecondLayerAlpha_72_8759E297465AF80FD8856791526E7414;//[Offset: 0x58, Size: 0x4]
	float SecondLayerScale_77_6F5F9AE84D7C8132AF2BD68DD7F5A018;//[Offset: 0x5c, Size: 0x4]
	float SecondLayerWind_73_58F8ABAE4AE471692F3D53A832B70EC0;//[Offset: 0x60, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AmbientClass_C.Object
	AmbientStruct AmbData;//[Offset: 0x28, Size: 0x8c]
	PG_Water PgWater;//[Offset: 0xb8, Size: 0x4a8]
<----------Generated by SSpawner v1.0.2---------->


Class: AmbientStruct
	bool ------Effects------_35_C52ADF0D42E9BD9303DA7D9A682283A7;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	LinearColor Effect01_2_CC62FCAF47B76B14458AEFBAB7E7175C;//[Offset: 0x4, Size: 0x10]
	LinearColor Effect02_4_6FFA27A943E28A1E6BD8BB88027F2ED5;//[Offset: 0x14, Size: 0x10]
	LinearColor Effect03_6_44B43109493D1674685A4B9BB9E6B306;//[Offset: 0x24, Size: 0x10]
	bool -------Character---------_21_4388AB0042DB251C8DBFEBA1DEE70689;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	float Ch_SkyIntensity_28_6A0C43C148EE1A7F3A7102982AAB8677;//[Offset: 0x38, Size: 0x4]
	float Ch_SunLimit_30_0E4F850E4144CD3C38C423B373AC9004;//[Offset: 0x3c, Size: 0x4]
	float Ch_DiffuseIntensity_47_B16FD56845C3175A621CBA874B6A1C28;//[Offset: 0x40, Size: 0x4]
	LinearColor Ch_SkyUpper_31_37BB2701493A8C7052D232B69CBDE09D;//[Offset: 0x44, Size: 0x10]
	LinearColor Ch_SkyLower_33_F0BC14AD42D96BAA42BEC09038D31A4D;//[Offset: 0x54, Size: 0x10]
	LinearColor Ch_CameraLightColor_48_427D001542CDC064459E10AF2F026F03;//[Offset: 0x64, Size: 0x10]
	bool ---Scene---_37_7EBD53B847485B1E88B05F9DD8F9EE51;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x74, Size: 0x1]
	LinearColor Sc_IBLColor_40_8F1D079043083A1CEEAE81A056726860;//[Offset: 0x78, Size: 0x10]
	float SpecialEmissive_51_067D947B4AB89A20ADD762BC765CA5A8;//[Offset: 0x88, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: PG_Water
	AssetData ---VertexAnimation---------------------------------------------_134_5982033547FB839B7B6DE6A074EBA2B6;//[Offset: 0x0, Size: 0x50]
	LinearColor Amplitude1234_68_B8AA23084CAA8DF9BA06A7A572FDDB9C;//[Offset: 0x50, Size: 0x10]
	LinearColor Direction12_70_31CCF740470C2C6455D7688A4A72A168;//[Offset: 0x60, Size: 0x10]
	LinearColor Direction34_72_7F234BE54C89CB1D92F9C1805631A9B9;//[Offset: 0x70, Size: 0x10]
	LinearColor Frequency1234_74_711C4EB24953CBB8C59B268F7907D543;//[Offset: 0x80, Size: 0x10]
	LinearColor Speed1234_242_66916BA04C1E44FCA2BA5DB0C1E70D6D;//[Offset: 0x90, Size: 0x10]
	LinearColor Steepness1234_78_926831E4416945D273BF1FA55298E85E;//[Offset: 0xa0, Size: 0x10]
	AssetData ---VTF----------------------------------------------_139_7CFE374944EA02ACEB305A938A5BE1F1;//[Offset: 0xb0, Size: 0x50]
	LinearColor DetailNormalSpeed_84_F8648E6747FC0EA888C11282592065A8;//[Offset: 0x100, Size: 0x10]
	float VTFIntensity_95_80B15DE2458184C9E76F6FB48FBE4D14;//[Offset: 0x110, Size: 0x4]
	float VTFUV1_87_C7DF57024A4A942D41ADBB91A30B8C4F;//[Offset: 0x114, Size: 0x4]
	float VTFUV2_89_EFBEC43C4FFE147839EF13A3991FFC7E;//[Offset: 0x118, Size: 0x4]
	AssetData ---BaseColor--------------------------------------------------------------_140_C3409A54481966B97EE60C8A55625BA1;//[Offset: 0x120, Size: 0x50]
	LinearColor BaseColor_Far_168_15A3D5824E46C3A25F1A139D289CB16A;//[Offset: 0x170, Size: 0x10]
	LinearColor BaseColor_Near_169_C294BD154C5BE0C472A4FB86E9EE4564;//[Offset: 0x180, Size: 0x10]
	LinearColor BaseColor_Shallow_170_293E32EA41A8C7A697FC4384E8D2370B;//[Offset: 0x190, Size: 0x10]
	AssetData ---Normal---------------------------------------------------------------------------------------------------_144_977948544CB16527A680B19B2291E3AA;//[Offset: 0x1a0, Size: 0x50]
	float NormalMapIntensity_177_4D8ABE384650F442B144F4A3BCD34578;//[Offset: 0x1f0, Size: 0x4]
	AssetData ---IBL-----------------------------------------------------------------------------------_155_A312C1184FA3D2912C35B0A09170C302;//[Offset: 0x1f8, Size: 0x50]
	LinearColor Water_ReflectionTintColor_180_57FB55AB42F9DDE6274CE3A6549DECEA;//[Offset: 0x248, Size: 0x10]
	float Water_ReflectionIntensity_183_EBDD68A4433E94EA76BE5E91699D69EB;//[Offset: 0x258, Size: 0x4]
	float Water_ReflectionAddPower_240_FEC886AA4EEEA9F4BE8827A7DD1F9CBE;//[Offset: 0x25c, Size: 0x4]
	float Water_ReflectionAddIntensity_241_0871E1F14E170C32DEB76B9B237ED1B0;//[Offset: 0x260, Size: 0x4]
	AssetData ---SSS--------------------------------------------------------------------------------------------------------------_151_59F656C14148FD5EF25426A2F527F27D;//[Offset: 0x268, Size: 0x50]
	float SSS_Top_210_EDFEBA1745F2B6B2D827C2B6351C1E44;//[Offset: 0x2b8, Size: 0x4]
	float SSS_Threshold_215_1AACF0404FD21001443032A1EFF2F31B;//[Offset: 0x2bc, Size: 0x4]
	float SSS_WorldNormalYMaskPower_216_716C8FBD4B45677E61F9D9BAD6D19551;//[Offset: 0x2c0, Size: 0x4]
	float SSS_SunPower_217_AB09A51042490CDD0C558E9612EB108D;//[Offset: 0x2c4, Size: 0x4]
	LinearColor SSS_SunColor_218_307FD1A6418EE7C9236FDCB9A15BF1F0;//[Offset: 0x2c8, Size: 0x10]
	LinearColor SSS_SkyColor_219_B70BB6FA410BFF00232BDEA13002279D;//[Offset: 0x2d8, Size: 0x10]
	float SSS_Style_CameraHeight_220_5048B2AF4915764E2DF72BB77EEB39E0;//[Offset: 0x2e8, Size: 0x4]
	float SSS_Style_Power_221_7D0EDBD640C7FE55714D6190E5FABEF8;//[Offset: 0x2ec, Size: 0x4]
	LinearColor SSS_Style_Color_222_141D108445EBEEE18DFDAFBB804BA3F2;//[Offset: 0x2f0, Size: 0x10]
	AssetData ---Foam-----------------------------------------------------------------------------------------------------_141_9B3502B04ED9B5A4CC076FA1C9132614;//[Offset: 0x300, Size: 0x50]
	float Foam_Top_223_F6EDA3FE4D214745A419E7AC8C92B5B0;//[Offset: 0x350, Size: 0x4]
	float Foam_Threshold_224_502B0D444A7CF354DCFD94BFD200137C;//[Offset: 0x354, Size: 0x4]
	float Foam_WorldNormalYMaskPower_225_8B4C9689496EC4F20AD5A2A7ED23547E;//[Offset: 0x358, Size: 0x4]
	LinearColor Foam_Color_226_583832AD4D2602340FEEA5905F3D5C3E;//[Offset: 0x35c, Size: 0x10]
	float Foam_Tilling_211_C86D20C64EA89D386B74C293BFA39A46;//[Offset: 0x36c, Size: 0x4]
	AssetData ---HorizonLight-----------------------------------------------------------------------------_156_87657CC14DCAE6C73F575983E866D3C7;//[Offset: 0x370, Size: 0x50]
	float HorizonLight_Power_227_877DD4F44A5F4D003AD7438C31ECE7E3;//[Offset: 0x3c0, Size: 0x4]
	LinearColor HorizonLight_Color_228_5F9E314D4BA96A8E98F7A7981604F263;//[Offset: 0x3c4, Size: 0x10]
	AssetData ---FakeSpecular----------------------------------------------------------------------------_157_95811ED44AE4261E16A694BEE0E6ADBC;//[Offset: 0x3d8, Size: 0x50]
	float FakeLightSpec_Intensity_229_D8F9137F42B3A49F5E43C99EA4336EB4;//[Offset: 0x428, Size: 0x4]
	LinearColor FakeLightSpec_Color_230_502D10A24F487EDB403500A1DE08D6CE;//[Offset: 0x42c, Size: 0x10]
	float FakeLightSpec_Roughness_231_1E4A4CC3444A8DC0FDA7AA91927BB81A;//[Offset: 0x43c, Size: 0x4]
	float FakeLightSpec_DIrOffset_232_CEFE436B4797A29155D2F292F02805F5;//[Offset: 0x440, Size: 0x4]
	float FakeLightSpec_NormalMapIntensity_233_DBA0863443FCFC7ED5637790DB7B4056;//[Offset: 0x444, Size: 0x4]
	AssetData ---Misc-----------------------------------------------------------------------------------_174_40FC255D40059A41A43C8CBDB68EE338;//[Offset: 0x448, Size: 0x50]
	float Specular_234_0E1CF90D46AEF32038E907A528CAC158;//[Offset: 0x498, Size: 0x4]
	float Roughness_235_2A9D80BA4A18FD9C453F02ADACDA0ACF;//[Offset: 0x49c, Size: 0x4]
	float BaseColorToEmissive_236_51089F4F4292DD46EBBBB98BC5C41CC2;//[Offset: 0x4a0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AssetData
	FName objectPath;//[Offset: 0x0, Size: 0x8]
	FName PackageName;//[Offset: 0x8, Size: 0x8]
	FName PackagePath;//[Offset: 0x10, Size: 0x8]
	FName AssetName;//[Offset: 0x18, Size: 0x8]
	FName AssetClass;//[Offset: 0x20, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: LightLowClass_C.Object
	LightLowStruct DeviceLowData;//[Offset: 0x28, Size: 0xc4]
<----------Generated by SSpawner v1.0.2---------->


Class: LightLowStruct
	float SunIntensity_8_1FF8914C4148BC1391C34F903EB92A0C;//[Offset: 0x0, Size: 0x4]
	LinearColor SunLightColor_9_B19BF2624E32A2A369329BA76007AD4E;//[Offset: 0x4, Size: 0x10]
	float SkyLitIntensity_12_1B4CF4A748DD0FBC620167B88F365C45;//[Offset: 0x14, Size: 0x4]
	LinearColor SkyLitColor_13_CCCAB5A549E46D49B4672EA64CF9C1CA;//[Offset: 0x18, Size: 0x10]
	float SunIntensity_2_61_5A33D52C4E265D40E832D69FE7C257AF;//[Offset: 0x28, Size: 0x4]
	LinearColor SunLightColor_2_63_48D2BEFF4428037390FD34A1406265DB;//[Offset: 0x2c, Size: 0x10]
	float SkyLitIntensity_2_62_E7DA84EB4B124FB0F6257BBDF0FC83FC;//[Offset: 0x3c, Size: 0x4]
	LinearColor SkyLitColor_2_64_ABC527D6405EE3B21E6633A5F8BC50E3;//[Offset: 0x40, Size: 0x10]
	AIRequestID -------Fog--------_71_1EAE46794AC6312DB9CF53BC95B0897A;//[Offset: 0x50, Size: 0x4]
	bool UseSeparateFog_67_4EF5B1D649E253A6479C5DB2C62DE7D9;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x54, Size: 0x1]
	AIRequestID ------1-------_90_0CCDAF9941D7662E7E236FAEDFB09D18;//[Offset: 0x58, Size: 0x4]
	float FogDensity_00_94_8C0F960846A95D90E8CA19A06447C204;//[Offset: 0x5c, Size: 0x4]
	LinearColor FogColor_00_95_F738C4674FC846B15EA330B0A8AB8131;//[Offset: 0x60, Size: 0x10]
	float FogFalloff_00_96_581564EA46919C35FC53708F2D0EC034;//[Offset: 0x70, Size: 0x4]
	float FogOpacity_00_97_96F70833415F7278B78A07A08FF54E5A;//[Offset: 0x74, Size: 0x4]
	float FogStartDistance_00_98_8AC353F94D7A0F2D38FB43B3ECC2D63D;//[Offset: 0x78, Size: 0x4]
	AIRequestID ------2-------_93_E6C04FF7479DD6EC17864298472A9A25;//[Offset: 0x7c, Size: 0x4]
	float FogDensity_01_101_FE45FE894E118BE9ED290CA776CF75B1;//[Offset: 0x80, Size: 0x4]
	LinearColor FogColor_01_110_B530F472486DC9EBEE4C4A8E3EBB91F5;//[Offset: 0x84, Size: 0x10]
	float FogFalloff_01_105_5EFED21945501310751A2BAB3FE31160;//[Offset: 0x94, Size: 0x4]
	float FogOpacity_01_107_B06A8F66498EC6A0AC4A05B3A4C02500;//[Offset: 0x98, Size: 0x4]
	float FogStartDistance_01_109_BF3FFFC54D83594A85B88AA2D918F9D5;//[Offset: 0x9c, Size: 0x4]
	AIRequestID ------3-------_125_A5E25B36488CF381CFB0209F071646EF;//[Offset: 0xa0, Size: 0x4]
	float FogDensity_02_119_1C81C3D543250AAB42D5B0A4BD7D7DE6;//[Offset: 0xa4, Size: 0x4]
	LinearColor FogColor_02_124_C0A42A1C43ED27FC227998A68B5B4BD9;//[Offset: 0xa8, Size: 0x10]
	float FogFalloff_02_121_1D5AA72546C3DC8282BC34B0ABC5A9AA;//[Offset: 0xb8, Size: 0x4]
	float FogOpacity_02_122_74703A524C6679B8AE863980E68D0355;//[Offset: 0xbc, Size: 0x4]
	float FogStartDistance_02_123_BE1550424FF3FCE64EC459B5C2AB0C9B;//[Offset: 0xc0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AIRequestID
	uint32 RequestID;//[Offset: 0x0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	byte SourceType;//[Offset: 0x2a0, Size: 0x1]
	TextureCube* CubeMap;//[Offset: 0x2a8, Size: 0x8]
	float SourceCubemapAngle;//[Offset: 0x2b0, Size: 0x4]
	int CubemapResolution;//[Offset: 0x2b4, Size: 0x4]
	float SkyDistanceThreshold;//[Offset: 0x2b8, Size: 0x4]
	bool bCaptureEmissiveOnly;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc, Size: 0x1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x2bd, Size: 0x1]
	LinearColor LowerHemisphereColor;//[Offset: 0x2c0, Size: 0x10]
	TextureCube* CubeMapSecond;//[Offset: 0x2d0, Size: 0x8]
	LinearColor LowerHemisphereColorSecond;//[Offset: 0x2d8, Size: 0x10]
	float IntensitySecond;//[Offset: 0x2e8, Size: 0x4]
	Color LightColorSecond;//[Offset: 0x2ec, Size: 0x4]
	LightingChannels LightingChannels;//[Offset: 0x2f0, Size: 0x1]
	float OcclusionMaxDistance;//[Offset: 0x2f4, Size: 0x4]
	float Contrast;//[Offset: 0x2f8, Size: 0x4]
	float OcclusionExponent;//[Offset: 0x2fc, Size: 0x4]
	float MinOcclusion;//[Offset: 0x300, Size: 0x4]
	Color OcclusionTint;//[Offset: 0x304, Size: 0x4]
	byte OcclusionCombineMode;//[Offset: 0x308, Size: 0x1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x458, Size: 0x8]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x4ee15ec
	void SetSourceCubemapAngle(float NewValue);// 0x4ee1570
	void SetOcclusionTint(out const Color InTint);// 0x4ee14e8
	void SetOcclusionExponent(float InOcclusionExponent);// 0x4ee146c
	void SetOcclusionContrast(float InOcclusionContrast);// 0x4ee13f0
	void SetMinOcclusion(float InMinOcclusion);// 0x4ee1374
	void SetLowerHemisphereColorSecond(out const LinearColor InLowerHemisphereColor);// 0x4ee12ec
	void SetLowerHemisphereColor(out const LinearColor InLowerHemisphereColor);// 0x4ee1264
	void SetLightColorSecond(LinearColor NewLightColor);// 0x4ee11e8
	void SetLightColor(LinearColor NewLightColor);// 0x4ee116c
	void SetIntensitySecond(float NewIntensity);// 0x4ee10f0
	void SetIntensity(float NewIntensity);// 0x4ee1074
	void SetIndirectLightingIntensity(float NewIntensity);// 0x4ee0ff8
	void SetCubemapSecond(TextureCube* NewCubemap);// 0x4ee0f7c
	void SetCubemapBlend(TextureCube* SourceCubemap, TextureCube* DestinationCubemap, float InBlendFraction, out const LinearColor SourceLowerHemisphereColor, out const LinearColor DestinationLowerHemisphereColor);// 0x4ee0dec
	void SetCubemapAndLowerHemisphereColorSecond(TextureCube* NewCubemap, out const LinearColor NewLowerHemisphereColor);// 0x4ee0d28
	void SetCubemap(TextureCube* NewCubemap);// 0x4ee0cac
	void SetBlendDestinationLowerHemisphereColor(out const LinearColor InBlendDesLowerHemisphereColor);// 0x4ee0c24
	void RecaptureSky();// 0x4ee0c10
<----------Generated by SSpawner v1.0.2---------->


Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x278, Size: 0x10]
	float Brightness;//[Offset: 0x288, Size: 0x4]
	float Intensity;//[Offset: 0x28c, Size: 0x4]
	Color LightColor;//[Offset: 0x290, Size: 0x4]
	bool bAffectsWorld;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x294, Size: 0x1]
	bool CastShadows;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x294, Size: 0x1]
	bool CastStaticShadows;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x294, Size: 0x1]
	bool CastDynamicShadows;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x294, Size: 0x1]
	bool bAffectTranslucentLighting;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x294, Size: 0x1]
	bool bTransmission;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x294, Size: 0x1]
	bool bCastVolumetricShadow;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x294, Size: 0x1]
	float IndirectLightingIntensity;//[Offset: 0x298, Size: 0x4]
	float VolumetricScatteringIntensity;//[Offset: 0x29c, Size: 0x4]
	void SetCastVolumetricShadow(bool bNewValue);// 0x4dfc5e0
	void SetCastShadows(bool bNewValue);// 0x4dfc55c
	LinearColor GetLightColor();// 0x4dfc524
<----------Generated by SSpawner v1.0.2---------->


Class: Lab_RegionLeveMap_C.PrimaryDataAsset.DataAsset.Object
	<int,FString> Map;//[Offset: 0x30, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: PrimaryDataAsset.DataAsset.Object
<----------Generated by SSpawner v1.0.2---------->


Class: LightningPreset_C.Object
	void ApplyOnMaterial();// 0x35332fc
	Vector2D PositionMin;//[Offset: 0x28, Size: 0x8]
	Vector2D PositionMax;//[Offset: 0x30, Size: 0x8]
	Vector2D RadiusMinMax;//[Offset: 0x38, Size: 0x8]
	Vector2D IntensityMinMax;//[Offset: 0x40, Size: 0x8]
	LinearColor Color;//[Offset: 0x48, Size: 0x10]
	float Clouds;//[Offset: 0x58, Size: 0x4]
	float Scattering;//[Offset: 0x5c, Size: 0x4]
	float SkyLight;//[Offset: 0x60, Size: 0x4]
	Vector2D DelayMinMax;//[Offset: 0x64, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bEnableLightShaftOcclusion;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3a9, Size: 0x1]
	float OcclusionMaskDarkness;//[Offset: 0x3ac, Size: 0x4]
	float OcclusionDepthRange;//[Offset: 0x3b0, Size: 0x4]
	Vector LightShaftOverrideDirection;//[Offset: 0x3b4, Size: 0xc]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x3c0, Size: 0x4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x3c4, Size: 0x4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x3c8, Size: 0x4]
	int DynamicShadowCascades;//[Offset: 0x3cc, Size: 0x4]
	float[] EachShadowCascadesDistance;//[Offset: 0x3d0, Size: 0x10]
	float[] EachShadowCascadesClipThreshold;//[Offset: 0x3e0, Size: 0x10]
	float CascadeDistributionExponent;//[Offset: 0x3f0, Size: 0x4]
	float CascadeTransitionFraction;//[Offset: 0x3f4, Size: 0x4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x3f8, Size: 0x4]
	bool bCloseFitShadowBounds;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3fc, Size: 0x1]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x3fc, Size: 0x1]
	int FarShadowCascadeCount;//[Offset: 0x400, Size: 0x4]
	float FarShadowDistance;//[Offset: 0x404, Size: 0x4]
	float MobileCSMShadowFrustumScale;//[Offset: 0x408, Size: 0x4]
	float DistanceFieldShadowDistance;//[Offset: 0x40c, Size: 0x4]
	Color CustomShadowColor;//[Offset: 0x410, Size: 0x4]
	Color CustomShadowColorFar;//[Offset: 0x414, Size: 0x4]
	float CustomShadowColorTransition;//[Offset: 0x418, Size: 0x4]
	float SpecularInShadow;//[Offset: 0x41c, Size: 0x4]
	float SpecularMultiplier;//[Offset: 0x420, Size: 0x4]
	float LightSourceAngle;//[Offset: 0x424, Size: 0x4]
	float LightSourceSoftAngle;//[Offset: 0x428, Size: 0x4]
	float TraceDistance;//[Offset: 0x42c, Size: 0x4]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x430, Size: 0x1]
	int AtmosphereSunLightIndex;//[Offset: 0x434, Size: 0x4]
	LinearColor AtmosphereSunDiskColorScale;//[Offset: 0x438, Size: 0x10]
	bool bPerPixelAtmosphereTransmittance;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x448, Size: 0x1]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x44c, Size: 0x10]
	bool bCastModulatedShadows;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x45c, Size: 0x1]
	Color ModulatedShadowColor;//[Offset: 0x460, Size: 0x4]
	ACESParameter[] ACESParameters;//[Offset: 0x468, Size: 0x10]
	float PCFShadowBias;//[Offset: 0x478, Size: 0x4]
	void SetSpecularMultiplier(float NewValue);// 0x4d198fc
	void SetSpecularInShadow(float NewValue);// 0x4d19880
	void SetShadowDistanceFadeoutFraction(float NewValue);// 0x4d19804
	void SetOcclusionMaskDarkness(float NewValue);// 0x4d19788
	void SetMobileCSMShadowFrustumScale(float NewValue);// 0x4d1970c
	void SetLightShaftOverrideDirection(Vector NewValue);// 0x4d19690
	void SetEnableLightShaftOcclusion(bool bNewValue);// 0x4d1960c
	void SetDynamicShadowDistanceStationaryLight(float NewValue);// 0x4d19590
	void SetDynamicShadowDistanceMovableLight(float NewValue);// 0x4d19514
	void SetDynamicShadowCascades(int NewValue);// 0x4d19498
	void SetCustomShadowColorTransition(float NewValue);// 0x4d1941c
	void SetCustomShadowColorFar(LinearColor NewCustomShadowColorFar, bool srgb);// 0x4d1935c
	void SetCustomShadowColor(LinearColor NewCustomShadowColor, bool srgb);// 0x4d1929c
	void SetCascadeTransitionFraction(float NewValue);// 0x4d19220
	void SetCascadeDistributionExponent(float NewValue);// 0x4d191a4
	void SetAtmosphereSunLightIndex(int NewValue);// 0x4d19128
	void SetAtmosphereSunLight(bool bNewValue);// 0x4d190a4
	float GetSpecularMultiplier();// 0x4d19070
	float GetSpecularInShadow();// 0x4d1903c
	float GetCustomShadowColorTransition();// 0x4d19008
	LinearColor GetCustomShadowColorFar();// 0x4d18fd0
	LinearColor GetCustomShadowColor();// 0x4d18f98
<----------Generated by SSpawner v1.0.2---------->


Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x2a0, Size: 0x4]
	float MaxDrawDistance;//[Offset: 0x2a4, Size: 0x4]
	float MaxDistanceFadeRange;//[Offset: 0x2a8, Size: 0x4]
	bool bUseTemperature;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x2ac, Size: 0x1]
	int ShadowMapChannel;//[Offset: 0x2b0, Size: 0x4]
	float MinRoughness;//[Offset: 0x2b8, Size: 0x4]
	float SpecularScale;//[Offset: 0x2bc, Size: 0x4]
	float DistanceAttenuationCoef;//[Offset: 0x2c0, Size: 0x4]
	float DiffuseScale;//[Offset: 0x2c4, Size: 0x4]
	float ShadowResolutionScale;//[Offset: 0x2c8, Size: 0x4]
	float ShadowBias;//[Offset: 0x2cc, Size: 0x4]
	float ShadowSharpen;//[Offset: 0x2d0, Size: 0x4]
	float ContactShadowLength;//[Offset: 0x2d4, Size: 0x4]
	int LightPriority;//[Offset: 0x2d8, Size: 0x4]
	bool ContactShadowLengthInWS;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x2dc, Size: 0x1]
	bool InverseSquaredFalloff;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x2dc, Size: 0x1]
	bool CastTranslucentShadows;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x2dc, Size: 0x1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x2dc, Size: 0x1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x2dc, Size: 0x1]
	bool bForceCachedShadowsForMovablePrimitives;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x2dc, Size: 0x1]
	bool bForceDisableCSMShadowCache;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x2dc, Size: 0x1]
	LightingChannels LightingChannels;//[Offset: 0x2dd, Size: 0x1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x2e0, Size: 0x8]
	Vector LightFunctionScale;//[Offset: 0x2e8, Size: 0xc]
	TextureLightProfile* IESTexture;//[Offset: 0x2f8, Size: 0x8]
	bool bUseIESBrightness;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x300, Size: 0x1]
	float IESBrightnessScale;//[Offset: 0x304, Size: 0x4]
	float LightFunctionFadeDistance;//[Offset: 0x308, Size: 0x4]
	float DisabledBrightness;//[Offset: 0x30c, Size: 0x4]
	bool bEnableLightShaftBloom;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x310, Size: 0x1]
	float BloomScale;//[Offset: 0x314, Size: 0x4]
	float BloomThreshold;//[Offset: 0x318, Size: 0x4]
	Color BloomTint;//[Offset: 0x31c, Size: 0x4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x320, Size: 0x1]
	float RayStartOffsetDepthScale;//[Offset: 0x324, Size: 0x4]
	void SetVolumetricScatteringIntensity(float NewIntensity);// 0x4dfac9c
	void SetTransmission(bool bNewValue);// 0x4dfac18
	void SetTemperature(float NewTemperature);// 0x4dfab9c
	void SetShadowBias(float NewValue);// 0x4dfab20
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x4dfaaa4
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x4dfaa28
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x4dfa9ac
	void SetLightFunctionDisabledBrightness(float NewValue);// 0x4dfa930
	void SetLightColor(LinearColor NewLightColor, bool bSRGB);// 0x4dfa870
	void SetIntensity(float NewIntensity);// 0x4dfa7f4
	void SetIndirectLightingIntensity(float NewIntensity);// 0x4dfa778
	void SetIESTexture(TextureLightProfile* NewValue);// 0x4dfa6fc
	void SetForceDisableCSMShadowCache(bool bNewValue);// 0x4dfa678
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);// 0x4dfa5f4
	void SetEnableLightShaftBloom(bool bNewValue);// 0x4dfa570
	void SetBloomTint(Color NewValue);// 0x4dfa4f8
	void SetBloomThreshold(float NewValue);// 0x4dfa47c
	void SetBloomScale(float NewValue);// 0x4dfa400
	void SetAffectTranslucentLighting(bool bNewValue);// 0x4dfa37c
	void SetAffectDynamicIndirectLighting(bool bNewValue);// 0x4dfa2f8
<----------Generated by SSpawner v1.0.2---------->


Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0, Size: 0x4]
	float ShadowExponent;//[Offset: 0x4, Size: 0x4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ACESParameter
	LinearColor TintColor;//[Offset: 0x0, Size: 0x10]
	float Bright;//[Offset: 0x10, Size: 0x4]
	float Gray;//[Offset: 0x14, Size: 0x4]
	float ShoulderStrength;//[Offset: 0x18, Size: 0x4]
	float ToeStrength;//[Offset: 0x1c, Size: 0x4]
	float LinearStrength;//[Offset: 0x20, Size: 0x4]
	float LinearAngle;//[Offset: 0x24, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: TextureLightProfile.Texture2D.Texture.Object
	float Brightness;//[Offset: 0x104, Size: 0x4]
	float TextureMultiplier;//[Offset: 0x108, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BP_LightManage_C.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x340, Size: 0x8]
	void UserConstructionScript();// 0x35332fc
	void WeatherSelection(FString WeatherID);// 0x35332fc
	void SyncHeightFog();// 0x35332fc
	void SaveWeather(FString WeatherIndex);// 0x35332fc
	void WeatherLogin(FString WeatherID, bool NoError);// 0x35332fc
	void OpenPPV();// 0x35332fc
	void ReWrite();// 0x35332fc
	void OpenWeatherSource();// 0x35332fc
	void BPE_LoadAsset();// 0x35332fc
	void SwitchParticles();// 0x35332fc
	void ReceiveBeginPlay();// 0x35332fc
	void ReceiveTick(float DeltaSeconds);// 0x35332fc
	void WeatherGlobalSwitch(bool Switch);// 0x35332fc
	void SkyLightControl(bool IsOpen);// 0x35332fc
	void WhenLogin();// 0x35332fc
	void EnterAircraft();// 0x35332fc
	void LeaveAircraft();// 0x35332fc
	void Level(FName LevelName, bool isLoad, bool IsVisible);// 0x35332fc
	void ExecuteUbergraph_BP_LightManage(int EntryPoint, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, int Temp_int_Array_Index_Variable, bool CallFunc_IsValid_ReturnValue, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, int Temp_int_Loop_Counter_Variable1, bool Temp_bool_Variable, int CallFunc_Add_IntInt_ReturnValue1, int Temp_int_Loop_Counter_Variable2, int CallFunc_Add_IntInt_ReturnValue2, int Temp_int_Array_Index_Variable1, FString K2Node_Event_WeatherID1, FString K2Node_Event_WeatherIndex, FString K2Node_Event_WeatherID, bool K2Node_Event_NoError, DirectionalLight*[] CallFunc_GetAllActorsOfClass_OutActors, int CallFunc_Array_Length_ReturnValue, SkyLight*[] CallFunc_GetAllActorsOfClass_OutActors1, bool CallFunc_Less_IntInt_ReturnValue, SkyLight* CallFunc_Array_Get_Item, bool CallFunc_ActorHasTag_ReturnValue, int CallFunc_Array_Length_ReturnValue1, int Temp_int_Array_Index_Variable2, bool CallFunc_Less_IntInt_ReturnValue1, DirectionalLight* CallFunc_Array_Get_Item1, bool CallFunc_ActorHasTag_ReturnValue1, bool CallFunc_ActorHasTag_ReturnValue2, Pawn* CallFunc_GetPlayerPawn_ReturnValue, float K2Node_Event_DeltaSeconds, bool CallFunc_IsValid_ReturnValue1, Vector CallFunc_K2_GetActorLocation_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, bool K2Node_Event_Switch, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, bool K2Node_CustomEvent_IsOpen, ExponentialHeightFog*[] CallFunc_GetAllActorsOfClass_OutActors2, ExponentialHeightFog* CallFunc_Array_Get_Item2, int CallFunc_Array_Length_ReturnValue2, bool CallFunc_Less_IntInt_ReturnValue2, bool CallFunc_ActorHasTag_ReturnValue3, float K2Node_Select_Default, FName K2Node_Event_LevelName, bool K2Node_Event_isLoad, bool K2Node_Event_isVisible, Vector CallFunc_MakeVector_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult, bool CallFunc_K2_SetActorLocation_ReturnValue, HitResult CallFunc_K2_SetActorLocation_SweepHitResult1, bool CallFunc_K2_SetActorLocation_ReturnValue1, bool CallFunc_IsValid_ReturnValue2);// 0x35332fc
	SceneComponent* DefaultSceneRoot;//[Offset: 0x348, Size: 0x8]
	ExponentialHeightFog* Fogs;//[Offset: 0x350, Size: 0x8]
	bool isvol;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x358, Size: 0x1]
	DirectionalLight* SunActor;//[Offset: 0x360, Size: 0x8]
	SkyLight* SkyLightActor;//[Offset: 0x368, Size: 0x8]
	float FogDensityPev;//[Offset: 0x370, Size: 0x4]
	float AddFogDensity;//[Offset: 0x374, Size: 0x4]
	BP_XDWeather_C* XdwREF;//[Offset: 0x378, Size: 0x8]
	PostProcessVolume* PostVolume;//[Offset: 0x380, Size: 0x8]
	ExponentialHeightFog* TickFog02;//[Offset: 0x388, Size: 0x8]
	bool InAircraft;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x390, Size: 0x1]
	DirectionalLight* SunActor_CsBuilding;//[Offset: 0x398, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: DirectionalLight.Light.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x340, Size: 0x8]
	bool bEnabled;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1]
	void ToggleEnabled();// 0x4df9854
	void SetLightFunctionScale(Vector NewLightFunctionScale);// 0x4df97d8
	void SetLightFunctionMaterial(MaterialInterface* NewLightFunctionMaterial);// 0x4df975c
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);// 0x4df96e0
	void SetLightColor(LinearColor NewLightColor);// 0x4df9664
	void SetEnabled(bool bSetEnabled);// 0x4df95e0
	void SetCastShadows(bool bNewValue);// 0x4df955c
	void SetBrightness(float NewBrightness);// 0x4df94e0
	void SetAffectTranslucentLighting(bool bNewValue);// 0x4df945c
	void OnRep_bEnabled();// 0x4df9440
	bool IsEnabled();// 0x4df9408
	LinearColor GetLightColor();// 0x4df93d0
	float GetBrightness();// 0x4df939c
<----------Generated by SSpawner v1.0.2---------->


Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x340, Size: 0x8]
	bool bEnabled;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x348, Size: 0x1]
	void OnRep_bEnabled();// 0x4ee0634
<----------Generated by SSpawner v1.0.2---------->


Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x380, Size: 0x570]
	float Priority;//[Offset: 0x8f0, Size: 0x4]
	float BlendRadius;//[Offset: 0x8f4, Size: 0x4]
	float BlendWeight;//[Offset: 0x8f8, Size: 0x4]
	bool bEnabled;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x8fc, Size: 0x1]
	bool bUnbound;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x8fc, Size: 0x1]
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x4e95604
<----------Generated by SSpawner v1.0.2---------->


Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x280, Size: 0x570]
	float Priority;//[Offset: 0x7f0, Size: 0x4]
	float BlendRadius;//[Offset: 0x7f4, Size: 0x4]
	float BlendWeight;//[Offset: 0x7f8, Size: 0x4]
	bool bEnabled;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x7fc, Size: 0x1]
	bool bUnbound;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x7fc, Size: 0x1]
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x4e94ef8
<----------Generated by SSpawner v1.0.2---------->


Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xf0, Size: 0x98]
	bool bIgnoreTimeDilation;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x188, Size: 0x1]
	void Stop();// 0x4f1621c
	void SetVectorCurve(CurveVector* NewVectorCurve, FName VectorTrackName);// 0x4f16168
	void SetTimelineLengthMode(byte NewLengthMode);// 0x4f160ec
	void SetTimelineLength(float NewLength);// 0x4f16070
	void SetPlayRate(float NewRate);// 0x4f15ff4
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);// 0x4f15ee8
	void SetNewTime(float NewTime);// 0x4f15e6c
	void SetLooping(bool bNewLooping);// 0x4f15de8
	void SetLinearColorCurve(CurveLinearColor* NewLinearColorCurve, FName LinearColorTrackName);// 0x4f15d34
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);// 0x4f15cb0
	void SetFloatCurve(CurveFloat* NewFloatCurve, FName FloatTrackName);// 0x4f15bfc
	void ReverseFromEnd();// 0x4f15be8
	void Reverse();// 0x4f15bd4
	void PlayFromStart();// 0x4f15bc0
	void Play();// 0x4f15bac
	void OnRep_Timeline();// 0x4f15b98
	bool IsReversing();// 0x4f15b60
	bool IsPlaying();// 0x4f15b28
	bool IsLooping();// 0x4f15af0
	float GetTimelineLength();// 0x4f15abc
	float GetPlayRate();// 0x4f15a88
	float GetPlaybackPosition();// 0x4f15a54
	bool GetIgnoreTimeDilation();// 0x4f15a1c
<----------Generated by SSpawner v1.0.2---------->


Class: Timeline
	byte LengthMode;//[Offset: 0x0, Size: 0x1]
	bool bLooping;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bReversePlayback;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bPlaying;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	float Length;//[Offset: 0x4, Size: 0x4]
	float PlayRate;//[Offset: 0x8, Size: 0x4]
	float Position;//[Offset: 0xc, Size: 0x4]
	TimelineEventEntry[] Events;//[Offset: 0x10, Size: 0x10]
	TimelineVectorTrack[] InterpVectors;//[Offset: 0x20, Size: 0x10]
	TimelineFloatTrack[] InterpFloats;//[Offset: 0x30, Size: 0x10]
	TimelineLinearColorTrack[] InterpLinearColors;//[Offset: 0x40, Size: 0x10]
	delegate TimelinePostUpdateFunc;//[Offset: 0x50, Size: 0x10]
	delegate TimelineFinishedFunc;//[Offset: 0x60, Size: 0x10]
	Object* PropertySetObject;//[Offset: 0x70, Size: 0x8]
	FName DirectionPropertyName;//[Offset: 0x78, Size: 0x8]
	Property* DirectionProperty;//[Offset: 0x90, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: TimelineEventEntry
	float Time;//[Offset: 0x0, Size: 0x4]
	delegate EventFunc;//[Offset: 0x4, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: TimelineVectorTrack
	CurveVector* VectorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName VectorPropertyName;//[Offset: 0x20, Size: 0x8]
	StructProperty* VectorProperty;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: StructProperty.Property.Field.Object
<----------Generated by SSpawner v1.0.2---------->


Class: TimelineFloatTrack
	CurveFloat* FloatCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName FloatPropertyName;//[Offset: 0x20, Size: 0x8]
	FloatProperty* FloatProperty;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: FloatProperty.NumericProperty.Property.Field.Object
<----------Generated by SSpawner v1.0.2---------->


Class: NumericProperty.Property.Field.Object
<----------Generated by SSpawner v1.0.2---------->


Class: TimelineLinearColorTrack
	CurveLinearColor* LinearColorCurve;//[Offset: 0x0, Size: 0x8]
	delegate InterpFunc;//[Offset: 0x8, Size: 0x10]
	FName TrackName;//[Offset: 0x18, Size: 0x8]
	FName LinearColorPropertyName;//[Offset: 0x20, Size: 0x8]
	StructProperty* LinearColorProperty;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: XDWeatherLightStruct
	float SunIntensity;//[Offset: 0x0, Size: 0x4]
	LinearColor SunLightColor;//[Offset: 0x4, Size: 0x10]
	LinearColor SunShadowColor;//[Offset: 0x14, Size: 0x10]
	LinearColor SunShadowColorFar;//[Offset: 0x24, Size: 0x10]
	float ShadowColorTransition;//[Offset: 0x34, Size: 0x4]
	TextureCube* SkyLitHDR;//[Offset: 0x38, Size: 0x8]
	float SkyLitIntensity;//[Offset: 0x40, Size: 0x4]
	LinearColor SkylitColor;//[Offset: 0x44, Size: 0x10]
	LinearColor LowerHemisphereColor;//[Offset: 0x54, Size: 0x10]
	Texture* SkyTexture;//[Offset: 0x68, Size: 0x8]
	float SkyTextureRotation;//[Offset: 0x70, Size: 0x4]
	LinearColor CBD_GI;//[Offset: 0x74, Size: 0x10]
	LinearColor CBD_Sun;//[Offset: 0x84, Size: 0x10]
	LinearColor CBD_Sky;//[Offset: 0x94, Size: 0x10]
	LinearColor CBD_LF;//[Offset: 0xa4, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: AbstractNavData.NavigationData.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x348, Size: 0x8]
	NavDataConfig NavDataConfig;//[Offset: 0x350, Size: 0x68]
	bool bEnableDrawing;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3b8, Size: 0x1]
	bool bForceRebuildOnLoad;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x3b8, Size: 0x1]
	bool bCanBeMainNavData;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x3b8, Size: 0x1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x3b8, Size: 0x1]
	bool bRebuildAtRuntime;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x3b8, Size: 0x1]
	enum RuntimeGeneration;//[Offset: 0x3b9, Size: 0x1]
	float ObservedPathsTickInterval;//[Offset: 0x3bc, Size: 0x4]
	uint32 DataVersion;//[Offset: 0x3c0, Size: 0x4]
	SupportedAreaData[] SupportedAreas;//[Offset: 0x498, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x30, Size: 0x8]
	Color Color;//[Offset: 0x38, Size: 0x4]
	Vector DefaultQueryExtent;//[Offset: 0x3c, Size: 0xc]
	class Actor* NavigationDataClass;//[Offset: 0x48, Size: 0x8]
	SoftClassPath NavigationDataClassName;//[Offset: 0x50, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: SupportedAreaData
	FString AreaClassName;//[Offset: 0x0, Size: 0x10]
	int AreaID;//[Offset: 0x10, Size: 0x4]
	class Object* AreaClass;//[Offset: 0x18, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: BP_ToaaPlayerController_C.ToaaPlayerController.PlayerController.Controller.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x988, Size: 0x8]
	void GetParbolaFixX(Vector InStartPoint, Vector InTargetPoint, float InSpeedX, out float A, out float B, out float C, out float Time, out float OutSpeedY, float EqB, float EqA, float Speed, float Gravity, float SpeedY, Vector DeltaVector, float TotalTime, float DeltaLength, float DeltaHeight, Vector CallFunc_Subtract_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_VSize_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue1, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Add_FloatFloat_ReturnValue, float K2Node_MathExpression_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue1, float CallFunc_Sqrt_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue5, float K2Node_MathExpression_ReturnValue1);// 0x35332fc
	void GetParbola(Vector InStartPoint, Vector InTargetPoint, float Speed, float InputG, out float A, out float B, out float C, out float Time, out float OutSpeedX, float FlyTime, float SpeedX, float TmpB2, float TmpB1, float gl, float sq, float v2, float G, float EqB, float EqA, float DeltaHeight, float DeltaLength, Vector DeltaVector, Vector TargetPoint, Vector CallFunc_Subtract_VectorVector_ReturnValue, Rotator CallFunc_Conv_VectorToRotator_ReturnValue, float CallFunc_BreakRotator_Roll, float CallFunc_BreakRotator_Pitch, float CallFunc_BreakRotator_Yaw, float K2Node_MathExpression_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Rotator CallFunc_MakeRotator_ReturnValue, Vector CallFunc_GreaterGreater_VectorRotator_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, float CallFunc_DegAtan_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_DegCos_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue1, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Square_ReturnValue, float K2Node_MathExpression_ReturnValue1, float K2Node_MathExpression_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3, float CallFunc_Square_ReturnValue1, float CallFunc_Square_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue4, float CallFunc_MultiplyMultiply_FloatFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue5, float CallFunc_DegTan_ReturnValue, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue, float K2Node_MathExpression_ReturnValue3, float K2Node_MathExpression_ReturnValue4, float CallFunc_Multiply_FloatFloat_ReturnValue6, float CallFunc_Square_ReturnValue3, float K2Node_MathExpression_ReturnValue5, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float K2Node_MathExpression_ReturnValue6, float CallFunc_Square_ReturnValue4, float CallFunc_Multiply_FloatFloat_ReturnValue8, float K2Node_MathExpression_ReturnValue7, bool CallFunc_GreaterEqual_FloatFloat_ReturnValue1, float CallFunc_Sqrt_ReturnValue);// 0x35332fc
	void SetTouchInterfaceEnable(bool Enable);// 0x35332fc
	void CheckPointPath(out Vector[] Points, float Radius, float HalfHeight, out bool Result, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue1, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, Vector CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue1, bool CallFunc_BooleanAND_ReturnValue, const Actor*[] Temp_object_Variable, HitResult CallFunc_CapsuleTraceSingleByProfile_OutHit, bool CallFunc_CapsuleTraceSingleByProfile_ReturnValue);// 0x35332fc
	void DrawPointPath(out Vector[] Points, LinearColor LineColor, int CallFunc_Array_Length_ReturnValue, int CallFunc_Array_Length_ReturnValue1, bool Temp_bool_True_if_break_was_hit_Variable, int Temp_int_Array_Index_Variable, Vector CallFunc_Array_Get_Item, int CallFunc_Add_IntInt_ReturnValue, bool CallFunc_EqualEqual_IntInt_ReturnValue, bool CallFunc_Not_PreBool_ReturnValue, int Temp_int_Loop_Counter_Variable, bool CallFunc_Less_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue1, bool CallFunc_BooleanAND_ReturnValue);// 0x35332fc
	void GetPointPath(Vector Start, Vector End, Vector A, Vector B, Vector C, Vector D, out Vector[] Result1, out Vector[] Result2, Vector[] Result2Path, Vector[] Result1Path, int Mask, Vector[] K2Node_MakeArray_Array, Vector[] K2Node_MakeArray_Array1, Vector[] K2Node_MakeArray_Array2, Vector[] K2Node_MakeArray_Array3, Vector[] K2Node_MakeArray_Array4, Vector[] K2Node_MakeArray_Array5, Vector[] K2Node_MakeArray_Array6, Vector[] K2Node_MakeArray_Array7, Vector[] K2Node_MakeArray_Array8, Vector[] K2Node_MakeArray_Array9, Vector[] K2Node_MakeArray_Array10, Vector[] K2Node_MakeArray_Array11, Vector[] K2Node_MakeArray_Array12, Vector[] K2Node_MakeArray_Array13, Vector[] K2Node_MakeArray_Array14, Vector[] K2Node_MakeArray_Array15, bool K2Node_SwitchInteger_CmpSuccess, Vector[] K2Node_MakeArray_Array16, Vector[] K2Node_MakeArray_Array17, Vector[] K2Node_MakeArray_Array18, Vector[] K2Node_MakeArray_Array19, Vector[] K2Node_MakeArray_Array20, Vector[] K2Node_MakeArray_Array21, Vector[] K2Node_MakeArray_Array22, Vector[] K2Node_MakeArray_Array23, Vector[] K2Node_MakeArray_Array24, bool K2Node_SwitchInteger1_CmpSuccess, int CallFunc_Add_IntInt_ReturnValue, int CallFunc_Add_IntInt_ReturnValue1, int CallFunc_Add_IntInt_ReturnValue2, int CallFunc_Add_IntInt_ReturnValue3, float CallFunc_PointOfLineSide_result, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_PointOfLineSide_result1, bool CallFunc_Less_FloatFloat_ReturnValue, float CallFunc_PointOfLineSide_result2, bool CallFunc_Less_FloatFloat_ReturnValue1, float CallFunc_PointOfLineSide_result3, bool CallFunc_Greater_FloatFloat_ReturnValue1);// 0x35332fc
	void PointOfLineSide(Vector P0, Vector LineP1, Vector LineP2, out float Result, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_BreakVector_X1, float CallFunc_BreakVector_Y1, float CallFunc_BreakVector_Z1, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue1, float CallFunc_Subtract_FloatFloat_ReturnValue1, float CallFunc_Multiply_FloatFloat_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue3, float CallFunc_Add_FloatFloat_ReturnValue, float CallFunc_Add_FloatFloat_ReturnValue1, float CallFunc_Subtract_FloatFloat_ReturnValue2);// 0x35332fc
	void ToWorldBound(Transform LocalToWorldTransform, Vector LocalOrigin, Vector LocalExtent, float Radius, float Z, out Vector Center, out Vector Extent, out Rotator Rotation, out Vector A, out Vector B, out Vector C, out Vector D, float CallFunc_Add_FloatFloat_ReturnValue, Vector CallFunc_TransformLocation_ReturnValue, Vector CallFunc_BreakTransform_Location, Rotator CallFunc_BreakTransform_Rotation, Vector CallFunc_BreakTransform_Scale, Vector CallFunc_Multiply_VectorVector_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_Add_FloatFloat_ReturnValue1, float CallFunc_Add_FloatFloat_ReturnValue2, float CallFunc_Subtract_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue1, Vector CallFunc_MakeVector_ReturnValue, Vector CallFunc_MakeVector_ReturnValue1, Vector CallFunc_Add_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue1, Vector CallFunc_TransformLocation_ReturnValue1, Vector CallFunc_TransformLocation_ReturnValue2, float CallFunc_BreakVector_X1, float CallFunc_BreakVector_Y1, float CallFunc_BreakVector_Z1, float CallFunc_BreakVector_X2, float CallFunc_BreakVector_Y2, float CallFunc_BreakVector_Z2, Vector CallFunc_MakeVector_ReturnValue2, Vector CallFunc_MakeVector_ReturnValue3, Vector CallFunc_MakeVector_ReturnValue4, Vector CallFunc_MakeVector_ReturnValue5, Vector CallFunc_Add_VectorVector_ReturnValue2, Vector CallFunc_Add_VectorVector_ReturnValue3, Vector CallFunc_TransformLocation_ReturnValue3, Vector CallFunc_TransformLocation_ReturnValue4, float CallFunc_BreakVector_X3, float CallFunc_BreakVector_Y3, float CallFunc_BreakVector_Z3, float CallFunc_BreakVector_X4, float CallFunc_BreakVector_Y4, float CallFunc_BreakVector_Z4, Vector CallFunc_MakeVector_ReturnValue6, Vector CallFunc_MakeVector_ReturnValue7);// 0x35332fc
	void MoveToTest(Vector LocalEnd, Vector LocalStart, Vector LocalExtent, Vector LocalOrigin, Transform LocalToWorldTransform, float VaultHeight, const Actor*[] Temp_object_Variable, Vector CallFunc_MakeVector_ReturnValue, float CallFunc_Divide_FloatFloat_ReturnValue, Pawn* CallFunc_K2_GetPawn_ReturnValue, Vector CallFunc_K2_GetActorLocation_ReturnValue, SceneComponent* CallFunc_K2_GetRootComponent_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, CapsuleComponent* K2Node_DynamicCast_AsCapsule_Collision, bool K2Node_DynamicCast_bSuccess, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, float CallFunc_GetScaledCapsuleHalfHeight_ReturnValue, float CallFunc_GetScaledCapsuleRadius_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue, Vector CallFunc_ToWorldBound_Center, Vector CallFunc_ToWorldBound_Extent, Rotator CallFunc_ToWorldBound_Rotation, Vector CallFunc_ToWorldBound_A, Vector CallFunc_ToWorldBound_B, Vector CallFunc_ToWorldBound_C, Vector CallFunc_ToWorldBound_D, Vector[] CallFunc_GetPointPath_Result1, Vector[] CallFunc_GetPointPath_Result2, Vector CallFunc_GetActorForwardVector_ReturnValue, bool CallFunc_CheckPointPath_Result, Vector CallFunc_Normal_ReturnValue, Vector CallFunc_Multiply_VectorFloat_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue1, bool CallFunc_CheckPointPath_Result1, HitResult CallFunc_CapsuleTraceSingleByProfile_OutHit, bool CallFunc_CapsuleTraceSingleByProfile_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, InstancedStaticMeshComponent* K2Node_DynamicCast_AsInstanced_Static_Mesh_Component, bool K2Node_DynamicCast_bSuccess1, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess2, Transform CallFunc_K2_GetComponentToWorld_ReturnValue, BoxSphereBounds CallFunc_GetBounds_ReturnValue, BoxSphereBounds CallFunc_GetImportedBounds_ReturnValue, Transform CallFunc_GetInstanceTransform_OutInstanceTransform, bool CallFunc_GetInstanceTransform_ReturnValue, StaticMeshComponent* K2Node_DynamicCast_AsStatic_Mesh_Component, bool K2Node_DynamicCast_bSuccess3, Transform CallFunc_K2_GetComponentToWorld_ReturnValue1, BoxSphereBounds CallFunc_GetBounds_ReturnValue1);// 0x35332fc
	void UserConstructionScript();// 0x35332fc
	void ExecuteUbergraph_BP_ToaaPlayerController(int EntryPoint);// 0x35332fc
<----------Generated by SSpawner v1.0.2---------->


Class: ToaaPlayerController.PlayerController.Controller.Actor.Object
	delegate OnTakeDamagedDelegate;//[Offset: 0x688, Size: 0x10]
	delegate OnActivateTouchInterface;//[Offset: 0x698, Size: 0x10]
	delegate OnUpdateVirtualJoystick;//[Offset: 0x6a8, Size: 0x10]
	delegate OnTimesOfDayChangeDelegate;//[Offset: 0x6b8, Size: 0x10]
	delegate OnTiggerFastClimbDownArea;//[Offset: 0x6c8, Size: 0x10]
	delegate OnJoystickTouchStartDelegate;//[Offset: 0x708, Size: 0x10]
	delegate OnJoystickTouchMovedDelegate;//[Offset: 0x718, Size: 0x10]
	delegate OnJoystickTouchEndedDelegate;//[Offset: 0x728, Size: 0x10]
	delegate OnUpdateMusicPeekValue;//[Offset: 0x738, Size: 0x10]
	byte CameraMode;//[Offset: 0x778, Size: 0x1]
	byte CameraExtraMode;//[Offset: 0x779, Size: 0x1]
	float AimPitchFactor;//[Offset: 0x77c, Size: 0x4]
	float AimYawFactor;//[Offset: 0x780, Size: 0x4]
	float AutoAimFactor;//[Offset: 0x784, Size: 0x4]
	float NoRespondArea;//[Offset: 0x788, Size: 0x4]
	float JoystickSprintDistanceThreshold;//[Offset: 0x78c, Size: 0x4]
	float JoystickSprintAngleThreshold;//[Offset: 0x790, Size: 0x4]
	float JoystickShowAutoSprintDistanceThreshold;//[Offset: 0x794, Size: 0x4]
	float JoystickShowAutoSprintAngleThreshold;//[Offset: 0x798, Size: 0x4]
	float JoystickSprintBtnHeight;//[Offset: 0x79c, Size: 0x4]
	float JoystickSprintBtnSize;//[Offset: 0x7a0, Size: 0x4]
	float JoystickFastClimbDownDis;//[Offset: 0x7a4, Size: 0x4]
	float JoystickFastClimbDownAngle;//[Offset: 0x7a8, Size: 0x4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveDis;//[Offset: 0x7b0, Size: 0x8]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveSpeed;//[Offset: 0x7b8, Size: 0x8]
	float MaxCacheTouchDeltaCount;//[Offset: 0x7c0, Size: 0x4]
	float AngleSmoothSpeed;//[Offset: 0x7c4, Size: 0x4]
	float MaxRotationPitch;//[Offset: 0x7c8, Size: 0x4]
	float MaxRotationYaw;//[Offset: 0x7cc, Size: 0x4]
	float FilterSmallTouchDeltaThreshold;//[Offset: 0x7d0, Size: 0x4]
	int UseMotionControlType;//[Offset: 0x7d4, Size: 0x4]
	SensibilityConfig SensibilityConfig;//[Offset: 0x7d8, Size: 0x6c]
	SensibilityConfig SensibilityConfig_PC;//[Offset: 0x844, Size: 0x6c]
	bool bDebugCameraAutoRotation;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x8b0, Size: 0x1]
	bool SetControllerRotationByActor;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x980, Size: 0x1]
	void StartListenMusicPeek();// 0x3118884
	void SetVirtualJoystickVisualSize(out const Vector2D VisualSize);// 0x31187fc
	void SetVirtualJoystickThumbSize(out const Vector2D ThumbSize);// 0x3118774
	void SetVirtualJoystickInteractionSize(out const Vector2D InteractionSize);// 0x31186ec
	void SetVirtualJoystickEnableAllLeftTouch(bool bEnable);// 0x3118668
	void SetVirtualJoystickCenter(out const Vector2D Center);// 0x31185e0
	void SetControlRotationYaw(float NewYaw);// 0x3118564
	void SetControlRotationPitch(float NewPitch);// 0x31184e8
	void SetAspectRatioAxisConstraint(out const FName InReason, int InPriority, byte InAspectRatioAxisConstraint);// 0x31183d4
	void ResetAspectRatioAxisConstraint(out const FName InReason, bool InImmeDo);// 0x31182f4
	void OnUpdateVirtualJoystick__DelegateSignature(float CurThumbCenterDis, bool bIsTriggerSprint, bool bIsTriggerAutoSprintTips, bool bIsInTriggerRange);// 0x35332fc
	void OnUpdateMusicPeekValue__DelegateSignature(float Peek);// 0x35332fc
	void OnTimesOfDayChangeDelegate__DelegateSignature(int TimesOfDay);// 0x35332fc
	void OnTimesOfDayChange(int TimesOfDay);// 0x3118278
	void OnTiggerFastClimbDownArea__DelegateSignature(bool bTriggerIn);// 0x35332fc
	void OnTakeDamaged__DelegateSignature(float DamageAngel);// 0x35332fc
	void OnSwitchCameraModeStartDelegate__DelegateSignature(enum CameraMode);// 0x35332fc
	void OnSwitchCameraModeEndDelegate__DelegateSignature(enum CameraMode);// 0x35332fc
	void OnJoystickTouchStartDelegate__DelegateSignature();// 0x35332fc
	void OnJoystickTouchMovedDelegate__DelegateSignature();// 0x35332fc
	void OnJoystickTouchEndedDelegate__DelegateSignature();// 0x35332fc
	void OnActivateTouchInterface__DelegateSignature();// 0x35332fc
	bool IsTouching();// 0x3118240
	void ImportVirtualJoystickSettings(out const ToaaVirtualJoystickSettings Settings);// 0x311819c
	Vector2D GetVirtualJoystickVisualSize();// 0x3118168
	Vector2D GetVirtualJoystickVisualCenter();// 0x3118134
	bool GetVirtualJoystickVisibility();// 0x31180fc
	float GetVirtualJoystickSinAngle();// 0x31180c8
	Vector2D GetVirtualJoyStickRawDirect();// 0x3118094
	Vector2D GetVirtualJoystickInteractionSize();// 0x3118060
	Vector2D GetVirtualJoystickCenter();// 0x311802c
	bool GetUseMotionControlEnable();// 0x3117ff4
	Rotator GetSensibilityRate_PC();// 0x3117fbc
	Rotator GetSensibilityRate(bool bIsMotionControl);// 0x3117f2c
	void FireTakeDamagedEvent(out const Vector CauserLocation);// 0x3117ea4
	ToaaVirtualJoystickSettings ExportVirtualJoystickSettings();// 0x3117e44
	void EndListenMusicPeek();// 0x3117e30
	void AddHitDamage(float Damage, bool IsHeadShot);// 0x3117d70
<----------Generated by SSpawner v1.0.2---------->


Class: SensibilityConfig
	SensibilityMode NormalMode;//[Offset: 0x0, Size: 0x20]
	SensibilityMode FireMode;//[Offset: 0x20, Size: 0x20]
	SensibilityMode MotionMode;//[Offset: 0x40, Size: 0x20]
	float VehicleEye;//[Offset: 0x60, Size: 0x4]
	float ParachuteEye;//[Offset: 0x64, Size: 0x4]
	float FPPEye;//[Offset: 0x68, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SensibilityMode
	float NoAim;//[Offset: 0x0, Size: 0x4]
	float Sight1X;//[Offset: 0x4, Size: 0x4]
	float Sight2X;//[Offset: 0x8, Size: 0x4]
	float Sight3X;//[Offset: 0xc, Size: 0x4]
	float Sight4X;//[Offset: 0x10, Size: 0x4]
	float Sight6X;//[Offset: 0x14, Size: 0x4]
	float Sight8X;//[Offset: 0x18, Size: 0x4]
	float FPPNoAim;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ToaaVirtualJoystickSettings
<----------Generated by SSpawner v1.0.2---------->


Class: BP_ToaaPlayerCameraManager_C.ToaaPlayerCameraManager.PlayerCameraManager.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: ToaaPlayerCameraManager.PlayerCameraManager.Actor.Object
	delegate OnBecomeViewTarget;//[Offset: 0x29f8, Size: 0x10]
	delegate OnEndViewTarget;//[Offset: 0x2a08, Size: 0x10]
	PGWaterVirtualViewComponent* PGWaterVirtualViewComponent;//[Offset: 0x2a48, Size: 0x8]
	void ToggleCameraShakes();// 0x311300c
	void ToaaPlayWorldCameraShakeByPath(FString ShakePath, out const Vector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter, float ScopeScale);// 0x3112df4
	void ToaaPlayWorldCameraShake(class CameraShake Shake, out const Vector Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter, float ScopeScale);// 0x3112bec
	void PrintAllCameraShakes();// 0x3112bd8
	PGWaterVirtualViewComponent* GetPGWaterVC();// 0x3112ba4
	float GetFOV();// 0x3112b70
	void EnableCameraShakes();// 0x3112b5c
	void DisableCameraShakes(bool bImmediate);// 0x3112ad8
<----------Generated by SSpawner v1.0.2---------->


Class: PGWaterVirtualViewComponent.SceneComponent.ActorComponent.Object
	float minHeight;//[Offset: 0x278, Size: 0x4]
	float MaxPitch;//[Offset: 0x27c, Size: 0x4]
	float MinPitch;//[Offset: 0x280, Size: 0x4]
	float BackOffset;//[Offset: 0x284, Size: 0x4]
	float ExtraFOV;//[Offset: 0x288, Size: 0x4]
	float SpecialExtraFOV;//[Offset: 0x28c, Size: 0x4]
	float FOVThreshold;//[Offset: 0x290, Size: 0x4]
	float MinFOV;//[Offset: 0x294, Size: 0x4]
	float DefaultFOV;//[Offset: 0x298, Size: 0x4]
	float SpecialFOVThreshold;//[Offset: 0x29c, Size: 0x4]
	float SpecialMinFOV;//[Offset: 0x2a0, Size: 0x4]
	float DefaultDesiredFOV;//[Offset: 0x2a4, Size: 0x4]
	void SetUseDefaultFOV(FString InReason);// 0x309b7e8
	void RemoveUseDefaultFOV(FString InReason);// 0x309b708
<----------Generated by SSpawner v1.0.2---------->


Class: BP_ToaaHUD_C.ToaaHUD.HUD.Actor.Object
	SceneComponent* DefaultSceneRoot;//[Offset: 0x4c8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ToaaHUD.HUD.Actor.Object
	HitPerformData HitPerform;//[Offset: 0x430, Size: 0x80]
	Texture2D* HUDMainTexture;//[Offset: 0x4b0, Size: 0x8]
	Texture2D* CrossHairDisableTexture;//[Offset: 0x4b8, Size: 0x8]
	Texture2D* SprintCrossHairTexture;//[Offset: 0x4c0, Size: 0x8]
	void SetCurrentDebugTargetActor(Actor* Target);// 0x310b838
	void DebugDrawBoxSvrLoc(float InSvrLocX, float InSvrLocY, float InSvrLocZ, float InDuration, float InSizeScale);// 0x310b6d4
<----------Generated by SSpawner v1.0.2---------->


Class: HitPerformData
	WeaponCrossHairIconData[] HitBodyIconList;//[Offset: 0x0, Size: 0x10]
	WeaponCrossHairIconData[] HitHeadIconList;//[Offset: 0x10, Size: 0x10]
	float DefaultSpread;//[Offset: 0x20, Size: 0x4]
	float DefaultOffset;//[Offset: 0x24, Size: 0x4]
	float DefaultAlpha;//[Offset: 0x28, Size: 0x4]
	float MaxSpread;//[Offset: 0x2c, Size: 0x4]
	float AddSpreadScale;//[Offset: 0x30, Size: 0x4]
	float SpreadIncreaseSpeed;//[Offset: 0x34, Size: 0x4]
	float AlphaIncreaseSpeed;//[Offset: 0x38, Size: 0x4]
	float AlphaIncreaseSpeedScale;//[Offset: 0x3c, Size: 0x4]
	float SpreadDecreaseSpeed;//[Offset: 0x40, Size: 0x4]
	float AlphaDecreaseSpeed;//[Offset: 0x44, Size: 0x4]
	float AlphaDecreaseSpeedScale;//[Offset: 0x48, Size: 0x4]
	LinearColor HitBodyDrawColor;//[Offset: 0x4c, Size: 0x10]
	LinearColor HitHeadDrawColor;//[Offset: 0x5c, Size: 0x10]
	float CurCrosshairSpread;//[Offset: 0x6c, Size: 0x4]
	float CurDrawAlpha;//[Offset: 0x70, Size: 0x4]
	float TargetCrosshairSpread;//[Offset: 0x74, Size: 0x4]
	bool IsHeadShot;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x78, Size: 0x1]
	bool IsIncrease;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x79, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponCrossHairIconData
	CanvasIcon2D icon;//[Offset: 0x0, Size: 0x18]
	float Alpha;//[Offset: 0x18, Size: 0x4]
	float Rotate;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CanvasIcon2D
	Texture2D* Texture;//[Offset: 0x0, Size: 0x8]
	float U;//[Offset: 0x8, Size: 0x4]
	float V;//[Offset: 0xc, Size: 0x4]
	float UL;//[Offset: 0x10, Size: 0x4]
	float VL;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: IdeaDecalManager.Actor.Object
	<DecalBlock,MaterialInstanceDynamic*> DecalMaterialsLookupTable;//[Offset: 0x340, Size: 0x50]
	IdeaDecalRenderComponent*[] DecalComponents;//[Offset: 0x390, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: DecalBlock
	MaterialInterface* DecalMaterial;//[Offset: 0x0, Size: 0x8]
	Texture* DecalTexure;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: IdeaDecalRenderComponent.RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerCharacter_C.LeadingPlayerCharacter.PlayerCharacter.BaseCharacter.Character.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x15a0, Size: 0x8]
	void UpdateWeatherPostFx(Object* Material, bool CallFunc_IsValid_ReturnValue, WeightedBlendable K2Node_MakeStruct_WeightedBlendable);// 0x35332fc
	void __Test2(float CallFunc_GetImmersionDepth_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue);// 0x35332fc
	void __TestGetImmersionDepth(float InMaxDistance, out float OutImmersionDepth, out float OutDistanceUnderFeet, byte NewLocalVar, float RetDistanceUnderFeet, float RetImmersionDepth, const Actor*[] Temp_object_Variable, Vector CallFunc_MakeVector_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue, FString CallFunc_Conv_FloatToString_ReturnValue1, float CallFunc_GetCapsuleHalfHeight_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue, float CallFunc_Multiply_FloatFloat_ReturnValue, FString CallFunc_Concat_StrStr_ReturnValue1, const byte[] K2Node_MakeArray_Array, FString CallFunc_Concat_StrStr_ReturnValue2, float CallFunc_GetCapsuleHalfHeight_ReturnValue1, Vector CallFunc_K2_GetActorLocation_ReturnValue, Vector CallFunc_MakeVector_ReturnValue1, Vector CallFunc_Subtract_VectorVector_ReturnValue, Vector CallFunc_Add_VectorVector_ReturnValue, HitResult CallFunc_LineTraceSingleForObjects_OutHit, bool CallFunc_LineTraceSingleForObjects_ReturnValue, bool CallFunc_BreakHitResult_bBlockingHit, bool CallFunc_BreakHitResult_bInitialOverlap, float CallFunc_BreakHitResult_Time, float CallFunc_BreakHitResult_Distance, Vector CallFunc_BreakHitResult_Location, Vector CallFunc_BreakHitResult_ImpactPoint, Vector CallFunc_BreakHitResult_Normal, Vector CallFunc_BreakHitResult_ImpactNormal, PhysicalMaterial* CallFunc_BreakHitResult_PhysMat, Actor* CallFunc_BreakHitResult_HitActor, PrimitiveComponent* CallFunc_BreakHitResult_HitComponent, FName CallFunc_BreakHitResult_HitBoneName, int CallFunc_BreakHitResult_HitItem, int CallFunc_BreakHitResult_FaceIndex, Vector CallFunc_BreakHitResult_TraceStart, Vector CallFunc_BreakHitResult_TraceEnd, FString CallFunc_Conv_FloatToString_ReturnValue2, float CallFunc_Multiply_FloatFloat_ReturnValue1, float CallFunc_Subtract_FloatFloat_ReturnValue, bool CallFunc_Greater_FloatFloat_ReturnValue, float CallFunc_Subtract_FloatFloat_ReturnValue1);// 0x35332fc
	void UpdateWaterDropPostFx(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, WeightedBlendable K2Node_MakeStruct_WeightedBlendable);// 0x35332fc
	WidgetComponent* GetBackUIComponent();// 0x35332fc
	DirectionalLightComponent* GetDirLightComponent();// 0x35332fc
	WidgetComponent* GetLeftUIComponent();// 0x35332fc
	WidgetComponent* GetRightUIComponent();// 0x35332fc
	SceneCaptureComponent2D* GetSceneCapture2D();// 0x35332fc
	SpringArmComponent* GetCameraBoom();// 0x35332fc
	CameraComponent* GetFollowCamera();// 0x35332fc
	CameraComponent* GetFirstPersonCamera();// 0x35332fc
	SpringArmComponent* GetFirstPersonSpringArm();// 0x35332fc
	CameraComponent* GetScopeCamera();// 0x35332fc
	SpringArmComponent* GetScopeSpringArm();// 0x35332fc
	AkAudioEvent* GetSwitchWeaponSound(byte WeaponType, bool IsEquip, bool K2Node_SwitchEnum_CmpSuccess, bool K2Node_SwitchEnum1_CmpSuccess);// 0x35332fc
	void CreateTestWeapon();// 0x35332fc
	void UserConstructionScript();// 0x35332fc
	void Timeline_0__FinishedFunc();// 0x35332fc
	void Timeline_0__UpdateFunc();// 0x35332fc
	void ScopeTimeLine__FinishedFunc();// 0x35332fc
	void ScopeTimeLine__UpdateFunc();// 0x35332fc
	void TANodeTick(float Delta);// 0x35332fc
	void TABeginPlay();// 0x35332fc
	void ResetTimeline();// 0x35332fc
	void ScopeInStop();// 0x35332fc
	void PlayScopeInTimeLine(float Rate);// 0x35332fc
	void OnUpdateAcceleration();// 0x35332fc
	void ProgrammerBeginPlay();// 0x35332fc
	void ReceiveTick(float DeltaSeconds);// 0x35332fc
	void ReceiveBeginPlay();// 0x35332fc
	void ExecuteUbergraph_PlayerCharacter(int EntryPoint, float CallFunc_RandomFloatInRange_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue, int CallFunc_FTrunc_ReturnValue, float CallFunc_Conv_IntToFloat_ReturnValue, FName CallFunc_MakeLiteralName_ReturnValue1, float K2Node_CustomEvent_Delta, float CallFunc_GetRMS_ReturnValue, float CallFunc_fn_MusicParaNormalize__maxRecordedVol_Out, float CallFunc_fn_MusicParaNormalize_NormalizedVolume, float K2Node_Event_rate, float K2Node_Event_DeltaSeconds);// 0x35332fc
	OptimizeViewRotationComponent* OptimizeViewRotation;//[Offset: 0x15a8, Size: 0x8]
	CameraComponent* SelfieCamera;//[Offset: 0x15b0, Size: 0x8]
	AutoFireCrossHairCtrlComp* AutoFireCrossHairCtrlComp1;//[Offset: 0x15b8, Size: 0x8]
	BP_AvatarAudioComponent_C* AvatarAudioComponent;//[Offset: 0x15c0, Size: 0x8]
	WeaponCollisionComponent* WeaponCollision;//[Offset: 0x15c8, Size: 0x8]
	CameraComponent* ScopingCamera;//[Offset: 0x15d0, Size: 0x8]
	CameraComponent* FPPCamera;//[Offset: 0x15d8, Size: 0x8]
	BaseCustomSpringArmComponent* ScopingSpringArm;//[Offset: 0x15e0, Size: 0x8]
	BaseCustomSpringArmComponent* FPPCustomSpringArm;//[Offset: 0x15e8, Size: 0x8]
	PostProcessComponent* PostProcessWeather;//[Offset: 0x15f0, Size: 0x8]
	BlockingVolumeCheckComponent* BlockingVolumeCheck;//[Offset: 0x15f8, Size: 0x8]
	PostProcessComponent* PostProcessWaterDrop;//[Offset: 0x1600, Size: 0x8]
	XCameraUnderWaterFXComponent* XCameraUnderWaterFX;//[Offset: 0x1608, Size: 0x8]
	CameraComponent* TPPCamera;//[Offset: 0x1610, Size: 0x8]
	CustomSpringArmComponent* TPPSpringArm;//[Offset: 0x1618, Size: 0x8]
	SceneCaptureComponent2D* SceneCapture2D;//[Offset: 0x1620, Size: 0x8]
	DirectionalLightComponent* dirLightComponent;//[Offset: 0x1628, Size: 0x8]
	AutoAimComponent* AutoAim;//[Offset: 0x1630, Size: 0x8]
	Vault_C* Vault;//[Offset: 0x1638, Size: 0x8]
	UAECharacterAnimListComponent* CharacterAnimList_Skill;//[Offset: 0x1640, Size: 0x8]
	BaseFPPComponent* BaseFPP;//[Offset: 0x1648, Size: 0x8]
	UAECharacterAnimListComponent* CharacterAnimList_Base;//[Offset: 0x1650, Size: 0x8]
	WeaponManager* WeaponManager;//[Offset: 0x1658, Size: 0x8]
	byte Timeline_0__Direction_931661B6440BBC0B71358785F5EF75E8;//[Offset: 0x1660, Size: 0x1]
	TimelineComponent* Timeline;//[Offset: 0x1668, Size: 0x8]
	float ScopeTimeLine_NewTrack_0_FCEF32E14C8B6BF08BDE618D09DB48E7;//[Offset: 0x1670, Size: 0x4]
	byte ScopeTimeLine__Direction_FCEF32E14C8B6BF08BDE618D09DB48E7;//[Offset: 0x1674, Size: 0x1]
	TimelineComponent* ScopeTimeLine;//[Offset: 0x1678, Size: 0x8]
	GSTWeaponBase* GunTest;//[Offset: 0x1680, Size: 0x8]
	float RunningAcceleration;//[Offset: 0x1688, Size: 0x4]
	float RunningDeceleration;//[Offset: 0x168c, Size: 0x4]
	float RunningGroundFriction;//[Offset: 0x1690, Size: 0x4]
	bool IsMoving;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1694, Size: 0x1]
	Rotator LastVelocityRotation;//[Offset: 0x1698, Size: 0xc]
	Rotator LastMovementInputRotation;//[Offset: 0x16a4, Size: 0xc]
	bool HasMovementInput;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x16b0, Size: 0x1]
	Vector MovementInput;//[Offset: 0x16b4, Size: 0xc]
	float MovementInput/VelocityDifference;//[Offset: 0x16c0, Size: 0x4]
	bool bLeftFoot;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x16c4, Size: 0x1]
	float BarrelTemperatureTempVar;//[Offset: 0x16c8, Size: 0x4]
	float BarrelTemperatureVar;//[Offset: 0x16cc, Size: 0x4]
	AkAudioBank*[] CharacterBankRefList;//[Offset: 0x16d0, Size: 0x10]
	float MaxRecordedVolOut;//[Offset: 0x16e0, Size: 0x4]
	float NormalizedVolume;//[Offset: 0x16e4, Size: 0x4]
	float MaxValue;//[Offset: 0x16e8, Size: 0x4]
	float ClothParaExp;//[Offset: 0x16ec, Size: 0x4]
	bool NeedGetRMS;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x16f0, Size: 0x1]
	float TempRandom;//[Offset: 0x16f4, Size: 0x4]
	float SnowRenderCheckerTimer;//[Offset: 0x16f8, Size: 0x4]
	Actor*[] AllSnowRender;//[Offset: 0x1700, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: LeadingPlayerCharacter.PlayerCharacter.BaseCharacter.Character.Pawn.Actor.Object
	SkeletalMeshComponent* UIMeshComponent;//[Offset: 0x1380, Size: 0x8]
	StaticMeshComponent* UISTMeshComponent;//[Offset: 0x1388, Size: 0x8]
	bool bIsGunADS;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1390, Size: 0x1]
	delegate OnEquipZoomScope;//[Offset: 0x1398, Size: 0x10]
	BaseFPPComponent* FPPComp;//[Offset: 0x13b0, Size: 0x8]
	PlayerGunCollosionComp* PlayerGunCollosionComp;//[Offset: 0x13b8, Size: 0x8]
	float LeavePronePowerStorageBlockTime;//[Offset: 0x13c0, Size: 0x4]
	float ScopeInAndHandFoldPitchMax;//[Offset: 0x13c4, Size: 0x4]
	float ScopeInAndHandFoldPitchMin;//[Offset: 0x13c8, Size: 0x4]
	class NavigationQueryFilter* FilterClass;//[Offset: 0x13d0, Size: 0x8]
	AutoAimComponent* AutoAimComponent;//[Offset: 0x13d8, Size: 0x8]
	OptimizeViewRotationComponent* OptimizeViewRotationComponent;//[Offset: 0x13e0, Size: 0x8]
	bool bIsUseArtCamera;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x1400, Size: 0x1]
	bool bIsUseCodeCamera;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x1400, Size: 0x1]
	ToaaPredictProjectilePathActor* PredictProjectilePathActor;//[Offset: 0x1408, Size: 0x8]
	Actor* NightLightActor;//[Offset: 0x1410, Size: 0x8]
	SceneCapture2D* SceneCaptureActor;//[Offset: 0x1418, Size: 0x8]
	CustomSpringArmComponent* TPPSpringArmComponent;//[Offset: 0x1590, Size: 0x8]
	AutoFireCrossHairCtrlComp* AutoFireCrossHairCtrlComp;//[Offset: 0x1598, Size: 0x8]
	void UpdateCameraControlType(bool InUseArtCamera, bool InUseCodeCamera);// 0x3051f34
	void ShoulderScoping();// 0x3051f20
	void ShoulderScopeOut();// 0x3051f0c
	void ShoulderScopeIn();// 0x3051ef8
	void SetUISeneCapture2DBP(bool bValue, FString path);// 0x3051dd4
	void SetTreeMineCapsule(Vector DeltaVector, Vector RamdomDeltaVector, float CapsuleRadius, float CapsuleRandomRadius, float CapsuleHeight, bool bCapsuleDebug, bool bRandomCapsuleDebug);// 0x3051bd4
	void SetTextureTarget(bool bValue);// 0x3051b50
	void SetSeneCapture2DSize(uint32 X, int Y);// 0x3051a9c
	bool SetPeekState(bool Enable, bool IsLeft);// 0x30519c0
	void SetMoveEnable(FName Reason, int InPriority, enum InValue);// 0x30518cc
	void SetIsFreeCamera(bool Enabled);// 0x3051848
	void SetHeadWithViewPortRotationEnable(FName Reason, int InPriority, bool InValue);// 0x3051750
	void SetCurrentControllableID(const uint64 InID);// 0x30516d8
	void SetCaptureRenderTarget2D(TextureRenderTarget2D* InCaptureRenderTarget2D);// 0x305165c
	void Scoping(byte NewType);// 0x30515e0
	void ScopeOut(byte NewType);// 0x3051564
	void ScopeInterrupt(byte NewType);// 0x30514e8
	void ScopeInStop();// 0x35332fc
	void ScopeIn(byte NewType);// 0x305146c
	void ResizeCaptureRenderTarget2D(int InSizeX, int InSizeY);// 0x30513b8
	void ResetMoveEnable(FName Reason);// 0x305133c
	void ResetHeadWithViewPortRotationEnable(FName Reason);// 0x30512c0
	void RemoveBuilderTrigger(BuilderCylinderTriggerComponent* TriggerComp);// 0x3051244
	void ReleaseCaptureRenderTarget2D();// 0x3051230
	void RefreshRandomSeed();// 0x305121c
	void RecycleSceneCaptureActor();// 0x3051208
	void RecycleNightLightActor();// 0x30511f4
	void PlayScopeInTimeLine(float Rate);// 0x35332fc
	void PhotographScopeOut();// 0x30511e0
	void PhotographScopeIn();// 0x30511cc
	void OnUpdateAcceleration();// 0x35332fc
	void MarkRenderTargetValid(bool InIsRenderTargetValid);// 0x3051148
	void MarkRenderTargetChanged(bool InIsRenderTargetChanged);// 0x30510c4
	SkeletalMeshComponent* MakeUIMeshComponent(FName sname);// 0x3051040
	StaticMeshComponent* MakeSTUIMeshComponent(FName Name);// 0x3050fbc
	SceneCapture2D* LoadSceneCaptureActor(FString SceneCaptureActorClassPath);// 0x3050f20
	Actor* LoadNightLightActor(FString NightLightActorClassPath, out const Vector Postion, out const Rotator Rotation);// 0x3050df0
	void JumpByParam(float ForwardVelocityZ, float StandVelocityZ, float FallUpGScale, float FallDownGScale);// 0x3050cc8
	bool IsRenderTargetValid();// 0x3050c90
	bool IsRenderTargetChanged();// 0x3050c70
	bool IsEnbaleMove();// 0x3050c38
	void InitTreeMineConfig();// 0x3050c24
	bool InFrontOfSelf(Vector pVec);// 0x3050b94
	StaticMeshComponent* GetUISTMeshComponent();// 0x3050b78
	SkeletalMeshComponent* GetUIMeshComponent();// 0x3050b5c
	StaticMesh* GetSTUIMesh(FString path);// 0x3050a74
	SkeletalMesh* GetSKUIMesh(FString path);// 0x305098c
	SpringArmComponent* GetScopeSpringArm();// 0x35332fc
	CameraComponent* GetScopeCamera();// 0x35332fc
	SceneCaptureComponent2D* GetSceneCaptureComponent();// 0x3050958
	SceneCapture2D* GetSceneCaptureActor();// 0x3050924
	SceneCaptureComponent2D* GetSceneCapture2D();// 0x35332fc
	WidgetComponent* GetRightUIComponent();// 0x35332fc
	ToaaPredictProjectilePathActor* GetPredictProjectileActor();// 0x30508f0
	Actor* GetNightLightActor();// 0x30508bc
	WidgetComponent* GetLeftUIComponent();// 0x35332fc
	BaseFPPComponent* GetFPPComp();// 0x3050888
	CameraComponent* GetFollowCamera();// 0x35332fc
	SpringArmComponent* GetFirstPersonSpringArm();// 0x35332fc
	CameraComponent* GetFirstPersonCamera();// 0x35332fc
	DirectionalLightComponent* GetDirLightComponent();// 0x35332fc
	CustomSpringArmComponent* GetCustomSpringArm();// 0x30507e8
	uint64 GetCurrentControllableID();// 0x30507cc
	uint64 GetCloestClimbBuilderServerID(enum ClimbTriggerType);// 0x3050748
	TextureRenderTarget2D* GetCaptureRenderTarget2D();// 0x3050714
	SpringArmComponent* GetCameraBoom();// 0x35332fc
	WidgetComponent* GetBackUIComponent();// 0x35332fc
	AutoFireCrossHairCtrlComp* GetAutoFireCrossHairCtrlComp();// 0x30506e0
	uint64 GetAimedTreeMineServerID();// 0x30506ac
	Vector GetAimedTreeMineRandomPosition();// 0x3050674
	Vector GetAimedTreeMinePosition();// 0x305063c
	float GetAimedTreeMinDistance();// 0x3050608
	bool ExitPeek();// 0x30505d0
	void ExitFastClimbMode();// 0x30505bc
	bool EnterPeek(bool IsLeft);// 0x305052c
	void EnterFastClimbMode();// 0x3050518
	bool EnableFastClimbDown();// 0x30504e0
	void DoSetDirectionalLightToPlayer(GSTWeaponBase* weapon, bool bValue);// 0x3050420
	void DetachPredictProjectileActor();// 0x305040c
	void DebugMoveEnable();// 0x30503f8
	FString DebugHeadWithViewPortRotationEnable();// 0x3050374
	bool CanImmediatetShoot();// 0x305033c
	void AttachPredictProjectileActor();// 0x3050328
	void AddBuilderTrigger(BuilderCylinderTriggerComponent* TriggerComp);// 0x30502ac
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerCharacter.BaseCharacter.Character.Pawn.Actor.Object
	AkAudioEvent* SwitchFireModeSound;//[Offset: 0xe30, Size: 0x8]
	AkAudioEvent* SwitchSightSound;//[Offset: 0xe38, Size: 0x8]
	float PeekCheckAdditionalLen;//[Offset: 0xe40, Size: 0x4]
	bool IsDrawPeekCheckCollisionDebug;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xe44, Size: 0x1]
	float PeekCheckCollisionTimer;//[Offset: 0xe48, Size: 0x4]
	float PeekCheckCollisionTimerFPP;//[Offset: 0xe4c, Size: 0x4]
	float AutoScopeDelayTimeWhenPeek;//[Offset: 0xe54, Size: 0x4]
	int IsEnableReportPlayerBehavior;//[Offset: 0xe58, Size: 0x4]
	delegate OnCharacterStateChange;//[Offset: 0xe68, Size: 0x10]
	delegate OnCharacterRealMoveChange;//[Offset: 0xe78, Size: 0x10]
	delegate OnPlayerHandFoldedChanged;//[Offset: 0xe88, Size: 0x10]
	delegate OnCharacterJump;//[Offset: 0xe98, Size: 0x10]
	delegate OnScopeInEndDelegate;//[Offset: 0xea8, Size: 0x10]
	delegate OnScopeOutEndDelegate;//[Offset: 0xeb8, Size: 0x10]
	delegate OnCharacterMouseDown;//[Offset: 0xec8, Size: 0x10]
	delegate OnLadderEffectVisibilityChange;//[Offset: 0xed8, Size: 0x10]
	delegate OnBecomeViewTarget;//[Offset: 0xee8, Size: 0x10]
	delegate OnEndViewTarget;//[Offset: 0xef8, Size: 0x10]
	delegate OnEntityControlledBySelfBecomeViewTarget;//[Offset: 0xf08, Size: 0x10]
	delegate OnEntityControlledBySelfEndViewTarget;//[Offset: 0xf18, Size: 0x10]
	delegate OnPlayerTriggeredByInteractiveObj;//[Offset: 0xf28, Size: 0x10]
	BaseUXActionComponent*[] UXActionComponentList;//[Offset: 0xf38, Size: 0x10]
	uint64 mCurrInteractiveEntityID;//[Offset: 0xf48, Size: 0x8]
	enum DefaultHoldGunState;//[Offset: 0xf50, Size: 0x1]
	<byte,float> HoldGunBackToIdleTimeMap;//[Offset: 0xf58, Size: 0x50]
	float BlockScopeTimeHeavyLanding;//[Offset: 0xfa8, Size: 0x4]
	float BlockScopeTimeForwardLanding;//[Offset: 0xfac, Size: 0x4]
	float BlockScopeTimeStandLanding;//[Offset: 0xfb0, Size: 0x4]
	float BlockScopeTimeHorziLanding;//[Offset: 0xfb4, Size: 0x4]
	float SprintRotateSpeed;//[Offset: 0xfb8, Size: 0x4]
	float CheckProneCoolDownTime;//[Offset: 0xfbc, Size: 0x4]
	Vector MoveInput;//[Offset: 0xfc0, Size: 0xc]
	ToaaVaultComponent* VaultComp;//[Offset: 0x1210, Size: 0x8]
	XGUEVehicleUserComponent* VehicleUserComponent;//[Offset: 0x1218, Size: 0x8]
	CarrierUserComponent* CarrierUserComponent;//[Offset: 0x1220, Size: 0x8]
	GliderUserComponent* GliderUserComponent;//[Offset: 0x1228, Size: 0x8]
	XCameraUnderWaterFXComponent* CameraUnderWaterFXComp;//[Offset: 0x1230, Size: 0x8]
	WeaponCollisionComponent* WeaponCollisionComp;//[Offset: 0x12d0, Size: 0x8]
	bool bIsProne;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x12d8, Size: 0x1]
	bool IsRobot;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x12f9, Size: 0x1]
	int DynamicProjectileID;//[Offset: 0x1370, Size: 0x4]
	ClimbGlobalConfig* ClimbConfigData;//[Offset: 0x1378, Size: 0x8]
	void UnRegisterUXActionComponent(BaseUXActionComponent* Target);// 0x30a6d0c
	void UnInitVehicleUserComponent();// 0x30a6cf8
	void UnInitGliderUserComponent();// 0x30a6ce4
	void UnInitCarrierUserComponent();// 0x30a6cd0
	bool ToBeDying();// 0x30a6c98
	bool SwitchPoseLocal(enum InPoseState);// 0x30a6c10
	void StopPrintInfo();// 0x30a6bfc
	void StartPrintInfo();// 0x30a6be8
	void StartJumpLeaveLand();// 0x30a6bcc
	bool StartClimbingLadder(enum triggerType);// 0x30a6b44
	void Stand(bool bClientSimulation);// 0x30a6ab8
	float SetWeaponMaterialsRoughnessBias(float Value);// 0x30a6a34
	void SetTwoHandAttachTarget(enum AttachType, uint64 EntityID, out const FName LeftHandTargetSocket, out const FName RightHandTargetSocket);// 0x30a68d8
	void SetTwoHandAttachLocation(enum AttachType, Vector RightHandLoc, Vector LeftHandLoc);// 0x30a67dc
	void SetTwoFootAttachTarget(uint64 EntityID, out const FName LeftFootTargetSocket, out const FName RightFootTargetSocket);// 0x30a66c0
	void SetTwoFootAttachLocation(Vector LeftFootLoc, Vector RightFootLoc);// 0x30a6604
	bool SetSwimPosePitch(float InPitch);// 0x30a6574
	void SetStagnantInAirFire(bool IsStagnantInAirFire);// 0x30a64f0
	void SetSlotNameMatParamValue(out const enum SlotType, out const FName SlotName, out const FName ParamName, float Value);// 0x30a6374
	void SetRotateToTarget(Vector TargetPos);// 0x30a62f8
	void SetNearLadderEffectVisibility(bool bVisible);// 0x30a6274
	void SetMovementInput(Vector InputVector);// 0x30a61f0
	void SetMaterialVectorParamValue(out const enum SlotType, int Index, out const FName ParamName, LinearColor Value);// 0x30a6090
	void SetJumpGotoFallingAnim();// 0x30a6070
	bool SetIsRescueing(bool InValue);// 0x30a5fe0
	void SetHandFoldRatio(int Ratio);// 0x30a5f5c
	void SetGravity(float Value);// 0x30a5ee0
	void SetGlobalMaterialParamValue(out const enum SlotType, out const FName ParamName, float Value);// 0x30a5dbc
	void SetCurrentWeaponVisiblity(enum Visibility, FName Reason, int Priority);// 0x30a5cc8
	void SetCapsuleIgnoreCollsion(int[] CollisionChannels);// 0x30a5be8
	void RevertCapsuleCollsion();// 0x30a5bd4
	void ResetStandAfterRevive();// 0x30a5bc0
	void ResetCurrentWeaponVisiblity(FName Reason);// 0x30a5b44
	void RegisterUXActionComponent(BaseUXActionComponent* Target);// 0x30a5ac8
	void RegisterMouseDownBroadCast(bool isRegister);// 0x30a5a44
	bool Recover();// 0x30a5a0c
	void Prone(bool bClientSimulation);// 0x30a5980
	bool ProcessUXAction(int inputCode);// 0x30a58f8
	void PlayOperateSound(AkAudioEvent* OperateSound);// 0x30a587c
	bool Pickup(float InTargetLocZ);// 0x30a57f4
	void OnScopeOutEndDelegate__DelegateSignature();// 0x35332fc
	void OnScopeInEndDelegate__DelegateSignature();// 0x35332fc
	void OnRsp_WeaponHoldMode(enum HoldMode);// 0x30a5778
	void OnMouseDown__DelegateSignature(Vector2D Location);// 0x35332fc
	void OnLadderEffectVisibilityChange__DelegateSignature(bool bVisibility);// 0x35332fc
	void OnHoldGunState(enum FromState, enum toState);// 0x30a56c0
	void OnHitTreeMine();// 0x30a56ac
	void OnEntityControlledBySelfEndViewTarget__DelegateSignature(PlayerController* PC);// 0x35332fc
	void OnEntityControlledBySelfBecomeViewTarget__DelegateSignature(PlayerController* PC);// 0x35332fc
	void OnEndViewTarget__DelegateSignature(PlayerController* PC);// 0x35332fc
	void OnCharacterStateChange__DelegateSignature(int InLayer, int InOldState, int InNewState);// 0x35332fc
	void OnCharacterSpeedChange__DelegateSignature(bool IsMove);// 0x35332fc
	void OnCharacterJump__DelegateSignature();// 0x35332fc
	void OnBecomeViewTarget__DelegateSignature(PlayerController* PC);// 0x35332fc
	bool Move(float InForward, float InRight, float InUp, bool InLog);// 0x30a5558
	bool IsSwimUpWater();// 0x30a5518
	bool IsStagnantInAirFire();// 0x30a54f8
	bool IsSkiing();// 0x30a54c0
	bool IsPeekLeft();// 0x30a5480
	bool IsOnVehicle();// 0x30a5440
	bool IsOnMachineGun();// 0x30a5400
	bool IsOnCarrier();// 0x30a53c0
	bool IsJumping();// 0x30a5368
	bool IsInState(enum inState);// 0x30a52d8
	bool IsHandleInFold();// 0x30a5298
	bool IsFiredThisTick();// 0x30a5258
	bool IsCloseLadder();// 0x30a5220
	void InteractiveObjTriggered__DelegateSignature(bool InOrExit, Actor* SceneObj, Vector InterStartPos, Rotator InterStartRot);// 0x35332fc
	static void InitMoveConfigParam(float DivingDepth, float VehicleDivingDepth);// 0x30a5178
	bool HasPeekCollision();// 0x30a5138
	WeaponCollisionComponent* GetWeaponCollisionComp();// 0x30a50d8
	XGUEVehicleUserComponent* GetVehicleUserComponent();// 0x30a50a4
	ToaaVaultComponent* GetVaultComp();// 0x30a5088
	AkAudioEvent* GetSwitchWeaponSound(byte WeaponType, bool IsEquip);// 0x35332fc
	float GetSwimPosePitch();// 0x30a504c
	float GetSlotNameMatParamValue(out const enum SlotType, out const FName SlotName, out const FName ParamName, float defaultVaule);// 0x30a4ec8
	enum GetScopeState();// 0x30a4e94
	enum GetPoseState();// 0x30a4e58
	XPlayerMotionComponent* GetPlayerMotionComp();// 0x30a4e1c
	enum GetMovingState();// 0x30a4de0
	Vector GetMoveInput();// 0x30a4da0
	float GetMaterialsRoughnessMultiplier(out const enum SlotType);// 0x30a4d0c
	enum GetLayerState(enum CharacterStateLayer);// 0x30a4c88
	float GetLastSprintRotation();// 0x30a4c6c
	byte GetLastJumpSubType();// 0x30a4c50
	Vector GetLastFallingVelocity();// 0x30a4c2c
	bool GetIsRescueing();// 0x30a4bf4
	enum GetHealthState();// 0x30a4bb8
	float GetGlobalMaterialParamValue(out const enum SlotType, out const FName ParamName);// 0x30a4acc
	GliderUserComponent* GetGliderUserComponent();// 0x30a4a98
	GSTMeleeWeapon* GetDynamicMeleeWeapon();// 0x30a4a64
	enum GetCurState(enum InLayer);// 0x30a49d8
	XGUEVehicle* GetCurrentVehicle();// 0x30a49a4
	enum GetCurrentClimbType();// 0x30a4970
	ClimbTriggerComponent* GetCurrentClimbTriggerComp();// 0x30a493c
	Object* GetCurrentCarrier();// 0x30a4908
	int GetCur8DirMoveIdx();// 0x30a48cc
	ClimbTriggerComponent* GetClosestClimbTriggerComp();// 0x30a4898
	enum GetCloestClimbType(enum triggerType);// 0x30a4814
	enum GetCloestClimbTriggerType();// 0x30a47e0
	enum GetCloestClimbDir(enum triggerType);// 0x30a475c
	enum GetClimbMoveMode();// 0x30a4728
	Rotator GetClimbLadderStartRot();// 0x30a46f0
	Vector GetClimbLadderStartPos();// 0x30a46b8
	enum GetClimbingState();// 0x30a4684
	byte GetCharacterPoseType();// 0x30a4648
	CarrierUserComponent* GetCarrierUserComponent();// 0x30a4614
	enum GetActionState();// 0x30a45d8
	GSTMeleeWeapon* GeCastingMeleeWeapon();// 0x30a45a4
	void ForbiddenIKByReason(FName Reason, int Priority, bool Value);// 0x30a44ac
	void ForbiddenIK(bool State);// 0x30a4428
	void ExitLadderTrigger(SceneComponent* StartClimbComponent);// 0x30a43ac
	void EnterLadderTrigger(SceneComponent* StartClimbComponent);// 0x30a4330
	bool EndPickup();// 0x30a42f8
	void EnableWeaponCollision();// 0x30a42e4
	void DisableWeaponCollision();// 0x30a42d0
	void ClearMoveInput();// 0x30a42b4
	void ClearJumping();// 0x30a42a0
	bool CheckStateMachineEvent(byte InEvent);// 0x30a4218
	void ChangeAutoClimbMoveDir();// 0x30a4204
	bool CanUseHairAnimDynamic();// 0x30a41c4
	void BreakClimbingStrop();// 0x30a41b0
	void BreakClimbingLadder();// 0x30a419c
	void AddHurtValue(int hrut);// 0x30a4120
	void AddCallbacktoSetClimbRopeInfo(AvatarBase* AvatarCommonBase);// 0x30a40a4
<----------Generated by SSpawner v1.0.2---------->


Class: BaseCharacter.Character.Pawn.Actor.Object
	AvatarComponent* Avatar;//[Offset: 0xa68, Size: 0x8]
	XMotionComponent* MotionComp;//[Offset: 0xa70, Size: 0x8]
	XStateMachine* StateMachineComp;//[Offset: 0xa78, Size: 0x8]
	Vector RawMoveInput;//[Offset: 0xa80, Size: 0xc]
	float BaseTurnRate;//[Offset: 0xa90, Size: 0x4]
	float BaseLookUpRate;//[Offset: 0xa94, Size: 0x4]
	uint64 serverID;//[Offset: 0xa98, Size: 0x8]
	int EntityType;//[Offset: 0xaa0, Size: 0x4]
	int ResID;//[Offset: 0xaa4, Size: 0x4]
	bool IsInWater;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xaa8, Size: 0x1]
	bool IsInsideWater;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xaa9, Size: 0x1]
	bool IsUnderWater;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xaaa, Size: 0x1]
	bool bIsLeadingCharacter;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xaab, Size: 0x1]
	bool HeadShotState;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xaac, Size: 0x1]
	enum Gender;//[Offset: 0xab8, Size: 0x1]
	ParticleSystem* ChooseEffect;//[Offset: 0xac0, Size: 0x8]
	float YawSpeed;//[Offset: 0xac8, Size: 0x4]
	delegate OnCharacterUnderWaterChange;//[Offset: 0xdf0, Size: 0x10]
	void TurnAtRate(float Rate);// 0x2f86820
	void StopWithAnimMontageWithAssetBlendTime(FString AnimMontageRef);// 0x2f86740
	void StopWithAnimMontage(FString AnimMontageRef, float InBlendOutTime);// 0x2f86624
	void StopWithAnimAliasMontage(FString AliasMontage);// 0x2f86544
	void StopNavigate();// 0x2f86530
	void StopMontageInMain(FString MontagePath, float InBlendOutTime);// 0x2f86468
	void StopMontageForclyInMain(FString MontagePath, float InBlendOutTime);// 0x2f863a0
	void StopCustomAnim();// 0x2f86384
	void StopActiveMontageWithBlendOutTime(float BlendOutTime);// 0x2f86308
	void StopActiveMontage();// 0x2f862f4
	void SetUseControllerRotationYaw(out const FName ModifyReason, int InPriority, bool InUseControllerRotationYaw);// 0x2f861e4
	void SetUseControllerRotationPitch(out const FName ModifyReason, int InPriority, bool InUseControllerRotationPitch);// 0x2f860d4
	void SetRawMoveInput(float InForward, float InRight, float InUp);// 0x2f85fe4
	void SetNavigateMoveSpeed(float Speed);// 0x2f85f68
	void SetLastHeadShotTime(float pTime);// 0x2f85eec
	void SetIsUnderWater(bool UnderWater);// 0x2f85e68
	void SetIsInWater(out const FName ModifyReason, int InPriority, bool InWater);// 0x2f85d58
	void SetIsInsideWater(out const FName ModifyReason, int InPriority, bool InsideWater);// 0x2f85c48
	void SetHeadShotIntervalTime(float pTime);// 0x2f85bcc
	void SetHeadShot(bool pstate);// 0x2f85b48
	void SetAvatarRelativeRotation(out const FName InReason, int InPriority, out const Rotator InRelativeRotation);// 0x2f85a30
	void SetAvatarRelativeLocation(out const FName InReason, int InPriority, out const Vector InRelativeLocation);// 0x2f85918
	void ResetUseControllerRotationYaw();// 0x2f85904
	void ResetUseControllerRotationPitch();// 0x2f858f0
	void ResetIsInWater();// 0x2f858dc
	void ResetInsideWater();// 0x2f858c8
	void Reset();// 0x2f858ac
	bool ReplaceMovementComponent(class Object InMovementClass);// 0x2f85824
	void RemoveDesignPaperComponent();// 0x2f85810
	void ReceiveResume();// 0x35332fc
	void ReceiveOnRecycle();// 0x35332fc
	void PlayWithAnimMontageOnBorn(FString AnimMontageRef, float InPlayRate, FString StartSectionName, float InStartTime);// 0x2f856c0
	void PlayWithAnimMontageByTime(FString AnimMontageRef, float InPlayRate, FString StartSectionName, float StartTime, bool IsLoop);// 0x2f8552c
	void PlayWithAnimMontage(FString AnimMontageRef, float InPlayRate, FString StartSectionName);// 0x2f8536c
	void PlayWithAnimAliasMontage(FString AliasMontage, float InPlayRate, FString StartSectionName);// 0x2f851ac
	void PlayMontageInMain(FString MontagePath, float InPlayRate, FName StartSectionName);// 0x2f850a8
	void PlayFaceFx(FString AnimPath);// 0x35332fc
	void PlayCustomAnimByPath(FString AnimPath, enum AnimPoseType);// 0x2f84fd8
	void PlayCustomAnim(FName AnimKey);// 0x2f84f54
	void OnUnderWaterChange__DelegateSignature(bool active);// 0x35332fc
	void OnTriggeredEvent(XStateMachine* InStateMachine, byte InEvent, out const <byte,byte> InPreStateMap, out const <byte,byte> InPostStateMap);// 0x2f84cf0
	void OnStateMachineStop(XStateMachine* InStateMachine);// 0x2f84c6c
	void OnStateMachineStart(XStateMachine* InStateMachine);// 0x2f84be8
	void OnStateChange(XStateMachine* InStateMachine, byte InLayer, byte InOldState, byte InNewState);// 0x2f84ab0
	void OnRsp_ThirdPlayerRotation(Rotator Rotation, bool bSyncController);// 0x2f849e8
	void OnRsp_ThirdPlayerControllerPitch(float Pitch);// 0x2f84964
	void OnPlayerCreated();// 0x2f84948
	void OnCheckStateChange(XStateMachine* InStateMachine, byte InEvent, byte InOldState, byte InNewState, out bool OutResult);// 0x2f847c4
	void OnCheckEvent(const XStateMachine* InStateMachine, byte InEvent, out bool OutResult, out FName Reason);// 0x2f84664
	void OnBeforeStateChange(XStateMachine* InStateMachine, byte InLayer, byte InOldState, byte InNewState);// 0x2f8452c
	void OnAvatarLoadFinish(AvatarBase* AvatarCommonBase);// 0x2f844a8
	void NavigateToWorldCompositionLocation(float X, float Y, float Z, float InAcceptanceRadius);// 0x2f84380
	void NavigateFollowSpecificActor(Actor* Actor);// 0x2f84304
	void NavigateAlongPointList(out Vector[] PointList, float InAcceptanceRadius);// 0x2f84220
	bool MoveToWorldCompositionLocation(out const Vector Location);// 0x2f84184
	void LookUpAtRate(float Rate);// 0x2f84108
	bool IsLeadingCharacter();// 0x2f840d0
	void InitAvatarRelativeRotation(out const Rotator InRelativeRotation);// 0x2f84048
	void InitAvatarRelativeLocation(out const Vector InRelativeLocation);// 0x2f83fc0
	bool HandleHitByNear(Vector HurtDir, enum BeHitShakeLevel);// 0x2f83ef4
	bool HandleHitByBullet(Vector HurtDir, enum BeHitShakeLevel);// 0x2f83e28
	Vector GetWorldCompositionLocation();// 0x2f83de8
	float GetWaterUnderFootDistance(float InMaxDistance);// 0x2f83d64
	Vector GetVelocityLocal();// 0x2f83d2c
	float GetUnscaledCapsuleRadius();// 0x2f83cf0
	Rotator GetThirdPlayerRotation();// 0x2f83cb0
	AnimInstance* GetSubAnimInstanceByName(FName InName);// 0x2f83c2c
	XStateMachine* GetStateMachineComp();// 0x2f83c10
	Vector GetSocketLocation(FName SocketName);// 0x2f83b88
	Vector2D GetSimpleCollisionCylinderLua();// 0x2f83b54
	float GetScaledCapsuleRadius();// 0x2f83b18
	float GetScaledCapsuleHalfHeight();// 0x2f83ae4
	Vector GetRelativeLocation();// 0x2f83aa4
	Vector GetRawMoveInput();// 0x2f83a80
	ParticleSystemComponent* GetPracticalSystemComponent(int dynamicType);// 0x2f839fc
	XMotionComponent* GetMotionComp();// 0x2f839e0
	Vector GetLocalCompositionLocation();// 0x2f839a8
	float GetImmersionRate();// 0x2f83974
	float GetImmersionDepthByProfilerName(out const FName ProfilerName);// 0x2f838e0
	float GetImmersionDepth(float InMaxDepth);// 0x2f8385c
	enum GetHitBodyTypeByBoneName(out const FName InBoneName);// 0x2f837c0
	SceneComponent* GetDynamicComponent(FName SocketName);// 0x2f8373c
	TOAAMovementComponent* GetCharacterMovement();// 0x2f83708
	float GetCapsuleHalfHeight();// 0x2f836cc
	BaseAnimInstance* GetBaseAnimInstance();// 0x2f83698
	Rotator GetAvatarRelativeRotation();// 0x2f83660
	Vector GetAvatarRelativeLocation();// 0x2f83628
	MeshComponent* GetAvatarMeshComponent(int avatarSlotTypeIn);// 0x2f835a4
	SceneComponent* GetAvatarMasterBoneComp();// 0x2f83570
	AvatarComponent* GetAvatarComponent();// 0x2f83554
	AnimInstance* GetAnimInstance();// 0x2f83520
	STExtraAnimInstance* GetAnimInst();// 0x2f834ec
	void FreezeActor(float Time, float interpolation);// 0x2f83438
	void DoWaterQuery();// 0x2f83424
	bool DoesSocketExist(FName SocketName);// 0x2f8339c
	bool Die(bool bInStaticPose, bool bForcedly);// 0x2f832b8
	void ClearAvatarRelativeRotation(out const FName InReason);// 0x2f8322c
	void ClearAvatarRelativeLocation(out const FName InReason);// 0x2f831a0
	void CancelNavigate();// 0x2f8318c
	void AttachComponentToAvatar(SceneComponent* child, FName SocketName);// 0x2f830d8
	void AttachActorToAvatar(Actor* child, FName SocketName, enum AttachmentRule);// 0x2f82fe8
	void ApplyStateMap(out const <byte,byte> InStateMap);// 0x2f82edc
	void ApplyStateBits(uint64 InStateBits);// 0x2f82e60
	void ApplyDefaultStateEvent();// 0x2f82e4c
	int AddDynamicComponentToAvatar(SceneComponent* Component, FName SocketName);// 0x2f82d88
	int AddDynamicActorToAvatar(Actor* Actor, FName SocketName);// 0x2f82cc4
<----------Generated by SSpawner v1.0.2---------->


Class: AkAudioEvent.Object
	AkAudioBank* RequiredBank;//[Offset: 0x28, Size: 0x8]
	float MaxAttenuationRadius;//[Offset: 0x30, Size: 0x4]
	bool IsInfinite;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x34, Size: 0x1]
	float MinimumDuration;//[Offset: 0x38, Size: 0x4]
	float MaximumDuration;//[Offset: 0x3c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AkAudioBank.Object
	bool AutoLoad;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: AvatarComponent.AvatarCommonBase.AvatarBase.SceneComponent.ActorComponent.Object
	SkeletalMeshComponent* VisiualComponent;//[Offset: 0x1390, Size: 0x8]
	CosResLoader* mCosHDModePreloader;//[Offset: 0x1398, Size: 0x8]
	<int,MeshComponent*> FakeShadowMeshComponentList;//[Offset: 0x1490, Size: 0x50]
	<enum,MeshComponent*> AttachedGFurMeshComponentList;//[Offset: 0x14e0, Size: 0x50]
	MeshComponent* MasterAttachedGFurComponent;//[Offset: 0x1530, Size: 0x8]
	SkeletalMesh* FaceMouldSkMesh;//[Offset: 0x1538, Size: 0x8]
	<enum,MeshData> ClothSwitchStateSkDataMap;//[Offset: 0x1540, Size: 0x50]
	BakeFaceRuntimeData BakeFaceRuntimeData;//[Offset: 0x1648, Size: 0x28]
	BaseCharacterAnimListComponent* MyAnimListComp;//[Offset: 0x1670, Size: 0x8]
	SkeletalMesh*[] AsyncBakePartsSkMesh;//[Offset: 0x16d0, Size: 0x10]
	void SwitchToHDMode(bool bUseHDMode, int iCopyPoseHead, int UseHDScene);// 0x2f70900
	bool SwitchAvatarSkMeshBySlot(out const enum AvatarSlotType, out const enum SwitchState, out const FName Reason, int Priority);// 0x2f70778
	bool SwitchAvatarAnimState(out const FName SwitchState, out const FName Reason, int Priority);// 0x2f70644
	void SetUpdateRateOptimizations(bool enableFlag);// 0x2f705c0
	enum SetSkMeshAnimTickOptionWithReason(enum TickOption, out const FName Reason, int Priority);// 0x2f704a8
	void SetMeshOnlyTickPoseWhenRendered();// 0x2f70494
	void SetMeshOnlyTickMontagesWhenNotRendered();// 0x2f70480
	bool SetMeshComponentLightChannel(int Channel);// 0x2f703f8
	void SetIsUseDynamicBone(bool Use);// 0x2f70374
	void SetFashionShowSettings(bool bIsWearHat, bool bIsWearHood, out AvatarData InAvatarData);// 0x2f701b4
	void SetAnimInstanceEnableBySlot(out const enum Slot, bool bEnabled);// 0x2f700e0
	void SetAlwaysTickPoseAndRefreshBones();// 0x2f700cc
	enum ResetSkMeshAnimTickOptionReason(out const FName Reason);// 0x2f70038
	void ResetAvatar(out AvatarData AvatarData);// 0x2f6fef8
	void ReleasePreloadedHDMode(const int iCopyPoseHead);// 0x2f6fe7c
	void ReleaseAvatar();// 0x2f6fe60
	void RefreshOnePartSlot(out const FName PartName, out const FName SocketName);// 0x2f6fd80
	bool NoDynamicHair();// 0x2f6fd48
	FaceMakeupMatBase* LuaGetMatModifier();// 0x2f6fd0c
	bool IsDynamicBoneSlot(enum Slot);// 0x2f6fc84
	bool IsCurrentWearHat();// 0x2f6fc4c
	bool IsCurrentWearClothWithHood();// 0x2f6fc2c
	bool IsBakeFaceRuntimeDataReleased();// 0x2f6fbf4
	enum GetSkMeshAnimTickOptionReason();// 0x2f6fbc0
	CopyPoseAnimInstance* GetCopyPoseAnimInst();// 0x2f6fb8c
	MeshComponent* GetAttachedGFurComponentBySlot(out const enum AvatarSlotType);// 0x2f6faf8
	void GetAllPSCs(out ParticleSystemComponent*[] OutPSCs);// 0x2f6fa5c
	void GetAllPSCActors(out Actor*[] OutPSCs);// 0x2f6f9c0
	void ForceHairNotFirstRender();// 0x2f6f9ac
	void CosPreloadHDMode(const int iCopyPoseHead);// 0x2f6f930
	void ClearAllSkMeshAnimTickOptionReason();// 0x2f6f91c
	void ChangeAvatarParentMat(enum Slot, FName matSlotName, FString ParentMatPath);// 0x2f6f818
<----------Generated by SSpawner v1.0.2---------->


Class: AvatarCommonBase.AvatarBase.SceneComponent.ActorComponent.Object
	STExtraAnimInstance* GetCoreAnimInst();// 0x2f6f384
<----------Generated by SSpawner v1.0.2---------->


Class: AvatarBase.SceneComponent.ActorComponent.Object
	float DefaultMeshCullDistance;//[Offset: 0x328, Size: 0x4]
	MeshComponent* MasterBoneComponent;//[Offset: 0x330, Size: 0x8]
	SphereComponent* DamageCollision;//[Offset: 0x338, Size: 0x8]
	delegate OnAvatarLoadFinishForLua;//[Offset: 0x348, Size: 0x10]
	delegate OnAvatarLoadFinishForCpp;//[Offset: 0x358, Size: 0x10]
	delegate OnAllMeshLoadedDelegate;//[Offset: 0x368, Size: 0x10]
	delegate OnAvatarAnimInitBeforeTick;//[Offset: 0x378, Size: 0x10]
	InitAvatarParams ToInitAvatarParams;//[Offset: 0x418, Size: 0x3b0]
	<SkeletalMesh*> UsingMeshes;//[Offset: 0xa48, Size: 0x50]
	MeshData OldMasterMeshData;//[Offset: 0xa98, Size: 0x1d8]
	AvatarData MyAvatarData;//[Offset: 0xc70, Size: 0x78]
	<enum,MeshData> AvatarMeshList;//[Offset: 0xce8, Size: 0x50]
	<enum,MeshComponent*> MeshComponentList;//[Offset: 0xd38, Size: 0x50]
	<enum,ParentMatData> MatSelectMap;//[Offset: 0xd88, Size: 0x50]
	<FString,Object*> ExternalResourceRefCache;//[Offset: 0xdd8, Size: 0x50]
	void UnRegisterAnimationBudgetTemporary();// 0x51b9430
	void SetSlotMatGlobalVectorParams(enum Slot, out const FName ParamName, LinearColor Value);// 0x51b9320
	void SetSlotMatGlobalScalarParams(enum Slot, out const FName ParamName, float Value);// 0x51b9210
	void SetParentMatType(enum ParentMatType, FName Reason, int Priority);// 0x51b9114
	bool SetMeshVisibleBySlot(out const enum AvatarSlotType, bool bIsVisible, out const FName ReasonName, out const int Priority);// 0x51b8f88
	void SetForceLodBySlotEx(enum AvatarSlotType, int Lod);// 0x51b8ec0
	void SetAvatarTransparent(float Opacity, out const FName Reason, int Priority);// 0x51b8db0
	void SetAvatarRelativeRotation(out const FName InReason, int InPriority, out const Rotator InRelativeRotation);// 0x51b8c98
	void SetAvatarRelativeLocation(out const FName InReason, int InPriority, out const Vector InRelativeLocation);// 0x51b8b80
	void RevertDefaultGlobalScalarParams(enum Slot, FName ParamName);// 0x51b8ac8
	void ResetParentMatType(FName Reason);// 0x51b8a44
	void ResetAvatarTransparent(out const FName Reason);// 0x51b89b8
	void ResetAvatarOnePartByType(enum SlotType, out const int PartIdx);// 0x51b88e8
	void ResetAvatarOnePart(FString PartName, out const int PartIdx);// 0x51b8808
	bool ResetAvatarCacheDataParam(FName Reason);// 0x51b8780
	void ReregisterAnimationBudget();// 0x51b8764
	void OnAvatarLoadedDelegateForLua__DelegateSignature(uint64 entityServerID);// 0x35332fc
	void OnAvatarBaseLoadedDelegateForCpp__DelegateSignature(AvatarBase* AvatarBase);// 0x35332fc
	void OnAvatarAnimInitBeforeTick__DelegateSignature(AnimInstance* AnimInstance, uint64 entityServerID);// 0x35332fc
	void OnAnimInstanceInitBeforeTick(AnimInstance* InAnimInstance);// 0x51b86e8
	void OnAllMeshLoadedDelegate__DelegateSignature();// 0x35332fc
	bool IsUseHDRes();// 0x51b86a8
	bool IsUseGFur();// 0x51b8668
	bool IsUsedForFashionShow();// 0x51b8648
	bool IsNeedRefresh(out const enum AvatarSlotType, out const int charIdx, out const int PartIdx);// 0x51b84f8
	bool IsInHDScene();// 0x51b84b8
	void InitAvatarRelativeRotation(out const Rotator InRelativeRotation);// 0x51b8430
	void InitAvatarRelativeLocation(out const Vector InRelativeLocation);// 0x51b83a8
	int GetUseHDScene();// 0x51b838c
	Vector GetTopUILocation(byte TransSpace);// 0x51b8304
	AnimInstance* GetSubAnimInstanceByName(FName InName);// 0x51b8280
	Transform GetSocketTransformInSkMesh(FName SocketName);// 0x51b81bc
	Rotator GetSocketRotByNewTransform(out const Vector newRootPos, out const Rotator newRootRot, out const FName SocketName);// 0x51b807c
	Vector GetSocketLocByNewTransform(out const Vector newRootPos, out const Rotator newRootRot, out const FName SocketName);// 0x51b7f3c
	Vector GetSocketLocationOffsetByName(out const FName SocketName);// 0x51b7ea4
	Vector GetSocketLocationByNameInSpace(out const FName SocketName, byte TransSpace);// 0x51b7dc4
	Vector GetSocketLocationByName(out const FName SocketName);// 0x51b7d2c
	bool GetMeshVisibleBySlot(out const enum AvatarSlotType);// 0x51b7c94
	MeshComponent* GetMeshComponentBySlot(out const enum AvatarSlotType);// 0x51b7c00
	FName GetMasterBoneNearestSocketName(out const Vector Location, FName BoneName);// 0x51b7b28
	MaterialInstance* GetAvatarSlotMaterialInstanceByMatSlotName(const enum Slot, out const FName matSlotName);// 0x51b7a50
	AvatarData GetAvatarData();// 0x51b7868
	AnimInstance* GetAnimInstance();// 0x51b7834
	void ClearAvatarRelativeRotation(out const FName InReason);// 0x51b77a8
	void ClearAvatarRelativeLocation(out const FName InReason);// 0x51b771c
<----------Generated by SSpawner v1.0.2---------->


Class: STExtraAnimInstance.BaseAnimationInstance.AnimInstance.Object
	float PeekFrameRate;//[Offset: 0x1b90, Size: 0x4]
	float PeekSpeed;//[Offset: 0x1b98, Size: 0x4]
	bool C_NoAimOffset;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9c, Size: 0x1]
	bool C_Scoping;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9d, Size: 0x1]
	bool C_IsPeeking;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9e, Size: 0x1]
	bool C_SightSlow;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1b9f, Size: 0x1]
	bool C_IsPistolPeekAim;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba0, Size: 0x1]
	bool C_IsOnVehicle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba1, Size: 0x1]
	bool C_IsGlidingInAir;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba2, Size: 0x1]
	bool C_IsHoldGrenade;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba3, Size: 0x1]
	bool C_IsLongWeapon;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba4, Size: 0x1]
	bool C_FreezedRagdoll;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba5, Size: 0x1]
	bool C_IsCastingGenerate;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba6, Size: 0x1]
	bool C_Hurting;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ba7, Size: 0x1]
	int C_HitCount;//[Offset: 0x1ba8, Size: 0x4]
	float C_DeadType;//[Offset: 0x1bac, Size: 0x4]
	bool C_IsNearDeathStatus;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1bb0, Size: 0x1]
	bool C_IsHealing;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1bb1, Size: 0x1]
	bool C_ForegripAnimValid;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1bb2, Size: 0x1]
	bool C_EnableForegripAnim;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1bb3, Size: 0x1]
	float C_FireAlpha;//[Offset: 0x1bb4, Size: 0x4]
	float C_ProneHandleAlpha;//[Offset: 0x1bb8, Size: 0x4]
	float C_ForegripAnimParam;//[Offset: 0x1bbc, Size: 0x4]
	bool C_IsEnteringNearDeathAnim;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc0, Size: 0x1]
	bool C_IsLeanOutVehicle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc1, Size: 0x1]
	byte C_SeatSpecialType;//[Offset: 0x1bc2, Size: 0x1]
	enum C_CurHoldGunState;//[Offset: 0x1bc3, Size: 0x1]
	enum C_UseHoldGunMovementType;//[Offset: 0x1bc4, Size: 0x1]
	enum C_HitGunState;//[Offset: 0x1bc5, Size: 0x1]
	bool C_UseHoldGunIdleMovement;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc6, Size: 0x1]
	bool C_UseHoldGunMiddleMovement;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc7, Size: 0x1]
	bool C_UseHoldGunUpMovement;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc8, Size: 0x1]
	bool C_UseHoldGunScopeMovement;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1bc9, Size: 0x1]
	enum C_LastUseHoldGunMovementType;//[Offset: 0x1bca, Size: 0x1]
	enum C_MovementAnimChangeFromHoldGunType;//[Offset: 0x1bcb, Size: 0x1]
	enum C_MovementAnimChangeToHoldGunType;//[Offset: 0x1bcc, Size: 0x1]
	float NeckTurnUILeftAngle;//[Offset: 0x1bd0, Size: 0x4]
	float NeckTurnUIRightAngle;//[Offset: 0x1bd4, Size: 0x4]
	float NeckTurnUIUPAngle;//[Offset: 0x1bd8, Size: 0x4]
	float NeckTurnUIDownAngle;//[Offset: 0x1bdc, Size: 0x4]
	float NeckNotTurnAngle;//[Offset: 0x1be0, Size: 0x4]
	float NeckMapAngleDefault_Horizon;//[Offset: 0x1be4, Size: 0x4]
	float NeckMapAngleDefault_Portrait;//[Offset: 0x1be8, Size: 0x4]
	float NeckMapAngleLeft;//[Offset: 0x1bec, Size: 0x4]
	float NeckMapAngleRight;//[Offset: 0x1bf0, Size: 0x4]
	float NeckMapAngleUp;//[Offset: 0x1bf4, Size: 0x4]
	float NeckMapAngleDown;//[Offset: 0x1bf8, Size: 0x4]
	float NeckMapCrouchAngleDefault_Horizon;//[Offset: 0x1bfc, Size: 0x4]
	float NeckMapCrouchAngleDefault_Portrait;//[Offset: 0x1c00, Size: 0x4]
	float NeckMapCrouchAngleLeft;//[Offset: 0x1c04, Size: 0x4]
	float NeckMapCrouchAngleRight;//[Offset: 0x1c08, Size: 0x4]
	float NeckMapCrouchAngleUp;//[Offset: 0x1c0c, Size: 0x4]
	float NeckMapCrouchAngleDown;//[Offset: 0x1c10, Size: 0x4]
	float NeckTurnSpeed;//[Offset: 0x1c14, Size: 0x4]
	byte C_WeaponType;//[Offset: 0x1c18, Size: 0x1]
	byte C_WeaponState;//[Offset: 0x1c1a, Size: 0x1]
	byte C_ParachuteState;//[Offset: 0x1c1b, Size: 0x1]
	byte C_WeaponHoldType;//[Offset: 0x1c1c, Size: 0x1]
	byte C_WeaponMainType;//[Offset: 0x1c1d, Size: 0x1]
	byte C_HurtType;//[Offset: 0x1c1e, Size: 0x1]
	Rotator C_ScopeAimOffsetStand;//[Offset: 0x1c20, Size: 0xc]
	Rotator C_HeadRotOffset;//[Offset: 0x1c2c, Size: 0xc]
	Rotator C_FPPStandOffsetRotation;//[Offset: 0x1c38, Size: 0xc]
	Rotator C_FPPCrouchOffsetRotation;//[Offset: 0x1c44, Size: 0xc]
	Rotator C_FPPProneOffsetRotation;//[Offset: 0x1c50, Size: 0xc]
	Vector C_HurtDir;//[Offset: 0x1c5c, Size: 0xc]
	Vector C_FPPStandOffsetLocation;//[Offset: 0x1c68, Size: 0xc]
	Vector C_FPPCrouchOffsetLocation;//[Offset: 0x1c74, Size: 0xc]
	Vector C_FPPProneOffsetLocation;//[Offset: 0x1c80, Size: 0xc]
	PlayerCharacter* C_OwnerCharacter;//[Offset: 0x1c90, Size: 0x8]
	XPlayerMotionComponent* C_MotionComp;//[Offset: 0x1c98, Size: 0x8]
	bool C_NoHitAnim;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca0, Size: 0x1]
	bool C_IsHalfBodyHit;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca1, Size: 0x1]
	bool C_IsTremble;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca2, Size: 0x1]
	bool C_IsSprintFire;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca3, Size: 0x1]
	bool C_UseHoldGunIdleAdditive;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca4, Size: 0x1]
	bool C_UseHoldGunIdleGrip;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca5, Size: 0x1]
	float f_C_UseHoldGunIdleAddBlendOut;//[Offset: 0x1ca8, Size: 0x4]
	bool C_CurrentWeaponIsVisible;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1cac, Size: 0x1]
	bool C_UseFlareGun;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1cad, Size: 0x1]
	bool C_ShouldAdditiveForegrip;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1cae, Size: 0x1]
	bool C_ShouldAdditiveForegripObstructed;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1caf, Size: 0x1]
	float C_HoldingShieldAlpha;//[Offset: 0x1cb0, Size: 0x4]
	float C_HoldingShieldAdditive;//[Offset: 0x1cb4, Size: 0x4]
	bool C_IsDead;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb8, Size: 0x1]
	bool C_IsDying;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb9, Size: 0x1]
	bool C_IsInMachineGun;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1cba, Size: 0x1]
	bool C_IsInWeaponSwitch;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1cbb, Size: 0x1]
	bool C_IsInBuildingState;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1cbc, Size: 0x1]
	bool C_IsInBuildPlacing;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1cbd, Size: 0x1]
	int[] C_HurtValueArray;//[Offset: 0x1cc0, Size: 0x10]
	bool C_IsPlayingLandingHard;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd0, Size: 0x1]
	AimOffsetBlendSpace* C_HoldGunAimBlendSpace;//[Offset: 0x1cd8, Size: 0x8]
	AimOffsetBlendSpace* C_HoldGunShieldAim;//[Offset: 0x1ce0, Size: 0x8]
	BlendSpace* C_HitBlendSpace;//[Offset: 0x1ce8, Size: 0x8]
	BlendSpace1D* C_FallingHoldGunBS;//[Offset: 0x1cf0, Size: 0x8]
	BlendSpace1D* C_PeekAnim;//[Offset: 0x1cf8, Size: 0x8]
	BlendSpace1D* C_ForegripAnim;//[Offset: 0x1d00, Size: 0x8]
	BlendSpace1D* C_ForegripIdleAnim;//[Offset: 0x1d08, Size: 0x8]
	BlendSpace1D* C_ForegripMiddleAnim;//[Offset: 0x1d10, Size: 0x8]
	AimOffsetBlendSpace* C_PeekAnimLeftRight;//[Offset: 0x1d18, Size: 0x8]
	AnimSequence* C_PreJumpStartHoldGun;//[Offset: 0x1d20, Size: 0x8]
	AnimSequence* C_JumpStartHoldGun;//[Offset: 0x1d28, Size: 0x8]
	AnimSequence* C_JumpStartHoldGunF;//[Offset: 0x1d30, Size: 0x8]
	AnimSequence* C_LandLightHoldGun;//[Offset: 0x1d38, Size: 0x8]
	AnimSequence* C_LandMiddleHoldGun;//[Offset: 0x1d40, Size: 0x8]
	AnimSequence* C_LandHeavyHoldGun;//[Offset: 0x1d48, Size: 0x8]
	AnimSequence* C_ShieldAddtive;//[Offset: 0x1d50, Size: 0x8]
	BlendSpace* C_NearHitBlendSpace;//[Offset: 0x1d58, Size: 0x8]
	AnimMontage* C_HurtDown;//[Offset: 0x1d60, Size: 0x8]
	AnimMontage* C_HurtFire;//[Offset: 0x1d68, Size: 0x8]
	AnimMontage* C_HurtBlind;//[Offset: 0x1d70, Size: 0x8]
	BlendSpace* C_HoldGunMovementBS;//[Offset: 0x1d78, Size: 0x8]
	BlendSpace* C_HoldGunUpMovementBS;//[Offset: 0x1d80, Size: 0x8]
	BlendSpace* C_HoldGunScopeMovementBS;//[Offset: 0x1d88, Size: 0x8]
	BlendSpace* C_HoldGunNoSprintMovementBS;//[Offset: 0x1d90, Size: 0x8]
	AnimSequence* C_HoldGunIdleAdditive;//[Offset: 0x1d98, Size: 0x8]
	BlendSpace* C_HoldGunIdleMoveBS;//[Offset: 0x1da0, Size: 0x8]
	BlendSpace* C_HoldGunIdleMove_Back_BS;//[Offset: 0x1da8, Size: 0x8]
	BlendSpace* C_StandScopeMovementBS;//[Offset: 0x1db0, Size: 0x8]
	BlendSpace* C_CrouchScopeMovementBS;//[Offset: 0x1db8, Size: 0x8]
	AnimSequence* C_ColdWeaponStartJumpSeq;//[Offset: 0x1dc0, Size: 0x8]
	BlendSpace1D* C_ColdWeaponFallingBS1D;//[Offset: 0x1dc8, Size: 0x8]
	AnimSequence* C_ColdWeaponForwardLandMoveSeq;//[Offset: 0x1dd0, Size: 0x8]
	AnimSequence* C_ColdWeaponBackLandMoveSeq;//[Offset: 0x1dd8, Size: 0x8]
	AnimSequence* C_ColdWeaponLightLandIdleSeq;//[Offset: 0x1de0, Size: 0x8]
	AnimSequenceBase* C_FurnitureInteractAnim;//[Offset: 0x1de8, Size: 0x8]
	AnimSequenceBase* C_DefaultMachineGunBasePose;//[Offset: 0x1df0, Size: 0x8]
	BlendSpaceBase* C_DefaultMachineGunAO;//[Offset: 0x1df8, Size: 0x8]
	AnimSequenceBase* C_MachineGunBasePose;//[Offset: 0x1e00, Size: 0x8]
	BlendSpaceBase* C_MachineGunAO;//[Offset: 0x1e08, Size: 0x8]
	AnimSequenceBase* C_DyanmicMachineGunBasePose;//[Offset: 0x1e10, Size: 0x8]
	BlendSpaceBase* C_DyanmicMachineGunAO;//[Offset: 0x1e18, Size: 0x8]
	bool b_C_WeaponState_EQ_Reload;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e20, Size: 0x1]
	float f_C_WeaponState_EQ_Reload;//[Offset: 0x1e24, Size: 0x4]
	bool b_C_WeaponState_NEQ_Reload;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e28, Size: 0x1]
	bool b_P_AimOffsetActive;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e29, Size: 0x1]
	bool b_C_PeekFrameRate_NEQ;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e2a, Size: 0x1]
	bool b_C_PeekFrameRate_NEQ_0_OR_C_IsPeeking;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e2b, Size: 0x1]
	bool b_C_PeekFrameRateNEQ0_AND_C_IsPistolPeekAim;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e2c, Size: 0x1]
	bool b_C_IsOnVehicle_AND_C_IsCastingGenerate;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e2d, Size: 0x1]
	bool b_C_PoseType_EQ_Prone;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e2e, Size: 0x1]
	bool b_C_PoseType_NEQ_Prone;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e2f, Size: 0x1]
	bool b_C_Move_OR_C_IsOnVehicle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e30, Size: 0x1]
	bool b_Crouch_SwitchWeapon_Move;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e31, Size: 0x1]
	bool b_OnVehicle_LeanOut_NarrowSeat_Reload;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e32, Size: 0x1]
	bool b_OnVehicle_LeanOut_SwitchWeapon;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e33, Size: 0x1]
	bool b_WeaponState_EQ_SwitchWeapon;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e34, Size: 0x1]
	bool b_WeaponState_NEQ_SwitchWeapon;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e35, Size: 0x1]
	bool b_Move_PistolOrRifleGun;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e36, Size: 0x1]
	bool b_C_ParachuteState_EQ_FreeFall;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e37, Size: 0x1]
	bool b_C_ParachuteState_NEQ_FreeFall;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e38, Size: 0x1]
	bool b_C_ParachuteState_EQ_Landing;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e39, Size: 0x1]
	float f_C_ViewRotation_IN_C_Scoping;//[Offset: 0x1e3c, Size: 0x4]
	float f_HoldGunStateChangeBlendTime;//[Offset: 0x1e40, Size: 0x4]
	float f_HoldGunIdle2MiddleBlendTime;//[Offset: 0x1e44, Size: 0x4]
	float f_HoldGunIdle2UpBlendTime;//[Offset: 0x1e48, Size: 0x4]
	float f_HoldGun2IdleBlendTime;//[Offset: 0x1e4c, Size: 0x4]
	float f_HoldGun2ScopeBlendTime;//[Offset: 0x1e50, Size: 0x4]
	float f_HoldGunScopeBlendOutTime;//[Offset: 0x1e54, Size: 0x4]
	float f_WeaponObReloadUpAO;//[Offset: 0x1e58, Size: 0x4]
	float ReloadFireBlot;//[Offset: 0x1e5c, Size: 0x4]
	enum C_BeHitCameraShakeLevel;//[Offset: 0x1e60, Size: 0x1]
	bool C_M_WeaponTypeIsGun;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e61, Size: 0x1]
	bool C_M_WeaponIsNone;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e62, Size: 0x1]
	bool C_M_WeaponTypeIsColdWeapon;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e63, Size: 0x1]
	bool C_M_WeaponTypeIsBow;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e64, Size: 0x1]
	bool C_M_ShouldChangToGunUp;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e65, Size: 0x1]
	bool C_M_ShouldChangToGunDown;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e66, Size: 0x1]
	bool C_M_ShouldPlayTransAnimationToGunDown;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e67, Size: 0x1]
	bool C_M_ShouldPlayTransBlendToGunDown;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e68, Size: 0x1]
	bool C_M_sholdNotPlayHoldgunTransAnim;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e69, Size: 0x1]
	bool C_M_isMaleAnddNotTwistHoldgunposeik;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e6a, Size: 0x1]
	bool C_M_isSightSlowOn;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e6b, Size: 0x1]
	bool C_M_canEnterCurMovement_guntoSprintFire;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e6c, Size: 0x1]
	bool C_M_canEnterDestMovementtoGunDownState;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e6d, Size: 0x1]
	bool C_M_canEnterSprintFiretoCurmovement_GunUpState;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e6e, Size: 0x1]
	bool C_M_HoldGunUseIKRule;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e6f, Size: 0x1]
	bool C_M_EnableAOwhenPeekAim;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e70, Size: 0x1]
	bool C_M_ShouldGunDownLandMove;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e71, Size: 0x1]
	bool C_M_ShouldGunUpLandMove;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e72, Size: 0x1]
	float C_M_HurtingAlpha;//[Offset: 0x1e74, Size: 0x4]
	float C_SwitchWeaponRate;//[Offset: 0x1e78, Size: 0x4]
	float C_SwitchWeaponLinkTime;//[Offset: 0x1e7c, Size: 0x4]
	enum C_InteractType;//[Offset: 0x1e80, Size: 0x1]
	enum C_DoubleInteractMoveType;//[Offset: 0x1e81, Size: 0x1]
	enum C_DoubleInteractGenderType;//[Offset: 0x1e82, Size: 0x1]
	float C_AOp_BodyLowAngleForGrenade;//[Offset: 0x1e84, Size: 0x4]
	float C_AOp_BodyLowAngleForGun;//[Offset: 0x1e88, Size: 0x4]
	bool C_AOp_WeaponTypeIsColdsteel;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8c, Size: 0x1]
	bool C_AOp_SM_2MeleeAttack;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8d, Size: 0x1]
	bool C_AOp_WeaponTypeIsGun;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8e, Size: 0x1]
	bool C_AOp_SM_2RangedAttack;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8f, Size: 0x1]
	bool C_AOp_FireEffectSwitch;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e90, Size: 0x1]
	bool C_AOp_AinmationHighReady;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e91, Size: 0x1]
	enum C_AOp_CharacterScopeState;//[Offset: 0x1e92, Size: 0x1]
	float C_Aop_GatlingScoping;//[Offset: 0x1e94, Size: 0x4]
	bool C_AOp_FunctionUsedHighReady;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e98, Size: 0x1]
	bool C_ShouldBlendBone;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e99, Size: 0x1]
	AOpDirectionLerpVarConfig ColdWeaponJumpRotationConfig;//[Offset: 0x1ea0, Size: 0x20]
	Vector2D C_HeadAimOffset;//[Offset: 0x1ec0, Size: 0x8]
	bool C_InPhoto_NeedUseIK;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec8, Size: 0x1]
	bool C_Melee_PickUp;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec9, Size: 0x1]
	bool C_ScopeIn_InAir;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1eca, Size: 0x1]
	bool C_CrouchIdleNScopeIn;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ecb, Size: 0x1]
	bool C_NIdleNInAirCrouchNScopeIn;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ecc, Size: 0x1]
	bool C_GunScope_InAir;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ecd, Size: 0x1]
	bool C_CrouchNGunScope;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ece, Size: 0x1]
	bool C_CrouchGunSope;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ecf, Size: 0x1]
	bool C_StandGunScope;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed0, Size: 0x1]
	bool C_NGunScope;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed1, Size: 0x1]
	bool C_GunScope;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed2, Size: 0x1]
	bool C_StandNGunScope;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed3, Size: 0x1]
	bool C_NIdleNInAirStandNGunScope;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed4, Size: 0x1]
	bool C_Idle_Crouch_Scope;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed5, Size: 0x1]
	bool C_NGround_NIdle_NStand_Scope;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed6, Size: 0x1]
	Rotator C_ColdWeaponCrouchMoveRotater;//[Offset: 0x1ed8, Size: 0xc]
	float C_ColdWeaponStartJumpFRotYaw;//[Offset: 0x1ee4, Size: 0x4]
	Rotator C_ColdWeaponFallRotator;//[Offset: 0x1ee8, Size: 0xc]
	float C_BowCrouchMoveLeanR;//[Offset: 0x1ef4, Size: 0x4]
	float C_BowCrouchMoveLeanF;//[Offset: 0x1ef8, Size: 0x4]
	Rotator C_BowCrouchMoveRotator;//[Offset: 0x1efc, Size: 0xc]
	bool C_CrouchIdleNPowerStorage;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f08, Size: 0x1]
	bool C_PowerStorage_InAir;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f09, Size: 0x1]
	bool C_NIdleNInAirCrouchNPowerStorage;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0a, Size: 0x1]
	bool C_CrouchNPowerStorage;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0b, Size: 0x1]
	bool C_PowerStorage;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0c, Size: 0x1]
	bool C_NPowerStorageNFire;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0d, Size: 0x1]
	bool C_StandPowerStorage;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0e, Size: 0x1]
	bool C_CrouchPowerStorageIsMoving;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0f, Size: 0x1]
	bool C_CrouchPowerStorageNIsMoving;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f10, Size: 0x1]
	bool C_CrouchPowerStorage;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f11, Size: 0x1]
	bool C_StandNPowerStorage;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f12, Size: 0x1]
	bool C_NIdleNInAirStandNPowerStorage;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f13, Size: 0x1]
	bool C_NIdleNInAirIsMoving_NCrouch_InAir;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f14, Size: 0x1]
	bool C_ViewRotMoreThanBodyLowAngle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f15, Size: 0x1]
	bool C_Idle_VelLess10;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f16, Size: 0x1]
	bool C_NIdleNInAirVelMore10;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f17, Size: 0x1]
	bool C_Idle_NIsMoving_NCrouch_InAir;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f18, Size: 0x1]
	bool C_NCrouch_NSprint_VelLessCSSViewRotlsBLA;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f19, Size: 0x1]
	bool C_NCrouch_NSprint_VelLessCSSViewRotmtBLA;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1a, Size: 0x1]
	bool C_NStand_NGround_NIdleNInAir;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1b, Size: 0x1]
	bool C_AlwaysFalse;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1c, Size: 0x1]
	bool C_NStand_NGround_Idle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1d, Size: 0x1]
	bool C_StandNIdleNInAir;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1e, Size: 0x1]
	bool GrenadeCondToCrouchMoveH;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f1f, Size: 0x1]
	bool GrenadeCondToCrouchIdleH;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f20, Size: 0x1]
	bool C_NFunUseHighAopSm2Func;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f21, Size: 0x1]
	bool C_FunUseHighAopSm2Func;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f22, Size: 0x1]
	bool C_ScopeIn;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f23, Size: 0x1]
	bool C_StandNScopeIn;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f24, Size: 0x1]
	bool C_GatlingGunStand2Move;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f25, Size: 0x1]
	bool C_GatlingStand2BaseMove;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f26, Size: 0x1]
	bool C_GatlingStandCound2Move;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f27, Size: 0x1]
	bool C_StandIdleGunIdle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f28, Size: 0x1]
	bool C_StandIdleNGunIdle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f29, Size: 0x1]
	bool C_GunIdle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2a, Size: 0x1]
	bool C_GatGroundCond2GroundIdle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2b, Size: 0x1]
	bool C_GroundInAirGroundGunIdle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2c, Size: 0x1]
	bool C_GatGroundCond2GroundMidle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2d, Size: 0x1]
	bool C_MAirGunIdle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2e, Size: 0x1]
	bool C_NMAir_GunMiddle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2f, Size: 0x1]
	bool C_MAirGunMiddle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f30, Size: 0x1]
	bool C_NCrouch_NSprint_VellsCSS_PowerStorage;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f31, Size: 0x1]
	bool C_NCrouch_InAir_PowerStorage;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f32, Size: 0x1]
	bool C_NPowerStorageNFireGunIdle_NGround;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f33, Size: 0x1]
	bool C_CrouchPowerStorage_AIdleIsMoving;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f34, Size: 0x1]
	bool C_CrouchPowerStorage_AIdleNIsMoving;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f35, Size: 0x1]
	float C_LauncherCrouchScopeLeanLR;//[Offset: 0x1f38, Size: 0x4]
	bool C_GroundStandNPowerStorage;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f3c, Size: 0x1]
	bool C_StandIdleGroundNPowerStorageGunIdle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f3d, Size: 0x1]
	bool C_LauncherMove2StandCond;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f3e, Size: 0x1]
	bool C_LauncherStandCond2Move;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f3f, Size: 0x1]
	bool C_GroundPowerStorage;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f40, Size: 0x1]
	bool C_NIdle_PowerStorage;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f41, Size: 0x1]
	bool C_LauncherLow2OnGround;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f42, Size: 0x1]
	float C_LauncherFallToRunFVar;//[Offset: 0x1f44, Size: 0x4]
	bool C_LauncherUseMiddleAim;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f48, Size: 0x1]
	bool C_Idle_Crouch_PowerStorage;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f49, Size: 0x1]
	bool C_NLauncher_SM2Func;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4a, Size: 0x1]
	bool C_LauncherNSM2Func;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4b, Size: 0x1]
	bool C_BowNSm2Func;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4c, Size: 0x1]
	bool C_NBow_SM2Func;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4d, Size: 0x1]
	bool C_NGatling_SM2Func;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4e, Size: 0x1]
	bool C_GatlingNSM2Func;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4f, Size: 0x1]
	bool C_RangeAttack2HighReady;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f50, Size: 0x1]
	bool C_NIsGun_SM2Func;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f51, Size: 0x1]
	bool C_LowReady2HighReady;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f52, Size: 0x1]
	bool C_LowReady2HighReady2;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f53, Size: 0x1]
	bool C_HighReady2LowReady;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f54, Size: 0x1]
	bool C_HighReady2LowReady2;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f55, Size: 0x1]
	bool C_RangeAttack2LowReady;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f56, Size: 0x1]
	bool C_Unarmed2RangeAttck;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f57, Size: 0x1]
	bool C_RangeAttck2Unarmed;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f58, Size: 0x1]
	bool C_UnarmedMove2Conduit;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f59, Size: 0x1]
	bool C_UnarmedConduit2Move;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f5a, Size: 0x1]
	bool C_UnarmedConduit2OldBaseMove;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f5b, Size: 0x1]
	bool C_OldBaseMove2UnarmedConduit;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f5c, Size: 0x1]
	bool C_Function2UnarmedConduit;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f5d, Size: 0x1]
	bool C_UnarmedConduit2Function;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f5e, Size: 0x1]
	bool C_FuncBaseMove2Conduit;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f5f, Size: 0x1]
	bool C_FuncConduit2BaseMove;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f60, Size: 0x1]
	bool C_GrenadeMove2FuncCond;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f61, Size: 0x1]
	bool C_FuncCond2GrenadeMove;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f62, Size: 0x1]
	bool C_MeleeAttack2UnarmedCond;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f63, Size: 0x1]
	bool C_UnarmedCond2MeleeAttack;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f64, Size: 0x1]
	bool C_ColdMove2MeleeAttack;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f65, Size: 0x1]
	bool C_MeleeAttack2ColdMove;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f66, Size: 0x1]
	bool C_HoldArmshield;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f67, Size: 0x1]
	bool C_Gatling;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f68, Size: 0x1]
	bool C_UseHighReadyIK;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f69, Size: 0x1]
	bool C_UnarmedTremble;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f6a, Size: 0x1]
	Vector C_GunAimVector;//[Offset: 0x1f6c, Size: 0xc]
	Rotator C_GunAimRotator;//[Offset: 0x1f78, Size: 0xc]
	bool C_IsInteract;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f84, Size: 0x1]
	bool C_IsFurnitureInteract;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f85, Size: 0x1]
	bool C_IsHoldUpPassive;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f86, Size: 0x1]
	bool C_IsHoldUp;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f87, Size: 0x1]
	bool C_IsCarry_Kang_Passive;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f88, Size: 0x1]
	bool C_IsCarry_Kang;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f89, Size: 0x1]
	bool C_IsCarry_Bei_Passive;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8a, Size: 0x1]
	bool C_IsCarry_Bei;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8b, Size: 0x1]
	bool C_IsCarryCase;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8c, Size: 0x1]
	bool C_IsRollercoaster;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8d, Size: 0x1]
	bool C_IsCarousel_Front;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8e, Size: 0x1]
	bool C_IsCarousel_Rear;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8f, Size: 0x1]
	bool C_IsSkywheel;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f90, Size: 0x1]
	bool C_DoubleInteract_Moving;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f91, Size: 0x1]
	bool C_Walk2Driving;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f92, Size: 0x1]
	bool C_Driving2Walk;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f93, Size: 0x1]
	bool C_IsSkiing;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f94, Size: 0x1]
	bool C_StandIdleNScope;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f95, Size: 0x1]
	bool C_NGroundNSope;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f96, Size: 0x1]
	bool bIsLandingHard;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f97, Size: 0x1]
	float ReloadBlendOutTime;//[Offset: 0x1f98, Size: 0x4]
	float C_FurnitureDelta;//[Offset: 0x1f9c, Size: 0x4]
	bool C_UseShootReload;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1fa0, Size: 0x1]
	bool C_IsHoldGunIdlePose;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1fa1, Size: 0x1]
	enum C_MeleeAimType;//[Offset: 0x1fa2, Size: 0x1]
	bool C_InNavalSteering;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1fa3, Size: 0x1]
	bool C_bColdWeaponExtraAdd;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1fa4, Size: 0x1]
	bool C_bHormoneCast;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1fa5, Size: 0x1]
	bool C_HalfBodyLandingRule;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1fa6, Size: 0x1]
	bool C_IsInSelfie;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1fac, Size: 0x1]
	SkeletalMesh* C_StaticModeCopySkeleton;//[Offset: 0x1fb0, Size: 0x8]
	Transform[] C_StaticModeCopyTransform;//[Offset: 0x1fb8, Size: 0x10]
	SkeletalMesh* CachedStaticModeCopySkeleton;//[Offset: 0x1fc8, Size: 0x8]
	Transform[] CachedStaticModeCopyTransform;//[Offset: 0x1fd0, Size: 0x10]
	bool CachedIsInStaticMode;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1fe0, Size: 0x1]
	bool C_IsInStaticMode;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1fe1, Size: 0x1]
	bool EnableWinkMorphTarget;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1fe2, Size: 0x1]
	float WinkTime;//[Offset: 0x1fe4, Size: 0x4]
	float WinkTimeElapsed;//[Offset: 0x1fe8, Size: 0x4]
	CurveFloat* WinkCurve;//[Offset: 0x1ff0, Size: 0x8]
	void TryToFireFlareGun();// 0x30db914
	void SetMachineGunAnim(AnimSequenceBase* BasePose, BlendSpaceBase* AimOffset);// 0x30db860
	bool Selfie_IsInSelfieStatePure();// 0x30db828
	Vector2D Selfie_GetSelfieAO();// 0x30db7f4
	void RevertDefaultMachineGunAnim();// 0x30db7e0
	float OnWeaponChangeAnim(enum Layer, enum OldState, enum NewState);// 0x30db6dc
	bool OnReceiveFreezeRagdoll();// 0x30db6c4
	void OnHoldGunStateChange(enum OldGunState, enum NewGunState);// 0x30db60c
	void NativeUpdateStaticModeParam();// 0x30db5f8
	bool IsPlayingRescueAnimCPP();// 0x30db590
	bool IsPlayingRescueAnim();// 0x30db550
	PlayerCharacter* GetCharacterOwner();// 0x30db51c
	void CacheWeaponTypeParamList(float DeltaSeconds);// 0x30db4a0
	void CacheWeaponStateParamList(float DeltaSeconds);// 0x30db424
<----------Generated by SSpawner v1.0.2---------->


Class: BaseAnimationInstance.AnimInstance.Object
	Rotator OwnerAimRotation;//[Offset: 0xb80, Size: 0xc]
	byte AnimInstanceType;//[Offset: 0xb8c, Size: 0x1]
	bool C_Move;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xb8d, Size: 0x1]
	bool C_IsCharacterMoving;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xb8e, Size: 0x1]
	bool C_IsSwimUp;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xb8f, Size: 0x1]
	bool C_MovementChanged;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xb90, Size: 0x1]
	bool C_UseHairAnimDynamics;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xb91, Size: 0x1]
	bool C_IsObstructed;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xb92, Size: 0x1]
	Rotator SwimRotate;//[Offset: 0xb94, Size: 0xc]
	bool C_ShouldPauseAnim;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xba0, Size: 0x1]
	bool C_IsJumping;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xba1, Size: 0x1]
	bool C_IsStandJump;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xba2, Size: 0x1]
	bool C_IsForwardJump;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xba3, Size: 0x1]
	bool C_IsBackwardJump;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xba4, Size: 0x1]
	bool C_IsHorizonalJump;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xba5, Size: 0x1]
	bool C_IsTurning;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xba6, Size: 0x1]
	bool C_IdleAddtiveValid;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xba7, Size: 0x1]
	float C_SwimSpeed;//[Offset: 0xba8, Size: 0x4]
	float C_MaxFallingSpeed;//[Offset: 0xbac, Size: 0x4]
	float C_HandleFolderFactor;//[Offset: 0xbb0, Size: 0x4]
	float C_CharacterYawRotateRate;//[Offset: 0xbb4, Size: 0x4]
	byte C_LODLevel;//[Offset: 0xbb8, Size: 0x1]
	bool C_LODLevelForced;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xbb9, Size: 0x1]
	bool C_NoAdditiveMovement;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xbba, Size: 0x1]
	byte C_LastMovementMode;//[Offset: 0xbc0, Size: 0x1]
	byte C_PoseType;//[Offset: 0xbc1, Size: 0x1]
	byte C_LastPoseType;//[Offset: 0xbc2, Size: 0x1]
	Rotator C_OwnerRotation;//[Offset: 0xbc4, Size: 0xc]
	Rotator C_ControlRotation;//[Offset: 0xbd0, Size: 0xc]
	Rotator C_ViewRotation;//[Offset: 0xbdc, Size: 0xc]
	Vector C_MoveVelocity;//[Offset: 0xbe8, Size: 0xc]
	float C_MoveVelocityZ;//[Offset: 0xbf4, Size: 0x4]
	Vector C_MoveVelocityInWorldSpace;//[Offset: 0xbf8, Size: 0xc]
	Vector C_MoveDir;//[Offset: 0xc04, Size: 0xc]
	Character* C_BaseOwnerCharacter;//[Offset: 0xc10, Size: 0x8]
	BaseMotionComponent* C_BaseMotionComp;//[Offset: 0xc18, Size: 0x8]
	bool C_IsMainCharacter;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xc20, Size: 0x1]
	bool C_IsMale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xc21, Size: 0x1]
	bool C_IsInSprintState;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xc22, Size: 0x1]
	bool C_ShouldAdditiveFlare;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xc25, Size: 0x1]
	bool C_ShouldPlayObstructedAnim;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xc26, Size: 0x1]
	bool C_ShouldIK;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xc27, Size: 0x1]
	bool C_ShouldForbiddenIK;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xc28, Size: 0x1]
	bool C_IsFPPMode;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xc29, Size: 0x1]
	float C_MoveAnimRate;//[Offset: 0xc2c, Size: 0x4]
	float C_MoveSpeed2D;//[Offset: 0xc30, Size: 0x4]
	float C_MoveDirection;//[Offset: 0xc34, Size: 0x4]
	bool C_IsInJumpRollState;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xc38, Size: 0x1]
	int C_Sleep;//[Offset: 0xc3c, Size: 0x4]
	float C_InputDirection;//[Offset: 0xc40, Size: 0x4]
	float C_InputMagnitude;//[Offset: 0xc44, Size: 0x4]
	bool C_bMoveForwardDir;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xc48, Size: 0x1]
	bool C_bSwitchMoveForwardAndBack;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xc49, Size: 0x1]
	bool C_EnableLeftHandAttachIK;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xc58, Size: 0x1]
	bool C_EnableRightHandAttachIK;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xc59, Size: 0x1]
	Transform C_LeftHandAttachTrans;//[Offset: 0xc60, Size: 0x30]
	Transform C_RightHandAttachTrans;//[Offset: 0xc90, Size: 0x30]
	bool C_EnableLeftFootAttachIK;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xcc0, Size: 0x1]
	bool C_EnableRightFootAttachIK;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xcc1, Size: 0x1]
	Transform C_LeftFootAttachTrans;//[Offset: 0xcd0, Size: 0x30]
	Transform C_RightFootAttachTrans;//[Offset: 0xd00, Size: 0x30]
	float C_FPS;//[Offset: 0xd30, Size: 0x4]
	Vector C_RawMoveInput;//[Offset: 0xd34, Size: 0xc]
	AimOffsetBlendSpace* C_AimBlendSpace;//[Offset: 0xd40, Size: 0x8]
	BlendSpace* C_MovementBSCache;//[Offset: 0xd48, Size: 0x8]
	BlendSpace* C_MovementBSCache_Dest;//[Offset: 0xd50, Size: 0x8]
	BlendSpace* C_ObstructedAnim;//[Offset: 0xd58, Size: 0x8]
	BlendSpace1D* C_FallingBS;//[Offset: 0xd60, Size: 0x8]
	CurveFloat* C_FallingIKCurve;//[Offset: 0xd68, Size: 0x8]
	AnimSequence* C_TurnAnim;//[Offset: 0xd70, Size: 0x8]
	AnimSequence* C_PreJumpStart;//[Offset: 0xd78, Size: 0x8]
	AnimSequence* C_JumpStart;//[Offset: 0xd80, Size: 0x8]
	AnimSequence* C_JumpStartF;//[Offset: 0xd88, Size: 0x8]
	AnimSequence* C_LandLight;//[Offset: 0xd90, Size: 0x8]
	AnimSequence* C_LandMiddle;//[Offset: 0xd98, Size: 0x8]
	AnimSequence* C_LandHeavy;//[Offset: 0xda0, Size: 0x8]
	AnimSequence* C_IdleAddtive;//[Offset: 0xda8, Size: 0x8]
	AnimSequence* C_MovementBase;//[Offset: 0xdb0, Size: 0x8]
	AnimSequence* C_StandbyAnimSequence;//[Offset: 0xdb8, Size: 0x8]
	BlendSpace* C_MoveStartBS;//[Offset: 0xdc0, Size: 0x8]
	BlendSpace* C_MoveStopLeftBS;//[Offset: 0xdc8, Size: 0x8]
	BlendSpace* C_MoveStopRightBS;//[Offset: 0xdd0, Size: 0x8]
	BlendSpace* C_ColdWStandMoveBS;//[Offset: 0xdd8, Size: 0x8]
	BlendSpace* C_ColdWCrouchMoveBS;//[Offset: 0xde0, Size: 0x8]
	AnimSequence* C_ColdWCrouchBase;//[Offset: 0xde8, Size: 0x8]
	AnimSequence* C_ColdWStandBase;//[Offset: 0xdf0, Size: 0x8]
	AnimSequence* C_ColdWStandIdleIdditive;//[Offset: 0xdf8, Size: 0x8]
	AnimSequence* C_ColdWCrouchIdleIdditive;//[Offset: 0xe00, Size: 0x8]
	AimOffsetBlendSpace* C_ColdWStandAimBS;//[Offset: 0xe08, Size: 0x8]
	AnimSequence* C_StandColdWExtraAdditive;//[Offset: 0xe10, Size: 0x8]
	AnimSequence* C_CrouchColdWExtraAdditive;//[Offset: 0xe18, Size: 0x8]
	AnimSequenceBase* C_CustomAnimSeq;//[Offset: 0xe20, Size: 0x8]
	AnimSequenceBase* C_CustomMovingAnimSeq;//[Offset: 0xe28, Size: 0x8]
	AnimSequence* C_CacheStandbyAnimSequence;//[Offset: 0xe30, Size: 0x8]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xe38, Size: 0x1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xe39, Size: 0x1]
	bool b_C_LODLevel_Bigger;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xe3a, Size: 0x1]
	bool C_LOD_Bigger;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xe3b, Size: 0x1]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation;//[Offset: 0xe3c, Size: 0xc]
	Rotator r_C_OwnerAimRotation_SUB_C_OwnerRotation_Yaw;//[Offset: 0xe48, Size: 0xc]
	Rotator r_C_FPPStandOffsetRotation_half;//[Offset: 0xe54, Size: 0xc]
	Rotator r_C_FPPCrouchOffsetRotation_half;//[Offset: 0xe60, Size: 0xc]
	Rotator r_C_FPPProneOffsetRotation_half;//[Offset: 0xe6c, Size: 0xc]
	float f_C_MoveVelocityLengthSquard;//[Offset: 0xe78, Size: 0x4]
	bool b_C_MoveVelocityLengthSquard_Bigger;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xe7c, Size: 0x1]
	Vector C_MoveVelocityInWorldSpaceReverse;//[Offset: 0xe80, Size: 0xc]
	float C_CharacterYawRotateRate_Reverse;//[Offset: 0xe8c, Size: 0x4]
	float f_FallingVelocityZFactor;//[Offset: 0xe90, Size: 0x4]
	float f_C_MoveVelocity_X_FallingZFactor;//[Offset: 0xe94, Size: 0x4]
	bool b_WalkToUnarmedFalling;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xe98, Size: 0x1]
	bool b_WalkToRifleJumpStationStart;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xe99, Size: 0x1]
	bool b_StandToRifleJumpStationStart;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xe9a, Size: 0x1]
	bool b_UnarmedFallingToRifleFallLandingHard;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xe9b, Size: 0x1]
	bool b_UnarmedFallingToRifleCombatFallLanding;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xe9c, Size: 0x1]
	bool b_UnarmedFallingToRifleFallLandingMiddle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xe9d, Size: 0x1]
	bool b_C_LastMovementMode_EQ_Falling;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xe9e, Size: 0x1]
	bool b_C_LastMovementMode_NEQ_Falling;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xe9f, Size: 0x1]
	float f_C_ViewRotation_Yaw;//[Offset: 0xea0, Size: 0x4]
	float b_WalkAdditiveAlpha;//[Offset: 0xea4, Size: 0x4]
	float f_C_MoveVelocity_Div_SwimSpeed_X;//[Offset: 0xea8, Size: 0x4]
	float f_C_MoveVelocity_Div_SwimSpeed_Y;//[Offset: 0xeac, Size: 0x4]
	bool C_IsClimbingLandder;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xeb0, Size: 0x1]
	enum C_ClimbType;//[Offset: 0xeb1, Size: 0x1]
	enum C_ClimbingState;//[Offset: 0xeb2, Size: 0x1]
	float f_MovementBSChangeDefaultBlendTime;//[Offset: 0xeb4, Size: 0x4]
	float f_PoseChangeBlendTime;//[Offset: 0xeb8, Size: 0x4]
	float f_JumpLandingHeavyZOffset;//[Offset: 0xebc, Size: 0x4]
	float f_JumpLandingHeavyZThreshold;//[Offset: 0xec0, Size: 0x4]
	float f_JumpLandingMiddleZThreshold;//[Offset: 0xec4, Size: 0x4]
	Vector Acceleration;//[Offset: 0xec8, Size: 0xc]
	Vector LocalAcceleration;//[Offset: 0xed4, Size: 0xc]
	bool C_M_isCrouching;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xee0, Size: 0x1]
	bool C_M_isMovingstop;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xee1, Size: 0x1]
	bool C_M_canEntertoMovestart;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xee2, Size: 0x1]
	bool C_M_canEnterIdletoMovestart;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xee3, Size: 0x1]
	bool C_M_InputMagEqualTo2;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xee4, Size: 0x1]
	bool C_M_VelocityEqualTo600;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xee5, Size: 0x1]
	bool C_M_canEnterSprintTranstoMove;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xee6, Size: 0x1]
	bool C_M_canEnterSprintingToMove;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xee7, Size: 0x1]
	bool C_M_MoceVelocitynotequalsto0;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xee8, Size: 0x1]
	bool C_M_isLandingStationary;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xee9, Size: 0x1]
	bool C_M_isLandingMiddle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xeea, Size: 0x1]
	bool C_M_isLandingHard;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xeeb, Size: 0x1]
	bool C_M_canEnterWalktoSleep;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xeec, Size: 0x1]
	bool C_M_canEnterSleeptoWalk;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xeed, Size: 0x1]
	bool C_M_HalfBodySlotRule;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xeee, Size: 0x1]
	bool C_M_canEnterWalktoSwimming;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xeef, Size: 0x1]
	bool C_M_canEnterWalktoFlying;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xef0, Size: 0x1]
	bool C_M_canEnterSwimmingtoWalk;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xef1, Size: 0x1]
	bool C_M_canEnterFlyingtoWalk;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xef2, Size: 0x1]
	bool C_M_ObstructUseIKRule;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xef3, Size: 0x1]
	bool C_M_TotalIKRule;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xef4, Size: 0x1]
	float C_M_LastDirection;//[Offset: 0xef8, Size: 0x4]
	float C_M_LastSpeed;//[Offset: 0xefc, Size: 0x4]
	float C_M_Yaw;//[Offset: 0xf00, Size: 0x4]
	float C_M_YawDelta;//[Offset: 0xf04, Size: 0x4]
	Rotator C_M_RotationLastTick;//[Offset: 0xf08, Size: 0xc]
	bool C_M_RightFootLand;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xf14, Size: 0x1]
	bool C_M_LeftFootLand;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xf15, Size: 0x1]
	bool C_InCustomAnimState;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xf16, Size: 0x1]
	enum C_CustomAnimPoseType;//[Offset: 0xf17, Size: 0x1]
	bool C_LandingEven;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xf18, Size: 0x1]
	bool C_SetUseArtCamera;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xf19, Size: 0x1]
	float C_CameraAimOffsetZ;//[Offset: 0xf1c, Size: 0x4]
	AnimSequence* C_AOp_FunctionCrouchBasePose;//[Offset: 0xf20, Size: 0x8]
	AnimSequence* C_AOp_FunctionStandBasePose;//[Offset: 0xf28, Size: 0x8]
	Rotator C_AOp_LastVelocityRotation;//[Offset: 0xf30, Size: 0xc]
	Rotator C_AOp_CharacterRotationLast;//[Offset: 0xf3c, Size: 0xc]
	Rotator C_AOp_CharacterRotation;//[Offset: 0xf48, Size: 0xc]
	Vector C_AOp_InterpMoveVelocity;//[Offset: 0xf54, Size: 0xc]
	Vector C_AOp_MovingScaleItemL;//[Offset: 0xf60, Size: 0xc]
	Vector C_AOp_MovingScaleItemR;//[Offset: 0xf6c, Size: 0xc]
	Vector C_AOp_CharacterVelocity;//[Offset: 0xf78, Size: 0xc]
	float C_AOp_OnGroundAnimOffset;//[Offset: 0xf84, Size: 0x4]
	float C_AOp_OnGroundAddtive;//[Offset: 0xf88, Size: 0x4]
	float C_AOp_JumpRotateVar;//[Offset: 0xf8c, Size: 0x4]
	float C_AOp_LeanInAir;//[Offset: 0xf90, Size: 0x4]
	float C_AOp_BaseMoveRate;//[Offset: 0xf94, Size: 0x4]
	float C_AOp_DirectionBackInterp;//[Offset: 0xf98, Size: 0x4]
	float C_AOp_ForwardDirection;//[Offset: 0xf9c, Size: 0x4]
	float C_AOp_FallingSpeed;//[Offset: 0xfa0, Size: 0x4]
	float C_AOp_BackwardDirection;//[Offset: 0xfa4, Size: 0x4]
	float C_AOp_BackwardTick;//[Offset: 0xfa8, Size: 0x4]
	float C_AOp_JumpInAirLeanVar;//[Offset: 0xfac, Size: 0x4]
	float C_AOp_DirectionInterp;//[Offset: 0xfb0, Size: 0x4]
	float C_AOp_ForwardMoveReset;//[Offset: 0xfb4, Size: 0x4]
	float C_AOp_SinTime;//[Offset: 0xfb8, Size: 0x4]
	float C_AOp_FloatChecker;//[Offset: 0xfbc, Size: 0x4]
	float C_AOp_LastDirectionVar;//[Offset: 0xfc0, Size: 0x4]
	float C_AOp_LastDirectionInterp;//[Offset: 0xfc4, Size: 0x4]
	float C_AOp_Direction;//[Offset: 0xfc8, Size: 0x4]
	float C_AOp_LeanAlphaVar;//[Offset: 0xfcc, Size: 0x4]
	float C_AOp_CharacterSpeedInterp;//[Offset: 0xfd0, Size: 0x4]
	float C_AOp_CharacterSpeed;//[Offset: 0xfd4, Size: 0x4]
	float C_AOp_MovingTick;//[Offset: 0xfd8, Size: 0x4]
	float C_AOp_IKBlendTime;//[Offset: 0xfdc, Size: 0x4]
	float C_AOp_LastDirection;//[Offset: 0xfe0, Size: 0x4]
	int C_AOp_LowReadyRamdon;//[Offset: 0xfe4, Size: 0x4]
	bool C_AOp_State_MoveToIdleBackward;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xfe8, Size: 0x1]
	bool C_AOp_ContinuousJump;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xfe9, Size: 0x1]
	bool C_AOp_IsMoveForwardBeforeJump;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xfea, Size: 0x1]
	bool C_AOp_State_MoveToIdleForward;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xfeb, Size: 0x1]
	bool C_AOp_InAirRotation;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xfec, Size: 0x1]
	bool C_AOp_IsMoving;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xfed, Size: 0x1]
	bool C_AOp_IsMoveForward;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xfee, Size: 0x1]
	bool C_AOp_ForceOldBaseMove;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xfef, Size: 0x1]
	bool C_AOp_SM_2Unarmed;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xff0, Size: 0x1]
	bool C_AOp_State_IdleToMove;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xff1, Size: 0x1]
	bool C_AOp_State_IdleToStandConduit;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xff2, Size: 0x1]
	bool C_AOp_ForwardMoveSwitch;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xff3, Size: 0x1]
	bool C_AOp_SM_2Function;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xff4, Size: 0x1]
	bool C_AOp_UseStopAni;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xff5, Size: 0x1]
	bool C_AOp_InAirAndGrounding;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xff6, Size: 0x1]
	bool C_AOp_ChangeDirection;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xff7, Size: 0x1]
	bool C_AOp_isTurning;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xff8, Size: 0x1]
	bool C_AOp_OnGroundToIdleToMiddle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xff9, Size: 0x1]
	bool C_AOp_OnGroundToIdleToHeight;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xffa, Size: 0x1]
	bool C_AOp_OnGroundToIdleToLow;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xffb, Size: 0x1]
	bool C_AOp_UseIK;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xffc, Size: 0x1]
	bool C_AOp_IsJumping;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xffd, Size: 0x1]
	enum C_AOp_CharacterPoseState;//[Offset: 0xffe, Size: 0x1]
	enum C_AOp_CharacterActionState;//[Offset: 0xfff, Size: 0x1]
	byte C_AOp_Movementmode;//[Offset: 0x1000, Size: 0x1]
	enum C_AOp_CharacterMovingState;//[Offset: 0x1001, Size: 0x1]
	AOpDirectionLerpVar C_AOp_JumpRotarteP_LR;//[Offset: 0x1004, Size: 0x20]
	AOpDirectionLerpVar C_AOp_JumpOnGroundStr;//[Offset: 0x1024, Size: 0x20]
	AOpDirectionLerpVar C_AOp_JumpInAirLeaning;//[Offset: 0x1044, Size: 0x20]
	AOpDirectionLerpVar C_AOp_JumpOnGroundAniOffset;//[Offset: 0x1064, Size: 0x20]
	Vector2D C_AOp_FeetPosition;//[Offset: 0x1084, Size: 0x8]
	AOpDirectionLerpVar C_AOp_JumpRotarteP_B;//[Offset: 0x108c, Size: 0x20]
	AOpDirectionLerpVar C_AOp_JumpRotarteP_F;//[Offset: 0x10ac, Size: 0x20]
	bool C_AOp_BPDebugSwitch;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x10cc, Size: 0x1]
	float C_JumpRotateInputYaw;//[Offset: 0x10d0, Size: 0x4]
	bool C_bUseNormalFallingPose;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x10d4, Size: 0x1]
	AOpDirectionLerpVarConfig HighReadyJumpRotationConfig;//[Offset: 0x10d8, Size: 0x20]
	AOpDirectionLerpVarConfig LowReadyJumpRotationConfig;//[Offset: 0x10f8, Size: 0x20]
	AOpDirectionLerpVarConfig UnarmedJumpRotationConfig;//[Offset: 0x1118, Size: 0x20]
	AOpDirectionLerpVarConfig BowJumpRotationConfig;//[Offset: 0x1138, Size: 0x20]
	AOpDirectionLerpVarConfig DefaultJumpRotationConfig;//[Offset: 0x1158, Size: 0x20]
	Vector2D C_LeanGrounded;//[Offset: 0x1178, Size: 0x8]
	float WalkSpeed;//[Offset: 0x1180, Size: 0x4]
	float RunSpeed;//[Offset: 0x1184, Size: 0x4]
	AnimSequence* C_FunctionStandBasePose;//[Offset: 0x11a8, Size: 0x8]
	AnimSequence* C_FunctionCrouchBasePose;//[Offset: 0x11b0, Size: 0x8]
	AnimSequence* C_BuildingStandBasePose;//[Offset: 0x11b8, Size: 0x8]
	AnimSequence* C_BuildingCrouchBasePose;//[Offset: 0x11c0, Size: 0x8]
	bool C_bCouchSprint;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11c8, Size: 0x1]
	bool C_NCrouch_NSPrint_Vstcss;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11c9, Size: 0x1]
	bool C_Idle_NMoving;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11ca, Size: 0x1]
	bool C_NIdleNInAirMoving;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11cb, Size: 0x1]
	float C_HeadAnimOffset_NeX;//[Offset: 0x11cc, Size: 0x4]
	bool C_CrouchMIdle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11d0, Size: 0x1]
	bool C_NCrouch;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11d1, Size: 0x1]
	bool C_InAir;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11d2, Size: 0x1]
	bool C_NIdleNInAirCrouch;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11d3, Size: 0x1]
	bool C_NCrouch_InAir;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11d4, Size: 0x1]
	bool C_Crouch;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11d5, Size: 0x1]
	bool C_NStand_NGround_InAirGround;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11d6, Size: 0x1]
	bool C_GroundStand;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11d7, Size: 0x1]
	bool C_GroundContinJump;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11d8, Size: 0x1]
	bool C_StandIdleGround;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11d9, Size: 0x1]
	bool C_NStand_NGround_InAirGroundSwitch;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11da, Size: 0x1]
	bool C_NIdleNInAirStandGroundNContinJump;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11db, Size: 0x1]
	bool C_NGround;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11dc, Size: 0x1]
	bool C_Ground;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11dd, Size: 0x1]
	bool C_Idle_Crouch;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11de, Size: 0x1]
	float C_JumpRotateYaw;//[Offset: 0x11e0, Size: 0x4]
	bool C_GroundNContinJump;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11e4, Size: 0x1]
	bool C_NIdleNInAir;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11e5, Size: 0x1]
	bool C_GroundNIdleInAirGrounding;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11e6, Size: 0x1]
	bool C_NGround_NIdle_NStand;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11e7, Size: 0x1]
	bool C_NGround_NIdle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11e8, Size: 0x1]
	float C_LowLandPlayRate;//[Offset: 0x11ec, Size: 0x4]
	float C_LowLandRotateYaw;//[Offset: 0x11f0, Size: 0x4]
	bool C_GroundNoMove;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11f4, Size: 0x1]
	bool C_GroundMove;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11f5, Size: 0x1]
	bool C_GroundIdleInAirGround;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11f6, Size: 0x1]
	bool C_NInAir;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11f7, Size: 0x1]
	bool C_LowReady_CanStartJumpB;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11f8, Size: 0x1]
	bool C_LowReady_CanStartJumpF;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11f9, Size: 0x1]
	bool C_NMoveFBeforeJumpIsMoving;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11fa, Size: 0x1]
	bool C_MoveFBeforeJumpIsMoving;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11fb, Size: 0x1]
	float C_FallToRunRotate;//[Offset: 0x11fc, Size: 0x4]
	float C_FallToIdleRotate;//[Offset: 0x1200, Size: 0x4]
	float C_HeadAnimOffset_NeHalfX;//[Offset: 0x1204, Size: 0x4]
	bool C_StandIdle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1208, Size: 0x1]
	bool C_Vault;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1209, Size: 0x1]
	bool C_Idle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x120a, Size: 0x1]
	bool C_NIdle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x120b, Size: 0x1]
	bool C_NGround_InAirJumping;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x120c, Size: 0x1]
	bool C_mAir;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x120d, Size: 0x1]
	bool C_NmAir;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x120e, Size: 0x1]
	bool C_mAirJumping;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x120f, Size: 0x1]
	bool C_mAirNJumping;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1210, Size: 0x1]
	float C_HighReadyFallVar;//[Offset: 0x1214, Size: 0x4]
	bool C_StandSprint_CrouchSprint;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1218, Size: 0x1]
	float C_CrouchMoveLeanRight;//[Offset: 0x121c, Size: 0x4]
	bool C_MoveBack_MoveForward;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1220, Size: 0x1]
	bool C_MoveForwardContinusJump;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1221, Size: 0x1]
	bool C_MoveFBeforeJumpNContinJump;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1222, Size: 0x1]
	bool C_NIsMoving_Idle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1223, Size: 0x1]
	float C_BowMoveLeanLR;//[Offset: 0x1224, Size: 0x4]
	bool C_NIdleNInAirStand;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1228, Size: 0x1]
	bool C_StandIdleMiddle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1229, Size: 0x1]
	bool C_GroundNInAirGround;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x122a, Size: 0x1]
	bool C_NMoveFBeforeJump_NIsMoving;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x122b, Size: 0x1]
	float C_LowGroundRotYaw;//[Offset: 0x122c, Size: 0x4]
	bool C_Middle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1230, Size: 0x1]
	bool C_StandMiddleGround;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1231, Size: 0x1]
	bool C_NStand_NGround_InAirGround_Middle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1232, Size: 0x1]
	bool C_NStand_NGround;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1233, Size: 0x1]
	bool C_NIdleNInAirGround;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1234, Size: 0x1]
	bool C_DirAbsLess22p5;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1235, Size: 0x1]
	bool C_DirAbsLess67p5;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1236, Size: 0x1]
	bool C_DirAbsLess112p5;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1237, Size: 0x1]
	bool C_DirAbsLess157p5;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1238, Size: 0x1]
	bool C_DirLess0;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1239, Size: 0x1]
	float C_BackInterpMultiJumpRot;//[Offset: 0x123c, Size: 0x4]
	bool C_NCrouch_NSprint;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1240, Size: 0x1]
	float C_LowContinJumpPlayRate;//[Offset: 0x1244, Size: 0x4]
	float C_F_ColdFalltoRunYaw;//[Offset: 0x1248, Size: 0x4]
	bool C_NGround_InAirGroundSwitch;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x124c, Size: 0x1]
	bool C_Stand_Crouch;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x124d, Size: 0x1]
	bool C_ForwardJump;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x124e, Size: 0x1]
	bool C_BackJump;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x124f, Size: 0x1]
	bool C_Move_Jumping;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1250, Size: 0x1]
	bool C_AnimNotifyToDisableIK;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1268, Size: 0x1]
	bool C_BeginStandby;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1269, Size: 0x1]
	bool C_Standby;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x126a, Size: 0x1]
	bool C_DisableStandby;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x126b, Size: 0x1]
	float C_StandingDelta;//[Offset: 0x126c, Size: 0x4]
	float C_MinStandingThrehold;//[Offset: 0x1270, Size: 0x4]
	float C_MaxStandingThrehold;//[Offset: 0x1274, Size: 0x4]
	float standbyAnimLength;//[Offset: 0x127c, Size: 0x4]
	float revertBeginStandbyTime;//[Offset: 0x1280, Size: 0x4]
	float C_ViewRotateSpeed;//[Offset: 0x1284, Size: 0x4]
	float C_JumpRotateLerpSpeed;//[Offset: 0x1288, Size: 0x4]
	float C_JumpRotateMaxAngle;//[Offset: 0x128c, Size: 0x4]
	float C_LeftJumpRotateAngleScaling;//[Offset: 0x1290, Size: 0x4]
	float C_RightJumpRotateAngleScaling;//[Offset: 0x1294, Size: 0x4]
	float C_AOp_CrouchSprintSpeed;//[Offset: 0x1298, Size: 0x4]
	float C_AOp_StandSprintSpeed;//[Offset: 0x129c, Size: 0x4]
	float C_PoseChangeDuration;//[Offset: 0x12a0, Size: 0x4]
	bool C_IsStandSprint;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x12a4, Size: 0x1]
	bool C_IsCrouchSprint;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x12a5, Size: 0x1]
	bool C_NeedFootIK;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x12a6, Size: 0x1]
	void StopMontageBySlot(const FName SlotNodeName, float BlendOutTime);// 0x5219670
	void StopAnimMontage(AnimMontage* AnimMontage, float InBlendOutTime);// 0x52195b8
	void SetVelocityZFactor(float NewFactor);// 0x521953c
	void SetStandbyEnable(bool bEnable);// 0x52194b8
	void SetMovementBSToDest();// 0x521949c
	void SetMoveForwardCallBack();// 0x5219480
	void SetMontageBlendInOutTime(AnimMontage* Montage, float BlendInTime, float BlendOutTime);// 0x5219390
	void SetC_ViewRotation(Rotator NewRotator, float DeltaTime);// 0x52192d0
	void SetC_PoseType(byte NewECharacterPoseType);// 0x521924c
	void SetAttachIK(float DeltaSeconds);// 0x52191c8
	void PlayLanded();// 0x35332fc
	void PlayJump();// 0x35332fc
	void PlayAnimMontageByTime(AnimMontage* AnimMontage, bool IsPlay, float InPlayRate, float StartTime, bool IsLoop);// 0x521904c
	void PlayAnimMontage(AnimMontage* AnimMontage, bool IsPlay, float InPlayRate, FName StartSectionName);// 0x5218f10
	void OnMontageStartedInternal(AnimMontage* InAnimMontage);// 0x5218e8c
	void Monatage_StopForcly(float InBlendOutTime, const AnimMontage* Montage);// 0x5218dd4
	bool IsMontagePlaying(AnimMontage* AnimMontage);// 0x5218d4c
	void HandleOwnerAnimEvent(FName EventMsg);// 0x5218cc8
	float GetMontageSectionStartTimeByName(AnimMontage* Montage, FName InSectionName);// 0x5218c04
	float GetMontageSectionLengthByName(AnimMontage* Montage, FName InSectionName);// 0x5218b40
	float GetMontageSectionEndTimeByName(AnimMontage* Montage, FName InSectionName);// 0x5218a7c
	FName GetCurActiveMontageSlot(int Track);// 0x52189f8
	void DumpAllProperties();// 0x52189e4
	void DumpAllAnimInstancesInThisWorld();// 0x52189d0
	FString CheckBlueprintVarWithC();// 0x521894c
	void CacheOtherParamList(float DeltaSeconds);// 0x52188c8
	void CacheMoveParamList(float DeltaSeconds);// 0x5218844
	void CacheAopParamList(float DeltaSeconds);// 0x52187c0
<----------Generated by SSpawner v1.0.2---------->


Class: BaseMotionComponent.ActorComponent.Object
	delegate AnimMontagePlayDelegate;//[Offset: 0xf0, Size: 0x10]
	delegate AnimMontagePlayByTimeDelegate;//[Offset: 0x100, Size: 0x10]
	delegate AliasMontagePlayDelegate;//[Offset: 0x110, Size: 0x10]
	delegate AnimPlaySlotAnimDelegate;//[Offset: 0x120, Size: 0x10]
	delegate CharacterAnimEventDelegate;//[Offset: 0x130, Size: 0x10]
	delegate AnimListLoadFinishDelegate;//[Offset: 0x140, Size: 0x10]
	delegate AnimMontageStopDelegate;//[Offset: 0x150, Size: 0x10]
	delegate OnMotionAnimResetEvent;//[Offset: 0x160, Size: 0x10]
	delegate TurnInPlaceDelegate;//[Offset: 0x188, Size: 0x10]
	delegate StopTurnInPlaceDelegate;//[Offset: 0x198, Size: 0x10]
	delegate OnStandbyStatusChange;//[Offset: 0x1b8, Size: 0x10]
	BasePlayerAnimList BasePlayerAnimList;//[Offset: 0x240, Size: 0x228]
	BaseAnimStatusKeyList BaseLastUpdateStatusKeyList;//[Offset: 0x490, Size: 0xc]
	BaseAnimStatusKeyList BaseCurUpdateStatusKeyList;//[Offset: 0x49c, Size: 0xc]
	BaseCharacterAnimListComponent* AnimListComp;//[Offset: 0x4b0, Size: 0x8]
	void UpdateStandbyAnimIndex();// 0x52270fc
	void TurnInPlaceEvent__DelegateSignature(float Degrees);// 0x35332fc
	void TurnInPlace(float InDegrees);// 0x5227080
	void StopTurnInPlaceEvent__DelegateSignature();// 0x35332fc
	void StopTurnInPlace();// 0x522706c
	void StopMontageIfResolve(FString AnimMontage, float InBlendOutTime);// 0x5226fa4
	void StopAnimMontage(AnimMontage* AnimMontage, float InBlendOutTime);// 0x5226ee4
	void StopAllMontage(float InBlendOutTime);// 0x5226e60
	void StopAliasMontage(FName AliasMontage);// 0x5226ddc
	void StopActiveMontage(float InBlendOutTime);// 0x5226d58
	void SetViewRotation(out const Rotator ViewRot);// 0x5226cc8
	void SetStandbyAnimRange(int StartIndex, int EndIndex);// 0x5226c14
	void SetEnableLookAt(bool Enable);// 0x5226b88
	void SetAliasMontagePosition(FName AliasMontage, float Position);// 0x5226ac8
	void ReplaceAnim(int AnimType, FString AnimMontageRef);// 0x5226998
	void ProcessDeathStaticPose();// 0x522697c
	void PlaySkillEffectAnimNotify(FString ParticleName);// 0x5226894
	void PlayMontageWithSectionAndElapsedTime(FString AnimMontageRef, FName StartSectionName, float ElapsedTime, float PlayRate);// 0x52266fc
	void PlayMontageInMainAnimInst(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x5226600
	float PlayMontageIfResolve(FString AnimMontage, float InPlayRate, FName StartSectionName);// 0x52264ec
	void PlayMontageAssetWithSectionAndElapsedTime(AnimMontage* AnimMontage, FName StartSectionName, float ElapsedTime, float PlayRate);// 0x52263bc
	float PlayAnimMontageByTime(AnimMontage* AnimMontage, float InPlayRate, float StartTime, bool IsLoop);// 0x5226274
	float PlayAnimMontage(AnimMontage* AnimMontage, float InPlayRate, FName StartSectionName);// 0x522616c
	void PlayAliasMontageWithSectionAndElapsedTime(FName AliasMontage, FName StartSectionName, float ElapsedTime, float PlayRate);// 0x522603c
	float PlayAliasMontageAtTime(FName AliasMontage, float InPlayRate, float StartTime, bool IsLoop);// 0x5225ef4
	float PlayAliasMontage(FName AliasMontage, float InPlayRate, FName StartSectionName);// 0x5225dec
	void OnStandbyStatusChange__DelegateSignature(bool bTriggerIn, bool bCustomAnim);// 0x35332fc
	void OnMotionAnimResetEvent__DelegateSignature();// 0x35332fc
	void OnAvatarLoadedPlayAnim(AvatarBase* Avatar);// 0x5225d70
	bool OnAnimBpEvent(FString InEventName);// 0x5225c74
	void Montage_SetPlayRate(AnimMontage* AnimMontage, float NewPlayRate);// 0x5225bb4
	bool MainAnimIsInStandby();// 0x5225b7c
	void MainAnimExitStandby();// 0x5225b68
	void MainAnimEnterStandby();// 0x5225b54
	bool IsMontagePlayingByPath(FString AnimPath);// 0x5225a58
	bool IsMontagePlaying(AnimMontage* AnimMontage);// 0x52259c8
	bool IsAliasMontagePlaying(out const FName AliasMontage);// 0x5225928
	void HandleCharacterAnimEvent(FName EventMsg);// 0x52258ac
	AnimInstance* GetSubAnimInstance(FName InName);// 0x5225828
	uint64 GetServerID();// 0x52257f4
	byte GetPoseType();// 0x52257c0
	PlayerAnimData GetPlayerAnimationByEventType(byte AnimEventType);// 0x522571c
	float GetMontageSectionStartPosition(FString AnimMontageRef, FName SectionName);// 0x52255e8
	float GetMontageSectionLength(FString AnimMontageRef, FName SectionName, bool OnlySelfSection);// 0x5225470
	FString GetMontageRandomSection(FString AnimMontageRef, FName SectionName);// 0x52252f4
	float GetMontageAssetSectionStartPosition(AnimMontage* AnimMontage, FName SectionName);// 0x5225228
	float GetMontageAssetSectionLength(AnimMontage* AnimMontage, FName SectionName, bool OnlySelfSection);// 0x5225118
	AnimationAsset* GetCurrentStandbyAnimAsset(bool bFindCustomAnim);// 0x5225084
	AnimationAsset* GetCharacterJumpLandAsset(enum JumpAnimType, byte DirType);// 0x5224fbc
	AnimationAsset* GetCharacterAnimByAlias(FString AnimAlias);// 0x5224ec4
	AnimationAsset* GetCharacterAnimAsset(byte AnimType, byte PoseType);// 0x5224e04
	BasePlayerAnimList GetBasePlayerAnimation();// 0x5224ca8
	float GetAliasMontageSectionStartPosition(FName AliasMontage, FName SectionName);// 0x5224bdc
	float GetAliasMontageSectionLength(FName AliasMontage, FName SectionName, bool OnlySelfSection);// 0x5224acc
	FString GetAliasMontageRealName(FName AliasMontage);// 0x52249f4
	FString GetAliasMontageRandomSection(FName AliasMontage, FName SectionName);// 0x52248dc
	FString GetAliasMontageCurrentSection(FName AliasMontage);// 0x5224804
	FString Get8DirRootMotionCurveByAlias(FString AnimAlias, int Dir);// 0x5224688
	FString Get8DirRootMotionAnimByAlias(FString AnimAlias, int Dir);// 0x522450c
	bool Get8DirRootMotionAnimAndCurveByAlias(FString AnimAlias, out FString AnimPath, out FString AnimCurthPath, int Dir);// 0x522430c
	void ForceUpdateStandby();// 0x52242f8
	void ForcePlayerUpdateAnimation();// 0x52242dc
	void DetachParentMotion();// 0x52242c8
	bool CheckPlayerNeedUpdateAnimation(out byte OutForceUpdateFlag);// 0x5224228
	bool CheckNeedUpdateStandbyAnim(out byte CheckStandbyFlag);// 0x5224190
	void CharacterAnimEvent__DelegateSignature(FName EventMsg);// 0x35332fc
	void AttachParentMotion(BaseMotionComponent* Parent, uint32 CopyFlags);// 0x52240d8
	void AnimPlaySlotAnimEvent__DelegateSignature(AnimSequenceBase* AnimSequence, bool IsPlay, FName SlotName, float InPlayRate, float BlendTime);// 0x35332fc
	void AnimMontageStopEvent__DelegateSignature(AnimMontage* MontageToStop, float InBlendOutTime);// 0x35332fc
	void AnimMontagePlayEvent__DelegateSignature(AnimMontage* MontageToPlay, bool IsPlay, float PlayRate, FName StartSection);// 0x35332fc
	void AnimMontagePlayByTimeEvent__DelegateSignature(AnimMontage* MontageToPlay, bool IsPlay, float PlayRate, float StartTime, bool IsLoop);// 0x35332fc
	void AnimListLoadFinishEvent__DelegateSignature(byte CurAnimLayerType);// 0x35332fc
	void AliasMontagePlayEvent__DelegateSignature(FName AliasMontageToPlay, bool IsPlay, float PlayRate, FName StartSection);// 0x35332fc
	void AliasMontage_SetPlayRate(FName AliasMontage, float NewPlayRate);// 0x5224018
<----------Generated by SSpawner v1.0.2---------->


Class: BasePlayerAnimList
	PlayerAnimData MovementAnim;//[Offset: 0x0, Size: 0x18]
	PlayerAnimData ChangePoseAnim;//[Offset: 0x18, Size: 0x18]
	PlayerAnimData TurnAnim;//[Offset: 0x30, Size: 0x18]
	PlayerAnimData[] JumpAnimList;//[Offset: 0x48, Size: 0x10]
	PlayerAnimData[] JumpAnimListF;//[Offset: 0x58, Size: 0x10]
	PlayerAnimData Idle2Move_F_Anim;//[Offset: 0x68, Size: 0x18]
	PlayerAnimData Idle2Move_FL_Anim;//[Offset: 0x80, Size: 0x18]
	PlayerAnimData Idle2Move_L_Anim;//[Offset: 0x98, Size: 0x18]
	PlayerAnimData Idle2Move_BL_Anim;//[Offset: 0xb0, Size: 0x18]
	PlayerAnimData Idle2Move_B_Anim;//[Offset: 0xc8, Size: 0x18]
	PlayerAnimData Idle2Move_BR_Anim;//[Offset: 0xe0, Size: 0x18]
	PlayerAnimData Idle2Move_R_Anim;//[Offset: 0xf8, Size: 0x18]
	PlayerAnimData Idle2Move_FR_Anim;//[Offset: 0x110, Size: 0x18]
	PlayerAnimData Move2Idle_F_Anim;//[Offset: 0x128, Size: 0x18]
	PlayerAnimData Move2Idle_FL_Anim;//[Offset: 0x140, Size: 0x18]
	PlayerAnimData Move2Idle_L_Anim;//[Offset: 0x158, Size: 0x18]
	PlayerAnimData Move2Idle_BL_Anim;//[Offset: 0x170, Size: 0x18]
	PlayerAnimData Move2Idle_B_Anim;//[Offset: 0x188, Size: 0x18]
	PlayerAnimData Move2Idle_BR_Anim;//[Offset: 0x1a0, Size: 0x18]
	PlayerAnimData Move2Idle_R_Anim;//[Offset: 0x1b8, Size: 0x18]
	PlayerAnimData Move2Idle_FR_Anim;//[Offset: 0x1d0, Size: 0x18]
	PlayerAnimData Sprint2IdleAnim;//[Offset: 0x1e8, Size: 0x18]
	PlayerAnimData StandByAnim;//[Offset: 0x200, Size: 0x18]
	PlayerAnimData[] ExtraAnimList;//[Offset: 0x218, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerAnimData
	AnimationAsset* Animation;//[Offset: 0x0, Size: 0x8]
	float Rate;//[Offset: 0x8, Size: 0x4]
	FName AnimTransformKey;//[Offset: 0xc, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: BaseAnimStatusKeyList
<----------Generated by SSpawner v1.0.2---------->


Class: BaseCharacterAnimListComponent.BaseAnimListComponent.ActorComponent.Object
	CurveFloat* FallingIKCurve;//[Offset: 0x260, Size: 0x8]
	bool CurrentIsTPP;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x268, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: BaseAnimListComponent.ActorComponent.Object
	<int,AnimListMapValueData> AnimListMap;//[Offset: 0x140, Size: 0x50]
	bool needPostLoadFreshEditList;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	<int,ReasonToAnimData> CustomAnimListMap;//[Offset: 0x198, Size: 0x50]
	Object*[] PendingAnimRefList;//[Offset: 0x250, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimListMapValueData
	AnimListData[] AnimListMapValue;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimListData
	int LayerID;//[Offset: 0x0, Size: 0x4]
	AnimationAsset* Animation;//[Offset: 0x8, Size: 0x8]
	FString ExtString;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ReasonToAnimData
	<FName,CustomLoadAnimData> ReasonToAnimData;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: CustomLoadAnimData
	AnimationAsset* AnimAsset;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: XPlayerMotionComponent.XMotionComponent.BaseMotionComponent.ActorComponent.Object
	float HurtResetTime;//[Offset: 0x50c, Size: 0x4]
	float HurtBreakTime;//[Offset: 0x510, Size: 0x4]
	float HitCameraShakeResetTime;//[Offset: 0x514, Size: 0x4]
	float HoldToMiddleDuration;//[Offset: 0x518, Size: 0x4]
	float ReloadToMiddleDuration;//[Offset: 0x51c, Size: 0x4]
	float HoldToIdleDuration;//[Offset: 0x520, Size: 0x4]
	float StandSprintSpeed;//[Offset: 0x524, Size: 0x4]
	float CrouchSprintSpeed;//[Offset: 0x528, Size: 0x4]
	delegate OnAnimBpStartLanding;//[Offset: 0x530, Size: 0x10]
	delegate OnAnimBpEndLanding;//[Offset: 0x540, Size: 0x10]
	delegate OnAnimBpJumpLeaveLand;//[Offset: 0x550, Size: 0x10]
	delegate OnPlayerHoldGunMovementChange;//[Offset: 0x560, Size: 0x10]
	delegate OnPlayerPoseChange;//[Offset: 0x570, Size: 0x10]
	delegate OnPlayerPickUp;//[Offset: 0x580, Size: 0x10]
	delegate OnPlayerWeaponChangeState;//[Offset: 0x590, Size: 0x10]
	delegate OnPlayerEnterRescueingStatus;//[Offset: 0x5a0, Size: 0x10]
	delegate OnPlayerBeHitCameraShake;//[Offset: 0x5b0, Size: 0x10]
	PlayerAnimList CurPlayerAnimList;//[Offset: 0x5e0, Size: 0x5b0]
	PlayerVehAnimList CurPlayerVehAnimList;//[Offset: 0xb90, Size: 0x60]
	AnimVehParamList CurAnimVehParamList;//[Offset: 0xc70, Size: 0x4c]
	AnimStatusKeyList LastUpdateStatusKeyList;//[Offset: 0xcc0, Size: 0x30]
	AnimStatusKeyList CurUpdateStatusKeyList;//[Offset: 0xcf0, Size: 0x30]
	XMotionComponent* ShapeShiftMotionComp;//[Offset: 0xd20, Size: 0x8]
	<enum,MontageStopList> StateToStopMontageList;//[Offset: 0xd48, Size: 0x50]
	bool UnDoReplaceAnimList();// 0x31afcb8
	void StopMontageByTypeAndPose(byte AnimType, byte PoseType, float BlendOutTime);// 0x31afbc4
	void StopMontageByEventType(byte AnimEventType, float InBlendOutTime);// 0x31afb0c
	void StopFireAnim();// 0x31afaf8
	bool ShouldSkipSwitchWeaponAnim();// 0x31afac0
	void SetSleepType(int sleep);// 0x31afa44
	void SetSkipSwitchWeaponAnim(float Delta);// 0x31af9c8
	void SetInteractType(int InteractType);// 0x31af94c
	void SetInteractCaster(bool Is_Caster);// 0x31af8c8
	void SetInteractAnimData(bool IsAdd, int ActionID, int Probability);// 0x31af7c4
	void SetHoldGunState(enum NewHoldState, bool NoSync, FName Reason, int Priority);// 0x31af684
	void SetForbidPoseAnimOnce(bool Value);// 0x31af604
	void SetDoubleInteractMoveType(int InteractType);// 0x31af588
	void SetDoubleInteractGenderType(int InteractType);// 0x31af50c
	void SetBuildPlacing(bool IsPlacing);// 0x31af488
	void SetAfterFireTimer(float Delta);// 0x31af410
	void RetriggerDelayToSetHoldGunState(float DelayTime, FName ResetReason);// 0x31af358
	bool ReplaceJumpAnimList(SkillReplaceCharJumpAnimData[] AnimDataList);// 0x31af148
	bool ReplaceAnimList(SkillReplaceCharAnimData[] AnimDataList);// 0x31af08c
	void RemoveRangeCustomAnim(byte MinAnimType, byte MaxAnimType, byte PoseType, FName Reason);// 0x31aef5c
	void RemoveMonsterShapeshiftComp();// 0x31aef48
	void RemoveCustomAnimType(byte AnimType, byte PoseType, FName Reason);// 0x31aee54
	void PlayLocalShellDropFX();// 0x31aee40
	void OnWeaponMgrUnEquipWeapon(GSTWeaponBase* InWeapon);// 0x31aedc4
	void OnWeaponMgrEquipWeapon(GSTWeaponBase* InWeapon);// 0x31aed48
	void OnWeaponChangeState(byte State);// 0x31aecc4
	float OnWeaponChangeAnim(enum Layer, enum OldState, enum NewState);// 0x31aebb8
	void OnPlayerWeaponStateStart(byte StateStarted);// 0x31aeb3c
	void OnPlayerBeHitCameraShakeDelegate__DelegateSignature(enum BeHitShakeLevel);// 0x35332fc
	void OnMontageStop(AnimMontage* AnimMontage, bool bInterrupted);// 0x31aea7c
	void OnHoldGunMovementStateChange__DelegateSignature(enum FromState, enum toState);// 0x35332fc
	void OnCharacterWeaponStateChanged__DelegateSignature(byte CurState);// 0x35332fc
	void OnCharacterPickUpActorDelegate__DelegateSignature();// 0x35332fc
	void OnCharacterEnterRescueingStatusDelegate__DelegateSignature(bool IsTurnIntoRescueing);// 0x35332fc
	void OnCharacterChangePoseDelegate__DelegateSignature(byte LastPose, byte NewPose);// 0x35332fc
	void OnAnimBpWeaponIdleToBack();// 0x31aea68
	void OnAnimBpWeaponBackToIdle();// 0x31aea54
	void OnAnimBpStartLandingDelegate__DelegateSignature();// 0x35332fc
	void OnAnimBpReloadComplete();// 0x31aea40
	void OnAnimBpJumpLeaveLandDelegate__DelegateSignature();// 0x35332fc
	void OnAnimBpEndLandingDelegate__DelegateSignature();// 0x35332fc
	bool NeedStopReloadAnim();// 0x31aea08
	bool IsUsingShootWeapon();// 0x31ae9d0
	bool IsUsingFlareGun();// 0x31ae998
	bool IsSwimUpWater();// 0x31ae960
	bool IsStayInteractState();// 0x31ae928
	bool IsStayFurnitureState();// 0x31ae8f0
	bool IsPeekLeft();// 0x31ae8b8
	bool IsOnVehicle();// 0x31ae880
	bool IsLocalViewed();// 0x31ae848
	bool IsInState(enum inState);// 0x31ae7c0
	bool IsInPlane();// 0x31ae788
	bool IsInHeavyWeapon();// 0x31ae750
	bool IsInEnterNearDeathCD();// 0x31ae718
	bool IsFPP();// 0x31ae6e0
	bool IsFiredThisTick();// 0x31ae6a8
	bool IsCharacterRescueExitWithBlend();// 0x31ae670
	bool IsCharacter();// 0x31ae638
	bool IsAutoSprint();// 0x31ae600
	bool HasWeapon();// 0x31ae5c8
	bool HasVehcle();// 0x31ae590
	bool HasPeekCollision();// 0x31ae558
	void HandlePlayerPickUpActorByTarget(Actor* InWrapperActor, byte InCurrentPose);// 0x31ae4a0
	void HandlePlayerPickUpActorByLoc(float InTargetZLoc, byte InCurrentPose);// 0x31ae3e8
	void HandleOnCharAnimLoadingFinished(byte CurAnimLayerType);// 0x31ae36c
	XMotionComponent* GetShapeshiftComp();// 0x31ae350
	byte GetPlayerWeaponFireMode();// 0x31ae31c
	byte GetPlayerWeaponEquipSlot();// 0x31ae2e8
	AnimVehParamList GetPlayerVehAnimParam(float DeltaTime);// 0x31ae230
	PlayerVehAnimList GetPlayerVehAnimation();// 0x31ae1f4
	float GetPlayerReloadTime();// 0x31ae1c0
	PlayerAnimList GetPlayerAnimation();// 0x31ae180
	enum GetOwnerGender();// 0x31ae14c
	float GetMontageLengthByEventType(byte AnimEventType, FName SectionName);// 0x31ae084
	bool GetIsPlayingEmote();// 0x31ae04c
	bool GetIsFreeCamera();// 0x31ae014
	enum GetHoldGunState();// 0x31adfe0
	enum GetHoldGunMovementState();// 0x31adfac
	int GetHitCount();// 0x31adf90
	float GetDefaultSpeed();// 0x31adf5c
	enum GetCurSwitchWeaponType();// 0x31adf28
	enum GetCurrentState(enum stateLayer);// 0x31adea4
	enum GetCurClimbType();// 0x31ade70
	float GetCharacterAnimLength(byte AnimType, byte PoseType, int Section);// 0x31add6c
	float GetAfterFireTimer();// 0x31add50
	void ForbiddenIKByReason(FName Reason, int Priority, bool Value);// 0x31adc58
	void ForbiddenIK(bool State);// 0x31adbd4
	bool AnimBpStepLadderComplete();// 0x31adb9c
	bool AnimBpExitLadderComplete();// 0x31adb64
	bool AnimBpEnterLadderComplete();// 0x31adb2c
	void AddStateToStopMontageList(enum CharacterState, AnimMontage* AnimMontage, float BlendOutTime);// 0x31ada38
	void AddMonsterShapeshiftComp();// 0x31ada24
	void AddHitCount();// 0x31ada10
	void AddCustomAnimTypeRange(byte MinAnimType, byte MaxAnimType, byte PoseType, FString AnimPath, FName Reason, byte Priority, int Probability);// 0x31ad81c
	void AddCustomAnimType(byte AnimType, byte PoseType, FString AnimPath, FName Reason, byte Priority, int Probability);// 0x31ad664
	void AddCustomAnimAssetRange(byte MinAnimType, byte MaxAnimType, byte PoseType, AnimationAsset* AnimAsset, FName Reason, byte Priority, int Probability);// 0x31ad484
	void AddCustomAnimAsset(byte AnimType, byte PoseType, AnimationAsset* AnimAsset, FName Reason, byte Priority, int Probability);// 0x31ad2e0
<----------Generated by SSpawner v1.0.2---------->


Class: XMotionComponent.BaseMotionComponent.ActorComponent.Object
	void SetNeedPlayDeathStaticPoseNow(bool State);// 0x31ab218
	static void SetInNavalBattle(bool InNaval);// 0x31ab19c
	void SetForbidHitAnim(bool bForbidden);// 0x31ab11c
	void SetDeadType(int deadType);// 0x31ab098
	bool OnFreezeRagdoll();// 0x31ab058
	bool IsInBattle();// 0x31ab018
	bool IsDead();// 0x31aafd8
	bool InputHit();// 0x31aaf98
	bool InputAttack();// 0x31aaf58
	bool HitByBullet(Vector HurtDir, enum BeHitShakeLevel);// 0x31aae84
	bool HandleHitByNear(Vector HurtDir, enum BeHitShakeLevel);// 0x31aadb0
	bool HandleHitByBullet(Vector HurtDir, enum BeHitShakeLevel);// 0x31aacdc
	bool GetForbiddenAnim();// 0x31aacc0
	int GetDeadType();// 0x31aac84
	void ExitBattle(bool PlayMontage);// 0x31aabf8
	void EnterBattle(bool PlayMontage);// 0x31aab6c
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerAnimList.BasePlayerAnimList
	PlayerAnimData AimAnim;//[Offset: 0x228, Size: 0x18]
	PlayerAnimData ReloadAnim;//[Offset: 0x240, Size: 0x18]
	PlayerAnimData EquipWeaponAnim;//[Offset: 0x258, Size: 0x18]
	PlayerAnimData PickUpAnim;//[Offset: 0x270, Size: 0x18]
	PlayerAnimData FireAnim;//[Offset: 0x288, Size: 0x18]
	PlayerAnimData HurtAnim;//[Offset: 0x2a0, Size: 0x18]
	PlayerAnimData PullingPlugAnim;//[Offset: 0x2b8, Size: 0x18]
	PlayerAnimData PutDownWeaponAnim;//[Offset: 0x2d0, Size: 0x18]
	PlayerAnimData WeaponIdle;//[Offset: 0x2e8, Size: 0x18]
	PlayerAnimData PeekAnim;//[Offset: 0x300, Size: 0x18]
	PlayerAnimData ForegripAnim;//[Offset: 0x318, Size: 0x18]
	PlayerAnimData ForegripIdleAnim;//[Offset: 0x330, Size: 0x18]
	PlayerAnimData ForegripMiddleAnim;//[Offset: 0x348, Size: 0x18]
	PlayerAnimData[] JumpAnimListHoldGun;//[Offset: 0x360, Size: 0x10]
	PlayerAnimData[] JumpAnimListHoldGunF;//[Offset: 0x370, Size: 0x10]
	PlayerAnimData NearHurtAnim;//[Offset: 0x380, Size: 0x18]
	PlayerAnimData HurtDownAnim;//[Offset: 0x398, Size: 0x18]
	PlayerAnimData HurtFireAnim;//[Offset: 0x3b0, Size: 0x18]
	PlayerAnimData HurtBlindAnim;//[Offset: 0x3c8, Size: 0x18]
	PlayerAnimData HoldGunMovementAnim;//[Offset: 0x3e0, Size: 0x18]
	PlayerAnimData HoldGunUpMovementAnim;//[Offset: 0x3f8, Size: 0x18]
	PlayerAnimData HoldGunScopeMovementAnim;//[Offset: 0x410, Size: 0x18]
	PlayerAnimData DeathStaticPose;//[Offset: 0x428, Size: 0x18]
	PlayerAnimData LookMovementAnim;//[Offset: 0x440, Size: 0x18]
	PlayerAnimData NearHitAnim2;//[Offset: 0x458, Size: 0x18]
	PlayerAnimData RemoteHitAnim2;//[Offset: 0x470, Size: 0x18]
	float NearHitTime;//[Offset: 0x488, Size: 0x4]
	float RemoteHitTime;//[Offset: 0x48c, Size: 0x4]
	PlayerAnimData HoldGunNoSprintMovementAnim;//[Offset: 0x490, Size: 0x18]
	PlayerAnimData HoldGunIdleAdditiveAnim;//[Offset: 0x4a8, Size: 0x18]
	PlayerAnimData HoldGunMovementBaseAnim;//[Offset: 0x4c0, Size: 0x18]
	PlayerAnimData HoldGunScopePullingPlugAnim;//[Offset: 0x4d8, Size: 0x18]
	PlayerAnimData PowerStorageAnim;//[Offset: 0x4f0, Size: 0x18]
	PlayerAnimData WeaponToIdleAnim;//[Offset: 0x508, Size: 0x18]
	PlayerAnimData OutBattleMovementAnim;//[Offset: 0x520, Size: 0x18]
	PlayerAnimData MoveStartAnim;//[Offset: 0x538, Size: 0x18]
	PlayerAnimData MoveStopLeftAnim;//[Offset: 0x550, Size: 0x18]
	PlayerAnimData MoveStopRightAnim;//[Offset: 0x568, Size: 0x18]
	PlayerAnimData HoldGunIdleMoveAnim;//[Offset: 0x580, Size: 0x18]
	PlayerAnimData HoldGunIdleMoveBackAnim;//[Offset: 0x598, Size: 0x18]
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerVehAnimList
	AnimationAsset* DriveAnim;//[Offset: 0x0, Size: 0x8]
	AnimationAsset* IdleMotorbikeAnim;//[Offset: 0x8, Size: 0x8]
	AnimationAsset* BackMotorbikeAnim;//[Offset: 0x10, Size: 0x8]
	AnimationAsset* HandSteerMotorbikeAnim;//[Offset: 0x18, Size: 0x8]
	AnimationAsset* VacateMotorbikeAnim;//[Offset: 0x20, Size: 0x8]
	AnimationAsset* PassengerMotorSingleIdleAnim;//[Offset: 0x28, Size: 0x8]
	AnimationAsset* LeanOutAnim;//[Offset: 0x30, Size: 0x8]
	AnimationAsset* LeanInAnim;//[Offset: 0x38, Size: 0x8]
	AnimationAsset* AimAnim;//[Offset: 0x40, Size: 0x8]
	AnimationAsset* WeaponIdleAddition;//[Offset: 0x48, Size: 0x8]
	AnimationAsset* WeaponAimAddition;//[Offset: 0x50, Size: 0x8]
	AnimationAsset* WeaponReloadAddition;//[Offset: 0x58, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimVehParamList
	bool IsLeanOut;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool IsDriver;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	float VacateHight;//[Offset: 0x4, Size: 0x4]
	bool IsVehicleMotorbike;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	bool MotorOnlyPassenger;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x9, Size: 0x1]
	Rotator VehViewRotation;//[Offset: 0xc, Size: 0xc]
	byte SeatWeaponHoldType;//[Offset: 0x18, Size: 0x1]
	byte SeatSpecialType;//[Offset: 0x19, Size: 0x1]
	enum VehicleType;//[Offset: 0x1a, Size: 0x1]
	float LeanOutPercentage;//[Offset: 0x1c, Size: 0x4]
	float FrontWheelSteerAngle;//[Offset: 0x20, Size: 0x4]
	float FrontWheelMaxSteerAngle;//[Offset: 0x24, Size: 0x4]
	float ForwardSpeed;//[Offset: 0x28, Size: 0x4]
	float MotorTiltAngle;//[Offset: 0x2c, Size: 0x4]
	Vector LeftHandAttachLocation;//[Offset: 0x30, Size: 0xc]
	Vector RightHandAttachLocation;//[Offset: 0x3c, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimStatusKeyList.BaseAnimStatusKeyList
	GSTWeaponBase* EquipWeapon;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: GSTWeaponBase.Actor.Object
	<FName,ItemHandleBase*> AttachMap;//[Offset: 0x350, Size: 0x50]
	Transform FPPWeaponOffset;//[Offset: 0x3a0, Size: 0x30]
	Transform FPPWeaponOffsetNonShooting;//[Offset: 0x3d0, Size: 0x30]
	Transform FPPWeaponOffsetSprint;//[Offset: 0x400, Size: 0x30]
	class BaseCharacterAnimListComponent* AnimListCompTemplate;//[Offset: 0x430, Size: 0x8]
	class BaseCharacterAnimListComponent* AnimListCompFemaleTemplate;//[Offset: 0x438, Size: 0x8]
	delegate WeaponEffectActionDelegate;//[Offset: 0x440, Size: 0x10]
	delegate OnShootWeaponChangeState;//[Offset: 0x450, Size: 0x10]
	delegate OnWeaponVisibilityChange;//[Offset: 0x460, Size: 0x10]
	FString SyncFreshWeaponStateForRep;//[Offset: 0x470, Size: 0x10]
	byte WeaponType;//[Offset: 0x480, Size: 0x1]
	byte HandWeaponType;//[Offset: 0x481, Size: 0x1]
	FName EquipHandSlot;//[Offset: 0x484, Size: 0x8]
	byte EquipHandAnimSlot;//[Offset: 0x48c, Size: 0x1]
	byte CurEquipHandAnimSlot;//[Offset: 0x48d, Size: 0x1]
	bool IsVisibleInBagSlot;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8, Size: 0x1]
	bool NeedPlayToIdleAnim;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x4a9, Size: 0x1]
	bool BindCollision;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x768, Size: 0x1]
	FString BindCollisionSocket;//[Offset: 0x770, Size: 0x10]
	Vector BindCollisionOffset;//[Offset: 0x780, Size: 0xc]
	Vector WeaponCollisionBox;//[Offset: 0x78c, Size: 0xc]
	ItemHandleBase* SelfItemHandle;//[Offset: 0x7c8, Size: 0x8]
	WeaponOwnerProxy* OwnerProxy;//[Offset: 0x800, Size: 0x8]
	WeaponManager* WeaponManager;//[Offset: 0x808, Size: 0x8]
	WeaponEntityComp* WeaponEntityComp;//[Offset: 0x810, Size: 0x8]
	WeaponAvatarComponent* WeaponAvatarComponent;//[Offset: 0x818, Size: 0x8]
	CrossHairComp* CrossHairComp;//[Offset: 0x820, Size: 0x8]
	AutoFireCrossHairComp* AutoFireCrossHairComp;//[Offset: 0x828, Size: 0x8]
	ScopeCrossHairComp* ScopeCrossHairComp;//[Offset: 0x830, Size: 0x8]
	AidCrossHairComp* AidCrossHairComp;//[Offset: 0x838, Size: 0x8]
	FlagCrossHairComp* FlagCrossHairComp;//[Offset: 0x840, Size: 0x8]
	AttrModifyComponent* AttrModifierCompoment;//[Offset: 0x850, Size: 0x8]
	byte CurWeaponState;//[Offset: 0x85c, Size: 0x1]
	WeaponStateMgr* WeaponStateMgr;//[Offset: 0x860, Size: 0x8]
	void WeaponNotifyChangeStateDelegate__DelegateSignature(byte State);// 0x35332fc
	void WeaponEffectActionDelegate__DelegateSignature(byte Action);// 0x35332fc
	bool ShouldHiddenPSWhenOnBackpack();// 0x3037268
	void SetWeaponMeshHidden(bool Hidden, bool CastShadow);// 0x30371a0
	void SetVirtualInfo(bool IsVirtual, int VirtualAtk);// 0x30370e0
	void SetSightDefineID(out const ItemDefineID ItemDefineID);// 0x3037040
	void SetSelfItemHandle(ItemHandleBase* Handle);// 0x3036fc4
	void SetRecycleTag(FName Tag);// 0x3036f40
	void SetPSHiddenOnly(bool bInHidden);// 0x3036ebc
	void SetProxyControlEntityInfo(uint64 EntityID, int GlobalID, uint64 MasterID);// 0x3036dc8
	void SetParticleSystemHidden(bool bInHidden);// 0x3036d44
	void SetMatHiddenOnly(bool bInHidden);// 0x3036cc0
	float SetMaterialsRoughnessBias(float Value);// 0x3036c3c
	void SetMaterialParamValue(out const FName ParamName, float Value);// 0x3036b6c
	void SetMaterialColorParamValue(out const FName ParamName, LinearColor Value);// 0x3036a9c
	void SetItemDefineID(out const ItemDefineID ID);// 0x3036a0c
	void SetCurFreshWeaponState(byte inState);// 0x30369a8
	void SetControllerID(uint64 InControllerID);// 0x3036930
	void SetBulletNumInfo(int curBulletNum);// 0x30368ac
	void SetBlinkMesh(SkeletalMeshComponent* Blink);// 0x3036830
	void SetActorVisibilityWithReason(out const enum WeaponVisibility, out const FName Reason, out const int Priority);// 0x30366fc
	void ResetVisibilityReason(out const FName Reason);// 0x3036670
	void RemoveDynamicModifier(FString AttrModifyId);// 0x30365e4
	void RemoveDelegate();// 0x30365c8
	bool RefreshWeaponSkin(int SkinID);// 0x3036538
	void RefreshSkin(int SkinID);// 0x30364bc
	void OnWeaponVisibilityChangeDelegate__DelegateSignature();// 0x35332fc
	void OnWeaponChangeStateDelegate__DelegateSignature(byte State);// 0x35332fc
	void OnWeaponChangeMontage(bool IsEquip, bool Finish);// 0x30363ec
	void OnUnEquip();// 0x30363d0
	void OnStopFire(out const byte toState);// 0x303633c
	void OnStartFire();// 0x3036320
	void OnSignificanceLevelChange(int newLevel);// 0x303629c
	void OnOwnerAvatarLoadFinished(AvatarBase* OwnerAvatar);// 0x3036220
	void OnMotionReloadComplete(bool Finish);// 0x3036194
	void OnLocalHandleWeaponAfterSpawnInClient();// 0x3036178
	void OnInactive();// 0x303615c
	void OnHand();// 0x3036140
	void OnEquip();// 0x3036124
	void OnBack();// 0x3036108
	void NotifyAction(byte Action, bool bBroadCast);// 0x3036040
	bool IsShootWeapon();// 0x3036024
	bool IsRecycled();// 0x3036008
	bool IsEnableLeanOutHolding();// 0x3035fd0
	void InitDelegate();// 0x3035fb4
	void InitBulletNumInBarrel(int Num);// 0x3035f30
	byte GetWeaponType();// 0x3035f14
	int GetWeaponSubType();// 0x3035ee0
	WeaponStateMgr* GetWeaponStateMgr();// 0x3035ec4
	FString GetWeaponName();// 0x3035e40
	MeshComponent* GetWeaponMeshComponent();// 0x3035e0c
	WeaponManager* GetWeaponManager();// 0x3035df0
	WeaponEntityComp* GetWeaponEntityComp();// 0x3035dd4
	WeaponAnimInstanceBase* GetWeaponBaseAnimInst();// 0x3035da0
	WeaponAvatarComponent* GetWeaponAvatarComp();// 0x3035d84
	int GetWeaponArmType();// 0x3035d50
	ItemDefineID GetSightDefineID();// 0x3035d24
	int GetShootTotalType();// 0x3035cf0
	ItemHandleBase* GetSelfItemHandle();// 0x3035cbc
	enum GetSelectedType();// 0x3035c80
	ScopeCrossHairComp* GetScopeCrossHairComp();// 0x3035c64
	FName GetRecycleTag();// 0x3035c28
	float GetPowerStorageTime();// 0x3035bf4
	WeaponOwnerProxy* GetOwnerProxy();// 0x3035bd8
	FString GetOwnerPlayerName();// 0x3035b54
	Pawn* GetOwnerPawn();// 0x3035b20
	FString GetOwnerName();// 0x3035a9c
	Controller* GetOwnerController();// 0x3035a68
	Actor* GetOwnerActor();// 0x3035a34
	ItemDefineID GetItemDefineIDRef();// 0x30359ec
	bool GetIsVisible();// 0x30359b4
	bool GetInactive();// 0x3035974
	byte GetHandWeaponType();// 0x3035958
	FlagCrossHairComp* GetFlagCrossHairComp();// 0x303593c
	byte GetCurShootType();// 0x3035908
	byte GetCurFreshWeaponState();// 0x30358d4
	CrossHairComp* GetCrossHairComp();// 0x30358b8
	uint64 GetControllerID();// 0x303589c
	AutoFireCrossHairComp* GetAutoFireCrossHairComp();// 0x3035880
	AnimationAsset* GetAttachMeshAnim(enum SlotType, int AnimIdx);// 0x30357c0
	void EnableCrossHair();// 0x30357ac
	void DisableCrossHair();// 0x3035798
	void DetachMeshFromSocket();// 0x3035784
	void AttachMeshToSocket(FName socket);// 0x3035708
	void AddDynamicModifier(out AttrModifyItem AttrModifyItem);// 0x3035638
<----------Generated by SSpawner v1.0.2---------->


Class: ItemHandleBase.Object
	<FName,ItemAssociation> AssociationMap;//[Offset: 0x28, Size: 0x50]
	ItemDefineID defineID;//[Offset: 0x78, Size: 0x28]
	void SetAssociation(FName Name, ItemAssociation Association);// 0x304a430
	void RemoveAssociation(FName Name);// 0x304a3b4
	void Init(out const ItemDefineID InDefineID);// 0x304a31c
	ItemDefineID GetDefineID();// 0x304a2f0
	ItemAssociation GetAssociation(FName Name);// 0x304a244
	void AddAssociation(FName Name, ItemAssociation Association);// 0x304a144
<----------Generated by SSpawner v1.0.2---------->


Class: ItemAssociation
	FName AssociationName;//[Offset: 0x0, Size: 0x8]
	ItemDefineID AssociationTargetDefineID;//[Offset: 0x8, Size: 0x28]
	ItemHandleBase* AssociationTargetHandle;//[Offset: 0x30, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ItemDefineID
	int ResID;//[Offset: 0x0, Size: 0x4]
	bool bValidItem;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	bool bValidInstance;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x5, Size: 0x1]
	uint64 InstanceID;//[Offset: 0x8, Size: 0x8]
	FName BackSocket;//[Offset: 0x10, Size: 0x8]
	int Tab;//[Offset: 0x18, Size: 0x4]
	int GridIndex;//[Offset: 0x1c, Size: 0x4]
	int ModelID;//[Offset: 0x20, Size: 0x4]
	int SkinID;//[Offset: 0x24, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponOwnerProxy.ActorComponent.Object
	bool bClientHasFinishedReloadWeapon;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	WeaponManager* WeaponManager;//[Offset: 0xf8, Size: 0x8]
	Pawn* OwnerPawn;//[Offset: 0x100, Size: 0x8]
	GSTWeaponBase* weapon;//[Offset: 0x108, Size: 0x8]
	void StopAltFire();// 0x318287c
	void StartPowerStorage();// 0x3182868
	void StartAltFire();// 0x3182854
	void SetShootType(byte shootType);// 0x31827d8
	bool ReloadStop();// 0x31827a0
	void ReloadStart();// 0x318278c
	void ReleasePowerStorage();// 0x3182778
	void LocalUnEquipWeapon(bool bIsAI, bool bSimulatedProxy);// 0x31826b0
	bool LocalStartFire();// 0x3182678
	void LocalEquipWeapon(bool bIsAI, bool bLocalFPP, bool bSimulatedProxy);// 0x3182564
	void HandleWeaponOnShoot();// 0x3182550
	void HandleOnCharAnimLoadingFinished();// 0x318253c
	PrimitiveComponent* GetWeaponAttachToMesh();// 0x3182500
	GSTWeaponBase* GetWeapon();// 0x31824e4
	Pawn* GetOwnerPawn();// 0x31824c8
	Controller* GetOwnerController();// 0x3182494
	void FireStop();// 0x3182480
	void DoAutoReloadCurrentWeapon();// 0x318246c
	void CancelPowerStorage();// 0x3182458
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponManager.ActorComponent.Object
	delegate WeaponEquipDelegate;//[Offset: 0xf8, Size: 0x10]
	delegate WeaponUnequipDelegate;//[Offset: 0x108, Size: 0x10]
	delegate OnWeaponEquipFinishedDelegate;//[Offset: 0x118, Size: 0x10]
	delegate OnWeaponEquipFinishedDelegateBeforeLua;//[Offset: 0x128, Size: 0x10]
	delegate OnWeaponCreatedDelegate;//[Offset: 0x138, Size: 0x10]
	delegate OnWeaponDestroyedDelegate;//[Offset: 0x148, Size: 0x10]
	Pawn* OwnerPawn;//[Offset: 0x158, Size: 0x8]
	GSTWeaponBase* CurrentWeapon;//[Offset: 0x160, Size: 0x8]
	GSTWeaponBase* PendingWeapon;//[Offset: 0x168, Size: 0x8]
	GSTWeaponBase* PendingKillWeapon;//[Offset: 0x170, Size: 0x8]
	<FName,GSTWeaponBase*> WeaponInventory;//[Offset: 0x178, Size: 0x50]
	<FName,WeaponOwnerProxy*> WeaponProxys;//[Offset: 0x1c8, Size: 0x50]
	<FName,FName> SlotToSocketMap;//[Offset: 0x218, Size: 0x50]
	delegate OnMotionChangeWeaponCompleteDelegate;//[Offset: 0x268, Size: 0x10]
	float EquipWeaponDelayDelta;//[Offset: 0x2c8, Size: 0x4]
	class Actor* WeaponAssetPath1;//[Offset: 0x2d0, Size: 0x28]
	void WeaponUnequipedFinished();// 0x317cf3c
	void UnEquipWeaponAttachment(GSTWeaponBase* weapon, out const FName Slot);// 0x317ce74
	void UnequipCurrentWeapon();// 0x317ce60
	void ShowAllWeapons(out const FName pstr_Reason);// 0x317cdd4
	void SetWeaponVisibleOnWeaponEquip(GSTWeaponBase* weapon);// 0x317cd58
	void SetOpenGunShield(bool bHold);// 0x317ccd8
	void SetMaterialParamValue(out const FName ParamName, float Value);// 0x317cc08
	void SetMaterialColorValue(out const FName ParamName, LinearColor Value);// 0x317cb38
	void SetHoldArmShield(bool bHold);// 0x317cab8
	bool SetHideAllWeaponsPermanently(bool bHide);// 0x317ca28
	void RemoveWeaponFromInventory(GSTWeaponBase* weapon);// 0x317c9ac
	void RefreshWeaponMeshMode();// 0x317c998
	void RefreshAvatarByPredictedLODLevel();// 0x317c984
	void PutWeaponeToHand(GSTWeaponBase* weapon, out const FName UnEquipSlot);// 0x317c8bc
	void PutWeaponeToDynamic(GSTWeaponBase* weapon, out const FName UnEquipSlot);// 0x317c7f4
	void PutWeaponeToBack(GSTWeaponBase* weapon, out const FName UnEquipSlot);// 0x317c72c
	void OnWeaponEquipFinishedDelegate__DelegateSignature();// 0x35332fc
	void OnMotionReloadComplete(bool IsFinish);// 0x317c6a8
	void OnMotionChangeWeaponComplete();// 0x317c694
	bool IsAllWeaponHiddenPermanently();// 0x317c678
	bool HoldArmShield();// 0x317c65c
	void HideCurWeapon(out const FName pstr_Reason, int Priority);// 0x317c58c
	void HideAllWeapons(out const FName pstr_Reason, int Priority);// 0x317c4bc
	bool HasWeapon(GSTWeaponBase* weapon);// 0x317c434
	byte GetWeaponPropSlot(GSTWeaponBase* InWeapon);// 0x317c3b0
	GSTWeaponBase* GetWeaponByID(FName WeaponID);// 0x317c32c
	FName GetSocketMapedBySlot(out const FName Slot, GSTWeaponBase* weapon);// 0x317c250
	GSTWeaponBase* GetPendingWeapon();// 0x317c234
	float GetIdleToScopeTransitionTime();// 0x317c200
	GSTWeaponBase* GetGunShieldWeapon();// 0x317c1cc
	GSTWeaponBase* GetEquipHandWeapon();// 0x317c198
	int GetEquipedWeaponAttachmentResID(GSTWeaponBase* weapon, out const FName Slot);// 0x317c0c4
	enum GetCurSwitchWeaponType();// 0x317c0a8
	GSTWeaponBase* GetCurrentWeapon();// 0x317c08c
	<FName,GSTWeaponBase*> GetAllWeapons();// 0x317c06c
	GSTWeaponBase* FindWeaponByUUID(uint64 InstanceID);// 0x317bfe8
	GSTWeaponBase* EquipWeaponById(int pWeaponId, bool pNeedMoment);// 0x317bf24
	void EquipWeaponAttachment(GSTWeaponBase* weapon, out const FName Slot, WeaponAttachItemHandle* attachment);// 0x317be18
	void EquipWeapon(GSTWeaponBase* weapon, bool bNeedMoment);// 0x317bd58
	void DropWeapon(GSTWeaponBase* weapon);// 0x317bcdc
	void DropAllWeaponWithoutCurrent();// 0x317bcc8
	void DropAllWeapon();// 0x317bcb4
	void DoWeaponUnequip(GSTWeaponBase* weapon);// 0x317bc38
	void DoWeaponEquip(GSTWeaponBase* weapon);// 0x317bbbc
	GSTWeaponBase* CreateShootWeapon(int ItemId, out const ItemDefineID pItemDefineID);// 0x317bae0
	bool CanEquipWeapon(GSTWeaponBase* weapon);// 0x317ba50
	void BreakChangeWeapon();// 0x317ba3c
	void AddWeapon(GSTWeaponBase* weapon);// 0x317b9c0
	GSTWeaponBase* AddProjectile(FString WeaponClassStr, FString ItemHandleClassStr);// 0x317b8d8
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponAttachItemHandle.BattleItemHandleBase.ItemHandleBase.Object
	WeaponAttachmentConfig WeaponAttachmentConfig;//[Offset: 0xb0, Size: 0x2b8]
	bool bIsLoadTable;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x368, Size: 0x1]
	DataTable* WeaponAttachmentConfigTable;//[Offset: 0x370, Size: 0x8]
	FName WeaponAttachmentConfigRowName;//[Offset: 0x378, Size: 0x8]
	bool EquipOrUnEuipAttachment(GSTWeaponBase* InWeapon, bool IsEquip);// 0x3160df4
<----------Generated by SSpawner v1.0.2---------->


Class: BattleItemHandleBase.ItemHandleBase.Object
	bool bEquipping;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	World* GetWorldInternal();// 0x2f9b71c
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponAttachmentConfig
	FText AttachmentName;//[Offset: 0x0, Size: 0x18]
	enum AttachmentSlotType;//[Offset: 0x18, Size: 0x1]
	enum SightType;//[Offset: 0x19, Size: 0x1]
	enum BarrelType;//[Offset: 0x1a, Size: 0x1]
	bool IsApplyToMasterMesh;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1b, Size: 0x1]
	bool IsExtendMaxBulletNumInOneClip;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	bool IsSilencer;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1d, Size: 0x1]
	bool IsFireSuppressor;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e, Size: 0x1]
	bool IsCompensator;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f, Size: 0x1]
	WeaponAttachmentAttrModify[] WeaponAttachmentAttrModifys;//[Offset: 0x20, Size: 0x10]
	ReplacedAttament[] replacementWeapon;//[Offset: 0x298, Size: 0x10]
	AnimationAsset*[] AttachmentAnimList;//[Offset: 0x2a8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponAttachmentAttrModify
	FString ModifyAttr;//[Offset: 0x0, Size: 0x10]
	enum Op;//[Offset: 0x10, Size: 0x1]
	float ModifyValue;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ReplacedAttament
	ItemDefineID[] targetWeaponIDList;//[Offset: 0x0, Size: 0x10]
	WeaponMeshCfg replacedAttachmentCfg;//[Offset: 0x10, Size: 0x268]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponMeshCfg.TableRowBase
	StaticMesh* stMesh;//[Offset: 0x8, Size: 0x28]
	SkeletalMesh* skMesh;//[Offset: 0x30, Size: 0x28]
	StaticMesh* stMeshLod;//[Offset: 0x58, Size: 0x28]
	SkeletalMesh* skMeshLod;//[Offset: 0x80, Size: 0x28]
	class AnimInstance* AnimInstClass;//[Offset: 0xa8, Size: 0x28]
	MaterialInterface* MeshMat;//[Offset: 0xd0, Size: 0x28]
	enum meshType;//[Offset: 0xf8, Size: 0x1]
	AnimSequence* sightOff;//[Offset: 0x100, Size: 0x28]
	AnimSequence* sightOn;//[Offset: 0x128, Size: 0x28]
	ParticleSystemInfo[] ParticleSystemInfo;//[Offset: 0x150, Size: 0x10]
	ParticleSystemInfo[] ParticleSystemInfoHD;//[Offset: 0x160, Size: 0x10]
	bool bIsSpGun;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x191, Size: 0x1]
	<FName,MaterialInterface*> SpGunMats;//[Offset: 0x198, Size: 0x50]
	AnimSequence* WeaponShowIdleAnim;//[Offset: 0x1e8, Size: 0x28]
	FName[] SpVisibleSockets;//[Offset: 0x210, Size: 0x10]
	ParticleSystemInfo[] OpeningParticleSystems;//[Offset: 0x220, Size: 0x10]
	AnimationAsset*[] AnimationList;//[Offset: 0x230, Size: 0x10]
	ShootEffectNode[] ShootEffectNodes;//[Offset: 0x240, Size: 0x10]
	ShootBulletTailFxNode[] ShootBulletTailFxNodes;//[Offset: 0x250, Size: 0x10]
	bool bShouldHiddenPSWhenOnBackpack;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: TableRowBase
<----------Generated by SSpawner v1.0.2---------->


Class: ParticleSystemInfo
	FName socket;//[Offset: 0x0, Size: 0x8]
	ParticleSystem* ParticleSystem;//[Offset: 0x8, Size: 0x28]
<----------Generated by SSpawner v1.0.2---------->


Class: ShootEffectNode.ShootBaseNode
	enum AttachState;//[Offset: 0xc, Size: 0x1]
	ParticleSystem* MuzzleFX;//[Offset: 0x10, Size: 0x28]
	int FXSortPriority;//[Offset: 0x38, Size: 0x4]
	FName SocketName;//[Offset: 0x3c, Size: 0x8]
	Vector MuzzelFXScale;//[Offset: 0x44, Size: 0xc]
	bool IsScope;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	FXDistancaScaleStruct RemoteMuzzleFXDistanceScale;//[Offset: 0x54, Size: 0x10]
	enum AimType;//[Offset: 0x64, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ShootBaseNode
	byte ActionName;//[Offset: 0x0, Size: 0x1]
	int NodeId;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: FXDistancaScaleStruct
	float FXStartScaleDistance;//[Offset: 0x0, Size: 0x4]
	float FXEndScaleDistance;//[Offset: 0x4, Size: 0x4]
	float FXStartScaleValue;//[Offset: 0x8, Size: 0x4]
	float FXEndScaleValue;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ShootBulletTailFxNode.ShootBaseNode
	ParticleSystem* TailFX;//[Offset: 0x10, Size: 0x8]
	ParticleSystem* TailFogFx;//[Offset: 0x18, Size: 0x8]
	BulletTailFxInfo LocalTailFxInfo;//[Offset: 0x20, Size: 0x30]
	enum AimType;//[Offset: 0x50, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: BulletTailFxInfo
	float TailFxSpeed;//[Offset: 0x0, Size: 0x4]
	float TailFxSpawnTime;//[Offset: 0x4, Size: 0x4]
	float TailFxMinLifeTime;//[Offset: 0x8, Size: 0x4]
	float TailFxLifeTime;//[Offset: 0xc, Size: 0x4]
	float TailFogFxSpeed;//[Offset: 0x10, Size: 0x4]
	float TailFogFxSpawnTime;//[Offset: 0x14, Size: 0x4]
	float TailFogFxMinLifeTime;//[Offset: 0x18, Size: 0x4]
	float TailFogFxLifeTime;//[Offset: 0x1c, Size: 0x4]
	float TailMeshLength;//[Offset: 0x20, Size: 0x4]
	bool bDebug;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x24, Size: 0x1]
	float DebugLength;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponEntityComp.WeaponBaseComp.ActorComponent.Object
	int WeaponID;//[Offset: 0xf8, Size: 0x4]
	byte WeaponHoldType;//[Offset: 0x104, Size: 0x1]
	bool bEnableProneHolding;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x105, Size: 0x1]
	bool bEnableLeanOutHolding;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x106, Size: 0x1]
	float SprintSpeedScale;//[Offset: 0x108, Size: 0x4]
	float MoveSpeedScale;//[Offset: 0x10c, Size: 0x4]
	float HoldShieldMoveSpeedScale;//[Offset: 0x110, Size: 0x4]
	float GunMiddleSpeedScale;//[Offset: 0x114, Size: 0x4]
	float HoldShieldMiddleSpeedScale;//[Offset: 0x118, Size: 0x4]
	float GunScopeSpeedScale;//[Offset: 0x11c, Size: 0x4]
	float HitForce;//[Offset: 0x120, Size: 0x4]
	byte GetWeaponHoldType();// 0x31794e0
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponBaseComp.ActorComponent.Object
	GSTWeaponBase* OwnerWeapon;//[Offset: 0xf0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponAvatarComponent.InventoryAvatarComponent.AvatarBaseComponent.SceneComponent.ActorComponent.Object
	delegate OnWeaponMeshComponentLoaded;//[Offset: 0x668, Size: 0x10]
	delegate OnWeaponAvatarLoadFinishForLua;//[Offset: 0x678, Size: 0x10]
	SoftObjectPath WeaponMeshPath;//[Offset: 0x688, Size: 0x18]
	GSTWeaponBase* WeaponOwner;//[Offset: 0x6a0, Size: 0x8]
	<int,BattleItemLoadTask> BattleItemLoadTasks;//[Offset: 0x6a8, Size: 0x50]
	<int,ItemDefineIDLoadTask> ItemDefineIDLoadTasks;//[Offset: 0x6f8, Size: 0x50]
	<int,BattleItemLoadTask> EquipItemHandlesList;//[Offset: 0x748, Size: 0x50]
	<SoftObjectPath,ItemDefineID> PendingDefineLoadRes;//[Offset: 0x798, Size: 0x50]
	<uint32,WeaponAttachMeshConfig> ShootPartMap;//[Offset: 0x7e8, Size: 0x50]
	bool BindCollision;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x838, Size: 0x1]
	Vector BindCollisionOffset;//[Offset: 0x83c, Size: 0xc]
	Vector WeaponCollisionBox;//[Offset: 0x848, Size: 0xc]
	<int,MeshComponent*> FakeShadowMeshComponentList;//[Offset: 0x858, Size: 0x50]
	<FName,ParticleSystem*> OpeningParticleSystems;//[Offset: 0x910, Size: 0x50]
	void SetPSMatHidden(bool bHidden);// 0x3175a34
	void SetPSHiddenOnly(bool bHidden);// 0x31759b0
	void SetMeshLod(MeshComponent* MeshComp, int inLod);// 0x31758f8
	void SetMatHiddenOnly(bool bHidden);// 0x3175874
	void SetMaterialParamValueAll(out const FName ParamName, float Value);// 0x31757a4
	void SetMaterialColorParamValueAll(out const FName ParamName, LinearColor Value);// 0x31756d4
	void SetBoneTickEnable(bool Enable);// 0x3175650
	void ResetAttachmentParentBySlot(enum targetSlot);// 0x31755d4
	void ResetAttachmentParent();// 0x31755c0
	void PutOnMasterComponentByItemHandle(out const BattleItemLoadTask LoadTask, SkeletalMesh* skMesh, StaticMesh* stMesh);// 0x3175484
	void PutOnMasterComponentByDefineID(out const ItemDefineIDLoadTask LoadTask, SkeletalMesh* skMesh, StaticMesh* stMesh);// 0x3175348
	void PutOnEquipmentByItemHandle(out const BattleItemLoadTask LoadTask, SkeletalMesh* skMesh, StaticMesh* stMesh);// 0x317520c
	void OnWeaponMeshComponentLoadedDelegate__DelegateSignature();// 0x35332fc
	void OnWeaponAvatarLoadedDelegateForLua__DelegateSignature(uint64 entityServerID);// 0x35332fc
	void OnSignificanceLevelChange(int newLevel);// 0x3175190
	void OnMeshAssetLoaded(out const SoftObjectPath[] AssetRefArray, int SlotID, enum LoadType);// 0x3175044
	void OnItemHandleLoaded(ItemDefineID defineID, BattleItemHandleBase* itemHandle);// 0x3174f7c
	bool LoadMeshesById(int SlotType, ItemDefineID ItemId, bool bAsync);// 0x3174e54
	bool LoadMeshes(BattleItemHandleBase* itemHandle, int SlotType, out BattleItemLoadTask OutBattleItemLoadTask, bool bAsync);// 0x3174cc4
	bool IsUseHDRes();// 0x3174c8c
	bool IsUseAsyncLoad();// 0x3174c54
	bool IsAvatarLoadFinished();// 0x3174c38
	bool IsAirGun();// 0x3174c1c
	void InitialAvatarParam(int AGender);// 0x3174b98
	StaticMesh* GetStaticMesh(out const WeaponMeshCfg meshPack);// 0x3174af0
	SkeletalMesh* GetSkeletalMesh(out const WeaponMeshCfg meshPack);// 0x3174a48
	<FName,ParticleSystem*> GetParticleSystem(out const WeaponMeshCfg meshPack);// 0x3174874
	bool GetMeshResRef(BattleItemHandleBase* Handle, out SoftObjectPath[] AssetRefArray, out BattleItemLoadTask LoadTask);// 0x31746e8
	bool GetMeshPackById(ItemDefineID ItemId, out WeaponMeshCfg MeshCfg);// 0x31745e4
	bool GetMeshPack(BattleItemHandleBase* itemHandle, out WeaponMeshCfg MeshCfg);// 0x31744fc
	bool GetMeshByItemResRef(ItemDefineID ItemId, out SoftObjectPath[] AssetRefArray, out ItemDefineIDLoadTask LoadTask);// 0x317434c
	MaterialInstance*[] GetMaterial(out const WeaponMeshCfg meshPack, out FName[] MatSocketNames);// 0x31741f4
	int GetMasterSlot();// 0x31741c0
	AnimationAsset* GetAttachmentAnim(enum SlotID, int AnimIdx);// 0x3174100
	void GetAnimationList(out const WeaponMeshCfg meshPack, out AnimationAsset*[] OutResourceList);// 0x3174000
	void DebugAvatar();// 0x3173fec
	void ClearLoadTask();// 0x3173fd8
<----------Generated by SSpawner v1.0.2---------->


Class: InventoryAvatarComponent.AvatarBaseComponent.SceneComponent.ActorComponent.Object
	<int,AvatarMeshData> AvatarDataList;//[Offset: 0x570, Size: 0x50]
	<int,AvatarMeshData> AvataDataConfig;//[Offset: 0x5c0, Size: 0x50]
	<int,BattleItemHandleBase*> ItemHandleList;//[Offset: 0x610, Size: 0x50]
	int GenderType;//[Offset: 0x660, Size: 0x4]
	void SetDefaultConfig(int Slot);// 0x3048f78
	void ResetComponentMaster();// 0x3048f64
	void ResetAllAvataSlot();// 0x3048f50
	void OnRep_AvatarMeshChanged();// 0x3048f34
	bool IsSlotHasEquipped(int Slot);// 0x3048eac
	void InitDefaultMesh(BattleItemHandleBase* Handle);// 0x3048e28
	void InitDefaultAvatar(BattleItemHandleBase* Handle);// 0x3048da4
	ItemDefineID GetSlotDefinedID(int Slot);// 0x3048d00
	bool GetEquimentMeshBySlot(int Slot, out AvatarMeshData meshPack);// 0x3048b9c
	void ClearMeshByItemHandle(BattleItemHandleBase* itemHandle);// 0x3048b18
	void ApplyStaticMeshByItemID(int Slot, StaticMesh* Mesh, out MaterialInstance*[] Mats, out <FName,ParticleSystem*> PSs, out const ItemDefineID ItemId, FName SocketName, out FName[] MatSocketNames);// 0x304882c
	void ApplyStaticMeshByID(int Slot, StaticMesh* Mesh, out MaterialInstance*[] Mats, out <FName,ParticleSystem*> PSs, BattleItemHandleBase* Handle, FName SocketName, out FName[] MatSocketNames);// 0x3048564
	void ApplySkeletalMeshByItemID(int Slot, SkeletalMesh* Mesh, out MaterialInstance*[] Mats, out <FName,ParticleSystem*> PSs, out const ItemDefineID ItemId, FName SocketName, out FName[] MatSocketNames, out AnimationAsset*[] Anims);// 0x304820c
	void ApplySkeletalMeshByID(int Slot, SkeletalMesh* Mesh, out MaterialInstance*[] Mats, out <FName,ParticleSystem*> PSs, BattleItemHandleBase* Handle, FName SocketName, out FName[] MatSocketNames, out AnimationAsset*[] Anims);// 0x3047ed8
	void ApplyItemHandle(BattleItemHandleBase* Handle);// 0x3047e54
	void ApplyConfig();// 0x3047e40
<----------Generated by SSpawner v1.0.2---------->


Class: AvatarBaseComponent.SceneComponent.ActorComponent.Object
	MeshComponent* MasterBoneComponent;//[Offset: 0x278, Size: 0x8]
	<int,MeshComponent*> MeshComponentList;//[Offset: 0x280, Size: 0x50]
	FName MeshMaterialSlotName;//[Offset: 0x2d0, Size: 0x8]
	<int,FName> SlotToSocketMap;//[Offset: 0x2d8, Size: 0x50]
	float DefaultMeshCullDistance;//[Offset: 0x328, Size: 0x4]
	float MinusOwnerPawnCullDistance;//[Offset: 0x32c, Size: 0x4]
	bool SyncLoadMesh(out SoftObjectPath[] MeshAssetArray);// 0x2f6dc70
	void SetStaticMeshToSlot(int Slot, StaticMesh* Mesh, out MaterialInstance*[] Mats, out <FName,ParticleSystem*> PSs, FName SocketName, out FName[] MatSocketNames);// 0x2f6d9e0
	void SetSlotMatGlobalVectorParams(enum Slot, out const FName ParamName, LinearColor Value);// 0x2f6d8d0
	void SetSlotMatGlobalScalarParams(enum Slot, out const FName ParamName, float Value);// 0x2f6d7c0
	void SetSkeletalMeshToSlot(int Slot, SkeletalMesh* Mesh, out MaterialInstance*[] Mats, out <FName,ParticleSystem*> PSs, FName SocketName, out FName[] MatSocketNames);// 0x2f6d530
	void SetParticleSystemHidden(bool bInHidden);// 0x2f6d4ac
	void SetMeshVisible(int Slot, bool Visible);// 0x2f6d3e8
	void SetMeshParticleSystem(int Slot, MeshComponent* MeshComp, out <FName,ParticleSystem*> PSs);// 0x2f6d25c
	void SetMeshMaterial(int Slot, MeshComponent* MeshComp, out MaterialInstance*[] Mats, MaterialInstance* MatBase, out FName[] MatSocketNames);// 0x2f6d09c
	bool SetMeshComponentLightChannel(int Channel);// 0x2f6d014
	void SetForceMipStreamingAll(bool bForceMipStreaming);// 0x2f6cf90
	void SetComponentMesh(MeshComponent* Component, SkeletalMesh* SkeletalMesh, StaticMesh* StaticMesh);// 0x2f6ce98
	void RefreshAvatarByPredictedLODLevel();// 0x2f6ce84
	void OnWeaponVisibilityChange();// 0x2f6ce70
	void OnMeshLoadedAsync(out const SoftObjectPath[] TargetsToLoad, out const Object*[] LoadedAssets, int SlotID, enum LoadType);// 0x2f6ccbc
	bool IsAttachToMaster(int Slot, MeshComponent* MeshComp);// 0x2f6cbe8
	void InitMasterComponent();// 0x2f6cbcc
	bool GetSlotVisibilty(int Slot);// 0x2f6cb44
	MeshComponent* GetMeshComponent(int Slot);// 0x2f6cab8
	AnimInstance* GetAnimInstance();// 0x2f6ca84
	void GetAllPSCs(out ParticleSystemComponent*[] OutPSCs);// 0x2f6c9e8
	void ClearMeshBySlot(int Slot);// 0x2f6c964
	void ClearMeshAndApplyDefaultConfig(int Slot);// 0x2f6c8e0
	void ChangeAvatarParentMat(FString ParentMatPath);// 0x2f6c800
	bool AsyncLoadMesh(out SoftObjectPath[] MeshAssetArray, out int OutLoadHandleID, int SlotID, enum LoadType);// 0x2f6c648
	void ApplyAnimation(int Slot, class AnimInstance AnimClass);// 0x2f6c590
<----------Generated by SSpawner v1.0.2---------->


Class: AvatarMeshData
	StaticMesh* MeshST;//[Offset: 0x0, Size: 0x8]
	SkeletalMesh* MeshSK;//[Offset: 0x8, Size: 0x8]
	MaterialInstance*[] MatIns;//[Offset: 0x10, Size: 0x10]
	<FName,ParticleSystem*> PSs;//[Offset: 0x20, Size: 0x50]
	int[] hideSlots;//[Offset: 0x70, Size: 0x10]
	ReplacedSlotData[] replacedSlots;//[Offset: 0x80, Size: 0x10]
	HideSlotData[] hideBoneSlots;//[Offset: 0x90, Size: 0x10]
	ItemDefineID definedID;//[Offset: 0xa0, Size: 0x28]
	bool AttachToMaster;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	FName[] MatSocketNames;//[Offset: 0xd0, Size: 0x10]
	AnimationAsset*[] AnimationList;//[Offset: 0xe0, Size: 0x10]
	FName SocketName;//[Offset: 0xf0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ReplacedSlotData
<----------Generated by SSpawner v1.0.2---------->


Class: HideSlotData
<----------Generated by SSpawner v1.0.2---------->


Class: BattleItemLoadTask
	BattleItemHandleBase* itemHandle;//[Offset: 0x0, Size: 0x8]
	WeaponMeshCfg MeshCfg;//[Offset: 0x8, Size: 0x268]
<----------Generated by SSpawner v1.0.2---------->


Class: ItemDefineIDLoadTask
	ItemDefineID ItemDefineID;//[Offset: 0x0, Size: 0x28]
	WeaponMeshCfg MeshCfg;//[Offset: 0x28, Size: 0x268]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponAttachMeshConfig
	int meshId;//[Offset: 0x0, Size: 0x4]
	bool IsOther;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x4, Size: 0x1]
	WeaponAttachmentConfig AttachmentSlotType;//[Offset: 0x8, Size: 0x2b8]
<----------Generated by SSpawner v1.0.2---------->


Class: CrossHairComp.CrossHairBaseComp.WeaponBaseComp.ActorComponent.Object
	float PistolCenterDownDis;//[Offset: 0x158, Size: 0x4]
	Texture2D* CrossHairTextureCenter;//[Offset: 0x160, Size: 0x8]
	Texture2D* CrossHairTextureEdge;//[Offset: 0x168, Size: 0x8]
	SubmachineGunCrossHair SubmachineGunCrossHair;//[Offset: 0x170, Size: 0x80]
	SnipeGunCrossHair SnipeGunCrossHair;//[Offset: 0x1f0, Size: 0xa8]
	BowCrossHair BowCrossHair;//[Offset: 0x298, Size: 0x70]
	ShootWeaponBulletCount ShootWeaponBulletCount;//[Offset: 0x308, Size: 0xb8]
	bool bDrawDebugCrossHairCircleArea;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3c0, Size: 0x1]
	float DrawDebugCrossHairCircleAreaSteps;//[Offset: 0x3c4, Size: 0x4]
	bool bDrawDebugSpreadCircleArea;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3c8, Size: 0x1]
	float DrawDebugSpreadCircleAreaSteps;//[Offset: 0x3cc, Size: 0x4]
	bool bDrawDebugLimitCircleArea;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3d0, Size: 0x1]
	float DrawDebugLimitCircleAreaSteps;//[Offset: 0x3d4, Size: 0x4]
	bool bDrawDebugString;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3d8, Size: 0x1]
	void SetShootWeaponBulletCountEnabled(bool bEnabled);// 0x2fca034
	void PrepareDraw(Canvas* InCanvas, out const Vector InLeaderLocation);// 0x2fc9f68
	void OnWeaponBulletNumChange(int CurNum, int MaxNum);// 0x2fc9eac
<----------Generated by SSpawner v1.0.2---------->


Class: CrossHairBaseComp.WeaponBaseComp.ActorComponent.Object
	Actor* WeaponOwner;//[Offset: 0xf8, Size: 0x8]
	GSTShootWeapon* OwnerShootWeapon;//[Offset: 0x100, Size: 0x8]
	ShootWeaponEntityComp* ShootWeaponEntity;//[Offset: 0x108, Size: 0x8]
	void OnWeaponStopFire();// 0x2fc96e8
	void OnWeaponStartFire();// 0x2fc96cc
	void OnWeaponShoot();// 0x2fc96b0
	void OnScopeOutEnd();// 0x2fc9694
	void OnScopeInEnd();// 0x2fc9678
	void OnEndViewTarget(PlayerController* PC);// 0x2fc95f4
	void OnCharacterStateChange(int Layer, int OldState, int NewState);// 0x2fc94fc
	void OnCharacterJump();// 0x2fc94e0
	void OnBecomeViewTarget(PlayerController* PC);// 0x2fc945c
	void DrawDebugSpreadEnd();// 0x2fc9440
	void DrawDebugPointEnd();// 0x2fc9424
	FString DebugInfo();// 0x2fc9398
<----------Generated by SSpawner v1.0.2---------->


Class: SubmachineGunCrossHair
	SoftObjectPath CenterPointResource;//[Offset: 0x0, Size: 0x18]
	Vector2D CenterPointScale;//[Offset: 0x18, Size: 0x8]
	SoftObjectPath HorizontalEdgeResource;//[Offset: 0x20, Size: 0x18]
	Vector2D HorizontalEdgeScale;//[Offset: 0x38, Size: 0x8]
	float HorizontalEdgeOffset;//[Offset: 0x40, Size: 0x4]
	float HorizontalEdgeDeviationMoveAnimationInterpSpeed;//[Offset: 0x44, Size: 0x4]
	SoftObjectPath CrossEdgeResource;//[Offset: 0x48, Size: 0x18]
	Vector2D CrossEdgeScale;//[Offset: 0x60, Size: 0x8]
	float CrossEdgeAngle;//[Offset: 0x68, Size: 0x4]
	Vector2D CrossEdgeOffset;//[Offset: 0x6c, Size: 0x8]
	Vector2D WholeScale;//[Offset: 0x74, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SnipeGunCrossHair
	SoftObjectPath CenterPointResource;//[Offset: 0x0, Size: 0x18]
	Vector2D CenterPointScale;//[Offset: 0x18, Size: 0x8]
	SoftObjectPath HorizontalLineResource;//[Offset: 0x20, Size: 0x18]
	Vector2D HorizontalLineScale;//[Offset: 0x38, Size: 0x8]
	float HorizontalLineDeviationMoveAnimationInterpSpeed;//[Offset: 0x40, Size: 0x4]
	SoftObjectPath CrossEdgeResource;//[Offset: 0x48, Size: 0x18]
	Vector2D CrossEdgeScale;//[Offset: 0x60, Size: 0x8]
	float CrossEdgeOffset;//[Offset: 0x68, Size: 0x4]
	SoftObjectPath BottomEdgeResource;//[Offset: 0x70, Size: 0x18]
	Vector2D BottomEdgeScale;//[Offset: 0x88, Size: 0x8]
	Vector2D BottomEdgeOffset;//[Offset: 0x90, Size: 0x8]
	float BottomEdgeDeviationOffsetRate;//[Offset: 0x98, Size: 0x4]
	Vector2D WholeScale;//[Offset: 0x9c, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: BowCrossHair
	SoftObjectPath CenterPointResource;//[Offset: 0x0, Size: 0x18]
	Vector2D CenterPointScale;//[Offset: 0x18, Size: 0x8]
	SoftObjectPath HorizontalLineResource;//[Offset: 0x20, Size: 0x18]
	Vector2D HorizontalLineScale;//[Offset: 0x38, Size: 0x8]
	float HorizontalLineOffset;//[Offset: 0x40, Size: 0x4]
	SoftObjectPath CrossEdgeResource;//[Offset: 0x48, Size: 0x18]
	Vector2D CrossEdgeScale;//[Offset: 0x60, Size: 0x8]
	Vector2D WholeScale;//[Offset: 0x68, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: ShootWeaponBulletCount
	SoftObjectPath ArcBackgroundResource;//[Offset: 0x0, Size: 0x18]
	Vector2D ArcBackgroundScale;//[Offset: 0x18, Size: 0x8]
	SoftObjectPath ThumbPointResource;//[Offset: 0x20, Size: 0x18]
	Vector2D ThumbPointScale;//[Offset: 0x38, Size: 0x8]
	float[] PercentValueConfig;//[Offset: 0x40, Size: 0x10]
	AlphaBlendConfig HiddenToVisibleAlphaBlendConfig;//[Offset: 0x50, Size: 0x20]
	AlphaBlendConfig[] VisibleToHiddenAlphaBlendConfig;//[Offset: 0x70, Size: 0x10]
	float DeviationThreshold;//[Offset: 0x80, Size: 0x4]
	Vector2D WholeScale;//[Offset: 0x84, Size: 0x8]
	float WholeOffset;//[Offset: 0x8c, Size: 0x4]
	float WholeRotation;//[Offset: 0x90, Size: 0x4]
	float ArcWidth;//[Offset: 0x94, Size: 0x4]
	float ArcRadius;//[Offset: 0x98, Size: 0x4]
	float ArcAngle;//[Offset: 0x9c, Size: 0x4]
	LinearColor[] PercentColorArray;//[Offset: 0xa0, Size: 0x10]
	float PointOffset;//[Offset: 0xb0, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AlphaBlendConfig
	enum BlendOption;//[Offset: 0x0, Size: 0x1]
	CurveFloat* CustomCurve;//[Offset: 0x8, Size: 0x8]
	float BlendTime;//[Offset: 0x10, Size: 0x4]
	float BeginValue;//[Offset: 0x14, Size: 0x4]
	float DesiredValue;//[Offset: 0x18, Size: 0x4]
	bool bIsLoop;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x1c, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: GSTShootWeapon.GSTWeaponBase.Actor.Object
	bool IsEquipSilencer;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x940, Size: 0x1]
	bool IsEquipFiringSuppressor;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x941, Size: 0x1]
	bool IsEquipCompensator;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x942, Size: 0x1]
	bool IsHeavyWeapon;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x943, Size: 0x1]
	AkAudioEvent* BulletFlySound;//[Offset: 0x948, Size: 0x8]
	AkAudioEvent* LoadBulletSound;//[Offset: 0x950, Size: 0x8]
	AkAudioEvent* ChangeMagazineSound;//[Offset: 0x958, Size: 0x8]
	AkAudioEvent* MagazineINSound;//[Offset: 0x960, Size: 0x8]
	AkAudioEvent* MagazineOUTSound;//[Offset: 0x968, Size: 0x8]
	AkAudioEvent* PullBoltSound;//[Offset: 0x970, Size: 0x8]
	Vector BulletDecalScale;//[Offset: 0x978, Size: 0xc]
	bool TestInfinityBullet;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x984, Size: 0x1]
	int BulletMode;//[Offset: 0x988, Size: 0x4]
	WeaponShootComp* ShootWeaponComp;//[Offset: 0x998, Size: 0x8]
	ShootEventProcessComponent* EventProcessComponent;//[Offset: 0x9a0, Size: 0x8]
	delegate OnShootWeaponAutoReloadDel;//[Offset: 0x9a8, Size: 0x10]
	delegate OnCurBulletChange;//[Offset: 0x9b8, Size: 0x10]
	delegate OnStartFireDelegate;//[Offset: 0x9d8, Size: 0x10]
	delegate OnStopFireDelegate;//[Offset: 0x9e8, Size: 0x10]
	delegate OnStartPullingDelegate;//[Offset: 0x9f8, Size: 0x10]
	delegate OnStopPullingDelegate;//[Offset: 0xa08, Size: 0x10]
	delegate OnWeaponShootDelegate;//[Offset: 0xa18, Size: 0x10]
	delegate OnWeaponReloadStartDelegate;//[Offset: 0xa28, Size: 0x10]
	delegate OnWeaponReloadEndDelegage;//[Offset: 0xa38, Size: 0x10]
	delegate OnWeaponEquipWeaponDelegate;//[Offset: 0xa48, Size: 0x10]
	delegate OnWeaponUnEquipWeaponDelegage;//[Offset: 0xa58, Size: 0x10]
	delegate OnWeaponNoShootDelegage;//[Offset: 0xa68, Size: 0x10]
	delegate OnWeaponEquipDelegate;//[Offset: 0xa78, Size: 0x10]
	delegate OnWeaponUnEquipDelegate;//[Offset: 0xa88, Size: 0x10]
	delegate OnHitDelegate;//[Offset: 0xab0, Size: 0x10]
	delegate OnShootFire;//[Offset: 0xac0, Size: 0x10]
	delegate OnLaunchBullet;//[Offset: 0xad0, Size: 0x10]
	delegate OnThirdBulletHit;//[Offset: 0xae0, Size: 0x10]
	Vector LastImpactEffectLocation;//[Offset: 0xcd0, Size: 0xc]
	float LastImpactEffectTime;//[Offset: 0xcdc, Size: 0x4]
	FName[] PowerStorageReplaceCharAnimList;//[Offset: 0xce0, Size: 0x10]
	byte TraceChannel;//[Offset: 0xcf0, Size: 0x1]
	bool isSnipeGun;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xcf1, Size: 0x1]
	Transform BoltActionTransform;//[Offset: 0xd00, Size: 0x30]
	bool IsPenetrate;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xd30, Size: 0x1]
	BulletTrackComp* BulletTrackComp;//[Offset: 0xd38, Size: 0x8]
	ToaaBulletTrackComp* ToaaBulletTrackComp;//[Offset: 0xd40, Size: 0x8]
	bool IsScopeInterrupt;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xd50, Size: 0x1]
	bool bInstantImpact;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xda8, Size: 0x1]
	ShootWeaponEntityComp* ShootWeaponEntityComp;//[Offset: 0xdc8, Size: 0x8]
	<Object*,uint32> ShootEventNodeResMap;//[Offset: 0xe18, Size: 0x50]
	bool StopFireFilter();// 0x302e868
	bool StartFireFilter();// 0x302e828
	void StartDoPreBarrel(float HandledTime);// 0x302e7a4
	void SetShootBulletType(enum bulletType);// 0x302e72c
	void SetRetargetGunMesh(bool IsRetarget, SceneComponent* gunMesh);// 0x302e664
	void SetReloadMethod(byte reloadMethod);// 0x302e5e8
	void SetIsHeavyWeapon(bool bEquip);// 0x302e568
	void SetImpactOverflowDamage(int64 Damage, bool bBroadcastToLua);// 0x302e48c
	void SetHomingTargetComponent(SceneComponent* Target, FName TargetSocket);// 0x302e3d8
	void SetCurShootType(byte shootType);// 0x302e35c
	void SetAimType(enum InAimType);// 0x302e2e4
	void ReqRefreshClipInfo();// 0x302e2d0
	void RefreshWeaponMesh();// 0x302e2bc
	void RefreshProtocolWeaponInfo();// 0x302e2a8
	void ReconnectRefreshWeaponDetail(int BulletNum, uint32 CurClipID, int SyncType, uint64 RandomSeed, int ShootID);// 0x302e140
	void OnWeaponUnEquipDelegate__DelegateSignature();// 0x35332fc
	void OnWeaponShootDelegate__DelegateSignature();// 0x35332fc
	void OnWeaponReloadStartDelegate__DelegateSignature();// 0x35332fc
	void OnWeaponReloadEndDelegage__DelegateSignature();// 0x35332fc
	void OnWeaponEquipDelegate__DelegateSignature();// 0x35332fc
	void OnWeaponClipMaxBulletChanged();// 0x302e12c
	void OnWeaponBulletChanged();// 0x302e118
	void OnStopReload();// 0x302e104
	void OnStopPullingDelegate__DelegateSignature();// 0x35332fc
	void OnStopFireDelegate__DelegateSignature();// 0x35332fc
	void OnStartReload();// 0x302e0f0
	void OnStartPullingDelegate__DelegateSignature();// 0x35332fc
	void OnStartFireDelegate__DelegateSignature();// 0x35332fc
	void OnShootWeaponAutoReloadDelegate__DelegateSignature();// 0x35332fc
	void OnShootFireDelegate__DelegateSignature();// 0x35332fc
	void OnRep_HitDataArray(out const BulletHitInfoUploadData[] HitDataArray);// 0x302e054
	void OnNoBulletNum();// 0x302e040
	void OnMaxBulletChange__DelegateSignature();// 0x35332fc
	void OnLeadingPlayerCharacterStateChange(int InLayer, int InOldState, int InNewState);// 0x302df50
	void OnLaunchBulletDelegate__DelegateSignature(out const LanchBullet ShootData);// 0x35332fc
	void OnHitDelegate__DelegateSignature(out const WeaponImpactResult ImpactResult);// 0x35332fc
	void OnHeavyWeaponBulletModeChanged(int InBulletMode);// 0x302ded4
	void OnEndViewTarget(PlayerController* PC);// 0x302de50
	void OnCurBulletChange__DelegateSignature();// 0x35332fc
	void OnBreakFire();// 0x302de3c
	void OnBecomeViewTarget(PlayerController* PC);// 0x302ddb8
	void LogWeaponAttr();// 0x302dda4
	bool IsScopeInAttachToCharacter();// 0x302dd6c
	bool IsPressAimButtonShoulderMode();// 0x302dd34
	bool IsOneShoot();// 0x302dcf4
	bool IsInPreFire();// 0x302dcbc
	void HeavyWeaponSwitchBulletMode(int BulletMode);// 0x302dc40
	void GunAttachMeshAnimPlay(enum AttachType, int animIndex, int Rate, bool bLoop);// 0x302db0c
	byte GetWeaponReloadType();// 0x302dad8
	MeshComponent* GetWeaponMuzzleEffectComponent(FName SocketName);// 0x302da54
	Vector GetWeaponDetectStartOffest();// 0x302da1c
	float GetWeaponBodyLength();// 0x302d9e8
	Transform GetTransformBySocket(FName pSocket);// 0x302d924
	float GetTraceDistanceFromEntity();// 0x302d8f0
	FName GetSilencerSocketNameFromEntity();// 0x302d8bc
	byte GetShootWeaponShootMode();// 0x302d888
	ShootWeaponEntityComp* GetShootWeaponEntityComponent();// 0x302d854
	WeaponShootComp* GetShootWeaponComp();// 0x302d820
	byte GetShootType();// 0x302d800
	float GetShootIntervalFromEntity();// 0x302d7cc
	float GetShootInterval();// 0x302d798
	FName GetShellDropSocketNameFromEntity();// 0x302d764
	int GetScopeResID();// 0x302d730
	uint64 GetScopeInstanceID();// 0x302d6fc
	MeshComponent* GetScopeAimCameraTransform(FName SocketName, int SocketIndex);// 0x302d638
	float GetReloadTimeFromEntity();// 0x302d604
	float GetReloadTacticalTimeFromEntity();// 0x302d5d0
	float GetReloadMagOutTime();// 0x302d59c
	float GetReloadMagOutHideTime();// 0x302d568
	float GetReloadMagInTime();// 0x302d534
	float GetReloadDurationStartFromEntity();// 0x302d500
	float GetReloadDurationLoopFromEntity();// 0x302d4cc
	float GetReloadBreakProtectTimeFromEntity();// 0x302d498
	Transform GetRelativeMuzzleTransform();// 0x302d41c
	float GetReferenceDistance();// 0x302d3e8
	float GetRangeModifier();// 0x302d3b4
	float GetPostReloadTimeFromEntity();// 0x302d380
	float GetPostFireTimeFromEntity();// 0x302d34c
	float GetPelletVerticalSpread();// 0x302d318
	float GetPelletHorizontalSpread();// 0x302d2e4
	float GetPelletAimVerticalSpreadFactor();// 0x302d2b0
	float GetPelletAimHorizontaSpreadFactor();// 0x302d27c
	int GetOwnerAvatarPredictedLODLevel();// 0x302d248
	Transform GetMuzzleTransform();// 0x302d1cc
	FName GetMuzzleSocketNameFromEntity();// 0x302d198
	float GetMaxImpactEffectSkipTimeFromEntity();// 0x302d164
	int GetMaxBulletNumInOneClipFromEntity();// 0x302d130
	bool GetIsHeavyWeapon();// 0x302d0f8
	int64 GetImpactOverflowDamage();// 0x302d0dc
	float GetImpactEffectSkipDistanceFromEntity();// 0x302d0a8
	float GetIdleToScopeTransitionTime();// 0x302d074
	FName GetHomingTargetSocket();// 0x302d040
	float GetHomingMaxAngleSpeed();// 0x302d00c
	float GetHoldGunIdleTimeAfterScopeChangeFromEntity();// 0x302cfd8
	float GetHoldGunIdleTimeAfterFireFromEntity();// 0x302cfa4
	enum GetHitCameraShakeLevelFormEntity();// 0x302cf70
	float GetHandFoldMinDegree();// 0x302cf3c
	float GetHandFoldMaxDegree();// 0x302cf08
	float GetGameDeviationFactor();// 0x302ced4
	FName GetFiringSuppressorSocketNameFromEntity();// 0x302cea0
	MeshComponent* GetDefaultAttachmentComponentByType(enum Type);// 0x302ce1c
	byte GetCurSightType();// 0x302cde8
	float GetCurReloadTime();// 0x302cdb4
	byte GetCurReloadMethod();// 0x302cd80
	float GetCrossHairSustainedFireDiffusePercent();// 0x302cd4c
	float GetCrossHairSustainedFireDeviation();// 0x302cd18
	float GetCrossHairMaxDrawSize();// 0x302cce4
	float GetCrossHairInitSize();// 0x302ccb0
	float GetCrossHairBurstSpeed();// 0x302cc7c
	float GetCrossHairBurstIncreaseSpeed();// 0x302cc48
	bool GetClipHasInfiniteBulletsFromEntity();// 0x302cc10
	float GetBurstShootIntervalFromEntity();// 0x302cbdc
	int GetBurstShootBulletsNumFromEntity();// 0x302cba8
	ItemDefineID GetBulletTypeFromEntity();// 0x302cb54
	float GetBulletRangeEntity();// 0x302cb20
	float GetBulletNumSingleShotFromEntity();// 0x302caec
	int GetBulletNumInCurClip();// 0x302cab8
	float GetBulletFireSpeedFromEntity();// 0x302ca84
	float GetBowMaxPowerStorageTime();// 0x302ca50
	float GetBaseImpactDamageEntity();// 0x302ca1c
	enum GetAimType();// 0x302ca00
	float GetAccessoriesVRecoilFactor();// 0x302c9cc
	float GetAccessoriesRecoveryFactor();// 0x302c998
	float GetAccessoriesHRecoilFactor();// 0x302c964
	float GetAccessoriesDeviationFactor();// 0x302c930
	void ConditionalSpawnImpactDeathEffect(out const Vector Position, out const Rotator Rotation, Actor* hitCharacter);// 0x302c814
	void ClientPlayBulletFlySound(Vector FlySoundPos);// 0x302c798
	void BulletLineTrace(Vector BornPos, Vector EndPos, Actor* BulletActor);// 0x302c698
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponShootComp.WeaponBaseComp.ActorComponent.Object
	FName NormalBulletsTrackCompTag;//[Offset: 0xf8, Size: 0x8]
	FName ScopeBulletsTrackCompTag;//[Offset: 0x100, Size: 0x8]
	bool bInstantImpact;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x108, Size: 0x1]
	bool bDrawShootLine;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x109, Size: 0x1]
	float DrawShootLineTime;//[Offset: 0x10c, Size: 0x4]
	bool bDrawShootPointOnScreen;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	float DrawShootPointOnScreenTime;//[Offset: 0x114, Size: 0x4]
	float DrawShootPointOnScreenSize;//[Offset: 0x118, Size: 0x4]
	float DrawShootPoint3DSize;//[Offset: 0x11c, Size: 0x4]
	delegate OnShoot;//[Offset: 0x128, Size: 0x10]
	GSTShootWeapon* OwnerShootWeapon;//[Offset: 0x150, Size: 0x8]
	void ShootDelegate__DelegateSignature();// 0x35332fc
	void OnContinuousShootStateChangedDelegate__DelegateSignature(bool bIsContinuousShooting);// 0x35332fc
	void OnContinuousShootDelegate__DelegateSignature(int BulletsNum);// 0x35332fc
<----------Generated by SSpawner v1.0.2---------->


Class: ShootEventProcessComponent.WeaponBaseComp.ActorComponent.Object
	void OnWeaponVisibleChange();// 0x30c80f8
	void OnUnEquipEvent();// 0x30c80e4
	void OnThirdBulletHit(out const LanchBullet BulletData);// 0x30c8044
	void OnStopReload();// 0x30c8030
	void OnStopFire();// 0x30c801c
	void OnStartReload();// 0x30c8008
	void OnStartPulling();// 0x30c7ff4
	void OnStartFire();// 0x30c7fe0
	void OnShootFire();// 0x30c7fcc
	void OnNoBullet();// 0x30c7fb8
	void OnLaunchBullet(out const LanchBullet BulletData);// 0x30c7f18
	void OnLaunchBow();// 0x30c7f04
	void OnImpact();// 0x30c7ef0
	void OnEquipEvent();// 0x30c7edc
<----------Generated by SSpawner v1.0.2---------->


Class: LanchBullet
<----------Generated by SSpawner v1.0.2---------->


Class: BulletTrackComp.WeaponBaseComp.ActorComponent.Object
	GSTShootWeapon* OwnerShootWeapon;//[Offset: 0xf8, Size: 0x8]
	BaseCharacter* OwnerCharacter;//[Offset: 0x100, Size: 0x8]
	PlayerController* OwnerPlayerController;//[Offset: 0x108, Size: 0x8]
	void SetRecoilScale(float InValue);// 0x2fa2f2c
	void SetDeviationScale(float InValue);// 0x2fa2eb4
	void OnWeaponStopFire();// 0x2fa2ea0
	void OnWeaponStartFire();// 0x2fa2e8c
	void OnWeaponShoot();// 0x2fa2e78
	void OnEndViewTarget(PlayerController* PlayerController);// 0x2fa2dfc
	void OnBecomeViewTarget(PlayerController* PlayerController);// 0x2fa2d80
	float GetRecoilScale();// 0x2fa2d64
	float GetDeviationScale();// 0x2fa2d48
	Vector GetCurRecoilInfo();// 0x2fa2d10
	float GetCurDeviation();// 0x2fa2cdc
<----------Generated by SSpawner v1.0.2---------->


Class: ToaaBulletTrackComp.WeaponBaseComp.ActorComponent.Object
	GSTShootWeapon* OwnerShootWeapon;//[Offset: 0xf8, Size: 0x8]
	BaseCharacter* OwnerCharacter;//[Offset: 0x100, Size: 0x8]
	PlayerController* OwnerPlayerController;//[Offset: 0x108, Size: 0x8]
	void OnWeaponStopFire();// 0x30f0a4c
	void OnWeaponStartFire();// 0x30f0a38
	void OnWeaponShoot();// 0x30f0a24
	void OnEndViewTarget(PlayerController* PC);// 0x30f09a8
	void OnBecomeViewTarget(PlayerController* PC);// 0x30f092c
	Vector GetCurRecoilInfo();// 0x30f08f4
	float GetCurDeviation();// 0x30f08c0
<----------Generated by SSpawner v1.0.2---------->


Class: ShootWeaponEntityComp.WeaponEntityComp.WeaponBaseComp.ActorComponent.Object
	bool IsPureVirtualGun;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x130, Size: 0x1]
	class GSTShootBulletBase* BulletTemplate;//[Offset: 0x138, Size: 0x8]
	int BulletId;//[Offset: 0x140, Size: 0x4]
	int BulletNumWaring;//[Offset: 0x144, Size: 0x4]
	float BulletFireSpeed;//[Offset: 0x148, Size: 0x4]
	float HomingMaxAngleSpeed;//[Offset: 0x14c, Size: 0x4]
	FName HomingTargetSocket;//[Offset: 0x150, Size: 0x8]
	float LockTargetTime;//[Offset: 0x158, Size: 0x4]
	int MaxBulletNumInOneClip;//[Offset: 0x15c, Size: 0x4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x160, Size: 0x4]
	float ShootInterval;//[Offset: 0x164, Size: 0x4]
	bool NeedBtnCd;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	bool bHasSingleFireMode;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x169, Size: 0x1]
	bool bHasAutoFireMode;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x16a, Size: 0x1]
	bool bHasBurstFireMode;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x16b, Size: 0x1]
	int BurstShootBulletsNum;//[Offset: 0x16c, Size: 0x4]
	float BurstShootInterval;//[Offset: 0x170, Size: 0x4]
	int BulletNumSingleShot;//[Offset: 0x174, Size: 0x4]
	FName MuzzleSocketName;//[Offset: 0x178, Size: 0x8]
	FName DefaultMuzzleSocketName;//[Offset: 0x180, Size: 0x8]
	FName SilencerSocketName;//[Offset: 0x188, Size: 0x8]
	FName FiringSuppressorSocketName;//[Offset: 0x190, Size: 0x8]
	FName ShellDropSocketName;//[Offset: 0x198, Size: 0x8]
	float ImpactEffectSkipDistance;//[Offset: 0x1a0, Size: 0x4]
	float MaxImpactEffectSkipTime;//[Offset: 0x1a4, Size: 0x4]
	byte shootType;//[Offset: 0x1a8, Size: 0x1]
	byte ShootMode;//[Offset: 0x1a9, Size: 0x1]
	int ShootTotalType;//[Offset: 0x1ac, Size: 0x4]
	bool ADSManualStop;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 0x1]
	bool IsNeedBlink;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1b1, Size: 0x1]
	enum HitCameraShakeLevel;//[Offset: 0x1b2, Size: 0x1]
	float WeaponWarnUpTime;//[Offset: 0x1b4, Size: 0x4]
	bool IsLoopAnim;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1b8, Size: 0x1]
	int SpecialSkillId;//[Offset: 0x1bc, Size: 0x4]
	int HeavyWeaponBuffid;//[Offset: 0x1c0, Size: 0x4]
	int HitTriggerSkillID;//[Offset: 0x1c4, Size: 0x4]
	int HeavyWeaponAddOneBulletTime;//[Offset: 0x1c8, Size: 0x4]
	int HeavyWeaponMasterType;//[Offset: 0x1cc, Size: 0x4]
	HeavyWeaponSkill[] HeavyWeaponSkills;//[Offset: 0x1d0, Size: 0x10]
	enum SelectedType;//[Offset: 0x1e0, Size: 0x1]
	float ChangeWeaponCd;//[Offset: 0x1e4, Size: 0x4]
	float HoldGunIdleDeltaAfterFire;//[Offset: 0x1e8, Size: 0x4]
	float HoldGunIdleDeltaAfterScopeChange;//[Offset: 0x1ec, Size: 0x4]
	bool IsPressAimButtonShoulderMode;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0, Size: 0x1]
	float FireResumeSprintTime;//[Offset: 0x1f4, Size: 0x4]
	float BaseImpactDamage;//[Offset: 0x1f8, Size: 0x4]
	float BulletRange;//[Offset: 0x1fc, Size: 0x4]
	class ShootWeaponImpactEffect* ImpactActorTemplate;//[Offset: 0x200, Size: 0x8]
	byte ImpactDirType;//[Offset: 0x208, Size: 0x1]
	SRangeAttenuateConfig[] RangeAttenuate;//[Offset: 0x210, Size: 0x10]
	float RangeModifier;//[Offset: 0x220, Size: 0x4]
	float ReferenceDistance;//[Offset: 0x224, Size: 0x4]
	class DamageType* DamageType;//[Offset: 0x228, Size: 0x8]
	ItemDefineID bulletType;//[Offset: 0x230, Size: 0x28]
	bool bHasInfiniteClips;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	bool bClipHasInfiniteBullets;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x259, Size: 0x1]
	int InitBulletInClip;//[Offset: 0x25c, Size: 0x4]
	bool bAutoReload;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x260, Size: 0x1]
	float TraceDistance;//[Offset: 0x264, Size: 0x4]
	float MaxValidHitTime;//[Offset: 0x268, Size: 0x4]
	float ImpactPhysicsDamage;//[Offset: 0x26c, Size: 0x4]
	float FlameDamageMuzzleNearRadius;//[Offset: 0x270, Size: 0x4]
	float FlameDamageAngle;//[Offset: 0x274, Size: 0x4]
	Vector FlameDamageOverlap2Extent;//[Offset: 0x278, Size: 0xc]
	float FlameDamageOverlap2Offset;//[Offset: 0x284, Size: 0x4]
	int FlameNoHurtResID;//[Offset: 0x288, Size: 0x4]
	int FlameNoHurtCheckRadius;//[Offset: 0x28c, Size: 0x4]
	int NoHurtTriggerSkillID;//[Offset: 0x290, Size: 0x4]
	int GunHitTriggerSkillID;//[Offset: 0x294, Size: 0x4]
	byte ReloadType;//[Offset: 0x298, Size: 0x1]
	float PreFireTime;//[Offset: 0x29c, Size: 0x4]
	float PreFireScopeInterruptTime;//[Offset: 0x2a0, Size: 0x4]
	float PostFireTime;//[Offset: 0x2a4, Size: 0x4]
	float PostReloadTime;//[Offset: 0x2a8, Size: 0x4]
	float ReloadDurationStart;//[Offset: 0x2ac, Size: 0x4]
	float ReloadDurationLoop;//[Offset: 0x2b0, Size: 0x4]
	float ReloadTime;//[Offset: 0x2b4, Size: 0x4]
	float ReloadTimeTactical;//[Offset: 0x2b8, Size: 0x4]
	float ReloadBreakProtectTime;//[Offset: 0x2bc, Size: 0x4]
	float ReloadTimeMagOut;//[Offset: 0x2c0, Size: 0x4]
	float ReloadTimeMagOutHide;//[Offset: 0x2c4, Size: 0x4]
	float ReloadTimeMagIn;//[Offset: 0x2c8, Size: 0x4]
	bool NeedUseTacticalMagTime;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc, Size: 0x1]
	float ReloadTimeTacticalMagOut;//[Offset: 0x2d0, Size: 0x4]
	float ReloadTimeTacticalMagIn;//[Offset: 0x2d4, Size: 0x4]
	FName ReloadAllTIDName;//[Offset: 0x2d8, Size: 0x8]
	FName ReloadTacticalTIDName;//[Offset: 0x2e0, Size: 0x8]
	byte RecoilType;//[Offset: 0x2e8, Size: 0x1]
	SRecoilInfo RecoilInfo;//[Offset: 0x2f0, Size: 0x70]
	SToaaRecoilInfo ToaaRecoilInfo;//[Offset: 0x360, Size: 0x60]
	float AccessoriesVRecoilFactor;//[Offset: 0x3c0, Size: 0x4]
	float AccessoriesHRecoilFactor;//[Offset: 0x3c4, Size: 0x4]
	float AccessoriesRecoveryFactor;//[Offset: 0x3c8, Size: 0x4]
	SDeviation DeviationInfo;//[Offset: 0x3cc, Size: 0x48]
	float ShotGunVerticalSpread;//[Offset: 0x414, Size: 0x4]
	float ShotGunHorizontalSpread;//[Offset: 0x418, Size: 0x4]
	float GameDeviationFactor;//[Offset: 0x41c, Size: 0x4]
	float GameDeviationAccuracy;//[Offset: 0x420, Size: 0x4]
	float AccessoriesDeviationFactor;//[Offset: 0x424, Size: 0x4]
	enum CrossHairType;//[Offset: 0x428, Size: 0x1]
	float CrossHairInitialSize;//[Offset: 0x42c, Size: 0x4]
	float CrossHairMaxDrawSize;//[Offset: 0x430, Size: 0x4]
	float CrossHairBurstSpeed;//[Offset: 0x434, Size: 0x4]
	float CrossHairBurstIncreaseSpeed;//[Offset: 0x438, Size: 0x4]
	float CrossHairSustainedFireDiffusePercent;//[Offset: 0x43c, Size: 0x4]
	float CrossHairSustainedFireDeviation;//[Offset: 0x440, Size: 0x4]
	CrossHairShakeInfo NormalCrossHairShake;//[Offset: 0x448, Size: 0x10]
	CrossHairShakeInfo ShoulderCrossHairShake;//[Offset: 0x458, Size: 0x10]
	CrossHairShakeInfo ScopeCrossHairShake;//[Offset: 0x468, Size: 0x10]
	FName DefaultScopeSocket;//[Offset: 0x478, Size: 0x8]
	FName DefaultGripSocket;//[Offset: 0x480, Size: 0x8]
	FName DefaultGunStockSocket;//[Offset: 0x488, Size: 0x8]
	FName DefaultMagSocket;//[Offset: 0x490, Size: 0x8]
	float WeaponBodyLength;//[Offset: 0x498, Size: 0x4]
	Vector WeaponDetectStartOffest;//[Offset: 0x49c, Size: 0xc]
	FName[] OpticalSightAttachmentSocketNameList;//[Offset: 0x4a8, Size: 0x10]
	byte reloadMethod;//[Offset: 0x4bc, Size: 0x1]
	float WeaponAimFOV;//[Offset: 0x4c0, Size: 0x4]
	float WeaponAimFOVBaseLine;//[Offset: 0x4c4, Size: 0x4]
	float WeaponAimInTime;//[Offset: 0x4c8, Size: 0x4]
	float WeaponAimPitchRate;//[Offset: 0x4cc, Size: 0x4]
	float WeaponAimYawRate;//[Offset: 0x4d0, Size: 0x4]
	float GameMotionYawRate;//[Offset: 0x4d4, Size: 0x4]
	float GameMotionPitchRate;//[Offset: 0x4d8, Size: 0x4]
	float ShotGunAimVerticalSpreadFactor;//[Offset: 0x4dc, Size: 0x4]
	float ShotGunAimHorizontalSpreadFactor;//[Offset: 0x4e0, Size: 0x4]
	float ForegripParam;//[Offset: 0x4e4, Size: 0x4]
	float SensitiveFireYawRate;//[Offset: 0x4e8, Size: 0x4]
	float SensitiveFirePitchRate;//[Offset: 0x4ec, Size: 0x4]
	byte SightType;//[Offset: 0x4f0, Size: 0x1]
	float MaxBulletImpactFXClampDistance;//[Offset: 0x4f4, Size: 0x4]
	int MaxBulletImpactFXSpawnNum;//[Offset: 0x4f8, Size: 0x4]
	bool IsLimitBulletImpactFxSpawnInActor;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x4fc, Size: 0x1]
	float RecoilKickADS;//[Offset: 0x500, Size: 0x4]
	float ExtraHitPerformScale;//[Offset: 0x504, Size: 0x4]
	float HUDAlphaDecreaseSpeedScale;//[Offset: 0x508, Size: 0x4]
	bool bAutoExitScopeAfterFire;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x50c, Size: 0x1]
	enum ReleaseFireType;//[Offset: 0x50d, Size: 0x1]
	bool IsScopeInAttachToCharacter;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x50e, Size: 0x1]
	bool IsEnterPreFireScopeInterrupt;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x50f, Size: 0x1]
	float ScopeOutDelayTime;//[Offset: 0x510, Size: 0x4]
	bool bLock90DirWhenPitchAbove75;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x514, Size: 0x1]
	float LockAnimPitchDegree;//[Offset: 0x518, Size: 0x4]
	float LockAnimPitchDegreeCrouch;//[Offset: 0x51c, Size: 0x4]
	int HandFoldMaxDegree;//[Offset: 0x520, Size: 0x4]
	int HandFoldMinDegree;//[Offset: 0x524, Size: 0x4]
	float AnimationKick;//[Offset: 0x528, Size: 0x4]
	ShootBodyBuff[] HitHeadBuffs;//[Offset: 0x530, Size: 0x10]
	ShootBodyBuff[] HitBodyBuffs;//[Offset: 0x540, Size: 0x10]
	ShootBodyBuff[] HitArmBuffs;//[Offset: 0x550, Size: 0x10]
	ShootBodyBuff[] HitLegBuffs;//[Offset: 0x560, Size: 0x10]
	int ShotgunAddBuffHits;//[Offset: 0x570, Size: 0x4]
	int ShotgunAddBuffID;//[Offset: 0x574, Size: 0x4]
	int ShotgunAddBuffProb;//[Offset: 0x578, Size: 0x4]
	int ShootAddBuffID;//[Offset: 0x57c, Size: 0x4]
	int ShootAddBuffCDTime;//[Offset: 0x580, Size: 0x4]
	ShootCameraModeParam NormalModeParam;//[Offset: 0x584, Size: 0x18]
	ShootCameraModeParam ShoulderModeParam;//[Offset: 0x59c, Size: 0x18]
	ShootCameraModeParam AimModeParam;//[Offset: 0x5b4, Size: 0x18]
	float BowArrowInitSpeed;//[Offset: 0x5cc, Size: 0x4]
	float BowArrowMaxSpeed;//[Offset: 0x5d0, Size: 0x4]
	float BowMaxPowerStorageTime;//[Offset: 0x5d4, Size: 0x4]
	float BowPowerStorageInitSkillCoe;//[Offset: 0x5d8, Size: 0x4]
	float BowPowerStorageMaxSkillCoe;//[Offset: 0x5dc, Size: 0x4]
	float IdleToScopeTransitionTime;//[Offset: 0x5e0, Size: 0x4]
	AutoAimConfig AutoAimConfig;//[Offset: 0x5e8, Size: 0x40]
	OptimizeViewRotationConfig OptimizeViewRotationConfig;//[Offset: 0x628, Size: 0x2c]
	bool NeedTemperature;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x654, Size: 0x1]
	float FireOverheating;//[Offset: 0x658, Size: 0x4]
	float DissipateHeat;//[Offset: 0x65c, Size: 0x4]
	float MaxTemperature;//[Offset: 0x660, Size: 0x4]
	float MinTemperature;//[Offset: 0x664, Size: 0x4]
	bool IsNeedHidePlayer;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x668, Size: 0x1]
	byte ScopeCameraId;//[Offset: 0x669, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: GSTShootBulletBase.Actor.Object
	BulletMovementComp* PMComp;//[Offset: 0x340, Size: 0x8]
	bool bLaunchWithGravity;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	int MaxNoGravityRange;//[Offset: 0x34c, Size: 0x4]
	float LaunchGravityScale;//[Offset: 0x350, Size: 0x4]
	int PunctureTimes;//[Offset: 0x354, Size: 0x4]
	float DelayDestroyTimer;//[Offset: 0x358, Size: 0x4]
	class DamageType* DamageType;//[Offset: 0x360, Size: 0x8]
	Vector RootScale;//[Offset: 0x368, Size: 0xc]
	ParticleSystem* LocalTailFX;//[Offset: 0x378, Size: 0x8]
	bool IsNeedShowImpactEffectHitReaction;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x380, Size: 0x1]
	bool bShowNormalTailFXImpactInfo;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x381, Size: 0x1]
	bool bDrawImpactNormal;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x382, Size: 0x1]
	ParticleSystem* LocalTailFogFx;//[Offset: 0x388, Size: 0x8]
	BulletTailFxInfo LocalTailFxInfo;//[Offset: 0x390, Size: 0x30]
	ParticleSystem* RemoteTailFX;//[Offset: 0x3c0, Size: 0x8]
	ParticleSystem* RemoteTailFogFx;//[Offset: 0x3c8, Size: 0x8]
	BulletTailFxInfo RemoteTailFxInfo;//[Offset: 0x3d0, Size: 0x30]
	Vector ShootDir;//[Offset: 0x400, Size: 0xc]
	bool bClientCalcDamage;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x40c, Size: 0x1]
	delegate OnResetBullet;//[Offset: 0x458, Size: 0x10]
	delegate OnBulletImpact;//[Offset: 0x468, Size: 0x10]
	delegate OnLaunchBullet;//[Offset: 0x478, Size: 0x10]
	GSTShootWeapon* OwningShootWeapon;//[Offset: 0x488, Size: 0x8]
	Pawn* InstigatorPawn;//[Offset: 0x490, Size: 0x8]
	void ResetBulletDelegate__DelegateSignature();// 0x35332fc
	void OnImpactDelegate__DelegateSignature(HitResult HitInfo);// 0x35332fc
	void OnImpact(out const HitResult ImpactResult);// 0x302bc0c
	void LaunchBulletDelegate__DelegateSignature();// 0x35332fc
<----------Generated by SSpawner v1.0.2---------->


Class: BulletMovementComp.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	bool bEnableTickDelayForOneFrame;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f2, Size: 0x1]
	bool bNeedStopWhenImpact;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f3, Size: 0x1]
	bool bNeedSweepCheck;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f4, Size: 0x1]
	float SweepCheckRadius;//[Offset: 0x1f8, Size: 0x4]
	enum SelectedType;//[Offset: 0x1fc, Size: 0x1]
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x200, Size: 0x8]
	void ResumeMoveAfterImpactWithNoLost();// 0x2fa2744
	void ResetTickDelay();// 0x2fa272c
	void ForceStop();// 0x2fa2718
<----------Generated by SSpawner v1.0.2---------->


Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0x12c, Size: 0x4]
	float MaxSpeed;//[Offset: 0x130, Size: 0x4]
	bool bRotationFollowsVelocity;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x134, Size: 0x1]
	bool bShouldBounce;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x134, Size: 0x1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x134, Size: 0x1]
	bool bForceSubStepping;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x134, Size: 0x1]
	bool bSimulationEnabled;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x134, Size: 0x1]
	bool bSweepCollision;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x134, Size: 0x1]
	bool bIsHomingProjectile;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x134, Size: 0x1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x134, Size: 0x1]
	bool bIsSliding;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x135, Size: 0x1]
	bool bInterpMovement;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x135, Size: 0x1]
	bool bInterpRotation;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x135, Size: 0x1]
	float PreviousHitTime;//[Offset: 0x138, Size: 0x4]
	Vector PreviousHitNormal;//[Offset: 0x13c, Size: 0xc]
	float ProjectileGravityScale;//[Offset: 0x148, Size: 0x4]
	float Buoyancy;//[Offset: 0x14c, Size: 0x4]
	float Bounciness;//[Offset: 0x150, Size: 0x4]
	float Friction;//[Offset: 0x154, Size: 0x4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x158, Size: 0x4]
	float MinFrictionFraction;//[Offset: 0x15c, Size: 0x4]
	delegate OnProjectileBounce;//[Offset: 0x160, Size: 0x10]
	delegate OnProjectileStop;//[Offset: 0x170, Size: 0x10]
	float HomingAccelerationMagnitude;//[Offset: 0x180, Size: 0x4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x184, Size: 0x8]
	float MaxSimulationTimeStep;//[Offset: 0x18c, Size: 0x4]
	int MaxSimulationIterations;//[Offset: 0x190, Size: 0x4]
	int BounceAdditionalIterations;//[Offset: 0x194, Size: 0x4]
	float InterpLocationTime;//[Offset: 0x198, Size: 0x4]
	float InterpRotationTime;//[Offset: 0x19c, Size: 0x4]
	float InterpLocationMaxLagDistance;//[Offset: 0x1a0, Size: 0x4]
	float InterpLocationSnapToTargetDistance;//[Offset: 0x1a4, Size: 0x4]
	void StopSimulating(out const HitResult HitResult);// 0x4ea8544
	void SetVelocityInLocalSpace(Vector NewVelocity);// 0x4ea84c0
	void SetInterpolatedComponent(SceneComponent* Component);// 0x4ea843c
	void ResetInterpolation();// 0x4ea8420
	void OnProjectileStopDelegate__DelegateSignature(out const HitResult ImpactResult);// 0x35332fc
	void OnProjectileBounceDelegate__DelegateSignature(out const HitResult ImpactResult, out const Vector ImpactVelocity);// 0x35332fc
	void MoveInterpolationTarget(out const Vector NewLocation, out const Rotator NewRotation);// 0x4ea833c
	Vector LimitVelocity(Vector NewVelocity);// 0x4ea82ac
	bool IsVelocityUnderSimulationThreshold();// 0x4ea8264
	bool IsInterpolationComplete();// 0x4ea8238
<----------Generated by SSpawner v1.0.2---------->


Class: HeavyWeaponSkill
	int Passives;//[Offset: 0x0, Size: 0x4]
	int Actives;//[Offset: 0x4, Size: 0x4]
	LinearColor Color;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ShootWeaponImpactEffect.DataAsset.Object
	float FleshFxRandomAngle;//[Offset: 0x34, Size: 0x4]
	float OtherFxRandomAngle;//[Offset: 0x38, Size: 0x4]
	bool bUseImpactNormal;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x3c, Size: 0x1]
	ParticleSystem* DefaultFX;//[Offset: 0x40, Size: 0x8]
	ParticleSystem* DefaultFXLow;//[Offset: 0x48, Size: 0x8]
	bool IsDefaultFxApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x50, Size: 0x1]
	ParticleSystem* ConcreteFX;//[Offset: 0x58, Size: 0x8]
	ParticleSystem* ConcreteFXLow;//[Offset: 0x60, Size: 0x8]
	bool IsConcreteFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x68, Size: 0x1]
	ParticleSystem* DirtFX;//[Offset: 0x70, Size: 0x8]
	ParticleSystem* DirtFXLow;//[Offset: 0x78, Size: 0x8]
	bool IsDirtFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x80, Size: 0x1]
	ParticleSystem* WaterFX;//[Offset: 0x88, Size: 0x8]
	ParticleSystem* WaterFXLow;//[Offset: 0x90, Size: 0x8]
	bool IsWaterFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x98, Size: 0x1]
	ParticleSystem* MetalFX;//[Offset: 0xa0, Size: 0x8]
	ParticleSystem* MetalFXLow;//[Offset: 0xa8, Size: 0x8]
	bool IsMetalFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xb0, Size: 0x1]
	ParticleSystem* WoodFX;//[Offset: 0xb8, Size: 0x8]
	ParticleSystem* WoodFXLow;//[Offset: 0xc0, Size: 0x8]
	bool IsWoodFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xc8, Size: 0x1]
	ParticleSystem* GlassFX;//[Offset: 0xd0, Size: 0x8]
	ParticleSystem* GlassFXLow;//[Offset: 0xd8, Size: 0x8]
	bool IsGlassFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xe0, Size: 0x1]
	ParticleSystem* GrassFX;//[Offset: 0xe8, Size: 0x8]
	ParticleSystem* GrassFXLow;//[Offset: 0xf0, Size: 0x8]
	bool IsGrassFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xf8, Size: 0x1]
	ParticleSystem* FleshFX;//[Offset: 0x100, Size: 0x8]
	ParticleSystem* FleshFXLow;//[Offset: 0x108, Size: 0x8]
	bool IsFleshFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x110, Size: 0x1]
	ParticleSystem* OutFleshFX;//[Offset: 0x118, Size: 0x8]
	ParticleSystem* OutFleshFXLow;//[Offset: 0x120, Size: 0x8]
	bool IsOutFleshFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x128, Size: 0x1]
	ParticleSystem* DeathFleshFX;//[Offset: 0x130, Size: 0x8]
	ParticleSystem* DeathFleshFXLow;//[Offset: 0x138, Size: 0x8]
	bool IsDeathFleshFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	ParticleSystem* HeadFleshFX;//[Offset: 0x148, Size: 0x8]
	ParticleSystem* HeadFleshFXLow;//[Offset: 0x150, Size: 0x8]
	ParticleSystem* ShieldFleshFX;//[Offset: 0x158, Size: 0x8]
	ParticleSystem* ShieldFleshFXLow;//[Offset: 0x160, Size: 0x8]
	bool IsHeadFleshFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	ParticleSystem* SteelFX;//[Offset: 0x170, Size: 0x8]
	ParticleSystem* SteelFXLow;//[Offset: 0x178, Size: 0x8]
	bool IsSteelFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x180, Size: 0x1]
	ParticleSystem* SandbagFX;//[Offset: 0x188, Size: 0x8]
	ParticleSystem* SandbagFXLow;//[Offset: 0x190, Size: 0x8]
	bool IsSandbagFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	ParticleSystem* SandFX;//[Offset: 0x1a0, Size: 0x8]
	ParticleSystem* SandFXLow;//[Offset: 0x1a8, Size: 0x8]
	bool IsSandFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0, Size: 0x1]
	ParticleSystem* ClothFX;//[Offset: 0x1b8, Size: 0x8]
	ParticleSystem* ClothFXLow;//[Offset: 0x1c0, Size: 0x8]
	bool IsClothFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8, Size: 0x1]
	ParticleSystem* PlasticFX;//[Offset: 0x1d0, Size: 0x8]
	ParticleSystem* PlasticFXLow;//[Offset: 0x1d8, Size: 0x8]
	bool IsPlasticFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0, Size: 0x1]
	ParticleSystem* LeatherFX;//[Offset: 0x1e8, Size: 0x8]
	ParticleSystem* LeatherFXLow;//[Offset: 0x1f0, Size: 0x8]
	bool IsLeatherFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8, Size: 0x1]
	ParticleSystem* CeramicsFX;//[Offset: 0x200, Size: 0x8]
	ParticleSystem* CeramicsFXLow;//[Offset: 0x208, Size: 0x8]
	bool IsCeramicsFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x210, Size: 0x1]
	ParticleSystem* PaperFX;//[Offset: 0x218, Size: 0x8]
	ParticleSystem* PaperFXLow;//[Offset: 0x220, Size: 0x8]
	bool IsPaperFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x228, Size: 0x1]
	ParticleSystem* StoneFX;//[Offset: 0x230, Size: 0x8]
	ParticleSystem* StoneFXLow;//[Offset: 0x238, Size: 0x8]
	bool IsStoneFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x240, Size: 0x1]
	ParticleSystem* SinkFx;//[Offset: 0x248, Size: 0x8]
	ParticleSystem* SinkFxLow;//[Offset: 0x250, Size: 0x8]
	bool IsSinkFxApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x258, Size: 0x1]
	ParticleSystem* PopCanFX;//[Offset: 0x260, Size: 0x8]
	ParticleSystem* PopCanFXLow;//[Offset: 0x268, Size: 0x8]
	bool IsPopCanFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x270, Size: 0x1]
	ParticleSystem* PyreflyFX;//[Offset: 0x278, Size: 0x8]
	ParticleSystem* PyreflyFXLow;//[Offset: 0x280, Size: 0x8]
	bool IsPyreflyFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x288, Size: 0x1]
	ParticleSystem* LeafFX;//[Offset: 0x290, Size: 0x8]
	ParticleSystem* LeafFXLow;//[Offset: 0x298, Size: 0x8]
	bool IsLeafFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0, Size: 0x1]
	ParticleSystem* CarFX;//[Offset: 0x2a8, Size: 0x8]
	ParticleSystem* CarFXLow;//[Offset: 0x2b0, Size: 0x8]
	bool IsCarFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x2b8, Size: 0x1]
	ParticleSystem* AsphaltFX;//[Offset: 0x2c0, Size: 0x8]
	ParticleSystem* AsphaltFXLow;//[Offset: 0x2c8, Size: 0x8]
	bool IsAsphaltFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0, Size: 0x1]
	ParticleSystem* CrystalFX;//[Offset: 0x2d8, Size: 0x8]
	ParticleSystem* CrystalFXLow;//[Offset: 0x2e0, Size: 0x8]
	bool IsCrystalFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	ParticleSystem* Crystal2FX;//[Offset: 0x2f0, Size: 0x8]
	ParticleSystem* Crystal2FXLow;//[Offset: 0x2f8, Size: 0x8]
	bool IsCrystal2FXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x300, Size: 0x1]
	ParticleSystem* Crystal3FX;//[Offset: 0x308, Size: 0x8]
	ParticleSystem* Crystal3FXLow;//[Offset: 0x310, Size: 0x8]
	bool IsMetalNoHoldApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x318, Size: 0x1]
	ParticleSystem* MetalNoHoldFX;//[Offset: 0x320, Size: 0x8]
	ParticleSystem* MetalNoHoldFXLow;//[Offset: 0x328, Size: 0x8]
	bool IsCrystal3FXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x330, Size: 0x1]
	ParticleSystem* IceFX;//[Offset: 0x338, Size: 0x8]
	ParticleSystem* IceFXLow;//[Offset: 0x340, Size: 0x8]
	bool IsIceFXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x348, Size: 0x1]
	ParticleSystem* Boss3314Fx;//[Offset: 0x350, Size: 0x8]
	ParticleSystem* Boss3314FxLow;//[Offset: 0x358, Size: 0x8]
	bool IsBoss3314FXApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x360, Size: 0x1]
	ParticleSystem* Shield3323Fx;//[Offset: 0x368, Size: 0x8]
	ParticleSystem* Shield3323FxLow;//[Offset: 0x370, Size: 0x8]
	bool IsShield3323FxApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	ImpactEffectScale[] ImpactEffectScales;//[Offset: 0x380, Size: 0x10]
	ImpactEffectScale[] DeathImpactEffectScales;//[Offset: 0x390, Size: 0x10]
	ImpactEffectScale[] BloodEffectScales;//[Offset: 0x3a0, Size: 0x10]
	float RecycleTime;//[Offset: 0x3b0, Size: 0x4]
	bool bForceDefaultFX;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4, Size: 0x1]
	bool IsBlindageFleshApplyScale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5, Size: 0x1]
	ParticleSystem* BlindageFleshFX;//[Offset: 0x3b8, Size: 0x8]
	ParticleSystem* BlindageFleshFXLow;//[Offset: 0x3c0, Size: 0x8]
	AkAudioEvent* DefaultSound;//[Offset: 0x3c8, Size: 0x8]
	AkAudioEvent* ConcreteSound;//[Offset: 0x3d0, Size: 0x8]
	AkAudioEvent* DirtSound;//[Offset: 0x3d8, Size: 0x8]
	AkAudioEvent* WaterSound;//[Offset: 0x3e0, Size: 0x8]
	AkAudioEvent* MetalSound;//[Offset: 0x3e8, Size: 0x8]
	AkAudioEvent* WoodSound;//[Offset: 0x3f0, Size: 0x8]
	AkAudioEvent* GlassSound;//[Offset: 0x3f8, Size: 0x8]
	AkAudioEvent* GrassSound;//[Offset: 0x400, Size: 0x8]
	AkAudioEvent* FleshSound;//[Offset: 0x408, Size: 0x8]
	AkAudioEvent* SteelSound;//[Offset: 0x410, Size: 0x8]
	AkAudioEvent* SandbagSound;//[Offset: 0x418, Size: 0x8]
	AkAudioEvent* SandSound;//[Offset: 0x420, Size: 0x8]
	AkAudioEvent* ClothSound;//[Offset: 0x428, Size: 0x8]
	AkAudioEvent* PlasticSound;//[Offset: 0x430, Size: 0x8]
	AkAudioEvent* LeatherSound;//[Offset: 0x438, Size: 0x8]
	AkAudioEvent* CeramicsSound;//[Offset: 0x440, Size: 0x8]
	AkAudioEvent* PaperSound;//[Offset: 0x448, Size: 0x8]
	AkAudioEvent* StoneSound;//[Offset: 0x450, Size: 0x8]
	AkAudioEvent* SinkSound;//[Offset: 0x458, Size: 0x8]
	AkAudioEvent* PopCanSound;//[Offset: 0x460, Size: 0x8]
	AkAudioEvent* PyreflySound;//[Offset: 0x468, Size: 0x8]
	AkAudioEvent* LeafSound;//[Offset: 0x470, Size: 0x8]
	AkAudioEvent* CarSound;//[Offset: 0x478, Size: 0x8]
	AkAudioEvent* AsphaltSound;//[Offset: 0x480, Size: 0x8]
	AkAudioEvent* CrystalSound;//[Offset: 0x488, Size: 0x8]
	AkAudioEvent* Crystal2Sound;//[Offset: 0x490, Size: 0x8]
	AkAudioEvent* Crystal3Sound;//[Offset: 0x498, Size: 0x8]
	AkAudioEvent* IceSound;//[Offset: 0x4a0, Size: 0x8]
	AkAudioEvent* Boss3314Sound;//[Offset: 0x4a8, Size: 0x8]
	AkAudioEvent* Shield3323Sound;//[Offset: 0x4b0, Size: 0x8]
	AkAudioEvent* MetalNoHoldSound;//[Offset: 0x4b8, Size: 0x8]
	AkAudioEvent* ArmShieldHitSound;//[Offset: 0x4c0, Size: 0x8]
	AkAudioEvent* GunShieldHitSound;//[Offset: 0x4c8, Size: 0x8]
	AkAudioEvent* BlindageHitSound;//[Offset: 0x4d0, Size: 0x8]
	DecalData DefaultDecal;//[Offset: 0x4d8, Size: 0x20]
	DecalData ConcreteDecal;//[Offset: 0x4f8, Size: 0x20]
	DecalData DirtDecal;//[Offset: 0x518, Size: 0x20]
	DecalData WaterDecal;//[Offset: 0x538, Size: 0x20]
	DecalData MetalDecal;//[Offset: 0x558, Size: 0x20]
	DecalData WoodDecal;//[Offset: 0x578, Size: 0x20]
	DecalData GrassDecal;//[Offset: 0x598, Size: 0x20]
	DecalData GlassDecal;//[Offset: 0x5b8, Size: 0x20]
	DecalData FleshDecal;//[Offset: 0x5d8, Size: 0x20]
	DecalData SteelDecal;//[Offset: 0x5f8, Size: 0x20]
	DecalData SandbagDecal;//[Offset: 0x618, Size: 0x20]
	DecalData SandDecal;//[Offset: 0x638, Size: 0x20]
	DecalData ClothDecal;//[Offset: 0x658, Size: 0x20]
	DecalData PlasticDecal;//[Offset: 0x678, Size: 0x20]
	DecalData LeatherDecal;//[Offset: 0x698, Size: 0x20]
	DecalData CeramicsDecal;//[Offset: 0x6b8, Size: 0x20]
	DecalData PaperDecal;//[Offset: 0x6d8, Size: 0x20]
	DecalData StoneDecal;//[Offset: 0x6f8, Size: 0x20]
	DecalData SinkDecal;//[Offset: 0x718, Size: 0x20]
	DecalData PopCanDecal;//[Offset: 0x738, Size: 0x20]
	DecalData PyreflyDecal;//[Offset: 0x758, Size: 0x20]
	DecalData LeafDecal;//[Offset: 0x778, Size: 0x20]
	DecalData CarDecal;//[Offset: 0x798, Size: 0x20]
	DecalData AsphaltDecal;//[Offset: 0x7b8, Size: 0x20]
	DecalData CrystalDecal;//[Offset: 0x7d8, Size: 0x20]
	DecalData Crystal2Decal;//[Offset: 0x7f8, Size: 0x20]
	DecalData Crystal3Decal;//[Offset: 0x818, Size: 0x20]
	DecalData IceDecal;//[Offset: 0x838, Size: 0x20]
	DecalData Boss3314Decal;//[Offset: 0x858, Size: 0x20]
	DecalData Shield3323Decal;//[Offset: 0x878, Size: 0x20]
	DecalData MetalNoHoldDecal;//[Offset: 0x898, Size: 0x20]
	float FXCullingDistance;//[Offset: 0x8b8, Size: 0x4]
	byte HitSurfaceType;//[Offset: 0x8bc, Size: 0x1]
	Vector ImpactNormal;//[Offset: 0x8c0, Size: 0xc]
	Vector ImpactPoint;//[Offset: 0x8cc, Size: 0xc]
	PrimitiveComponent* HitComponent;//[Offset: 0x8d8, Size: 0x8]
	bool bAudioOnly;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x8e0, Size: 0x1]
	DecalComponent* ImpactDecalComp;//[Offset: 0x8e8, Size: 0x8]
	ParticleSystemComponent* ImpactParticleComp;//[Offset: 0x8f0, Size: 0x8]
	AkAudioEvent* BeginWaterAudioEvent;//[Offset: 0x900, Size: 0x8]
	AkAudioEvent* EndWaterAudioEvent;//[Offset: 0x908, Size: 0x8]
	float ExtendWaterTime;//[Offset: 0x918, Size: 0x4]
	float CheckWaterInterval;//[Offset: 0x928, Size: 0x4]
	SceneComponent* TargetImpactComp;//[Offset: 0x958, Size: 0x8]
	FName TargetSocket;//[Offset: 0x960, Size: 0x8]
	void OnParticleHit(FName EventName, float EmitterTime, int ParticleTime, Vector Location, Vector Velocity, Vector Direction, Vector Normal, FName BoneName, PhysicalMaterial* PhysMat);// 0x30cf510
	void ClearDecalTimer();// 0x30cf4fc
<----------Generated by SSpawner v1.0.2---------->


Class: ImpactEffectScale
	float Distance;//[Offset: 0x0, Size: 0x4]
	float Scale;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: DecalData
	float DecalSize;//[Offset: 0x0, Size: 0x4]
	float LifeSpan;//[Offset: 0x4, Size: 0x4]
	MaterialInterface* DecalMaterial;//[Offset: 0x8, Size: 0x8]
	float ImpactEffectStartScaleDistance;//[Offset: 0x10, Size: 0x4]
	float ImpactEffectEndScaleDistance;//[Offset: 0x14, Size: 0x4]
	float ImpactEffectStartScaleValue;//[Offset: 0x18, Size: 0x4]
	float ImpactEffectEndScaleValue;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x278, Size: 0x8]
	int SortOrder;//[Offset: 0x280, Size: 0x4]
	float FadeScreenSize;//[Offset: 0x284, Size: 0x4]
	float FadeStartDelay;//[Offset: 0x288, Size: 0x4]
	float FadeDuration;//[Offset: 0x28c, Size: 0x4]
	float FadeInDuration;//[Offset: 0x290, Size: 0x4]
	float FadeInStartDelay;//[Offset: 0x294, Size: 0x4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x298, Size: 0x1]
	Vector DecalSize;//[Offset: 0x29c, Size: 0xc]
	void SetSortOrder(int Value);// 0x4d109d8
	void SetFadeScreenSize(float NewFadeScreenSize);// 0x4d1095c
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);// 0x4d10864
	void SetFadeIn(float StartDelay, float Duaration);// 0x4d107b0
	void SetDecalMaterial(MaterialInterface* NewDecalMaterial);// 0x4d10734
	float GetFadeStartDelay();// 0x4d10700
	float GetFadeInStartDelay();// 0x4d106cc
	float GetFadeInDuration();// 0x4d10698
	float GetFadeDuration();// 0x4d10664
	MaterialInterface* GetDecalMaterial();// 0x4d10630
	MaterialInstanceDynamic* CreateDynamicMaterialInstance();// 0x4d105f4
<----------Generated by SSpawner v1.0.2---------->


Class: SRangeAttenuateConfig
	int rangeStart;//[Offset: 0x0, Size: 0x4]
	int RangeEnd;//[Offset: 0x4, Size: 0x4]
	float rangeAttenuateFactor;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SRecoilInfo
	float VerticalRecoilMin;//[Offset: 0x0, Size: 0x4]
	float VerticalRecoilMax;//[Offset: 0x4, Size: 0x4]
	float VerticalRecoilVariation;//[Offset: 0x8, Size: 0x4]
	float VerticalRecoveryModifier;//[Offset: 0xc, Size: 0x4]
	float VerticalRecoveryClamp;//[Offset: 0x10, Size: 0x4]
	float VerticalRecoveryMax;//[Offset: 0x14, Size: 0x4]
	float LeftMax;//[Offset: 0x18, Size: 0x4]
	float RightMax;//[Offset: 0x1c, Size: 0x4]
	float HorizontalTendency;//[Offset: 0x20, Size: 0x4]
	CurveVector* RecoilCurve;//[Offset: 0x28, Size: 0x8]
	int BulletPerSwitch;//[Offset: 0x30, Size: 0x4]
	float TimePerSwitch;//[Offset: 0x34, Size: 0x4]
	bool SwitchOnTime;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x38, Size: 0x1]
	float RecoilSpeedVertical;//[Offset: 0x3c, Size: 0x4]
	float RecoilSpeedHorizontal;//[Offset: 0x40, Size: 0x4]
	float RecovertySpeedVertical;//[Offset: 0x44, Size: 0x4]
	float RecoilValueClimb;//[Offset: 0x48, Size: 0x4]
	float RecoilValueFail;//[Offset: 0x4c, Size: 0x4]
	float RecoilModifierStand;//[Offset: 0x50, Size: 0x4]
	float RecoilModifierCrouch;//[Offset: 0x54, Size: 0x4]
	float RecoilModifierProne;//[Offset: 0x58, Size: 0x4]
	float RecoilHorizontalMinScalar;//[Offset: 0x5c, Size: 0x4]
	float BurstEmptyDelay;//[Offset: 0x60, Size: 0x4]
	bool ShootSightReturn;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x64, Size: 0x1]
	float ShootSightReturnSpeed;//[Offset: 0x68, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SToaaRecoilInfo
	float RecoilValueClimb;//[Offset: 0x0, Size: 0x4]
	CurveVector* RecoilCurve;//[Offset: 0x8, Size: 0x8]
	CurveFloat* RecoilRandomRadiusCurve;//[Offset: 0x10, Size: 0x8]
	float RecoilRandomRadius;//[Offset: 0x18, Size: 0x4]
	float VerticalRecoilMin;//[Offset: 0x1c, Size: 0x4]
	float VerticalRecoilMax;//[Offset: 0x20, Size: 0x4]
	float VerticalRecoilSpeed;//[Offset: 0x24, Size: 0x4]
	float HorizontalRecoilMin;//[Offset: 0x28, Size: 0x4]
	float HorizontalRecoilMax;//[Offset: 0x2c, Size: 0x4]
	float HorizontalRecoilSpeed;//[Offset: 0x30, Size: 0x4]
	CurveFloat* RecoilReviseCurve;//[Offset: 0x38, Size: 0x8]
	float VerticalRecoveryMax;//[Offset: 0x40, Size: 0x4]
	float RecoilPopupSpeed;//[Offset: 0x44, Size: 0x4]
	float RecoilRecoverySpeed;//[Offset: 0x48, Size: 0x4]
	bool ShootSightReturn;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x4c, Size: 0x1]
	int PostFireRecoveryRecentShootNum;//[Offset: 0x50, Size: 0x4]
	float ShootSightReturnSpeed;//[Offset: 0x54, Size: 0x4]
	float BurstEmptyDelay;//[Offset: 0x58, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SDeviation
	float DeviationBase;//[Offset: 0x0, Size: 0x4]
	float DeviationBaseAim;//[Offset: 0x4, Size: 0x4]
	float DeviationBaseADS;//[Offset: 0x8, Size: 0x4]
	float DeviationRecoilGain;//[Offset: 0xc, Size: 0x4]
	float DeviationRecoilGainAim;//[Offset: 0x10, Size: 0x4]
	float DeviationRecoilGainADS;//[Offset: 0x14, Size: 0x4]
	float DeviationMax;//[Offset: 0x18, Size: 0x4]
	float DeviationMinMove;//[Offset: 0x1c, Size: 0x4]
	float DeviationMaxMove;//[Offset: 0x20, Size: 0x4]
	float DeviationMoveMultiplier;//[Offset: 0x24, Size: 0x4]
	float DeviationMoveMinRefrence;//[Offset: 0x28, Size: 0x4]
	float DeviationMoveMaxRefrence;//[Offset: 0x2c, Size: 0x4]
	float DeviationStanceStand;//[Offset: 0x30, Size: 0x4]
	float DeviationStanceCrouch;//[Offset: 0x34, Size: 0x4]
	float DeviationStanceProne;//[Offset: 0x38, Size: 0x4]
	float DeviationStanceJump;//[Offset: 0x3c, Size: 0x4]
	float DeviationPowerStorageBase;//[Offset: 0x40, Size: 0x4]
	float DeviationPowerStorageMax;//[Offset: 0x44, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CrossHairShakeInfo
	CurveVector* ShakeCurve;//[Offset: 0x0, Size: 0x8]
	float CrossHairShakeRandomFactor;//[Offset: 0x8, Size: 0x4]
	bool IsEnableShake;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xc, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ShootBodyBuff
	int BuffID;//[Offset: 0x0, Size: 0x4]
	int Probability;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ShootCameraModeParam
	float VRecoilFactor;//[Offset: 0x0, Size: 0x4]
	float HRecoilFactor;//[Offset: 0x4, Size: 0x4]
	float RecoveryFactor;//[Offset: 0x8, Size: 0x4]
	float DeviationFactor;//[Offset: 0xc, Size: 0x4]
	float MaxVerticalRecoil;//[Offset: 0x10, Size: 0x4]
	bool bAutoRecover;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x14, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: AutoAimConfig
	float MinAttenuationDistance;//[Offset: 0x0, Size: 0x4]
	float MaxAttenuationDistance;//[Offset: 0x4, Size: 0x4]
	float MinValidDistance;//[Offset: 0x8, Size: 0x4]
	float MaxValidDistance;//[Offset: 0xc, Size: 0x4]
	AutoAimFactor AutoAimFactor_SwipeScreen_ScopeIn;//[Offset: 0x10, Size: 0x8]
	AutoAimFactor AutoAimFactor_WeaponShoot_ScopeIn;//[Offset: 0x18, Size: 0x8]
	AutoAimPoint[] AutoAimPointArray;//[Offset: 0x20, Size: 0x10]
	float AimingDuration;//[Offset: 0x30, Size: 0x4]
	float WeaponStopFireRevertLimitTime;//[Offset: 0x34, Size: 0x4]
	bool bEnableDampingRing;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x38, Size: 0x1]
	bool bEnableBlacklistActors;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x38, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: AutoAimFactor
	float RadiusFactor;//[Offset: 0x0, Size: 0x4]
	float SpeedFactor;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AutoAimPoint
	FName SocketName;//[Offset: 0x0, Size: 0x8]
	AutoAimArgs AutoAimArgs_SwipeScreen;//[Offset: 0x8, Size: 0xc]
	AutoAimArgs AutoAimArgs_WeaponShoot;//[Offset: 0x14, Size: 0xc]
	float Damping_Radius;//[Offset: 0x20, Size: 0x4]
	float Damping_RotationFactor;//[Offset: 0x24, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AutoAimArgs
	float Radius;//[Offset: 0x0, Size: 0x4]
	float Speed;//[Offset: 0x4, Size: 0x4]
	bool bCalcRadiusFactor;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: OptimizeViewRotationConfig
	int ValidDistance;//[Offset: 0x0, Size: 0x4]
	float ValidCapsuleHalfHeight;//[Offset: 0x4, Size: 0x4]
	Vector2D SpeedUpRangeVsScreenScale;//[Offset: 0x8, Size: 0x8]
	Vector2D ProjectCapsuleToScreenScale;//[Offset: 0x10, Size: 0x8]
	Vector2D SpeedUpFactor;//[Offset: 0x18, Size: 0x8]
	Vector2D SpeedDownFactor;//[Offset: 0x20, Size: 0x8]
	int CheckInterval;//[Offset: 0x28, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BulletHitInfoUploadData
	Vector ImpactPoint;//[Offset: 0x0, Size: 0xc]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0xc, Size: 0xc]
	Vector ImpactActorPos;//[Offset: 0x18, Size: 0xc]
	Vector ShootMomentMuzzlePos;//[Offset: 0x24, Size: 0xc]
	byte SurfaceType;//[Offset: 0x30, Size: 0x1]
	uint32 ShootID;//[Offset: 0x34, Size: 0x4]
	uint32 ClipID;//[Offset: 0x38, Size: 0x4]
	uint16 CompensationTime;//[Offset: 0x3c, Size: 0x2]
	Actor* Actor;//[Offset: 0x40, Size: 0x8]
	uint64 serverID;//[Offset: 0x48, Size: 0x8]
	int GlobalID;//[Offset: 0x50, Size: 0x4]
	PrimitiveComponent* Component;//[Offset: 0x54, Size: 0x8]
	bool bBulletCanBreakThrough;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x5c, Size: 0x1]
	bool bIndoor;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x5d, Size: 0x1]
	int Timestamp;//[Offset: 0x60, Size: 0x4]
	int ClientTimeStamp;//[Offset: 0x64, Size: 0x4]
	byte HitBodyType;//[Offset: 0x68, Size: 0x1]
	byte HitWeakness;//[Offset: 0x69, Size: 0x1]
	byte HitPartIndex;//[Offset: 0x6a, Size: 0x1]
	bool bIsFirstImpact;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x6b, Size: 0x1]
	double SystemTimeStamp;//[Offset: 0x70, Size: 0x8]
	double ShootTimeStamp;//[Offset: 0x78, Size: 0x8]
	Vector GunTailPos;//[Offset: 0x80, Size: 0xc]
	IntVector WorldOrigin;//[Offset: 0x8c, Size: 0xc]
	int ImpactType;//[Offset: 0x98, Size: 0x4]
	bool NoTriggerNoHurtSkill;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x9c, Size: 0x1]
	float PowerStorageTime;//[Offset: 0xa0, Size: 0x4]
	bool bTrajectoryDisplayed;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xa4, Size: 0x1]
	bool bFroceBroadcast;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xa5, Size: 0x1]
	bool bSvrValid;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xa6, Size: 0x1]
	bool bSvrHurtSuccess;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xa7, Size: 0x1]
	bool bAntiCheatSuccess;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xa8, Size: 0x1]
	int64 ClientDamage;//[Offset: 0xb0, Size: 0x8]
	int DamageType;//[Offset: 0xb8, Size: 0x4]
	Vector ShootDir;//[Offset: 0xbc, Size: 0xc]
	uint64 SvrTimeStamp;//[Offset: 0xc8, Size: 0x8]
	Vector ShooterPos;//[Offset: 0xd0, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponImpactResult
<----------Generated by SSpawner v1.0.2---------->


Class: AutoFireCrossHairComp.WeaponBaseComp.ActorComponent.Object
	BaseCharacter* OwnerCharacter;//[Offset: 0xf8, Size: 0x8]
	GSTShootWeapon* OwnerShootWeapon;//[Offset: 0x100, Size: 0x8]
	ShootWeaponEntityComp* ShootWeaponEntity;//[Offset: 0x108, Size: 0x8]
	SoftObjectPath CrossHairTextureCenter;//[Offset: 0x118, Size: 0x18]
	SoftObjectPath CrossHairTextureEdge;//[Offset: 0x130, Size: 0x18]
	SoftObjectPath CrossHairTextureChangeEdge;//[Offset: 0x148, Size: 0x18]
	bool ShowWhenScope;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	float DefualtDis;//[Offset: 0x164, Size: 0x4]
	float DefualtMinDis;//[Offset: 0x168, Size: 0x4]
	float PreAimTime;//[Offset: 0x16c, Size: 0x4]
	float MaxYaoShotDis;//[Offset: 0x170, Size: 0x4]
	float MinYaoShotDis;//[Offset: 0x174, Size: 0x4]
	float DisThrehold;//[Offset: 0x178, Size: 0x4]
	float PhysiqueThreshold;//[Offset: 0x17c, Size: 0x4]
	float[] IconAngles;//[Offset: 0x180, Size: 0x10]
	float FlameOutTime;//[Offset: 0x190, Size: 0x4]
	float FlameOutStopFireTime;//[Offset: 0x194, Size: 0x4]
	bool NeedAutoFire;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	void UpdateComponentTickable();// 0x2f64bf0
	void OnScopeOutEnd();// 0x2f64bd4
	void OnScopeInEnd();// 0x2f64bb8
	void OnEndViewTarget(PlayerController* PC);// 0x2f64b34
	void OnBecomeViewTarget(PlayerController* PC);// 0x2f64ab0
<----------Generated by SSpawner v1.0.2---------->


Class: ScopeCrossHairComp.CrossHairBaseComp.WeaponBaseComp.ActorComponent.Object
	Texture2D* ScopeCrossHairTexture;//[Offset: 0x150, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AidCrossHairComp.WeaponBaseComp.ActorComponent.Object
	PlayerCharacter* OwnerCharacter;//[Offset: 0xf8, Size: 0x8]
	GSTShootWeapon* OwnerShootWeapon;//[Offset: 0x100, Size: 0x8]
	ShootWeaponEntityComp* ShootWeaponEntity;//[Offset: 0x108, Size: 0x8]
	WeaponShootComp* WeaponShootComp;//[Offset: 0x110, Size: 0x8]
	PlayerController* OwnerPlayerController;//[Offset: 0x118, Size: 0x8]
	Texture2D* AidCrossHairTexture;//[Offset: 0x128, Size: 0x8]
	float MaxShowDistance;//[Offset: 0x130, Size: 0x4]
	float MinShowDistance;//[Offset: 0x134, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: FlagCrossHairComp.WeaponBaseComp.ActorComponent.Object
	<enum,Texture2D*> FlagIcons;//[Offset: 0xf8, Size: 0x50]
	Vector2D Offset;//[Offset: 0x148, Size: 0x8]
	PlayerCharacter* OwnerCharacter;//[Offset: 0x158, Size: 0x8]
	GSTShootWeapon* OwnerShootWeapon;//[Offset: 0x160, Size: 0x8]
	ShootWeaponEntityComp* ShootWeaponEntity;//[Offset: 0x168, Size: 0x8]
	WeaponShootComp* WeaponShootComp;//[Offset: 0x170, Size: 0x8]
	PlayerController* OwnerPlayerController;//[Offset: 0x178, Size: 0x8]
	void SetShowFlogIcon(bool bShow);// 0x301797c
	void SetMode(enum Mode);// 0x3017904
<----------Generated by SSpawner v1.0.2---------->


Class: AttrModifyComponent.ActorComponent.Object
	delegate OnAttrModified;//[Offset: 0xf0, Size: 0x10]
	DataTable* AttrDataTable;//[Offset: 0x100, Size: 0x8]
	int AttrGroup;//[Offset: 0x108, Size: 0x4]
	AttrModifyItem[] ConfigAttrModifyList;//[Offset: 0x110, Size: 0x10]
	AttrModifyGroupItem[] ConfigAttrModifyGroupList;//[Offset: 0x120, Size: 0x10]
	int8[] AttrModifyStateList;//[Offset: 0x180, Size: 0x10]
	int8[] AttrModifyGroupStateList;//[Offset: 0x190, Size: 0x10]
	void SetAttributeGroup(int InGroup, bool InRegister);// 0x2f555e8
	bool RegisterModifyAbleAttr(out const AttrRegisterItem[] AttrRegists, bool bSetAttrByOrigin);// 0x2f554c4
	bool RegisterAttributesFromTable(int InGroup);// 0x2f5543c
	void OnRep_AttrModifyStateList();// 0x2f55428
	void OnRep_AttrModifyGroupStateList();// 0x2f55414
	void OnAttrModifiedEvent__DelegateSignature(out const AttrAffected[] AffectedAttrS);// 0x35332fc
	bool EnableAttrModifier(FString AttrModifyItemName);// 0x2f55328
	bool EnableAllAttrModifier();// 0x2f552f0
	bool DisableModifierToActor(Actor* TargetActor);// 0x2f55268
	bool DisableAttrModifier(FString AttrModifyItemName);// 0x2f5517c
	bool DisableAllAttrModifier();// 0x2f55144
<----------Generated by SSpawner v1.0.2---------->


Class: AttrModifyItem
	FString AttrModifyItemName;//[Offset: 0x0, Size: 0x10]
	FString AttrName;//[Offset: 0x10, Size: 0x10]
	enum ModifierOp;//[Offset: 0x20, Size: 0x1]
	float ModifierValue;//[Offset: 0x24, Size: 0x4]
	bool IsEnable;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x28, Size: 0x1]
	CacheAffactTargetInfo[] AffectTargetsCachInfo;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: CacheAffactTargetInfo
	Actor* AffectTarget;//[Offset: 0x0, Size: 0x8]
	float FinalAddValue;//[Offset: 0x8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AttrModifyGroupItem
	AttrModifyItem[] AttrModifyItem;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: AttrRegisterItem
	FString AttrName;//[Offset: 0x0, Size: 0x10]
	enum AttrVariableType;//[Offset: 0x10, Size: 0x1]
	bool HasReplicatedTag;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x11, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: AttrAffected
	FString AttrName;//[Offset: 0x0, Size: 0x10]
	Actor* AffectedActor;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponStateMgr.WeaponBaseComp.ActorComponent.Object
	void UnbindStateStateMachineDelegate();// 0x3183f94
	void OnStateChangeAllInfo(XStateMachine* InStateMachine, byte InLayer, byte InEvent, byte InOldState, byte InNewState, bool bNetSync);// 0x3183ddc
	void OnStateChange(XStateMachine* InStateMachine, byte InLayer, byte InOldState, byte InNewState);// 0x3183ca4
	void BindStateStateMachineDelegate();// 0x3183c90
<----------Generated by SSpawner v1.0.2---------->


Class: XStateMachine.ActorComponent.Object
	delegate StateMachineStartBroadcast;//[Offset: 0xf0, Size: 0x10]
	delegate StateMachineStopBroadcast;//[Offset: 0x100, Size: 0x10]
	delegate BeforeStateChangeBroadcastDynamic;//[Offset: 0x110, Size: 0x10]
	delegate StateChangeBroadcastDynamic;//[Offset: 0x120, Size: 0x10]
	delegate StateBlockEndBroadcast;//[Offset: 0x130, Size: 0x10]
	delegate EventBlockEndBroadcast;//[Offset: 0x140, Size: 0x10]
	delegate StateChangeWithEventDynamic;//[Offset: 0x150, Size: 0x10]
	delegate StateChangeAllInfoBroadcastDynamic;//[Offset: 0x160, Size: 0x10]
	void StateMachineStopBroadcast__DelegateSignature(XStateMachine* InStateMachine);// 0x35332fc
	void StateMachineStartBroadcast__DelegateSignature(XStateMachine* InStateMachine);// 0x35332fc
	void StateChangeByEventDynamic__DelegateSignature(XStateMachine* InStateMachine, byte InEvent, byte InOldState, byte InNewState);// 0x35332fc
	void StateChangeBraodcastDynamic__DelegateSignature(XStateMachine* InStateMachine, byte InLayer, byte InOldState, byte InNewState);// 0x35332fc
	void StateChangeAllBraodcast__DelegateSignature(XStateMachine* InStateMachine, byte InLayer, byte InEvent, byte InOldState, byte InNewState, bool bNetSync);// 0x35332fc
	void StateBlockEndBraodcast__DelegateSignature(XStateMachine* InStateMachine, byte InLayer, byte InBlockTimeOutState);// 0x35332fc
	void SetLayerBasicState(byte InLayer);// 0x31b67c4
	void RemoveWhiteState(FName Reason);// 0x31b6748
	void RemoveWhiteEvent(FName Reason);// 0x31b66cc
	void RemoveBlackState(FName Reason);// 0x31b6650
	void RemoveBlackEvent(FName Reason);// 0x31b65d4
	bool NeedCheckStand(byte StateEvent);// 0x31b654c
	bool IsStateBlocking(byte StateGoingTo);// 0x31b64c4
	bool IsPlaying();// 0x31b64a8
	bool IsInState(byte inState);// 0x31b6420
	bool IsInBasicState(byte Layer);// 0x31b6398
	bool IsEventBlocking(byte InEvent, bool bInLog);// 0x31b62cc
	float GetStateBlockRemainTime(enum CharacterState, FName Reason);// 0x31b6204
	FString GetStateBlockingDecription();// 0x31b6180
	float GetEventBlockRemainTime(enum Event);// 0x31b60fc
	byte GetCurrentState(byte InLayer);// 0x31b6078
	void EventBlockEndBraodcast__DelegateSignature(XStateMachine* InStateMachine, byte Event);// 0x35332fc
	void DoExitEvent(byte InEvent);// 0x31b5ffc
	bool ContainsState(byte InLayer, byte inState);// 0x31b5f38
	bool ContainsLayer(byte InLayer);// 0x31b5eb0
	bool CheckEventDetail(byte InEvent, out XSMErrorInfo OutInfo, bool InLog);// 0x31b5d84
	bool CheckEvent(byte InEvent, bool InLog);// 0x31b5cb8
<----------Generated by SSpawner v1.0.2---------->


Class: XSMErrorInfo
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponAnimInstanceBase.AnimInstance.Object
	bool C_Charge;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x368, Size: 0x1]
	bool C_Tactical;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x369, Size: 0x1]
	byte C_WeaponState;//[Offset: 0x36a, Size: 0x1]
	float C_ReloadAnimRate;//[Offset: 0x36c, Size: 0x4]
	float C_ReloadTime;//[Offset: 0x370, Size: 0x4]
	float C_PreFireTime;//[Offset: 0x374, Size: 0x4]
	bool C_CustomScopping;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x378, Size: 0x1]
	bool C_State_Reload;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x379, Size: 0x1]
	bool C_State_Charge;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x37a, Size: 0x1]
	bool C_State_Fire;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x37b, Size: 0x1]
	bool C_Bullet_Empty;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 0x1]
	bool C_Equipped_Scope;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 0x1]
	bool C_IsOwnerCharacterMale;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x37f, Size: 0x1]
	bool bWeaponActive;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	AnimSequence* WeaponIdleAnimSequence;//[Offset: 0x390, Size: 0x8]
	AnimSequence* WeaponReloadAnimSequence;//[Offset: 0x398, Size: 0x8]
	AnimSequence* WeaponTacticalReloadAnimSequence;//[Offset: 0x3a0, Size: 0x8]
	AnimMontage* WeaponBoltMontage;//[Offset: 0x3a8, Size: 0x8]
	AnimMontage* WeaponFireMontage;//[Offset: 0x3b0, Size: 0x8]
	AnimSequence* WeaponSightOff;//[Offset: 0x3b8, Size: 0x8]
	void OnWeaponShoot();// 0x3160484
	void OnWeaponOwnerStateChange(XStateMachine* StateMachine, byte stateLayer, byte OldState, byte NewState);// 0x3160354
	void OnOwnerWeaponEnabled(GSTWeaponBase* OwnerWeapon);// 0x31602d8
	void OnOwnerWeaponDisabled(GSTWeaponBase* OwnerWeapon);// 0x316025c
	PlayerCharacter* GetWeaponOwnerCharacter();// 0x3160224
<----------Generated by SSpawner v1.0.2---------->


Class: MontageStopList
	StopMontageInfo[] MontageStopList;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: StopMontageInfo
	AnimMontage* AnimMontage;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: SkillReplaceCharJumpAnimData
	byte CharacterGunHoldType;//[Offset: 0x0, Size: 0x1]
	byte CharacterJumpAnimType;//[Offset: 0x1, Size: 0x1]
	AnimationAsset*[] PoseAnimList;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: SkillReplaceCharAnimData
	byte CharacterAnimType;//[Offset: 0x0, Size: 0x1]
	AnimationAsset*[] PoseAnimList;//[Offset: 0x8, Size: 0x10]
	AnimationAsset*[] FPPPoseAnimList;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object
<----------Generated by SSpawner v1.0.2---------->


Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0x148, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x88, Size: 0x1]
	float AnimLength;//[Offset: 0x8c, Size: 0x4]
	InterpolationParameter InterpolationParam;//[Offset: 0x90, Size: 0x8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0xa8, Size: 0x4]
	byte NotifyTriggerMode;//[Offset: 0xac, Size: 0x1]
	PerBoneInterpolation[] PerBoneBlend;//[Offset: 0xb0, Size: 0x10]
	int SampleIndexWithMarkers;//[Offset: 0xc0, Size: 0x4]
	BlendSample[] SampleData;//[Offset: 0xc8, Size: 0x10]
	EditorElement[] GridSamples;//[Offset: 0xd8, Size: 0x10]
	BlendParameter BlendParameters;//[Offset: 0xe8, Size: 0x20]
<----------Generated by SSpawner v1.0.2---------->


Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0, Size: 0x4]
	byte InterpolationType;//[Offset: 0x4, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: PerBoneInterpolation
	BoneReference BoneReference;//[Offset: 0x0, Size: 0x14]
	float InterpolationSpeedPerSec;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BlendSample
	AnimSequence* Animation;//[Offset: 0x0, Size: 0x8]
	Vector SampleValue;//[Offset: 0x8, Size: 0xc]
	float RateScale;//[Offset: 0x14, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: EditorElement
	int Indices;//[Offset: 0x0, Size: 0x4]
	float Weights;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BlendParameter
	FString DisplayName;//[Offset: 0x0, Size: 0x10]
	float Min;//[Offset: 0x10, Size: 0x4]
	float Max;//[Offset: 0x14, Size: 0x4]
	int GridNum;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x148, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: AOpDirectionLerpVar
	float N135Var;//[Offset: 0x0, Size: 0x4]
	float N90Var;//[Offset: 0x4, Size: 0x4]
	float N45Var;//[Offset: 0x8, Size: 0x4]
	float N0Var;//[Offset: 0xc, Size: 0x4]
	float P45Var;//[Offset: 0x10, Size: 0x4]
	float P90Var;//[Offset: 0x14, Size: 0x4]
	float P135Var;//[Offset: 0x18, Size: 0x4]
	float P180Var;//[Offset: 0x1c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AOpDirectionLerpVarConfig
	AOpDirectionLerpVar[] MaleLerpVars;//[Offset: 0x0, Size: 0x10]
	AOpDirectionLerpVar[] FemaleLerpVars;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: CosResLoader.Object
	SoftObjectPath[] LoadingPath;//[Offset: 0x28, Size: 0x10]
	<SoftObjectPath,Object*> LoadedRes;//[Offset: 0x38, Size: 0x50]
	enum mLoadingStatus;//[Offset: 0x88, Size: 0x1]
	delegate mDelegate;//[Offset: 0x90, Size: 0x10]
	bool ReleaseLoadedRes();// 0x2fc8114
	int GetTag();// 0x2fc80f8
	bool GetLoadedResWithStringPath(out const FString[] InTargetsToStream, out Object*[] OutStreamedRes);// 0x2fc7fbc
	bool GetLoadedRes(out const SoftObjectPath[] InTargetsToStream, out Object*[] OutStreamedRes);// 0x2fc7e80
	bool GetIsLoading();// 0x2fc7e5c
	bool GetIsFinished();// 0x2fc7e38
	static CosResLoader* CosCreateInstance();// 0x2fc7e00
	bool CancelAsyncLoad(const int InAsyncLoadHandleID);// 0x2fc7d78
	int AsyncLoadResWithStringPath(const int Tag, out const FString[] TargetsToStream, const bool bStartStalled, const int Priority, const bool bAddToStablePool);// 0x2fc7b98
	int AsyncLoadRes(const int Tag, out const SoftObjectPath[] TargetsToStream, const bool bStartStalled, const int Priority, const bool bAddToStablePool);// 0x2fc79b8
<----------Generated by SSpawner v1.0.2---------->


Class: MeshData
	StaticMesh* stMesh;//[Offset: 0x0, Size: 0x8]
	SkeletalMesh* skMesh;//[Offset: 0x8, Size: 0x8]
	<FName,MaterialInstance*> matInstMap;//[Offset: 0x10, Size: 0x50]
	<FName,SkMeshStateToAnimParamsRuntime> PartSkMeshStateToAnimMap;//[Offset: 0x60, Size: 0x50]
	<FName,ParticleSystem*> ParticleSystemMap;//[Offset: 0xb0, Size: 0x50]
	<FName,class Object> ParticleSystemActorClassMap;//[Offset: 0x100, Size: 0x50]
	enum subSlot;//[Offset: 0x150, Size: 0x1]
	enum meshType;//[Offset: 0x151, Size: 0x1]
	int PartIdx;//[Offset: 0x154, Size: 0x4]
	enum socketType;//[Offset: 0x158, Size: 0x1]
	class Object* AnimInstClass;//[Offset: 0x160, Size: 0x8]
	bool enableSkMeshSelfAnim;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x168, Size: 0x1]
	AnimationAsset* PartSkMeshIdleAnim;//[Offset: 0x170, Size: 0x8]
	enum SwitchState;//[Offset: 0x178, Size: 0x1]
	bool IsGFur;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x179, Size: 0x1]
	SkeletalMesh* AttachedGFurMesh;//[Offset: 0x180, Size: 0x8]
	<FName,MaterialInstance*> AttachedGFurMatInstMap;//[Offset: 0x188, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: SkMeshStateToAnimParamsRuntime
	AnimationAsset* AnimationAsset;//[Offset: 0x0, Size: 0x8]
	bool bLoop;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x8, Size: 0x1]
	float Rate;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: BakeFaceRuntimeData
	SkeletalMesh* BakeFaceSkeletalMesh;//[Offset: 0x0, Size: 0x8]
	MaterialInstance* BaseColorMat;//[Offset: 0x8, Size: 0x8]
	MaterialInstance* NormalMat;//[Offset: 0x10, Size: 0x8]
	MaterialInstance* RoughnessMat;//[Offset: 0x18, Size: 0x8]
	MaterialInstance* EyeBaseColorMat;//[Offset: 0x20, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AvatarData
	bool ForceUpdateAvatar;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	int charIdx;//[Offset: 0x4, Size: 0x4]
	FName meshCollisionProfileName;//[Offset: 0x8, Size: 0x8]
	int DamagePartBoneKey;//[Offset: 0x10, Size: 0x4]
	<enum,int> partData;//[Offset: 0x18, Size: 0x50]
	FName Reason;//[Offset: 0x68, Size: 0x8]
	int Priority;//[Offset: 0x70, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: FaceMakeupMatBase.ETC2CompressedLib.ActorComponent.Object
	delegate onPreReleaseRenderTextures;//[Offset: 0x128, Size: 0x10]
	FName UniqueName;//[Offset: 0x138, Size: 0x8]
	bool bIsUseSharedRT;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x140, Size: 0x1]
	AvatarComponent* BaseAvatar;//[Offset: 0x144, Size: 0x8]
	bool ReleaseAssetAfterDrawRTS;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x14c, Size: 0x1]
	FString[] AssetUsedForRelease;//[Offset: 0x150, Size: 0x10]
	bool ReleaseTextureAfterDrawRTs;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x160, Size: 0x1]
	BakeFaceRuntimeData BakeFaceRuntimeData;//[Offset: 0x168, Size: 0x28]
	bool FaceMouldNoMip;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x190, Size: 0x1]
	void TryReleaseUnusedAsset();// 0x2ffcee0
	void Print(FString str);// 0x2ffce54
	void PreReleaseRenderTextures__DelegateSignature();// 0x35332fc
	void PreReleaseRenderTextures();// 0x2ffce40
	Object* LoadAssetByPath(FString FilePath);// 0x2ffcda4
	void Initialize(BakeFaceRuntimeData runtimeData);// 0x35332fc
	MaterialInstanceDynamic* GetBodyMaterial(enum Slot, FName matSlotName);// 0x2ffccdc
	void DelayCall(int frame, delegate callback, int Token);// 0x2ffcbbc
	TextureRenderTarget2D* CreateRenderTarget2D(int Size, bool mipmap, byte Format, FName SlotName);// 0x2ffca74
	void ClearRuntimeData();// 0x35332fc
	void ClearMaterialInstanceParam(MaterialInstanceDynamic* mat);// 0x2ffc9f8
	void CancelCall();// 0x2ffc9e4
<----------Generated by SSpawner v1.0.2---------->


Class: ETC2CompressedLib.ActorComponent.Object
	Texture2D* C_Tex2DBaseColor;//[Offset: 0xf0, Size: 0x8]
	Texture2D* C_Tex2DNormal;//[Offset: 0xf8, Size: 0x8]
	Texture2D* C_Tex2DRoughness;//[Offset: 0x100, Size: 0x8]
	Texture2D* C_Tex2DEye;//[Offset: 0x108, Size: 0x8]
	FName C_SlotBaseColor;//[Offset: 0x110, Size: 0x8]
	FName C_SlotRoughness;//[Offset: 0x118, Size: 0x8]
	FName C_SlotNormal;//[Offset: 0x120, Size: 0x8]
	bool IsSlotSupportCompress(enum Slot);// 0x2ff47c4
	bool IsRTCompressSupported();// 0x2ff4784
	void CreateCompressTex2D(int baseColorSize, int roughnessSize, int normalSize, int eyeSize);// 0x2ff465c
	void ClearCompressTex2D();// 0x2ff4648
	void ApplyCompressedRTexToHeadMaterialWithoutEye(MaterialInstanceDynamic* headMaterial);// 0x2ff45cc
	void ApplyCompressedEyeTex(MaterialInstanceDynamic* applyTo, out const FName Slot);// 0x2ff4504
	void AddCompressPassAll(TextureRenderTarget2D* BaseColor, TextureRenderTarget2D* Normal, TextureRenderTarget2D* Roughness, TextureRenderTarget2D* eye);// 0x2ff43dc
	Texture2D* AddCompressPass(TextureRenderTarget2D* rt, Texture2D* outPutTex);// 0x2ff4318
<----------Generated by SSpawner v1.0.2---------->


Class: TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	int SizeX;//[Offset: 0xd0, Size: 0x4]
	int SizeY;//[Offset: 0xd4, Size: 0x4]
	LinearColor ClearColor;//[Offset: 0xd8, Size: 0x10]
	byte AddressX;//[Offset: 0xe8, Size: 0x1]
	byte AddressY;//[Offset: 0xe9, Size: 0x1]
	bool bForceLinearGamma;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0xea, Size: 0x1]
	bool bHDR;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0xea, Size: 0x1]
	bool bGPUSharedFlag;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0xea, Size: 0x1]
	bool bAutoGenerateMips;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0xea, Size: 0x1]
	byte RenderTargetFormat;//[Offset: 0xeb, Size: 0x1]
	byte OverrideFormat;//[Offset: 0xec, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: TextureRenderTarget.Texture.Object
	float TargetGamma;//[Offset: 0xc8, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: CopyPoseAnimInstance.AnimInstance.Object
	FName[] FaceBoneNames;//[Offset: 0x368, Size: 0x10]
	Transform[] FaceBoneTransforms;//[Offset: 0x378, Size: 0x10]
	bool C_IsNeedLookAtCamera;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x388, Size: 0x1]
	bool C_IsUseRTSComponent;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x3e9, Size: 0x1]
	bool C_IsNeedBakeBody;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x3ea, Size: 0x1]
	SkeletalMeshComponent* C_CopyPoseFromComponent;//[Offset: 0x3f0, Size: 0x8]
	<enum> ForbidLookAtStateList;//[Offset: 0x3f8, Size: 0x50]
	<enum> OnlyRotHeadStateList;//[Offset: 0x448, Size: 0x50]
	float C_LookAtRotCorrection;//[Offset: 0x498, Size: 0x4]
	bool C_OnlyHeadLookAt;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x49c, Size: 0x1]
	Rotator C_FinalLookAtRotation;//[Offset: 0x4ac, Size: 0xc]
	float LookAtLimitYaw;//[Offset: 0x4b8, Size: 0x4]
	float LookAtLimitPitch;//[Offset: 0x4bc, Size: 0x4]
	float LookAtRotSpeed;//[Offset: 0x4c0, Size: 0x4]
	float UpLookAtPitchScale;//[Offset: 0x4c4, Size: 0x4]
	float DownLookAtPitchScale;//[Offset: 0x4c8, Size: 0x4]
	void SetNeedLookAtCamera(bool IsNeedLookAtCamera, FName Reason, uint32 InPriority);// 0x2fc6bf8
	void SetNeedBakeBody(bool IsNeedBakeBody);// 0x2fc6b74
	void SetCopyPoseFrom(SkeletalMeshComponent* comp);// 0x35332fc
	void ResetNeedLookAtCamera(FName Reason);// 0x2fc6af8
	void PlayExpressionSlotAnimation(FString AnimSequenceRef, FString SlotName);// 0x2fc6a20
	void OnSetCopyPoseFrom();// 0x2fc6a04
	void OnPerSetCopyPoseFrom();// 0x2fc69e8
<----------Generated by SSpawner v1.0.2---------->


Class: InitAvatarParams
	<enum,InitAvatarTextureParams> MatGlobalTextureParams;//[Offset: 0x198, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: InitAvatarTextureParams
	<FName,Texture2D*> TextureParams;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: ParentMatData
	<enum,MaterialInterface*> ParentMatMap;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: BaseUXActionComponent.ActorComponent.Object
	enum ActionType;//[Offset: 0xf0, Size: 0x1]
	bool NeedSetInterActTarget;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xf1, Size: 0x1]
	enum[] SupportInputCodes;//[Offset: 0xf8, Size: 0x10]
	void OnEndTriggerOverlap(Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex);// 0x2f9b0a4
	void OnBeginTriggerOverlap(Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x2f9af04
<----------Generated by SSpawner v1.0.2---------->


Class: ToaaVaultComponent.BaseVaultComponent.ActorComponent.Object
	PlayerCharacter* PlayerCharacter;//[Offset: 0x470, Size: 0x8]
	LeadingPlayerCharacter* LeadingCharacter;//[Offset: 0x478, Size: 0x8]
	void OnStateChangeWithEvent(XStateMachine* InStateMachine, byte InEvent, byte OldState, byte NewState);// 0x3124d94
<----------Generated by SSpawner v1.0.2---------->


Class: BaseVaultComponent.ActorComponent.Object
	VaultConfigData* VaultConfigData;//[Offset: 0xf0, Size: 0x8]
	<FString,VaultData> vaultDataallMap;//[Offset: 0x1f0, Size: 0x50]
	VaultData[] vaultDataallArray;//[Offset: 0x240, Size: 0x10]
	VaultCheckRule[] checkRuleList;//[Offset: 0x250, Size: 0x10]
	float HalfHeight;//[Offset: 0x260, Size: 0x4]
	float MaxCheckHeight;//[Offset: 0x264, Size: 0x4]
	float OffsetSpeed;//[Offset: 0x268, Size: 0x4]
	float MaxCheckDis;//[Offset: 0x26c, Size: 0x4]
	float MaxCheckOppSiteDis;//[Offset: 0x270, Size: 0x4]
	float UnActiveMaxAngle;//[Offset: 0x274, Size: 0x4]
	float CapsuleRadius;//[Offset: 0x278, Size: 0x4]
	float MaxJumpLength;//[Offset: 0x27c, Size: 0x4]
	float heightoffsetcheck;//[Offset: 0x280, Size: 0x4]
	float HeightFowardCheck;//[Offset: 0x284, Size: 0x4]
	float minVaultHeight;//[Offset: 0x288, Size: 0x4]
	float MaxSlopeForJump;//[Offset: 0x28c, Size: 0x4]
	float OppsiteObstacleTestDis;//[Offset: 0x290, Size: 0x4]
	int debugTrace;//[Offset: 0x294, Size: 0x4]
	AnimMontage* Montage;//[Offset: 0x298, Size: 0x8]
	float CheckWindowRadius;//[Offset: 0x2a0, Size: 0x4]
	float WindowBrokenOffset;//[Offset: 0x2a4, Size: 0x4]
	Character* CharacterActor;//[Offset: 0x2a8, Size: 0x8]
	Actor* CheckActor;//[Offset: 0x2c8, Size: 0x8]
	PrimitiveComponent* HitComponent;//[Offset: 0x2e0, Size: 0x8]
	PrimitiveComponent* UpHitComponent;//[Offset: 0x2e8, Size: 0x8]
	PrimitiveComponent*[] HitComponentArray;//[Offset: 0x2f0, Size: 0x10]
	Actor* WindowActor;//[Offset: 0x3e8, Size: 0x8]
	bool UseNewVaultFlow();// 0x522b798
	bool TryVault();// 0x522b760
	void SyncPositionBeforeVault();// 0x522b74c
	void StopVaultThridCharacter(FString CurveName);// 0x522b6b8
	void StopVault();// 0x522b6a4
	void StartVaultThridCharacter(FString CurveName);// 0x522b610
	void StartVaultNew();// 0x522b5f4
	void StartVault();// 0x522b5e0
	void SetVaultParam(int64 Param0, int64 param1, int64 param2, int64 Param3, int64 Param4, int64 Param5, int64 Param6, int64 Param7);// 0x522b3c8
	int64[] GetVaultParam();// 0x522b344
	enum GetVaultFailReason();// 0x522b328
	float GetBeforeBlockHeight();// 0x522b30c
	void CheckVaultFalling();// 0x522b2f8
	bool CheckCanVaultWithParams(float LimitHeight, float LimitSwimHeight, float LimitAngle);// 0x522b1f0
	bool CheckCanVault();// 0x522b1b0
<----------Generated by SSpawner v1.0.2---------->


Class: VaultConfigData.DataAsset.Object
	float CheckForwardHeightOffset;//[Offset: 0x30, Size: 0x4]
	float InactiveMaxAngle;//[Offset: 0x34, Size: 0x4]
	float NormalAngleMaxDiff;//[Offset: 0x38, Size: 0x4]
	float CheckHeightBoxShortSize;//[Offset: 0x3c, Size: 0x4]
	float CheckHeightBoxLongSize;//[Offset: 0x40, Size: 0x4]
	float MaxCheckOppSiteDis;//[Offset: 0x44, Size: 0x4]
	float minVaultHeight;//[Offset: 0x48, Size: 0x4]
	float MaxVaultHeight;//[Offset: 0x4c, Size: 0x4]
	float MaxSwimVaultHeight;//[Offset: 0x50, Size: 0x4]
	float HeightScalingOnJumpOver;//[Offset: 0x54, Size: 0x4]
	float HeightScalingOnClimbOn;//[Offset: 0x58, Size: 0x4]
	float HalfHeightScaling;//[Offset: 0x5c, Size: 0x4]
	float RadiusScaling;//[Offset: 0x60, Size: 0x4]
	float RadiusScalingOnClimbOn;//[Offset: 0x64, Size: 0x4]
	float UpSurfaceForwardTestLength;//[Offset: 0x68, Size: 0x4]
	float UpSurfaceMaxAngle;//[Offset: 0x6c, Size: 0x4]
	float DownToUpCheckMaxHDis;//[Offset: 0x70, Size: 0x4]
	float CheckOppsiteHalfHeight;//[Offset: 0x74, Size: 0x4]
	float ClimbOnThickness;//[Offset: 0x78, Size: 0x4]
	float OppositeDownSweepDis;//[Offset: 0x7c, Size: 0x4]
	float IdleVaultMaxDis;//[Offset: 0x80, Size: 0x4]
	float MoveVaultMaxDis;//[Offset: 0x84, Size: 0x4]
	float FallSweepOffsetHeight;//[Offset: 0x88, Size: 0x4]
	float HandFallBoxShortLength;//[Offset: 0x8c, Size: 0x4]
	float FaceToOriginRotSpeed;//[Offset: 0x90, Size: 0x4]
	byte[] VaultTestChannels;//[Offset: 0x98, Size: 0x10]
	<enum,ActionTypeVaultData> GenderToVaultData;//[Offset: 0xa8, Size: 0x50]
	float[] ConfigHeightList;//[Offset: 0xf8, Size: 0x10]
	<enum,VaultCurveNameToData> GenderToCurveNameData;//[Offset: 0x108, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: ActionTypeVaultData
	<enum,MovementTypeVaultData> ActionTypeToData;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: MovementTypeVaultData
	<enum,HeightVaultData> MovementTypeToData;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: HeightVaultData
	<float,VaultBaseCurveData*> HeightToData;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: VaultBaseCurveData.DataAsset.Object
	FString ArtAnimPath;//[Offset: 0x30, Size: 0x10]
	float OriginDistance;//[Offset: 0x40, Size: 0x4]
	float AfterHeightToClimbOn;//[Offset: 0x44, Size: 0x4]
	int MoveInputBreakFrame;//[Offset: 0x48, Size: 0x4]
	float BlendOutTimeToMove;//[Offset: 0x4c, Size: 0x4]
	float VaultSpeed;//[Offset: 0x50, Size: 0x4]
	float WaterVaultSpeed;//[Offset: 0x54, Size: 0x4]
	int StartRotateFrame;//[Offset: 0x58, Size: 0x4]
	float RotateToStartSpeed;//[Offset: 0x5c, Size: 0x4]
	bool bHideHandWeapon;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	VaultScalingData[] FrameScalingList;//[Offset: 0x68, Size: 0x10]
	int FrameOfMaxPosZ;//[Offset: 0x78, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: VaultScalingData
	int BeginFrame;//[Offset: 0x0, Size: 0x4]
	int EndFrame;//[Offset: 0x4, Size: 0x4]
	enum ScalingStage;//[Offset: 0x8, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: VaultCurveNameToData
	<FString,VaultBaseCurveData*> CurveNameToData;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: VaultData
	FString KeyName;//[Offset: 0x0, Size: 0x10]
	FString montageSectionName;//[Offset: 0x10, Size: 0x10]
	int netIntKey;//[Offset: 0x20, Size: 0x4]
	CurveFloat* upCurve;//[Offset: 0x28, Size: 0x8]
	CurveFloat* fowardCurve;//[Offset: 0x30, Size: 0x8]
	float blockdis;//[Offset: 0x38, Size: 0x4]
	float blockheight;//[Offset: 0x3c, Size: 0x4]
	float blokcThicklength;//[Offset: 0x40, Size: 0x4]
	bool IsJump;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x44, Size: 0x1]
	bool forceStartSync;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x45, Size: 0x1]
	bool cJLike;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x46, Size: 0x1]
	float maxStartSyncLength;//[Offset: 0x48, Size: 0x4]
	float CountTime;//[Offset: 0x4c, Size: 0x4]
	float BreakTime;//[Offset: 0x50, Size: 0x4]
	float playSpeed;//[Offset: 0x54, Size: 0x4]
	float speedChangeTime;//[Offset: 0x58, Size: 0x4]
	float changeSpeedRate;//[Offset: 0x5c, Size: 0x4]
	bool standState;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x60, Size: 0x1]
	bool walkState;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x61, Size: 0x1]
	bool SprintState;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x62, Size: 0x1]
	bool isPutUpGun;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x63, Size: 0x1]
	float BreakWindowDelayTime;//[Offset: 0x64, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: VaultCheckRule
	float checkHeight;//[Offset: 0x0, Size: 0x4]
	float standCheckDis;//[Offset: 0x4, Size: 0x4]
	float walkCheckDis;//[Offset: 0x8, Size: 0x4]
	float sprintCheckDis;//[Offset: 0xc, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: XGUEVehicleUserComponent.ActorComponent.Object
	void TurnOnFrontLight(bool InIsTurnOn);// 0x319c828
	void TryLeaveVehicle();// 0x319c814
	void TryEnterTargetVehicle(XGUEVehicle* targetVehicle, int SeatIdx);// 0x319c75c
	void TryChangeSeat(int SeatIdx);// 0x319c6e0
	void SetThrottleInput(float Value, bool IsJoyStickControlInput, bool IsSteeringInput);// 0x319c5d4
	void SetSteeringInput(float Value, bool IsJoyStickControlInput, bool IsSteeringInput);// 0x319c4c8
	void SetStartOffStuck(bool offStuck);// 0x319c444
	void SetIsUsingHorn(bool bIsUsingHorn);// 0x319c3c0
	void SetIsChangingSeat(bool bIsChanging);// 0x319c33c
	void SetIsCarRoofOpened(bool InIsOpened);// 0x319c2b8
	void SetHandbrakeInput(float Value, bool IsSteeringInput);// 0x319c1f8
	void SetBoostingInput(float Value);// 0x319c17c
	void SetAirControlUpInput(float Value);// 0x319c100
	void SetAirControlDownInput(float Value);// 0x319c084
	void OnClientLeaveVehicleLua(bool bUseInLeavePosition, Vector InLeavePosition);// 0x319bfbc
	void OnClientEnterVehicleLua(uint64 vehicleID, int SeatIdx);// 0x319bf04
	void OnClientChangeSeatLua(int SeatIdx, bool success);// 0x319be48
	bool IsOnVehicle();// 0x319be10
	bool IsOnMachineGun();// 0x319bdd8
	bool IsFrontLightOn();// 0x319bda0
	bool IsCarRoofOpened();// 0x319bd68
	int GetForwardSpeed();// 0x319bd34
<----------Generated by SSpawner v1.0.2---------->


Class: XGUEVehicle.BasePawn.Pawn.Actor.Object
	XGVehicleSkMeshComponent* Mesh;//[Offset: 0xa20, Size: 0x8]
	XGUEVehicleComponent* Vehicle;//[Offset: 0xa28, Size: 0x8]
	XGUEVehicleEffectComponent* EffectComponent;//[Offset: 0xa30, Size: 0x8]
	VehiclePlayerAnimLightComponent* PlayerAnimComponent;//[Offset: 0xa38, Size: 0x8]
	TrackComponent* VehicleTrack;//[Offset: 0xa48, Size: 0x8]
	enum VehicleType;//[Offset: 0xa60, Size: 0x1]
	bool bIsMonsterVehicle;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xa61, Size: 0x1]
	float VehicleLength;//[Offset: 0xa64, Size: 0x4]
	float VehicleHeight;//[Offset: 0xa68, Size: 0x4]
	float VehicleWidth;//[Offset: 0xa6c, Size: 0x4]
	float CallVehicleLocationZOffset;//[Offset: 0xa70, Size: 0x4]
	FName AutoMoveSocketBaseName;//[Offset: 0xa74, Size: 0x8]
	VehicleAutoMoveEnvParam AutoMoveEnvParam;//[Offset: 0xa7c, Size: 0x4c]
	void SetSpecialEffect(int EffectType, float Params1, float Params2, float Params3);// 0x35332fc
	void SetFuel(float InFuel);// 0x318c9e4
	void OnVehicleDestroyed();// 0x35332fc
	bool IsWithComfortModeType();// 0x318c9ac
	float GetVehicleHpPct();// 0x318c978
	XGUEVehicleComponent* GetUEVehicleComponent();// 0x318c95c
	PrimitiveComponent* GetPhysicalRoot();// 0x318c920
	SkeletalMeshComponent* GetMesh();// 0x318c8e4
	float GetFuel();// 0x318c8b0
	CameraComponent* GetFollowCamera();// 0x35332fc
	SpringArmComponent* GetCameraBoom();// 0x35332fc
	void ExportOut();// 0x318c894
	bool CalcAutoMove(out const VehicleAutoMoveParamInput FAutoMoveParamInput, out VehicleAutoMoveParamOut AutoMoveParam);// 0x318c758
<----------Generated by SSpawner v1.0.2---------->


Class: BasePawn.Pawn.Actor.Object
	AvatarComponent* Avatar;//[Offset: 0x6a8, Size: 0x8]
	ToaaPawnMovementComponent* MovementComponent;//[Offset: 0x6b0, Size: 0x8]
	TeleportMovementComponent* TeleportMovement;//[Offset: 0x6b8, Size: 0x8]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x6c0, Size: 0x8]
	XMotionComponent* MotionComp;//[Offset: 0x6c8, Size: 0x8]
	XStateMachine* StateMachineComp;//[Offset: 0x6d0, Size: 0x8]
	bool EnableRagdoll;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x704, Size: 0x1]
	float MassScale;//[Offset: 0x708, Size: 0x4]
	float WeaponForceScale;//[Offset: 0x70c, Size: 0x4]
	HitResult LastHitInfo;//[Offset: 0x710, Size: 0x88]
	float LastHitForce;//[Offset: 0x798, Size: 0x4]
	uint64 serverID;//[Offset: 0x820, Size: 0x8]
	int EntityType;//[Offset: 0x828, Size: 0x4]
	int ResID;//[Offset: 0x82c, Size: 0x4]
	enum Gender;//[Offset: 0x830, Size: 0x1]
	Rotator XGetSocketRotator(FName SocketName);// 0x2f95158
	Vector XGetSocketLocation(FName SocketName);// 0x2f950c8
	Vector XGetLocation(const enum InType);// 0x2f95038
	bool XDoesSocketExist(FName SocketName);// 0x2f94fa8
	void StopWithAnimMontageWithAssetBlendTime(FString AnimMontageRef);// 0x2f94ec8
	void StopWithAnimMontage(FString AnimMontageRef);// 0x2f94de8
	void StopWithAnimAliasMontage(FString AliasMontage);// 0x2f94d08
	void StopRagdollSimulatePhysics();// 0x2f94cf4
	void StopRagdoll();// 0x2f94ce0
	void StopActiveMontage();// 0x2f94ccc
	void SetUseControllerRotationYaw(out const FName ModifyReason, int InPriority, bool InUseControllerRotationYaw);// 0x2f94bbc
	void SetTwoHandAttachTarget(enum AttachType, uint64 EntityID, out const FName LeftHandTargetSocket, out const FName RightHandTargetSocket);// 0x2f94a60
	void SetTwoHandAttachLocation(enum AttachType, Vector LeftHandLoc, Vector RightHandLoc);// 0x2f94964
	void SetTwoFootAttachTarget(uint64 EntityID, out const FName LeftFootTargetSocket, out const FName RightFootTargetSocket);// 0x2f94848
	void SetTwoFootAttachLocation(Vector LeftFootLoc, Vector RightFootLoc);// 0x2f9478c
	void SetSlotNameMatParamValue(out const enum SlotType, out const FName SlotName, out const FName ParamName, float Value);// 0x2f94610
	void SetShieldMeshComponent(MeshComponent* MeshComponent);// 0x2f94594
	void SetRightHandAttachAlpha(float Alpha);// 0x2f94518
	void SetRightFootAttachAlpha(float Alpha);// 0x2f9449c
	void SetMaterialVectorParamValue(enum SlotType, int Index, FString ParamName, out const LinearColor Value);// 0x2f94350
	void SetMaterialScalarParamValue(enum SlotType, int Index, FString ParamName, float Value);// 0x2f94210
	void SetLeftHandAttachAlpha(float Alpha);// 0x2f94194
	void SetLeftFootAttachAlpha(float Alpha);// 0x2f94118
	void SetLastHitInfo(out const HitResult Hit, float Force, float Time);// 0x2f93ff0
	void SetGlobalMaterialParamValue(out const enum SlotType, out const FName ParamName, float Value);// 0x2f93ecc
	void SetAvatarRelativeRotation(out const FName InReason, int InPriority, out const Rotator InRelativeRotation);// 0x2f93db4
	void SetAvatarRelativeLocation(out const FName InReason, int InPriority, out const Vector InRelativeLocation);// 0x2f93c9c
	void ResetUseControllerRotationYaw();// 0x2f93c88
	void ResetShieldMeshComponent();// 0x2f93c74
	void ResetBodyAttachIK();// 0x2f93c60
	void Reset();// 0x2f93c44
	bool Recover();// 0x2f93c04
	void ReceiveResume();// 0x35332fc
	void ReceiveOnRecycle();// 0x35332fc
	void PrintMonsterInfo();// 0x2f93be8
	void PlayWithAnimMontageOnBorn(FString AnimMontageRef, float InPlayRate, FString StartSectionName, float InStartTime);// 0x2f93a98
	void PlayWithAnimMontageByTime(FString AnimMontageRef, float InPlayRate, FString StartSectionName, float StartTime, bool IsLoop);// 0x2f93904
	void PlayWithAnimMontage(FString AnimMontageRef, float InPlayRate, FString StartSectionName);// 0x2f93744
	void PlayWithAnimAliasMontage(FString AliasMontage, float InPlayRate, FString StartSectionName);// 0x2f93584
	void PlayRagdoll();// 0x2f93570
	void PlayFaceFx(FString AnimPath);// 0x35332fc
	void OnStateMachineStop(XStateMachine* InStateMachine);// 0x2f934ec
	void OnStateMachineStart(XStateMachine* InStateMachine);// 0x2f93468
	void OnRsp_UseThirdPlayerRotation(bool Use);// 0x2f933dc
	void OnRsp_ThirdPlayerRotation(Rotator Rotation, bool bSyncController);// 0x2f93314
	void OnRsp_ThirdPlayerControllerPitch(float Pitch);// 0x2f93290
	void OnRsp_ShoulderRotation(Rotator Rotation);// 0x2f9320c
	void OnRsp_HandRotation(Rotator Rotation);// 0x2f93188
	bool IsInRagdoll();// 0x2f93150
	bool IsInFreezedRagdoll();// 0x2f93118
	bool IsDying();// 0x2f930d8
	bool IsDead();// 0x2f93098
	void InitAvatarRelativeRotation(out const Rotator InRelativeRotation);// 0x2f93010
	void InitAvatarRelativeLocation(out const Vector InRelativeLocation);// 0x2f92f88
	bool HandleHitByNear(Vector HurtDir, enum BeHitShakeLevel);// 0x2f92ebc
	bool HandleHitByBullet(Vector HurtDir, enum BeHitShakeLevel);// 0x2f92df0
	Vector GetWorldCompositionLocation();// 0x2f92db0
	Vector GetVelocityLocal();// 0x2f92d78
	float GetUnscaledCapsuleRadius();// 0x2f92d3c
	Rotator GetThirdPlayerRotation();// 0x2f92cfc
	AnimInstance* GetSubAnimInstanceByName(FName InName);// 0x2f92c70
	XStateMachine* GetStateMachineComp();// 0x2f92c54
	Rotator GetSocketRotator(FName SocketName);// 0x2f92bcc
	Vector GetSocketLocation(FName SocketName);// 0x2f92b44
	Vector2D GetSimpleCollisionCylinderLua();// 0x2f92b10
	Rotator GetShoulderWeaponRotation();// 0x2f92ad0
	MeshComponent* GetShieldMeshComponent();// 0x2f92a9c
	float GetScaledCapsuleRadius();// 0x2f92a60
	Vector GetRelativeLocation();// 0x2f92a20
	ParticleSystemComponent* GetPracticalSystemComponent(int dynamicType);// 0x2f9299c
	XMotionComponent* GetMotionComp();// 0x2f92980
	LinearColor GetMaterialVectorParamValue(enum SlotType, int Index, FString ParamName);// 0x2f92868
	float GetMaterialScalarParamValue(enum SlotType, int Index, FString ParamName);// 0x2f92754
	enum GetHitBodyTypeByBoneName(out const FName InBoneName);// 0x2f926b8
	Rotator GetHandWeaponRotation();// 0x2f92678
	float GetGlobalMaterialParamValue(out const enum SlotType, out const FName ParamName);// 0x2f9258c
	SceneComponent* GetDynamicComponent(FName SocketName);// 0x2f92508
	float GetCapsuleHalfHeight();// 0x2f924cc
	CapsuleComponent* GetCapsuleComponent();// 0x2f924b0
	BaseAnimInstance* GetBaseAnimInstance();// 0x2f92474
	Rotator GetAvatarRelativeRotation();// 0x2f9243c
	Vector GetAvatarRelativeLocation();// 0x2f92404
	SceneComponent* GetAvatarMasterBoneComp();// 0x2f923d0
	AvatarCommonBase* GetAvatarComponent();// 0x2f923b4
	AnimInstance* GetAnimInstance();// 0x2f92380
	STExtraAnimInstance* GetAnimInst();// 0x2f9234c
	bool DoesSocketExist(FName SocketName);// 0x2f922c4
	bool Die();// 0x2f92284
	void ConditionalTurnOffRagdoll();// 0x2f92270
	void ClearAvatarRelativeRotation(out const FName InReason);// 0x2f921e4
	void ClearAvatarRelativeLocation(out const FName InReason);// 0x2f92158
	void CheckShouldHideBeforeAnimInit();// 0x2f92144
	void CheckFreezeRagdoll();// 0x2f92130
	void CancelRagdoll();// 0x2f9211c
	void AttachComponentToAvatar(SceneComponent* child, FName SocketName);// 0x2f92068
	void AttachActorToAvatar(Actor* child, FName SocketName, enum AttachmentRule);// 0x2f91f78
	int AddDynamicComponentToAvatar(SceneComponent* Component, FName SocketName);// 0x2f91eb4
	int AddDynamicActorToAvatar(Actor* Actor, FName SocketName);// 0x2f91df0
<----------Generated by SSpawner v1.0.2---------->


Class: ToaaPawnMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	byte WalkingMode;//[Offset: 0x178, Size: 0x1]
	float GroundFriction;//[Offset: 0x17c, Size: 0x4]
	float BrakingDecelerationWalking;//[Offset: 0x180, Size: 0x4]
	float MaxWalkSpeed;//[Offset: 0x184, Size: 0x4]
	float MaxAcceleration;//[Offset: 0x188, Size: 0x4]
	float BrakingFrictionFactor;//[Offset: 0x18c, Size: 0x4]
	float MinAnalogWalkSpeed;//[Offset: 0x190, Size: 0x4]
	Vector Acceleration;//[Offset: 0x194, Size: 0xc]
	Vector LastAcceleration;//[Offset: 0x1a0, Size: 0xc]
	float AnalogInputModifier;//[Offset: 0x1ac, Size: 0x4]
	BasePawn* GetBasePawnOwner();// 0x31120c4
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);// 0x3111f7c
<----------Generated by SSpawner v1.0.2---------->


Class: TeleportMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.2---------->


Class: XGVehicleSkMeshComponent.SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float VehicleBoundsRadius;//[Offset: 0xc64, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: XGUEVehicleComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	FString VehicleDataPath;//[Offset: 0x188, Size: 0x10]
	bool bAudioLogEnabled;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x198, Size: 0x1]
	VehicleAudioData Audio_Engine;//[Offset: 0x1a0, Size: 0x28]
	VehicleAudioData Audio_StartUp;//[Offset: 0x1f0, Size: 0x28]
	VehicleAudioData Audio_Horn;//[Offset: 0x218, Size: 0x28]
	VehicleAudioData Audio_Appearance;//[Offset: 0x240, Size: 0x28]
	VehicleAudioData Audio_Backfire;//[Offset: 0x268, Size: 0x28]
	VehicleAudioData Audio_Boost;//[Offset: 0x290, Size: 0x28]
	VehicleMultiSwitchAudioData Audio_Hit;//[Offset: 0x2b8, Size: 0x18]
	VehicleAudioData Audio_HitBody;//[Offset: 0x2d0, Size: 0x28]
	VehicleAudioData Audio_Raining;//[Offset: 0x2f8, Size: 0x28]
	VehicleAudioData Audio_StopRaining;//[Offset: 0x320, Size: 0x28]
	AkComponent* SoundComponent;//[Offset: 0x348, Size: 0x8]
	float NonePhysicsEmptyVehicleMaxMoveTime;//[Offset: 0x460, Size: 0x4]
	float NonePhysicsEmptyVehicleMoveTimeScale;//[Offset: 0x464, Size: 0x4]
	float NonePhysicsEmptyVehicleSimulateMinSpeed;//[Offset: 0x468, Size: 0x4]
	float HitBaseDamageAmount;//[Offset: 0x494, Size: 0x4]
	float HitDamageScaleBySpeed;//[Offset: 0x498, Size: 0x4]
	float MaxHitDamageAmount;//[Offset: 0x49c, Size: 0x4]
	float HitIgnoreImpulseThreshold;//[Offset: 0x4a0, Size: 0x4]
	<uint64> VehicleHitFinishEntities;//[Offset: 0x4c0, Size: 0x50]
	float AntiStuckImpulseThreshold;//[Offset: 0x560, Size: 0x4]
	float AntiStuckDetectTime;//[Offset: 0x564, Size: 0x4]
	float ContinuousStuckInterval;//[Offset: 0x568, Size: 0x4]
	float ContinuousStuckTimeBeforeResolving;//[Offset: 0x56c, Size: 0x4]
	int PlayHitAudioMinInterval;//[Offset: 0x670, Size: 0x4]
	bool bCheckValidLeaveLocationBySweep;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x6b8, Size: 0x1]
	void OnVehicleCollisionChanged(PrimitiveComponent* ChangedComponent);// 0x3190930
	void OnOverlapPhysicsVolumeChanged(PhysicsVolume* PhysicsVolume);// 0x31908b4
	void OnComponentHit(PrimitiveComponent* HitComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, Vector NormalImpulse, out const HitResult Hit);// 0x3190724
	void OnComponentBeginOverlap(PrimitiveComponent* OverlappedComponent, Actor* OtherActor, PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, out const HitResult SweepResult);// 0x319054c
	Vector GetUpVector();// 0x3190514
	Vector GetRightVector();// 0x31904dc
	Vector GetForwardVector();// 0x31904a4
	float GetForwardSpeed();// 0x3190470
<----------Generated by SSpawner v1.0.2---------->


Class: VehicleAudioData
	AkAudioEvent* Event;//[Offset: 0x0, Size: 0x8]
	FString SwitchGroup;//[Offset: 0x8, Size: 0x10]
	FString SwitchState;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: VehicleMultiSwitchAudioData
	AkAudioEvent* Event;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AkComponent.SceneComponent.ActorComponent.Object
	bool bUseSpatialAudio;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x278, Size: 0x1]
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x280, Size: 0x8]
	FString EarlyReflectionAuxBusName;//[Offset: 0x288, Size: 0x10]
	int EarlyReflectionOrder;//[Offset: 0x298, Size: 0x4]
	float EarlyReflectionBusSendGain;//[Offset: 0x29c, Size: 0x4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x2a0, Size: 0x4]
	byte OcclusionCollisionChannel;//[Offset: 0x2a4, Size: 0x1]
	bool EnableSpotReflectors;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x2ac, Size: 0x1]
	float roomReverbAuxBusGain;//[Offset: 0x2b0, Size: 0x4]
	int diffractionMaxEdges;//[Offset: 0x2b4, Size: 0x4]
	int diffractionMaxPaths;//[Offset: 0x2b8, Size: 0x4]
	float diffractionMaxPathLength;//[Offset: 0x2bc, Size: 0x4]
	bool DrawFirstOrderReflections;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x2c0, Size: 0x1]
	bool DrawSecondOrderReflections;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x2c0, Size: 0x1]
	bool DrawHigherOrderReflections;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x2c0, Size: 0x1]
	bool DrawGeometricDiffraction;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x2c0, Size: 0x1]
	bool DrawSoundPropagation;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x2c0, Size: 0x1]
	bool bMovingSound;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x2c0, Size: 0x1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1]
	float AttenuationScalingFactor;//[Offset: 0x2c4, Size: 0x4]
	float OcclusionRefreshInterval;//[Offset: 0x2c8, Size: 0x4]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x2d0, Size: 0x8]
	FString EventName;//[Offset: 0x2d8, Size: 0x10]
	void UseReverbVolumes(bool inUseReverbVolumes);// 0x1971a00
	void UseEarlyReflections(AkAuxBus* AuxBus, int Order, float BusSendGain, float MaxPathLength, bool SpotReflectors, FString AuxBusName);// 0x197183c
	void StopMIDIEvent(FString MIDIEventName);// 0x19717b0
	void Stop();// 0x197179c
	void SetUseSpatialAudio(const bool bNewValue);// 0x1971718
	void SetSwitch(FString SwitchGroup, FString SwitchState);// 0x19715a0
	void SetStopWhenOwnerDestroyed(bool bStopWhenOwnerDestroyed);// 0x197151c
	void SetRTPCValue(FString RTPC, float Value, int InterpolationTimeMs);// 0x19713c4
	void SetOutputBusVolume(float BusVolume);// 0x1971348
	void SetListeners(out const AkComponent*[] Listeners);// 0x19712ac
	void SetAttenuationScalingFactor(float Value);// 0x1971230
	void PostTrigger(FString Trigger);// 0x1971150
	void PostMIDIEvent(byte KeyIndex, FString MIDIEventName);// 0x1971088
	int PostAssociatedAkEventMultiPosition(Transform[] Positions, enum MultiPositionType);// 0x1970f60
	int PostAssociatedAkEventAndWaitForEnd(LatentActionInfo LatentInfo);// 0x1970eac
	int PostAssociatedAkEvent(int CallbackMask, out const delegate PostEventCallback);// 0x1970da0
	int PostAkEventMultiPosition(FString in_EventName, Transform[] Positions, enum MultiPositionType);// 0x1970c2c
	int PostAkEventByName(FString in_EventName);// 0x1970b90
	int PostAkEventAndWaitForEnd(AkAudioEvent* AkEvent, FString in_EventName, LatentActionInfo LatentInfo);// 0x1970a54
	int PostAkEvent(AkAudioEvent* AkEvent, int CallbackMask, out const delegate PostEventCallback, FString in_EventName);// 0x19708c0
	float GetAttenuationRadius();// 0x197088c
<----------Generated by SSpawner v1.0.2---------->


Class: AkAuxBus.Object
	AkAudioBank* RequiredBank;//[Offset: 0x28, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: XGUEVehicleEffectComponent.ActorComponent.Object
	float ShakeCameraColdDown;//[Offset: 0xf0, Size: 0x4]
	ParticleSystem* OnHitObstaclesParticleSystem;//[Offset: 0xf8, Size: 0x8]
	Actor*[] GroundLightActorArray;//[Offset: 0x350, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: VehiclePlayerAnimLightComponent.Object
	XGUEVehicle* OwnerVehicleActor;//[Offset: 0x28, Size: 0x8]
	<enum,AnimationAsset*> DefaultDriverAnimAssets;//[Offset: 0x30, Size: 0x50]
	<enum,AnimationAsset*> DefaultPassengerAnimAssets;//[Offset: 0x80, Size: 0x50]
	PlayerAnimAssetsInfo LoadedDriverAnimAssets;//[Offset: 0xd0, Size: 0x50]
	PlayerAnimAssetsInfo[] LoadedPassengerAnimAssets;//[Offset: 0x120, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerAnimAssetsInfo
	<enum,GenderToPlayerAnimAssetsInfo> Payload;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: GenderToPlayerAnimAssetsInfo
	<FName,AnimationAsset*> Payload;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: TrackComponent.SceneComponent.ActorComponent.Object
	TrailParams TrailParams;//[Offset: 0x278, Size: 0x28]
	Actor* TrackRootActor;//[Offset: 0x2a0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: TrailParams
	int MaxCount;//[Offset: 0x0, Size: 0x4]
	float Width;//[Offset: 0x4, Size: 0x4]
	float Interval;//[Offset: 0x8, Size: 0x4]
	float MinDistance;//[Offset: 0xc, Size: 0x4]
	float LiftTime;//[Offset: 0x10, Size: 0x4]
	float DispearTime;//[Offset: 0x14, Size: 0x4]
	float LengthWidthRatio;//[Offset: 0x18, Size: 0x4]
	float PushDistance;//[Offset: 0x1c, Size: 0x4]
	float VerticalThreshold;//[Offset: 0x20, Size: 0x4]
	float HorizontalThreshold;//[Offset: 0x24, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: VehicleAutoMoveEnvParam
	float ScalarSpeed;//[Offset: 0x0, Size: 0x4]
	Vector ServerPos;//[Offset: 0x4, Size: 0xc]
	int ForwardIndex;//[Offset: 0x10, Size: 0x4]
	float NextPointDist;//[Offset: 0x14, Size: 0x4]
	float HighSpeed;//[Offset: 0x18, Size: 0x4]
	float HighSpeedNextPointDist;//[Offset: 0x1c, Size: 0x4]
	float MaxDist;//[Offset: 0x20, Size: 0x4]
	float Cutoff;//[Offset: 0x24, Size: 0x4]
	float StopSpeed;//[Offset: 0x28, Size: 0x4]
	float MinSpeed;//[Offset: 0x2c, Size: 0x4]
	float AdditionalSpeed;//[Offset: 0x30, Size: 0x4]
	float FarToleranceFactor;//[Offset: 0x34, Size: 0x4]
	float MidDistBaseThrottle;//[Offset: 0x38, Size: 0x4]
	float MidDistBaseSteering;//[Offset: 0x3c, Size: 0x4]
	float BaseSteering;//[Offset: 0x40, Size: 0x4]
	float MidDistSteerScale;//[Offset: 0x44, Size: 0x4]
	float SteerScale;//[Offset: 0x48, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x278, Size: 0x4]
	Vector SocketOffset;//[Offset: 0x27c, Size: 0xc]
	Vector TargetOffset;//[Offset: 0x288, Size: 0xc]
	float ProbeSize;//[Offset: 0x294, Size: 0x4]
	byte ProbeChannel;//[Offset: 0x298, Size: 0x1]
	bool bDoCollisionTest;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x299, Size: 0x1]
	bool bUsePawnControlRotation;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x299, Size: 0x1]
	bool bInheritPitch;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x299, Size: 0x1]
	bool bInheritYaw;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x299, Size: 0x1]
	bool bInheritRoll;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x299, Size: 0x1]
	bool bEnableCameraLag;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x299, Size: 0x1]
	bool bEnableCameraRotationLag;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x299, Size: 0x1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x299, Size: 0x1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x29a, Size: 0x1]
	float CameraLagSpeed;//[Offset: 0x29c, Size: 0x4]
	float CameraRotationLagSpeed;//[Offset: 0x2a0, Size: 0x4]
	float CameraLagMaxTimeStep;//[Offset: 0x2a4, Size: 0x4]
	float CameraLagMaxDistance;//[Offset: 0x2a8, Size: 0x4]
	bool IsCollisionFixApplied();// 0x4f01558
	Vector GetUnfixedCameraPosition();// 0x4f01520
	Rotator GetTargetRotation();// 0x4f014e8
<----------Generated by SSpawner v1.0.2---------->


Class: VehicleAutoMoveParamInput
	Vector AutoMoveTargetLocation;//[Offset: 0x0, Size: 0xc]
	float AutoMoveTargetDistSqrtTolerance;//[Offset: 0xc, Size: 0x4]
	Actor* Vehicle;//[Offset: 0x10, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: VehicleAutoMoveParamOut
	float Throttle;//[Offset: 0x0, Size: 0x4]
	float Steering;//[Offset: 0x4, Size: 0x4]
	float Boosting;//[Offset: 0x8, Size: 0x4]
	float HandBrake;//[Offset: 0xc, Size: 0x4]
	bool bIsAutoMove;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: BaseAnimInstance.AnimInstance.Object
	void StopSync();// 0x2f816c4
	void StopAnimMontage(AnimMontage* AnimMontage, float InBlendOutTime);// 0x2f8160c
	void SetVector(FName Name, Vector Value);// 0x2f81550
	void SetTrigger(FName Name, bool bValue);// 0x2f81490
	void SetRotator(FName Name, Rotator Value);// 0x2f813d4
	void SetInteger(FName Name, int Value);// 0x2f8131c
	void SetFloat(FName Name, float Value);// 0x2f81264
	void SetBool(FName Name, bool bValue);// 0x2f811a4
	void SetAnimSyncWithTarget(AnimInstance* OtherAnimInstance, FName TargetMachineName, FName SelfMachineName, float SyncInterval);// 0x2f81078
	void Reset();// 0x2f81064
	void PlayAnimMontage(AnimMontage* AnimMontage, bool IsPlay, float InPlayRate, FName StartSectionName);// 0x2f80f28
	void OnQinggongSectionChange(byte InType, byte InStage, byte InSection);// 0x2f80e34
	void NotifyQinggongStart(byte InType, byte InStage, byte InSection);// 0x35332fc
	void NotifyQinggongSectionChange(byte InType, byte InStage, byte InSection);// 0x35332fc
	void NotifyQinggongEnd();// 0x35332fc
	void NotifyOut(FName NotifyName);// 0x2f80db8
	Vector GetVector(FName Name);// 0x2f80d30
	Rotator GetRotator(FName Name);// 0x2f80ca8
	int GetInteger(FName Name);// 0x2f80c24
	float GetFloat(FName Name);// 0x2f80ba0
	bool GetBool(FName Name);// 0x2f80b18
<----------Generated by SSpawner v1.0.2---------->


Class: CarrierUserComponent.ActorComponent.Object
	float WaitGroundLoadTimeout;//[Offset: 0x114, Size: 0x4]
	void OnDetachFromCarrier();// 0x2faecec
	void OnAttachToCarrier(Object* Carrier, int SeatIdx);// 0x2faec34
	Object* LuaGetCurrCarrier();// 0x2faebfc
	enum GetCurrCarrierType();// 0x2faebe0
	void DebugSetClientDrivenMode(bool bSet);// 0x2faeb5c
<----------Generated by SSpawner v1.0.2---------->


Class: GliderUserComponent.ActorComponent.Object
	AnimMontage* WaitingStopAnim;//[Offset: 0x108, Size: 0x8]
	bool UnloadParaglider();// 0x3024be4
	bool UnEquipJetPack();// 0x3024bac
	void TurnOnGliderEffect();// 0x3024b98
	void SetEnterAnimState(bool bFinish);// 0x3024b14
	void PlayGliderAnimMontage(FString AnimPath, bool bNeedCallback);// 0x30249f0
	void OnSetGliderAnimBPInput(bool C_FirstTurnLeft, bool C_FirstTurnRight, bool C_FirstTurnForward, bool C_FirstTurnBack, bool C_ForceToIdleL, bool C_ForceToIdleF);// 0x3024800
	void OnMontageStop(AnimMontage* AnimMontage, bool bInterrupted);// 0x3024740
	bool IsFinishEnterAnim();// 0x3024724
	bool IsEquippedParaglider();// 0x30246e8
	bool IsEquippedJetPack();// 0x30246ac
	BaseParaglider* GetCurrParaglider();// 0x3024678
	BaseJetPack* GetCurrJetPack();// 0x3024644
	bool EquipParagliderByPath(FString bpPath, FName SocketName, bool bCreateHide);// 0x30244d0
	bool EquipJetPackByPath(FString bpPath);// 0x30243e4
<----------Generated by SSpawner v1.0.2---------->


Class: BaseParaglider.Actor.Object
	PlayerCharacter* OwnerPlayer;//[Offset: 0x340, Size: 0x8]
	float IdleForwardSpeed;//[Offset: 0x348, Size: 0x4]
	float MaxForwardSpeed;//[Offset: 0x34c, Size: 0x4]
	float MinForwardSpeed;//[Offset: 0x350, Size: 0x4]
	float IdleFallSpeed;//[Offset: 0x354, Size: 0x4]
	float MaxFallSpeed;//[Offset: 0x358, Size: 0x4]
	float MinFallSpeed;//[Offset: 0x35c, Size: 0x4]
	float ForwardSpeedInterpRate;//[Offset: 0x360, Size: 0x4]
	float FallSpeedInterpRate;//[Offset: 0x364, Size: 0x4]
	float MaxRotationalSpeedYaw;//[Offset: 0x368, Size: 0x4]
	float MinRotationalSpeedYaw;//[Offset: 0x36c, Size: 0x4]
	float RotationalSpeedYawInterpRate;//[Offset: 0x370, Size: 0x4]
	FName LeftHandSocket;//[Offset: 0x374, Size: 0x8]
	FName RightHandSocket;//[Offset: 0x37c, Size: 0x8]
	SkeletalMeshComponent* Mesh;//[Offset: 0x388, Size: 0x8]
	GliderEffectComponent* EffectComponent;//[Offset: 0x390, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: GliderEffectComponent.SceneComponent.ActorComponent.Object
	float MinEffectVelocity;//[Offset: 0x278, Size: 0x4]
	ParticleSystem*[] EffectResourceList;//[Offset: 0x280, Size: 0x10]
	FName[] EffectSocketNameList;//[Offset: 0x290, Size: 0x10]
	ParticleSystem*[] ResidentResList;//[Offset: 0x2a0, Size: 0x10]
	FName[] ResidentSocketList;//[Offset: 0x2b0, Size: 0x10]
	<int,ParticleSystemComponent*> FlyPSCMap;//[Offset: 0x2c0, Size: 0x50]
	<int,int> AsyncLoadingHandlerMap;//[Offset: 0x310, Size: 0x50]
	void TurnOnResidentEffect();// 0x30216fc
	void TurnFlyEffect(bool bTurnOn);// 0x3021678
<----------Generated by SSpawner v1.0.2---------->


Class: BaseJetPack.Actor.Object
	PlayerCharacter* OwnerPlayer;//[Offset: 0x340, Size: 0x8]
	SkeletalMeshComponent* Mesh;//[Offset: 0x348, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: XCameraUnderWaterFXComponent.UnderWaterEffectComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.2---------->


Class: UnderWaterEffectComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float FogMaxOpacity;//[Offset: 0x5c8, Size: 0x4]
	byte CollisionChannel;//[Offset: 0x5cc, Size: 0x1]
	Character* OwnerCharacter;//[Offset: 0x5d0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponCollisionComponent.ActorComponent.Object
	Vector CheckReactionMeleeHitOffset;//[Offset: 0xf0, Size: 0xc]
	Vector CheckReactionMeleeHitExtend;//[Offset: 0xfc, Size: 0xc]
	Vector HandCollisionOffset;//[Offset: 0x108, Size: 0xc]
	Vector HandCollisionBox;//[Offset: 0x114, Size: 0xc]
	Vector FootCollisionOffset;//[Offset: 0x120, Size: 0xc]
	Vector FootCollisionBox;//[Offset: 0x12c, Size: 0xc]
	Color DebugColor;//[Offset: 0x138, Size: 0x4]
	void SetCustomSocket(FString SocketName);// 0x3177f9c
	void SetCustomSize(Vector CustomSize);// 0x3177f20
	void SetCustomOffset(Vector CustomOffset);// 0x3177ea4
	void SetCollisionType(int Value);// 0x3177e28
	void SetCollisionScale(Vector Scale);// 0x3177dac
	FString GetCustomSocket();// 0x3177d28
	Vector GetCustomSize();// 0x3177cf0
	Vector GetCustomOffset();// 0x3177cb8
	int GetCollisionType();// 0x3177c84
	bool GetCollisionState();// 0x3177c4c
	Vector GetCollisionPosition(uint64 EntityID);// 0x3177bc4
	HitResult GetCollisionInfo(Actor* Actor);// 0x3177b08
	Vector GetCollisionDirection(uint64 EntityID);// 0x3177a80
	void EnableWeaponCollision();// 0x3177a6c
	void DisableWeaponCollision();// 0x3177a58
	void CheckHitReactionComponent();// 0x3177a44
<----------Generated by SSpawner v1.0.2---------->


Class: ClimbGlobalConfig.DataAsset.Object
	<enum,GenderToClimbAction> ConfigData;//[Offset: 0x30, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: GenderToClimbAction
	<enum,ClimbActionConfig*> GenderToClimbAction;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: ClimbActionConfig.DataAsset.Object
	float ClimbUpSpeed;//[Offset: 0x30, Size: 0x4]
	float ClimbDownSpeed;//[Offset: 0x34, Size: 0x4]
	float UpAnimRate;//[Offset: 0x38, Size: 0x4]
	float DownAnimRate;//[Offset: 0x3c, Size: 0x4]
	FString UpEnterArtPath;//[Offset: 0x40, Size: 0x10]
	FString UpExitArtPath;//[Offset: 0x50, Size: 0x10]
	FString DownEnterArtPath;//[Offset: 0x60, Size: 0x10]
	FString DownExitArtPath;//[Offset: 0x70, Size: 0x10]
	FString FastDownExitArtPath;//[Offset: 0x80, Size: 0x10]
	enum ClimbType;//[Offset: 0x90, Size: 0x1]
	FString TriggerEventName;//[Offset: 0x98, Size: 0x10]
	FString UpLoopAudio;//[Offset: 0xa8, Size: 0x10]
	FString DownLoopAudio;//[Offset: 0xb8, Size: 0x10]
	FString FastDownLoopAudio;//[Offset: 0xc8, Size: 0x10]
	FString AutoClimbLoopAudio;//[Offset: 0xd8, Size: 0x10]
	float TraceRadius;//[Offset: 0xe8, Size: 0x4]
	float TraceHalfHeight;//[Offset: 0xec, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x5e9, Size: 0x1]
	enum TimingPolicy;//[Offset: 0x5ea, Size: 0x1]
	class UserWidget* WidgetClass;//[Offset: 0x5f0, Size: 0x8]
	IntPoint DrawSize;//[Offset: 0x5f8, Size: 0x8]
	bool bManuallyRedraw;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x600, Size: 0x1]
	bool bRedrawRequested;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x601, Size: 0x1]
	float RedrawTime;//[Offset: 0x604, Size: 0x4]
	IntPoint CurrentDrawSize;//[Offset: 0x610, Size: 0x8]
	bool bDrawAtDesiredSize;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x618, Size: 0x1]
	Vector2D Pivot;//[Offset: 0x61c, Size: 0x8]
	bool bReceiveHardwareInput;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x624, Size: 0x1]
	bool bWindowFocusable;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x625, Size: 0x1]
	bool bApplyGammaCorrection;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x626, Size: 0x1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x628, Size: 0x8]
	LinearColor BackgroundColor;//[Offset: 0x630, Size: 0x10]
	LinearColor TintColorAndOpacity;//[Offset: 0x640, Size: 0x10]
	float OpacityFromTexture;//[Offset: 0x650, Size: 0x4]
	enum BlendMode;//[Offset: 0x654, Size: 0x1]
	bool bIsTwoSided;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x655, Size: 0x1]
	bool TickWhenOffscreen;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x656, Size: 0x1]
	UserWidget* Widget;//[Offset: 0x658, Size: 0x8]
	BodySetup* BodySetup;//[Offset: 0x680, Size: 0x8]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x688, Size: 0x8]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x690, Size: 0x8]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x698, Size: 0x8]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x6a0, Size: 0x8]
	MaterialInterface* MaskedMaterial;//[Offset: 0x6a8, Size: 0x8]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x6b0, Size: 0x8]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x6b8, Size: 0x8]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x6c0, Size: 0x8]
	bool bAddedToScreen;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x6c8, Size: 0x1]
	bool bEditTimeUsable;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x6c9, Size: 0x1]
	FName SharedLayerName;//[Offset: 0x6cc, Size: 0x8]
	int LayerZOrder;//[Offset: 0x6d4, Size: 0x4]
	enum GeometryMode;//[Offset: 0x6d8, Size: 0x1]
	float CylinderArcAngle;//[Offset: 0x6dc, Size: 0x4]
	void SetWidget(UserWidget* Widget);// 0x4318334
	void SetTintColorAndOpacity(const LinearColor NewTintColorAndOpacity);// 0x43182b8
	void SetOwnerPlayer(LocalPlayer* LocalPlayer);// 0x431823c
	void SetManuallyRedraw(bool bUseManualRedraw);// 0x43181b8
	void SetDrawSize(Vector2D Size);// 0x4318140
	void SetBackgroundColor(const LinearColor NewBackgroundColor);// 0x43180c4
	void RequestRedraw();// 0x43180a8
	UserWidget* GetUserWidgetObject();// 0x4318074
	TextureRenderTarget2D* GetRenderTarget();// 0x4318040
	LocalPlayer* GetOwnerPlayer();// 0x431800c
	MaterialInstanceDynamic* GetMaterialInstance();// 0x4317fd8
	Vector2D GetDrawSize();// 0x4317fa4
	Vector2D GetCurrentDrawSize();// 0x4317f70
<----------Generated by SSpawner v1.0.2---------->


Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x310, Size: 0x1]
	float FOVAngle;//[Offset: 0x314, Size: 0x4]
	float OrthoWidth;//[Offset: 0x318, Size: 0x4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x320, Size: 0x8]
	byte CaptureSource;//[Offset: 0x328, Size: 0x1]
	byte CompositeMode;//[Offset: 0x329, Size: 0x1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x330, Size: 0x570]
	float PostProcessBlendWeight;//[Offset: 0x8a0, Size: 0x4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x8a4, Size: 0x1]
	Matrix CustomProjectionMatrix;//[Offset: 0x8b0, Size: 0x40]
	bool bEnableClipPlane;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x8f0, Size: 0x1]
	Vector ClipPlaneBase;//[Offset: 0x8f4, Size: 0xc]
	Vector ClipPlaneNormal;//[Offset: 0x900, Size: 0xc]
	bool bCameraCutThisFrame;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x90c, Size: 0x1]
	void CaptureScene();// 0x4ebda6c
	void AddOrUpdateBlendable(interface classNone InBlendableObject, float InWeight);// 0x4ebd938
<----------Generated by SSpawner v1.0.2---------->


Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x278, Size: 0x1]
	PrimitiveComponent*[] HiddenComponents;//[Offset: 0x280, Size: 0x10]
	Actor*[] HiddenActors;//[Offset: 0x290, Size: 0x10]
	PrimitiveComponent*[] ShowOnlyComponents;//[Offset: 0x2a0, Size: 0x10]
	Actor*[] ShowOnlyActors;//[Offset: 0x2b0, Size: 0x10]
	bool bCaptureEveryFrame;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0, Size: 0x1]
	bool bCaptureOnMovement;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x2c1, Size: 0x1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x2c2, Size: 0x1]
	float LODDistanceFactor;//[Offset: 0x2c4, Size: 0x4]
	float MaxViewDistanceOverride;//[Offset: 0x2c8, Size: 0x4]
	int CaptureSortPriority;//[Offset: 0x2cc, Size: 0x4]
	EngineShowFlagsSetting[] ShowFlagSettings;//[Offset: 0x2d0, Size: 0x10]
	bool bCaptureTopHigh;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8, Size: 0x1]
	FString ProfilingEventName;//[Offset: 0x2f0, Size: 0x10]
	void ShowOnlyComponent(PrimitiveComponent* InComponent);// 0x4ebc8bc
	void ShowOnlyActorComponents(Actor* InActor);// 0x4ebc840
	void SetCaptureSortPriority(int NewCaptureSortPriority);// 0x4ebc7c4
	void RemoveShowOnlyComponent(PrimitiveComponent* InComponent);// 0x4ebc748
	void RemoveShowOnlyActorComponents(Actor* InActor);// 0x4ebc6cc
	void HideComponent(PrimitiveComponent* InComponent);// 0x4ebc650
	void HideActorComponents(Actor* InActor);// 0x4ebc5d4
	void ClearShowOnlyComponents(PrimitiveComponent* InComponent);// 0x4ebc558
	void ClearHiddenComponents();// 0x4ebc544
<----------Generated by SSpawner v1.0.2---------->


Class: EngineShowFlagsSetting
	FString ShowFlagName;//[Offset: 0x0, Size: 0x10]
	bool Enabled;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: OptimizeViewRotationComponent.ActorComponent.Object
	OptimizeViewRotationConfig DefaultOptimizeConfig;//[Offset: 0xf0, Size: 0x2c]
	bool bIsSettingsEnabled;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x11c, Size: 0x1]
	bool bIsTriggerEnabled;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x11c, Size: 0x1]
	Vector2D SpeedFactor;//[Offset: 0x120, Size: 0x8]
	OptimizeViewRotationConfig OptimizeConfig;//[Offset: 0x128, Size: 0x2c]
	Box2D SpeedUpRangeBox2D;//[Offset: 0x154, Size: 0x14]
	OptimizeViewRotationEntity LockTarget;//[Offset: 0x168, Size: 0x68]
	PlayerCharacter* OwnerPlayerCharacter;//[Offset: 0x1d0, Size: 0x8]
	GSTShootWeapon* OwnerShootWeapon;//[Offset: 0x1d8, Size: 0x8]
	uint64 CheckTimestamp;//[Offset: 0x1e0, Size: 0x8]
	bool WhetherReChooseLockTarget(out const OptimizeViewRotationEntity OptimizeViewRotationEntity);// 0x309438c
	void UpdateSpeedUpRange();// 0x3094378
	void UpdateSpeedFactor(float DeltaDistance);// 0x30942fc
	void UpdateOptimizeConfig();// 0x30942e8
	void UpdateLockTarget();// 0x30942d4
	void UnChooseLockTarget();// 0x30942c0
	void SetTriggerEnabled(bool InIsTriggerEnabled);// 0x309423c
	void SetSettingsEnabled(bool InIsSettingsEnabled);// 0x30941b8
	void OnUnEquipWeapon(GSTWeaponBase* InWeapon);// 0x309413c
	void OnEquipWeapon(GSTWeaponBase* InWeapon);// 0x30940c0
	bool IsEnabled();// 0x3094088
	void ChooseLockTarget();// 0x3094074
	bool CheckLockTarget(out const OptimizeViewRotationEntity OptimizeViewRotationEntity);// 0x3093fd0
<----------Generated by SSpawner v1.0.2---------->


Class: OptimizeViewRotationEntity.FilterValidEntity
	Vector BottomLocation;//[Offset: 0x30, Size: 0xc]
	Vector BottomScreenLocation;//[Offset: 0x3c, Size: 0xc]
	Vector2D ProjectCapsuleToScreenScale;//[Offset: 0x48, Size: 0x8]
	Box2D ProjectCapsuleToScreenRangeBox2D;//[Offset: 0x50, Size: 0x14]
	bool bWasInProjectCapsuleToScreenRange;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x64, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: FilterValidEntity
	Vector Location;//[Offset: 0x10, Size: 0xc]
	float Distance;//[Offset: 0x1c, Size: 0x4]
	Vector ScreenLocation;//[Offset: 0x20, Size: 0xc]
	float ScreenDistance;//[Offset: 0x2c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AutoFireCrossHairCtrlComp.ActorComponent.Object
	LeadingPlayerCharacter* OwnerCharacter;//[Offset: 0x100, Size: 0x8]
	AutoFireCrossHairComp* AutoFireCrossHairComp;//[Offset: 0x108, Size: 0x8]
	GSTShootWeapon* AGSTShootWeaponComp;//[Offset: 0x110, Size: 0x8]
	MeshComponent* weaponSkMesh;//[Offset: 0x118, Size: 0x8]
	MeshComponent* ScopeMeshComponent;//[Offset: 0x120, Size: 0x8]
	void UpdateComponentTickable();// 0x2f65a9c
	void SetEdgeColor(FString Color);// 0x2f65a10
	void SetDrawEnable(bool Target);// 0x2f65988
	void SetCenterEnable(bool Target);// 0x2f658fc
	void OnWeaponEquip();// 0x2f658e8
	void OnScopeOutEnd();// 0x2f658d4
	void OnScopeInEnd();// 0x2f658c0
	void OnPreAim();// 0x2f658a4
	void OnExitAutoFire(bool needResume);// 0x2f65818
	void OnEndViewTarget(PlayerController* PC);// 0x2f6579c
	void OnBecomeViewTarget(PlayerController* PC);// 0x2f65720
	AutoFireCrossHairComp* GetCurAutoFireCrossHairComp();// 0x2f65704
	void EdgeReset(float Timer);// 0x2f65688
	void Draw(Canvas* Canvas, out const Vector InLeaderLocation);// 0x2f655c4
	void ChangeEdgeColor(bool bFire);// 0x2f65540
	void AimOut();// 0x2f6552c
<----------Generated by SSpawner v1.0.2---------->


Class: BP_AvatarAudioComponent_C.AvatarAudioComponent.ActorComponent.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x2a0, Size: 0x8]
	float RandomGetAvatarMatParam(float CallFunc_RandomFloatInRange_ReturnValue);// 0x35332fc
	float MusicParaNormalizeByRMS(float CallFunc_GetRMS_ReturnValue, float CallFunc_fn_MusicParaNormalize__maxRecordedVol_Out, float CallFunc_fn_MusicParaNormalize_NormalizedVolume);// 0x35332fc
	void ReceiveTick(float DeltaSeconds);// 0x35332fc
	void TANodeTick(float Delta);// 0x35332fc
	void ExecuteUbergraph_BP_AvatarAudioComponent(int EntryPoint, float K2Node_CustomEvent_Delta, Actor* CallFunc_GetOwner_ReturnValue, BaseCharacter* K2Node_DynamicCast_AsBase_Character, bool K2Node_DynamicCast_bSuccess, FName CallFunc_MakeLiteralName_ReturnValue, float K2Node_Event_DeltaSeconds, float CallFunc_GetRMS_ReturnValue, float CallFunc_fn_MusicParaNormalize__maxRecordedVol_Out, float CallFunc_fn_MusicParaNormalize_NormalizedVolume);// 0x35332fc
	bool NeedGetRMS;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8, Size: 0x1]
	float MaxRecordedVolOut;//[Offset: 0x2ac, Size: 0x4]
	float NormalizedVolume;//[Offset: 0x2b0, Size: 0x4]
	BaseCharacter* OwnerBaseCharacter;//[Offset: 0x2b8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AvatarAudioComponent.ActorComponent.Object
	AvatarAudioConfig* AvatarAudioConfig;//[Offset: 0xf0, Size: 0x8]
	void SetTickEnable(out const FName InReason, int InPriority, int InValue);// 0x2f6abc4
	float RandomGetAvatarMatParam();// 0x2f6abac
	void OnChangeGlobalAvatarAudioTickEnable(out const FName InReason, int InPriority, bool InValue);// 0x2f6aa9c
	void OnBgmChanged(FString OldEventName, FString OldSwitchGroup, FString OldSwitchState, FString NewEventName, FString NewSwitchGroup, FString NewSwitchState);// 0x2f6a894
	void OnAvatarLoadFinished(AvatarBase* AvatarCommonBase);// 0x2f6a818
	float MusicParaNormalizeByRMS();// 0x2f6a800
	static void ChangeGlobalAvatarAudioTickEnable(out const FName InReason, int InPriority, bool InValue);// 0x2f6a6fc
<----------Generated by SSpawner v1.0.2---------->


Class: AvatarAudioConfig.DataAsset.Object
	<BgmInfo,AvatarSlotMatData*> Bgm2AvatarSlotData;//[Offset: 0x30, Size: 0x50]
	<FName,float> Func2TickInterval;//[Offset: 0x80, Size: 0x50]
	<enum,AutoSlotID2Param> AutoSlotType2IDMap;//[Offset: 0xd0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: BgmInfo
	FString EventName;//[Offset: 0x0, Size: 0x10]
	FString SwitchGroup;//[Offset: 0x10, Size: 0x10]
	FString SwitchState;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: AvatarSlotMatData.DataAsset.Object
	<enum,SlotID2MatParam> SlotType2ID;//[Offset: 0x30, Size: 0x50]
	<enum,SlotID2MatParam> AutoSlotType2ID;//[Offset: 0x80, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: SlotID2MatParam
	<int,MatParam2Func> SlotID2MatParam;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: MatParam2Func
	<FName,FName> MatParam2Func;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: AutoSlotID2Param
	<int,AutoParam2DetailInfo> AutoID2Param;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: AutoParam2DetailInfo
	<FName,AutoMatDetailInfo> AutoParam2DetailInfo;//[Offset: 0x0, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: AutoMatDetailInfo
	FName AutoFuncName;//[Offset: 0x0, Size: 0x8]
	<BgmInfo> DisableBgmList;//[Offset: 0x8, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: BaseCustomSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	byte CameraQueryChannel;//[Offset: 0x2fc, Size: 0x1]
	float SweepRadius;//[Offset: 0x300, Size: 0x4]
	float SweepDistance;//[Offset: 0x304, Size: 0x4]
	bool bIgnoreSelf;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x308, Size: 0x1]
	bool bIsDrawDebugLine;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x309, Size: 0x1]
	bool bCheckForNewRelativeTM;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x30a, Size: 0x1]
	void SetIsCheckOverlay(bool InHide);// 0x2f8bd20
	void RemoveIgnoreCollisionTest(Actor* Actor);// 0x2f8bca4
	void OnEndViewTarget(PlayerController* PC);// 0x2f8bc28
	void OnBecomeViewTarget(PlayerController* PC);// 0x2f8bbac
	Actor*[] GetAllIgnoreCollisionTestActors();// 0x2f8bb24
	void ForceUpdateDesiredArmLocation(bool bDoTrace, bool bDoLocationLag, bool bDoRotationLag, float DeltaTime);// 0x2f8b9cc
	void ComponentDeactivated(ActorComponent* ActorComponent);// 0x2f8b950
	void ClearAllIgnoreCollisionTest();// 0x2f8b93c
	void AddIgnoreCollisionTest(Actor* Actor);// 0x2f8b8c0
<----------Generated by SSpawner v1.0.2---------->


Class: BlockingVolumeCheckComponent.ActorComponent.Object
	StaticMesh* Effect;//[Offset: 0xf0, Size: 0x8]
	Vector EffectSize;//[Offset: 0xf8, Size: 0xc]
	Vector CheckSize;//[Offset: 0x104, Size: 0xc]
	float CheckInterval;//[Offset: 0x110, Size: 0x4]
	float HitEffectInterval;//[Offset: 0x114, Size: 0x4]
	int TipID;//[Offset: 0x118, Size: 0x4]
	float HitTipInterval;//[Offset: 0x11c, Size: 0x4]
	Actor* EffectContainer;//[Offset: 0x120, Size: 0x8]
	void OnActorHitAction(Actor* SelfActor, Actor* OtherActor, Vector NormalImpulse, out const HitResult Hit);// 0x2f9bdf0
<----------Generated by SSpawner v1.0.2---------->


Class: CustomSpringArmComponent.BaseCustomSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	bool EnableInterpTo;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x400, Size: 0x1]
	float CAMNOBLOCK_ADJUSTSMALLVALUE;//[Offset: 0x404, Size: 0x4]
	float CAMNOBLOCK_ADJUSTSPEED;//[Offset: 0x408, Size: 0x4]
	float CAMNOBLOCK_ACCELERATEDSPEED;//[Offset: 0x40c, Size: 0x4]
	float CAMBLOCK_ADJUSTSPEED;//[Offset: 0x410, Size: 0x4]
	float CAMBLOCK_ADJUSTSPEED_MAX;//[Offset: 0x414, Size: 0x4]
	float CAMBLOCK_ACCELERATEDSPEED;//[Offset: 0x418, Size: 0x4]
	bool bDoTraceOftenChangeCheck;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x41c, Size: 0x1]
	int DoTraceOftenChangeThreshold;//[Offset: 0x420, Size: 0x4]
	float ForwardSpeedToRotSpeed;//[Offset: 0x424, Size: 0x4]
	float MinForwardSpeedToRotation;//[Offset: 0x428, Size: 0x4]
	float SmartCameraAutoReturnSpeed;//[Offset: 0x42c, Size: 0x4]
	float StayTimeBeforeReturning;//[Offset: 0x430, Size: 0x4]
	float DefaultPitch;//[Offset: 0x434, Size: 0x4]
	Rotator DefaultRotation;//[Offset: 0x438, Size: 0xc]
	float ExtraLimitMaxPitch;//[Offset: 0x444, Size: 0x4]
	float ExtraLimitMinPitch;//[Offset: 0x448, Size: 0x4]
	float SmartLimitMaxPitch;//[Offset: 0x44c, Size: 0x4]
	float SmartLimitMinPitch;//[Offset: 0x450, Size: 0x4]
	Rotator CameraEffectRotationOffset;//[Offset: 0x454, Size: 0xc]
	float FreeCamRotationReturnRate;//[Offset: 0x560, Size: 0x4]
	AutoSpringArmConfigAsset* ConfigAsset;//[Offset: 0x578, Size: 0x8]
	void SetUsePawnControlRotation(out const FName ModifyReason, int InPriority, bool InUsePawnControlRotation);// 0x2fce664
	Rotator SetSmartCamRotationTargetBySpeedVector(Vector speedVector);// 0x2fce5d4
	void SetSmartCamRotationDefaultTarget(Rotator Target);// 0x2fce558
	void SetSmartCameraAutoReturnImmediately();// 0x2fce544
	void SetSmartCameraAutoReturn(bool bEnabled);// 0x2fce4c0
	void SetFreeCameraInput(Rotator deltaRot);// 0x2fce444
	void SetFreeCameraAutoReturn(bool bEnabled);// 0x2fce3c0
	void ResetSmartCamera();// 0x2fce3ac
	void ResetFreeCamera();// 0x2fce398
	FString GetUsePawnControlRotationDebugValue();// 0x2fce314
	void AddSmartCameraRollInput(float Roll);// 0x2fce294
	void AddSmartCameraInput(float Yaw, float Pitch);// 0x2fce1e0
<----------Generated by SSpawner v1.0.2---------->


Class: AutoSpringArmConfigAsset.DataAsset.Object
	float ArmRecoverSpeed;//[Offset: 0x30, Size: 0x4]
	float DistanceThreshold;//[Offset: 0x34, Size: 0x4]
	Vector TargetOffsetFix;//[Offset: 0x38, Size: 0xc]
	float TargetOffsetFixSpeed;//[Offset: 0x44, Size: 0x4]
	float TargetOffsetRecoverSpeed;//[Offset: 0x48, Size: 0x4]
	CurveFloat* SampleCurve;//[Offset: 0x50, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: AutoAimComponent.ActorComponent.Object
	PlayerCharacter* OwnerPlayerCharacter;//[Offset: 0xf0, Size: 0x8]
	PlayerController* OwnerPlayerController;//[Offset: 0xf8, Size: 0x8]
	ToaaPlayerController* OwnerToaaPlayerController;//[Offset: 0x100, Size: 0x8]
	GSTShootWeapon* OwnerShootWeapon;//[Offset: 0x108, Size: 0x8]
	ShootWeaponEntityComp* ShootWeaponEntity;//[Offset: 0x110, Size: 0x8]
	Actor*[] BlacklistActors;//[Offset: 0x268, Size: 0x10]
	void SetAutoAimType(enum InAutoAimType, int InPriority);// 0x2f626cc
	void RemoveFromBlacklistActors(Actor* InTarget);// 0x2f62650
	void OnWeaponStopFire();// 0x2f6263c
	void OnWeaponStartFire();// 0x2f62628
	void OnWeaponShoot();// 0x2f62614
	void OnUnEquipWeapon(GSTWeaponBase* InWeapon);// 0x2f62598
	void OnEquipWeapon(GSTWeaponBase* InWeapon);// 0x2f6251c
	bool IsInBlacklistActors(Actor* InTarget);// 0x2f62494
	bool IsEnableAutoAim();// 0x2f6245c
	void EnableAutoAim(out const FName InReason, int InPriority, bool bIsEnable);// 0x2f6234c
	void ClearBlacklistActors();// 0x2f62338
	void AddToBlacklistActors(Actor* InTarget);// 0x2f622bc
<----------Generated by SSpawner v1.0.2---------->


Class: Vault_C.ToaaVaultComponent.BaseVaultComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.2---------->


Class: UAECharacterAnimListComponent.CharacterAnimListComponent.BaseCharacterAnimListComponent.BaseAnimListComponent.ActorComponent.Object
	bool CurrentHoldShield;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x340, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterAnimListComponent.BaseCharacterAnimListComponent.BaseAnimListComponent.ActorComponent.Object
	CharacterMovementAnimData[] CharacterMovementAnimEditList;//[Offset: 0x270, Size: 0x10]
	CharacterJumpAnimData[] CharacterJumpEditList;//[Offset: 0x280, Size: 0x10]
	CharacterJumpAnimData[] CharacterHoldGunJumpEditList;//[Offset: 0x290, Size: 0x10]
	CharacterRootMotionAnimData[] Character8DirRootMotionEditList;//[Offset: 0x2a0, Size: 0x10]
	float RemoteHitTime;//[Offset: 0x2b0, Size: 0x4]
	float NearHitTime;//[Offset: 0x2b4, Size: 0x4]
	CharacterAnimListData* AnimListData;//[Offset: 0x2b8, Size: 0x28]
	CharacterAnimListData* AnimListDataAsset;//[Offset: 0x2e0, Size: 0x8]
	<byte,int> ProbabilityAnimMap;//[Offset: 0x2f0, Size: 0x50]
	void OnAsyncLoadingFinished(AsyncLoadAnimParams LoadingParam);// 0x5233320
	FString GetCharacterRootMontionAnimCurve(byte RootMotionAnimType, byte DirType, byte PoseType);// 0x52331d4
	AnimationAsset* GetCharacterRootMontionAnim(byte RootMotionAnimType, byte DirType, byte PoseType);// 0x52330d0
	int GetAnimProbability(byte AnimTypeKey);// 0x523304c
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterMovementAnimData
	byte AnimType;//[Offset: 0x0, Size: 0x1]
	FString AnimTypeName;//[Offset: 0x8, Size: 0x10]
	ChararacterPoseAnimData[] PoseAnimList;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ChararacterPoseAnimData
	byte PoseType;//[Offset: 0x0, Size: 0x1]
	FString PoseName;//[Offset: 0x8, Size: 0x10]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x18, Size: 0x28]
	AnimationAsset* PoseAnim;//[Offset: 0x40, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterJumpAnimData
	byte JumpType;//[Offset: 0x0, Size: 0x1]
	FString JumpTypeName;//[Offset: 0x8, Size: 0x10]
	ChararacterJumpPhaseData[] JumpPhaseList;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ChararacterJumpPhaseData
	byte JumpPhase;//[Offset: 0x0, Size: 0x1]
	FString JumpPhaseName;//[Offset: 0x8, Size: 0x10]
	AnimationAsset* PhaseAnimSoftPtr;//[Offset: 0x18, Size: 0x28]
	AnimationAsset* PoseAnim;//[Offset: 0x40, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterRootMotionAnimData
	byte AnimType;//[Offset: 0x0, Size: 0x1]
	FString AnimTypeName;//[Offset: 0x8, Size: 0x10]
	ChararacterRootMotionDirAnimData[] AnimDirList;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ChararacterRootMotionDirAnimData
	byte AnimDirType;//[Offset: 0x0, Size: 0x1]
	FString AnimDirName;//[Offset: 0x8, Size: 0x10]
	ChararacterRootMotionPoseAnimData[] PoseAnimList;//[Offset: 0x18, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ChararacterRootMotionPoseAnimData
	byte PoseType;//[Offset: 0x0, Size: 0x1]
	FString PoseName;//[Offset: 0x8, Size: 0x10]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x18, Size: 0x28]
	FString MotionCurveName;//[Offset: 0x40, Size: 0x10]
	AnimationAsset* PoseAnim;//[Offset: 0x50, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterAnimListData.BaseAnimListData.DataAsset.Object
	CharacterMovementAnimData[] CharacterMovementAnimEditList;//[Offset: 0x40, Size: 0x10]
	CharacterJumpAnimData[] CharacterJumpEditList;//[Offset: 0x50, Size: 0x10]
	CharacterJumpAnimData[] CharacterHoldGunJumpEditList;//[Offset: 0x60, Size: 0x10]
	CharacterRootMotionAnimData[] Character8DirRootMotionEditList;//[Offset: 0x70, Size: 0x10]
	CharacterAnimProbability[] AnimProbabilityList;//[Offset: 0x80, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: BaseAnimListData.DataAsset.Object
	CharacterJumpLandAnimData[] CharacterJumpLandAnimEditList;//[Offset: 0x30, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterJumpLandAnimData
	byte AnimTypeIndex;//[Offset: 0x0, Size: 0x1]
	enum JumpAnimType;//[Offset: 0x1, Size: 0x1]
	CharacterJumpDirAnimData[] JumpDirAnimList;//[Offset: 0x8, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterJumpDirAnimData
	byte DirIndex;//[Offset: 0x0, Size: 0x1]
	byte JumpDirType;//[Offset: 0x1, Size: 0x1]
	AnimationAsset* JumpAnimSoftPtr;//[Offset: 0x8, Size: 0x28]
<----------Generated by SSpawner v1.0.2---------->


Class: CharacterAnimProbability
	byte AnimType;//[Offset: 0x0, Size: 0x1]
	int Probability;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: AsyncLoadAnimParams
<----------Generated by SSpawner v1.0.2---------->


Class: BaseFPPComponent.ActorComponent.Object
	bool bIsBoltAction;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0xf0, Size: 0x1]
	int[] SightX6IDs;//[Offset: 0xf8, Size: 0x10]
	int[] SightX8IDs;//[Offset: 0x108, Size: 0x10]
	LeadingPlayerCharacter* Character;//[Offset: 0x190, Size: 0x8]
	FName ScopeAimCameraSocketName;//[Offset: 0x198, Size: 0x8]
	FName FPPSocketName;//[Offset: 0x1a0, Size: 0x8]
	FName PlayerScopeInSocketName;//[Offset: 0x1a8, Size: 0x8]
	FName BoltActionCurveName;//[Offset: 0x1b0, Size: 0x8]
	float ScopeZoomSpringArmLength;//[Offset: 0x1b8, Size: 0x4]
	float BoltActionHoldTimeDefault;//[Offset: 0x1c0, Size: 0x4]
	float BoltActionFov;//[Offset: 0x1c4, Size: 0x4]
	float ScopeZoomAlpha;//[Offset: 0x1c8, Size: 0x4]
	<FName,float> ScopeZoomBackupMap;//[Offset: 0x1d0, Size: 0x50]
	float ScopeZoomSpeed;//[Offset: 0x220, Size: 0x4]
	CurveFloat* ScopeFovCurveRate;//[Offset: 0x228, Size: 0x8]
	<int,CurveFloat*> ScopeFovCurveRateMap;//[Offset: 0x230, Size: 0x50]
	CurveFloat* ScopeFovLeghtCurve;//[Offset: 0x280, Size: 0x8]
	float ScopeInterpolationRate;//[Offset: 0x288, Size: 0x4]
	Transform BeginOffest;//[Offset: 0x290, Size: 0x30]
	Vector MaxAttachCharacterOffset;//[Offset: 0x2c0, Size: 0xc]
	float AttachToCharacterHandleDelay;//[Offset: 0x2cc, Size: 0x4]
	float MaxAttachXOffset;//[Offset: 0x2d0, Size: 0x4]
	bool IsDrawDebugPoint;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4, Size: 0x1]
	float DrawDebugPointTime;//[Offset: 0x2d8, Size: 0x4]
	float DrawDebugPointSize;//[Offset: 0x2dc, Size: 0x4]
	int CurrentPlayAnimIndex;//[Offset: 0x2e0, Size: 0x4]
	bool bUseScopeInRotatorOffset;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x2e4, Size: 0x1]
	CurveFloat* ScopeInRotOffsetSpeed;//[Offset: 0x2e8, Size: 0x8]
	float ScopeInRotCheckLineLength;//[Offset: 0x2f0, Size: 0x4]
	float ScopeInRotOffsetMaxAngle;//[Offset: 0x2f4, Size: 0x4]
	float HoldGunMiddleScopeInTime;//[Offset: 0x2f8, Size: 0x4]
	float ScopeInRotOffsetDelay;//[Offset: 0x2fc, Size: 0x4]
	<FName,float> ScopeZoomMap;//[Offset: 0x338, Size: 0x50]
	void UpdateScopeInRotOffset(float DeltaTime);// 0x2f8e190
	void UpdateScopeCameraOffsets(out float FOV, out float Offset);// 0x2f8e0b4
	float SwitchSightConfigMaterial();// 0x35332fc
	void SwitchScopeMeshAnim(byte Type);// 0x2f8e038
	void SwitchCameraMode(enum Mode);// 0x2f8dfbc
	void StopScopeIn();// 0x2f8dfa8
	float ShowReflectorSightTPPMaterial();// 0x35332fc
	void SetTagCulling(bool isUse);// 0x35332fc
	int SetScopeFovRate(float pRate);// 0x2f8df24
	void SetScopeCameraByRate(float Alpha);// 0x2f8dea8
	void SetCurFovRate(float pRate);// 0x2f8de2c
	void ScopingChange(bool InValue);// 0x2f8dda8
	void Scoping(byte NewType);// 0x2f8dd2c
	void ScopeZoomUpdate(float Alpha);// 0x2f8dcb0
	void ScopeZoomTick(float DeltaTime);// 0x2f8dc34
	void ScopeTimelineUpdate(float Alpha);// 0x2f8dbb8
	void ScopeOutSpeedChange(ShootWeaponEntityComp* Entity);// 0x2f8db3c
	bool ScopeOutLogic();// 0x2f8db04
	void ScopeOutEnd();// 0x2f8daf0
	void ScopeOut(byte NewType);// 0x2f8da74
	void ScopeNotHandFold();// 0x2f8da60
	void ScopeInterrupt(byte NewType);// 0x2f8d9e4
	void ScopeInSpeedChange(ShootWeaponEntityComp* Entity);// 0x2f8d968
	void ScopeInLogic();// 0x2f8d954
	void ScopeInEnd();// 0x2f8d940
	void ScopeInAfterTimeline();// 0x2f8d92c
	void ScopeIn(byte NewType);// 0x2f8d8b0
	void ScopeHandFold();// 0x2f8d89c
	void RevertScopeInRot();// 0x2f8d888
	void ProcessScopeInRotOffset();// 0x2f8d874
	void PlayScopeInTimeLine();// 0x2f8d860
	void PhotographScopeOut();// 0x2f8d84c
	void PhotographScopeIn();// 0x2f8d838
	void OnLeadingPlayerCharacterStateChange(int InLayer, int InOldState, int InNewState);// 0x2f8d748
	bool IsUseZoomScope(bool bIsScopeIn);// 0x2f8d6b8
	void InitScopeZoom(uint64 ScopeID);// 0x2f8d63c
	void HandleScopeInRotOffset();// 0x2f8d628
	byte GetSightType();// 0x2f8d5f4
	float GetScopeZoomValue(uint64 ScopeID);// 0x2f8d570
	FName GetScopeZoomKey(uint64 ScopeID);// 0x2f8d4ec
	float GetScopeInAnimTime();// 0x2f8d4b8
	float GetScopeFov(GSTShootWeapon* ShootWeapon);// 0x2f8d434
	float GetScopeCameraLeghtOffet();// 0x2f8d400
	float GetScopeCameraFovOffet();// 0x2f8d3cc
	float GetCurFovRate();// 0x2f8d398
	void EquipZoomScope(uint64 ScopeID, bool bIsScopeIn);// 0x2f8d2d8
	void EquipWeapon(GSTWeaponBase* weapon);// 0x2f8d25c
	float DetachSightLens();// 0x35332fc
	void ClearScopeInRot();// 0x2f8d248
	void BoltAction(float DeltaSeconds);// 0x2f8d1cc
	void AttachToSight();// 0x2f8d1b8
	void AttachToCharacter();// 0x2f8d1a4
	float AttachSightLens();// 0x35332fc
	void ActiveComponentTickable();// 0x2f8d190
<----------Generated by SSpawner v1.0.2---------->


Class: GSTMeleeWeapon.GSTWeaponBase.Actor.Object
	DataTable* MeleeEffectTable;//[Offset: 0x940, Size: 0x8]
	DataTable* MeleeWaveSoundTable;//[Offset: 0x948, Size: 0x8]
	MeleeWeaponEntityComp* GetMeleeWeaponEntityComponent();// 0x3028380
<----------Generated by SSpawner v1.0.2---------->


Class: MeleeWeaponEntityComp.WeaponEntityComp.WeaponBaseComp.ActorComponent.Object
	int[] AttackSkillNormal;//[Offset: 0x128, Size: 0x10]
	int[] AttackSkillOnGround;//[Offset: 0x138, Size: 0x10]
	int AttackSkillInJumping;//[Offset: 0x148, Size: 0x4]
	int ExecuteSkillNormal;//[Offset: 0x14c, Size: 0x4]
	int AssassinSkill;//[Offset: 0x150, Size: 0x4]
	int ExecuteSkillKillPeople;//[Offset: 0x154, Size: 0x4]
	int[] AttackAnimalSkillOneHand;//[Offset: 0x158, Size: 0x10]
	int[] AttackAnimalSkillTwoHand;//[Offset: 0x168, Size: 0x10]
	Object*[] SkillResourceCache;//[Offset: 0x180, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: ClimbTriggerComponent.SceneComponent.ActorComponent.Object
	Transform downStartPoint;//[Offset: 0x360, Size: 0x30]
	Transform upStartPoint;//[Offset: 0x390, Size: 0x30]
	Transform downExitPoint;//[Offset: 0x3c0, Size: 0x30]
	Transform upExitPoint;//[Offset: 0x3f0, Size: 0x30]
	delegate OnClimbTriggerEnterEvent;//[Offset: 0x458, Size: 0x10]
	delegate OnClimbTriggerExitEvent;//[Offset: 0x468, Size: 0x10]
	delegate OnDisabledEventExecuteOnce;//[Offset: 0x478, Size: 0x10]
	ClimbActionConfig* MaleClimbParam;//[Offset: 0x488, Size: 0x8]
	ClimbActionConfig* FemaleClimbParam;//[Offset: 0x490, Size: 0x8]
	void SetUIPos(out const Vector downUIPos, out const Vector upUIPos);// 0x5239b44
	void SetTriggerType(enum triggerType);// 0x5239acc
	void SetEntityStructInfo(uint64 EntityID, int GlobalID);// 0x5239a14
	void SetClimbTriggerInfo(out const Vector DownTriggerCenter, out const Vector UpTriggerCenter, float DownRadius, float UpRadius, float DownHeight, float UpHeight);// 0x523984c
	void SetClimbPointInfo(out const Transform downStartPoint, out const Transform upStartPoint, float downExitHeight, float upExitHeight);// 0x5239680
	void SetClimbPointExitPointInfo(out const Transform downExitPoint, out const Transform upExitPoint);// 0x5239534
	void SetClimbPointByPosAndRot(out const Vector downStartPos, out const Rotator downStartRot, float downExitHeight, out const Vector upStartPos, out const Rotator upStartRot, float upExitHeight);// 0x523933c
	void SetCheckCollision(bool bCheck);// 0x52392bc
	void OnTriggerDisabled__DelegateSignature();// 0x35332fc
	void OnTriggerChangeDelegate__DelegateSignature(ClimbTriggerComponent* TriggerComp, enum triggerLocType);// 0x35332fc
	bool NeedCheckCollision();// 0x52392a0
	void LoadClimbParamConfig(FString MaleConfigPath, FString FemaleConfigPath);// 0x52391c8
	Vector GetUpUIPos();// 0x5239190
	enum GetTriggerType();// 0x5239174
	int GetGlobalID();// 0x5239158
	uint64 GetEntityID();// 0x523913c
	Vector GetDownUIPos();// 0x5239104
<----------Generated by SSpawner v1.0.2---------->


Class: PlayerGunCollosionComp.ActorComponent.Object
	float DetectInterval;//[Offset: 0xf0, Size: 0x4]
	int DetectThreshold;//[Offset: 0xf4, Size: 0x4]
	float FoldFactor;//[Offset: 0xf8, Size: 0x4]
	byte CollisionMaskFilter;//[Offset: 0xfc, Size: 0x1]
	LeadingPlayerCharacter* pCharOwner;//[Offset: 0x100, Size: 0x8]
	Vector BoxHalfSize;//[Offset: 0x110, Size: 0xc]
	Vector QEoffsetPeekLeftOnVehicle;//[Offset: 0x11c, Size: 0xc]
	Vector QEoffsetPeekRightOnVehicle;//[Offset: 0x128, Size: 0xc]
	Vector QEoffsetPeekLeft;//[Offset: 0x134, Size: 0xc]
	Vector QEoffsetPeekRight;//[Offset: 0x140, Size: 0xc]
	float StaticTraceLengthOffset;//[Offset: 0x14c, Size: 0x4]
	Vector QEoffsetPeekStandAdd;//[Offset: 0x150, Size: 0xc]
	Vector QEoffsetPeekCrouchAdd;//[Offset: 0x15c, Size: 0xc]
	Vector QEoffsetPeekProneAdd;//[Offset: 0x168, Size: 0xc]
	int FoldFactorDelt;//[Offset: 0x174, Size: 0x4]
	int FoldFactorDeltChange;//[Offset: 0x178, Size: 0x4]
	int TraceDis;//[Offset: 0x17c, Size: 0x4]
	float TickDeltTime;//[Offset: 0x180, Size: 0x4]
	bool IsDrawDebugLine;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x184, Size: 0x1]
	void SetEffect(const bool Visbile, out const Vector EffectLoc);// 0x30abccc
	void CheckCollision(out const int InFoldFactor, out const Vector FoldPoint, out const Vector FoldNormal);// 0x30abb98
<----------Generated by SSpawner v1.0.2---------->


Class: NavigationQueryFilter.Object
	NavigationFilterArea[] Areas;//[Offset: 0x28, Size: 0x10]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x38, Size: 0x4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x3c, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: NavigationFilterArea
	class NavArea* AreaClass;//[Offset: 0x0, Size: 0x8]
	float TravelCostOverride;//[Offset: 0x8, Size: 0x4]
	float EnteringCostOverride;//[Offset: 0xc, Size: 0x4]
	bool bIsExcluded;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x10, Size: 0x1]
	bool bOverrideTravelCost;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x10, Size: 0x1]
	bool bOverrideEnteringCost;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x10, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: NavArea.NavAreaBase.Object
	float DefaultCost;//[Offset: 0x2c, Size: 0x4]
	float FixedAreaEnteringCost;//[Offset: 0x30, Size: 0x4]
	Color DrawColor;//[Offset: 0x34, Size: 0x4]
	NavAgentSelector SupportedAgents;//[Offset: 0x38, Size: 0x4]
	bool bSupportsAgent0;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x3c, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x3d, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x3d, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent1;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent2;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent3;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent4;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent5;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent6;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent7;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bSupportsAgent8;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent9;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent10;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent11;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent12;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent13;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent14;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bSupportsAgent15;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x0, Size: 0x1]
	bool bNavFlag1;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x0, Size: 0x1]
	bool bNavFlag2;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x0, Size: 0x1]
	bool bNavFlag3;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x0, Size: 0x1]
	bool bNavFlag4;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x0, Size: 0x1]
	bool bNavFlag5;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x0, Size: 0x1]
	bool bNavFlag6;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x0, Size: 0x1]
	bool bNavFlag7;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x0, Size: 0x1]
	bool bNavFlag8;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x1, Size: 0x1]
	bool bNavFlag9;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x1, Size: 0x1]
	bool bNavFlag10;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x1, Size: 0x1]
	bool bNavFlag11;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x1, Size: 0x1]
	bool bNavFlag12;//(ByteOffset: 16, ByteMask: 16, FieldMask: 16)[Offset: 0x1, Size: 0x1]
	bool bNavFlag13;//(ByteOffset: 32, ByteMask: 32, FieldMask: 32)[Offset: 0x1, Size: 0x1]
	bool bNavFlag14;//(ByteOffset: 64, ByteMask: 64, FieldMask: 64)[Offset: 0x1, Size: 0x1]
	bool bNavFlag15;//(ByteOffset: 128, ByteMask: 128, FieldMask: 128)[Offset: 0x1, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: ToaaPredictProjectilePathActor.Actor.Object
	int SimFrequency;//[Offset: 0x348, Size: 0x4]
	int MaxBounces;//[Offset: 0x34c, Size: 0x4]
	int NumberSplineMeshes;//[Offset: 0x350, Size: 0x4]
	int NumberMeshesNeeded;//[Offset: 0x354, Size: 0x4]
	int NumberMeshesLastFrame;//[Offset: 0x358, Size: 0x4]
	int CheckThrowType;//[Offset: 0x35c, Size: 0x4]
	float ProjectileRadius;//[Offset: 0x360, Size: 0x4]
	float MaxSimTime;//[Offset: 0x364, Size: 0x4]
	float Bounciness;//[Offset: 0x368, Size: 0x4]
	float SimFriction;//[Offset: 0x36c, Size: 0x4]
	float OverrideGravityZ;//[Offset: 0x370, Size: 0x4]
	float SimTime;//[Offset: 0x374, Size: 0x4]
	float PathDuration;//[Offset: 0x378, Size: 0x4]
	bool bTraceWithChannel;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x37c, Size: 0x1]
	bool bIgnoreAvatarCheck;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x37d, Size: 0x1]
	Vector ExplodeSize;//[Offset: 0x380, Size: 0xc]
	Vector LastPoint;//[Offset: 0x38c, Size: 0xc]
	Vector ThrowVelocity;//[Offset: 0x398, Size: 0xc]
	HitResult PathHit;//[Offset: 0x3a4, Size: 0x88]
	StaticMeshComponent* EffectRange;//[Offset: 0x430, Size: 0x8]
	ParticleSystemComponent* EffectPoint;//[Offset: 0x438, Size: 0x8]
	SplineComponent* Spline;//[Offset: 0x440, Size: 0x8]
	StaticMesh* EffectMesh;//[Offset: 0x448, Size: 0x8]
	MaterialInterface* EffectMaterial;//[Offset: 0x450, Size: 0x8]
	byte TraceChannel;//[Offset: 0x458, Size: 0x1]
	byte[] ExtraObjectType;//[Offset: 0x460, Size: 0x10]
	SplineMeshComponent*[] SplineMeshes;//[Offset: 0x470, Size: 0x10]
	ParticleSystemComponent*[] BouncePointsArray;//[Offset: 0x480, Size: 0x10]
	Vector[] PathPoints;//[Offset: 0x490, Size: 0x10]
	Vector[] BouncePoints;//[Offset: 0x4a0, Size: 0x10]
	Vector[] BounceNormals;//[Offset: 0x4b0, Size: 0x10]
	PredictProjectilePathPointData[] PathData;//[Offset: 0x4c0, Size: 0x10]
	HitResult[] BounceHit;//[Offset: 0x4d0, Size: 0x10]
	Vector[] BounceVelocitys;//[Offset: 0x4e0, Size: 0x10]
	SoftObjectPath collectionPath;//[Offset: 0x520, Size: 0x18]
	SoftObjectPath splineMeshPath;//[Offset: 0x538, Size: 0x18]
	SoftObjectPath effectMeshPath_High;//[Offset: 0x550, Size: 0x18]
	SoftObjectPath effectMeshPath_Low;//[Offset: 0x568, Size: 0x18]
	SoftObjectPath effectMaterialPath_High;//[Offset: 0x580, Size: 0x18]
	SoftObjectPath effectMaterialPath_Low;//[Offset: 0x598, Size: 0x18]
	void SetToaaPredictProjectilePathParams(out const ToaaPredictProjectilePathParams ToaaPredictProjectilePathParams);// 0x311a108
	void SetThrowParams(out const Vector InBaseVector, float InThrowAngleAroundY, float InThrowAngleAroundZ, float InThrowSpeed);// 0x3119fc4
	void SetProjectileBlockingHitCheckType(enum HitCheckType);// 0x3119f48
	void SetOwnerController(Controller* InController);// 0x3119ecc
	void SetEnable(bool InIsEnable);// 0x3119e48
	void SetEffectQualityLevel(int InEffectQualityLevel);// 0x3119dcc
	Vector GetWeaponThrowVelocity();// 0x3119d94
	Vector GetThrowVelocity();// 0x3119d5c
	uint64 GetStopTargetEntityID();// 0x3119d28
	enum GetProjectileBlockingHitCheckType();// 0x3119cf4
	Actor*[] GetPredictLineIgnoreActors();// 0x3119c70
	Controller* GetOwnerController();// 0x3119c3c
	int GetEffectQualityLevel();// 0x3119c08
	Vector GetBaseVector();// 0x3119bd0
<----------Generated by SSpawner v1.0.2---------->


Class: PredictProjectilePathPointData
	Vector Location;//[Offset: 0x0, Size: 0xc]
	Vector Velocity;//[Offset: 0xc, Size: 0xc]
	float Time;//[Offset: 0x18, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: ToaaPredictProjectilePathParams
	float ProjectileRadius;//[Offset: 0x0, Size: 0x4]
	float MaxSimTime;//[Offset: 0x4, Size: 0x4]
	int SimFrequency;//[Offset: 0x8, Size: 0x4]
	int MaxBounces;//[Offset: 0xc, Size: 0x4]
	float Bounciness;//[Offset: 0x10, Size: 0x4]
	float Friction;//[Offset: 0x14, Size: 0x4]
	float OverrideGravityZ;//[Offset: 0x18, Size: 0x4]
	Vector ExplodeSize;//[Offset: 0x1c, Size: 0xc]
	bool bTraceWithChannel;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x28, Size: 0x1]
	bool bIgnoreAvatarCheck;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x29, Size: 0x1]
	byte TraceChannel;//[Offset: 0x2a, Size: 0x1]
	byte[] ExtraObjectType;//[Offset: 0x30, Size: 0x10]
	int CheckThrowType;//[Offset: 0x40, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SceneCapture2D.SceneCapture.Actor.Object
	SceneCaptureComponent2D* CaptureComponent2D;//[Offset: 0x348, Size: 0x8]
	void OnInterpToggle(bool bEnable);// 0x4ebbe0c
<----------Generated by SSpawner v1.0.2---------->


Class: SceneCapture.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: BuilderCylinderTriggerComponent.CylinderTriggerComponent.TriggerAreaComponent.ActorComponent.Object
	void SetServerID(uint64 EntityID);// 0x2fa1164
	uint64 GetServerID();// 0x2fa1148
<----------Generated by SSpawner v1.0.2---------->


Class: CylinderTriggerComponent.TriggerAreaComponent.ActorComponent.Object
	void SetTriggerInfoByFollow(float CylinderRadius, float CylinderHeight);// 0x2fcf6a4
	void SetTriggerInfo(out const Vector TriggerCenterPos, float CylinderRadius, float CylinderHeight);// 0x2fcf598
	void SetOwnerServerID(uint64 serverID);// 0x2fcf520
	uint64 GetOwnerServerID();// 0x2fcf504
<----------Generated by SSpawner v1.0.2---------->


Class: TriggerAreaComponent.ActorComponent.Object
	delegate OnTriggerEnterEvent;//[Offset: 0x110, Size: 0x10]
	delegate OnTriggerExitEvent;//[Offset: 0x120, Size: 0x10]
	void OnTriggerChangeDelegate__DelegateSignature(TriggerAreaComponent* TriggerComponent);// 0x35332fc
<----------Generated by SSpawner v1.0.2---------->


Class: TOAAMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	delegate OnSimulateMoveFinish;//[Offset: 0x720, Size: 0x10]
	bool bWantsToBeProne;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x730, Size: 0x1]
	bool bProneMaintainsBaseLocation;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x730, Size: 0x1]
	float PronedHalfHeight;//[Offset: 0x734, Size: 0x4]
	Vector GlidingRotationalVelocity;//[Offset: 0x738, Size: 0xc]
	byte WalkingMode;//[Offset: 0x748, Size: 0x1]
	CurveFloat* WalkSpeedScaleCurve;//[Offset: 0x750, Size: 0x8]
	float ForwardJumpVelocity;//[Offset: 0x758, Size: 0x4]
	float ForwardJumpUpGravityScale;//[Offset: 0x75c, Size: 0x4]
	float ForwardJumpDownGravityScale;//[Offset: 0x760, Size: 0x4]
	float StandJumpVelocity;//[Offset: 0x764, Size: 0x4]
	float StandJumpUpGravityScale;//[Offset: 0x768, Size: 0x4]
	float StandJumpDownGravityScale;//[Offset: 0x76c, Size: 0x4]
	float StandJumpPreDuration;//[Offset: 0x770, Size: 0x4]
	float JumpLandingDuration;//[Offset: 0x774, Size: 0x4]
	float JumpLandingMiddleZThreshold;//[Offset: 0x778, Size: 0x4]
	float JumpLandingMiddleDuration;//[Offset: 0x77c, Size: 0x4]
	float JumpLandingHeavyZThreshold;//[Offset: 0x780, Size: 0x4]
	float JumpLandingHeavyDuration;//[Offset: 0x784, Size: 0x4]
	float JumpLandingHeavyZOffset;//[Offset: 0x788, Size: 0x4]
	float JumpMinGap;//[Offset: 0x78c, Size: 0x4]
	float JumpMaxVelocity;//[Offset: 0x790, Size: 0x4]
	float JumpLandProneToStandZ;//[Offset: 0x794, Size: 0x4]
	float JumpLandCrouchToStandZ;//[Offset: 0x798, Size: 0x4]
	byte JumpFallingAccelerationType;//[Offset: 0x79c, Size: 0x1]
	CurveFloat* JumpFallingAccelerationCurve;//[Offset: 0x7a0, Size: 0x8]
	float CornerWidth;//[Offset: 0x7a8, Size: 0x4]
	float CornerCleanSpaceDist;//[Offset: 0x7ac, Size: 0x4]
	float CapsuleRadiusScale;//[Offset: 0x7b0, Size: 0x4]
	float ViewDirAngleMax;//[Offset: 0x7b4, Size: 0x4]
	float ViewDirAngleMin;//[Offset: 0x7b8, Size: 0x4]
	bool UseLineTraceInsteadSweep;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x7bc, Size: 0x1]
	int ZTestIterations;//[Offset: 0x7c0, Size: 0x4]
	float SimulateMoveMaxDistance;//[Offset: 0x7c8, Size: 0x4]
	float SimulateMoveDistThreshold;//[Offset: 0x7cc, Size: 0x4]
	float SimulateMoveValidFactor;//[Offset: 0x7d0, Size: 0x4]
	int SimulateMoveNonvalidFrames;//[Offset: 0x7d4, Size: 0x4]
	float SwimmingZDelta;//[Offset: 0x7d8, Size: 0x4]
	float MaxAboveWaterHeight;//[Offset: 0x7dc, Size: 0x4]
	float SuspendAboveWaterHeight;//[Offset: 0x7e0, Size: 0x4]
	SkiingDefine* SkiingConfig;//[Offset: 0x7e8, Size: 0x8]
	bool UpdateGravitationalForce(int GravitationKey, out const Vector CenterPos, float CenterMaxSpeed, float EffectRadius, float AttenuationK);// 0x310e924
	int TrySimulateMoveToDestination(out const Vector[] PtList, SimulateMoveParam MoveParm);// 0x310e7d8
	void SetSkiingState(enum NewState);// 0x310e75c
	void SetSkiFrictionFactor(FName Reason, int Priority, float Value);// 0x310e668
	void SetSkiForwardControlInput(byte ForwardInput);// 0x310e5ec
	void SetSkiExternAccelerateByID(FName Reason, float InAcceleratiton, uint64 UniqueId);// 0x310e4f8
	void SetSkiExternAccelerate(FName Reason, float InAcceleratiton);// 0x310e440
	void SetGravityScaleCoe(float InValue);// 0x310e3c8
	void SetForwardJumpVelByReason(out const byte JumpType, float VelValue, out const FName Reason, out const int Priority);// 0x310e250
	void SetFallUpGravityScale(FName Reason, int Priority, float Value);// 0x310e15c
	void SetFallDownGravityScale(FName Reason, int Priority, float Value);// 0x310e068
	void ResetSkiFrictionFactor(FName Reason);// 0x310dfec
	void ResetSkiExternAccelerateByID(FName Reason, uint64 UniqueId);// 0x310df38
	void ResetSkiExternAccelerate(FName Reason);// 0x310debc
	void ResetJumpVelByReason(out const byte JumpType, out const FName Reason);// 0x310ddd0
	void ResetJumpVel();// 0x310ddbc
	void ResetFallUpGravityScale(FName Reason);// 0x310dd40
	void ResetFallDownGravityScale(FName Reason);// 0x310dcc4
	void RemoveGravitationalForce(int GravitationKey);// 0x310dc48
	void RemoveAllGravitationalForce();// 0x310dc34
	void OverrideVelocity(out const Vector InVelocity);// 0x310dbac
	void OverrideGlidingVelocity(out const Vector InGlidingTargetBaseVelocity, float InGlidingTargetFallSpeed, float InForwardSpeedInterpRate, float InFallSpeedInterpRate);// 0x310da68
	void OverrideGlidingRotationalVelocity(out const Vector InRotationSpeed, float InRotationSpeedInterpRate);// 0x310d998
	bool IsSkiing();// 0x310d960
	void InitJumpVel();// 0x310d94c
	enum GetSkiingState();// 0x310d930
	Vector GetMoveBlockHitPoint();// 0x310d908
	float GetGravityScaleCoe();// 0x310d8ec
	float GetForwardJumpVelByReason(out const byte JumpType);// 0x310d84c
	float GetDistFromGround();// 0x310d818
	Vector GetCurGlidingRotationVel();// 0x310d7f4
	Vector GetCurGlidingBaseVel();// 0x310d7d0
	void ExitSkiingRiseFallingByID(uint64 UniqueId);// 0x310d754
	void ExitSkiingRiseFalling();// 0x310d740
	void ExitSkiing();// 0x310d72c
	void EnterSkiingRiseFallingByID(out const Vector RiseAcceleration, float RiseAttenuationK, float RiseOriginZ, uint64 UniqueId);// 0x310d5e8
	void EnterSkiingRiseFalling(out const Vector RiseAcceleration, float RiseAttenuationK, float RiseOriginZ);// 0x310d4dc
	void EnterSkiing();// 0x310d4c8
	void EnterPathFollowSkiing(SplineComponent* InSplineComponent, float InSpeed, uint64 PathUniqueID);// 0x310d3d4
	bool CanSkiingPushStart();// 0x310d39c
	bool bMovingButBlocked();// 0x310d37c
	float ApplyGravitational(float DeltaTime);// 0x310d2f8
	void AdjustToFloor();// 0x310d2e4
	int AddGravitationalForce(out const Vector CenterPos, float CenterMaxSpeed, float EffectRadius, float AttenuationK);// 0x310d198
<----------Generated by SSpawner v1.0.2---------->


Class: SkiingDefine.DataAsset.Object
	float MovingToSkiingSpeed;//[Offset: 0x30, Size: 0x4]
	float SprintToSkiingSpeed;//[Offset: 0x34, Size: 0x4]
	float MaxSpeedEnablePushStart;//[Offset: 0x38, Size: 0x4]
	float PushInitSpeed;//[Offset: 0x3c, Size: 0x4]
	float EnterVelocityDirAngle;//[Offset: 0x40, Size: 0x4]
	float EnterTime;//[Offset: 0x44, Size: 0x4]
	float ExitTime;//[Offset: 0x48, Size: 0x4]
	float RushingStartTime;//[Offset: 0x4c, Size: 0x4]
	float GroundGravityScale;//[Offset: 0x50, Size: 0x4]
	float FrictionFactor;//[Offset: 0x54, Size: 0x4]
	float TurnAttenuationK;//[Offset: 0x58, Size: 0x4]
	float DirTurnFactor;//[Offset: 0x5c, Size: 0x4]
	float RotTurnSpeed;//[Offset: 0x60, Size: 0x4]
	float BrakingDeceleration;//[Offset: 0x64, Size: 0x4]
	float BrakeToStopSpeed;//[Offset: 0x68, Size: 0x4]
	float ReverseSpeedToStop;//[Offset: 0x6c, Size: 0x4]
	float RushOverMinSpeed;//[Offset: 0x70, Size: 0x4]
	float RushOverMinSlopAngleDiff;//[Offset: 0x74, Size: 0x4]
	float RushOverReverseZAngleDiff;//[Offset: 0x78, Size: 0x4]
	float SkiingWalkableAngle;//[Offset: 0x7c, Size: 0x4]
	float PathSkiingMinSpeed;//[Offset: 0x80, Size: 0x4]
	float PathSkiingMaxEnterAngle;//[Offset: 0x84, Size: 0x4]
	float SkiGroundNormalLerpSpeed;//[Offset: 0x88, Size: 0x4]
	float SkiIdleNormalLerpSpeed;//[Offset: 0x8c, Size: 0x4]
	float SkiLandNormalLerpSpeed;//[Offset: 0x90, Size: 0x4]
	float SkiLandNormalLerpTime;//[Offset: 0x94, Size: 0x4]
	static void SetMaxSkiingSpeed(float InMaxSpeed);// 0x30d386c
<----------Generated by SSpawner v1.0.2---------->


Class: SimulateMoveParam
	bool MoveWithoutCollision;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x0, Size: 0x1]
	bool MoveBreakByInput;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1, Size: 0x1]
	enum MoveType;//[Offset: 0x2, Size: 0x1]
	Vector OverrideVelocity;//[Offset: 0x4, Size: 0xc]
	float VelocityScale;//[Offset: 0x10, Size: 0x4]
	float DistanceScale;//[Offset: 0x14, Size: 0x4]
	float MaxFallingLedgeHeight;//[Offset: 0x18, Size: 0x4]
	bool MoveToDestRotation;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x1c, Size: 0x1]
	Rotator DestRotation;//[Offset: 0x20, Size: 0xc]
<----------Generated by SSpawner v1.0.2---------->


Class: BP_PredictProjectilePath_C.ToaaPredictProjectilePathActor.Actor.Object
	void UserConstructionScript();// 0x35332fc
	ParticleSystemComponent* Effect Point;//[Offset: 0x5b0, Size: 0x8]
	StaticMeshComponent* Effect Range;//[Offset: 0x5b8, Size: 0x8]
	ParticleSystemComponent* Bounce Point 4;//[Offset: 0x5c0, Size: 0x8]
	ParticleSystemComponent* Bounce Point 3;//[Offset: 0x5c8, Size: 0x8]
	ParticleSystemComponent* Bounce Point 2;//[Offset: 0x5d0, Size: 0x8]
	ParticleSystemComponent* Bounce Point 1;//[Offset: 0x5d8, Size: 0x8]
	SplineMeshComponent* SplineMesh19;//[Offset: 0x5e0, Size: 0x8]
	SplineMeshComponent* SplineMesh18;//[Offset: 0x5e8, Size: 0x8]
	SplineMeshComponent* SplineMesh17;//[Offset: 0x5f0, Size: 0x8]
	SplineMeshComponent* SplineMesh16;//[Offset: 0x5f8, Size: 0x8]
	SplineMeshComponent* SplineMesh15;//[Offset: 0x600, Size: 0x8]
	SplineMeshComponent* SplineMesh14;//[Offset: 0x608, Size: 0x8]
	SplineMeshComponent* SplineMesh13;//[Offset: 0x610, Size: 0x8]
	SplineMeshComponent* SplineMesh12;//[Offset: 0x618, Size: 0x8]
	SplineMeshComponent* SplineMesh11;//[Offset: 0x620, Size: 0x8]
	SplineMeshComponent* SplineMesh10;//[Offset: 0x628, Size: 0x8]
	SplineMeshComponent* SplineMesh9;//[Offset: 0x630, Size: 0x8]
	SplineMeshComponent* SplineMesh8;//[Offset: 0x638, Size: 0x8]
	SplineMeshComponent* SplineMesh7;//[Offset: 0x640, Size: 0x8]
	SplineMeshComponent* SplineMesh6;//[Offset: 0x648, Size: 0x8]
	SplineMeshComponent* SplineMesh5;//[Offset: 0x650, Size: 0x8]
	SplineMeshComponent* SplineMesh4;//[Offset: 0x658, Size: 0x8]
	SplineMeshComponent* SplineMesh3;//[Offset: 0x660, Size: 0x8]
	SplineMeshComponent* SplineMesh2;//[Offset: 0x668, Size: 0x8]
	SplineMeshComponent* SplineMesh1;//[Offset: 0x670, Size: 0x8]
	SplineMeshComponent* SplineMesh;//[Offset: 0x678, Size: 0x8]
	SplineComponent* SplineCom;//[Offset: 0x680, Size: 0x8]
	SceneComponent* DefaultSceneRoot;//[Offset: 0x688, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: BP_NaviDecalNew_C.NaviDecalNewActor.BaseActor.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: NaviDecalNewActor.BaseActor.Actor.Object
	SplineComponent* mSplineCom;//[Offset: 0x820, Size: 0x8]
	SplineMeshComponent*[] marrSplineMeshCom;//[Offset: 0x828, Size: 0x10]
	MaterialInstanceDynamic*[] marrSplineMeshComMat;//[Offset: 0x838, Size: 0x10]
	SoftObjectPath mStaticMeshPath;//[Offset: 0x848, Size: 0x18]
	int mMaxSplinePointNum;//[Offset: 0x860, Size: 0x4]
	void UpdateSpline();// 0x30877d4
	void SetSplinePointTanWithID(int pPointIndex, int pType, bool pbFixZ);// 0x30876dc
	void SetSplinePointTans(int pPointIndex, out const Vector pInTangent, out const Vector pOutTangent);// 0x30875c4
	void SetSplinePointTan(int pPointIndex, out const Vector pInTangent);// 0x3087500
	void SetSplinePointLoc(int pPointIndex, out const Vector pInLocation);// 0x308743c
	void SetMeshVisible(int pPointIndex, bool pbVisible);// 0x3087380
	void SetMeshMat(int pPointIndex, float pCurDis, float pNxtDis, out const Vector pStartLoc, out const Vector pEndLoc);// 0x30871f0
	void SetMeshLocAndTanCustom(int pPointIndex, out const Vector pCurLoc, out const Vector pNxtLoc, out const Vector pCurTan, out const Vector pNxtTan, float pLenScale, float pMinTan, bool pbFloorLoc, float pFloorLen);// 0x3086f34
	void SetMeshLocAndTan(int pPointIndex, float pLenScale, float pMinTan, bool pbFloorLoc, float pFloorLen);// 0x3086db8
	void Init(int pMaxSplinePointNum, FString pMeshPath, float pMeshScaleX, float pMeshScaleY);// 0x3086c7c
	float GetSplineSegmentLength(const int pIndex, const float pParam);// 0x3086bbc
	Vector GetSplinePointTanLocal(int pPointIndex);// 0x3086b34
	Vector GetSplinePointTan(int pPointIndex);// 0x3086aac
	Vector GetSplinePointLocLocal(int pPointIndex);// 0x3086a24
	Vector GetSplinePointLoc(int pPointIndex);// 0x308699c
	void ClearSplinePoints();// 0x3086988
	void AddSplinePointLoc(int pPointIndex, out const Vector pInLocation);// 0x30868c4
<----------Generated by SSpawner v1.0.2---------->


Class: BaseActor.Actor.Object
	AvatarCommonBase* AvatarCommonBase;//[Offset: 0x6d8, Size: 0x8]
	uint64 serverID;//[Offset: 0x6e8, Size: 0x8]
	int EntityType;//[Offset: 0x6f0, Size: 0x4]
	int ResID;//[Offset: 0x6f4, Size: 0x4]
	Rotator XGetSocketRotator(FName SocketName);// 0x2f7f23c
	Vector XGetSocketLocation(FName SocketName);// 0x2f7f1ac
	bool XDoesSocketExist(FName SocketName);// 0x2f7f11c
	void TurnHeadToMainChara();// 0x2f7f108
	void SetMaterialVectorParamValue(enum SlotType, int Index, FString ParamName, out const LinearColor Value);// 0x2f7efbc
	void SetMaterialScalarParamValue(enum SlotType, int Index, FString ParamName, float Value);// 0x2f7ee7c
	void SetAvatarRelativeRotation(out const FName InReason, int InPriority, out const Rotator InRelativeRotation);// 0x2f7ed64
	void SetAvatarRelativeLocation(out const FName InReason, int InPriority, out const Vector InRelativeLocation);// 0x2f7ec4c
	void Reset();// 0x2f7ec30
	void ReceiveResume();// 0x35332fc
	void ReceiveOnRecycle();// 0x35332fc
	void PrintMonsterInfo();// 0x2f7ec14
	void InitAvatarRelativeRotation(out const Rotator InRelativeRotation);// 0x2f7eb8c
	void InitAvatarRelativeLocation(out const Vector InRelativeLocation);// 0x2f7eb04
	Rotator GetSocketRotator(FName SocketName);// 0x2f7ea74
	Vector GetSocketLocation(FName SocketName);// 0x2f7e9e4
	Vector GetLocalCompositionLocation();// 0x2f7e9ac
	enum GetHitBodyTypeByBoneName(out const FName InBoneName);// 0x2f7e910
	SceneComponent* GetDynamicComponent(FName SocketName);// 0x2f7e88c
	BaseAnimInstance* GetBaseAnimInstance();// 0x2f7e850
	MeshComponent* GetAvatarMeshComponent(int avatarSlotTypeIn);// 0x2f7e7cc
	SceneComponent* GetAvatarMasterBoneComp();// 0x2f7e798
	AvatarCommonBase* GetAvatarComponent();// 0x2f7e77c
	bool DoesSocketExist(FName SocketName);// 0x2f7e6ec
	void ClearAvatarRelativeRotation(out const FName InReason);// 0x2f7e660
	void ClearAvatarRelativeLocation(out const FName InReason);// 0x2f7e5d4
	void AttachComponentToAvatar(SceneComponent* child, FName SocketName);// 0x2f7e520
	void AttachActorToAvatar(Actor* child, FName SocketName, enum AttachmentRule);// 0x2f7e430
	int AddDynamicComponentToAvatarUseParentBound(SceneComponent* Component, FName SocketName);// 0x2f7e36c
	int AddDynamicComponentToAvatar(SceneComponent* Component, FName SocketName);// 0x2f7e2a8
	int AddDynamicActorToAvatar(Actor* Actor, FName SocketName);// 0x2f7e1e4
<----------Generated by SSpawner v1.0.2---------->


Class: BP_NaviDecal1_C.NaviDecalActor2.BaseActor.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


Class: NaviDecalActor2.BaseActor.Actor.Object
	int MaxNumStaticMeshes;//[Offset: 0x81c, Size: 0x4]
	SplineComponent* mSplineCom;//[Offset: 0x820, Size: 0x8]
	StaticMeshComponent*[] StaticMeshComponentArray;//[Offset: 0x828, Size: 0x10]
	void UpdateSpline();// 0x3085bb0
	void SetSplinePointTanWithID(int pPointIndex, int pType, float TangentLength, bool pbFixZ);// 0x3085a7c
	void SetSplinePointTans(int pPointIndex, out const Vector pInTangent, out const Vector pOutTangent);// 0x3085964
	void SetSplinePointTan(int pPointIndex, out const Vector pInTangent);// 0x30858a0
	void SetSplinePointLoc(int pPointIndex, out const Vector pInLocation);// 0x30857dc
	void SetMeshVisible(int pPointIndex, bool pbVisible);// 0x3085720
	void Init(int pMaxSplinePointNum, FString pMeshPath, float InBaseMeshLength, float InBaseMeshWidth);// 0x30855e4
	float GetSplineSegmentLength(const int pIndex, const float pParam);// 0x3085524
	Vector GetSplinePointTanLocal(int pPointIndex);// 0x308549c
	Vector GetSplinePointTan(int pPointIndex);// 0x3085414
	Vector GetSplinePointLocLocal(int pPointIndex);// 0x308538c
	Vector GetSplinePointLoc(int pPointIndex);// 0x3085304
	void ClearSplinePoints();// 0x30852f0
	void Apply(float InitialOffset, out const int[] CountArray, out const float[] LengthArray, out const float[] WidthArray, out const float[] IntervalArray);// 0x30850e8
	void AddSplinePointLoc(int pPointIndex, out const Vector pInLocation);// 0x3085024
<----------Generated by SSpawner v1.0.2---------->


Class: BP_HighLevelNightLightForPlayer_C.Actor.Object
	void TakeOff();// 0x35332fc
	void TakeOn();// 0x35332fc
	void UserConstructionScript();// 0x35332fc
	SpotLightComponent* SpotLight1;//[Offset: 0x340, Size: 0x8]
	SceneComponent* Scene;//[Offset: 0x348, Size: 0x8]
	MaterialInstanceDynamic* mat;//[Offset: 0x350, Size: 0x8]
	LinearColor Color;//[Offset: 0x358, Size: 0x10]
	float Intensity;//[Offset: 0x368, Size: 0x4]
	float Hardness;//[Offset: 0x36c, Size: 0x4]
	float Length;//[Offset: 0x370, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: SpotLightComponent.PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float InnerConeAngle;//[Offset: 0x3e4, Size: 0x4]
	float OuterConeAngle;//[Offset: 0x3e8, Size: 0x4]
	float LightShaftConeAngle;//[Offset: 0x3ec, Size: 0x4]
	void SetOuterConeAngle(float NewOuterConeAngle);// 0x4f01060
	void SetInnerConeAngle(float NewInnerConeAngle);// 0x4f00fe4
<----------Generated by SSpawner v1.0.2---------->


Class: PointLightComponent.LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x3c0, Size: 0x1]
	float LightFalloffExponent;//[Offset: 0x3c4, Size: 0x4]
	float SourceRadius;//[Offset: 0x3c8, Size: 0x4]
	float SoftSourceRadius;//[Offset: 0x3cc, Size: 0x4]
	float SourceLength;//[Offset: 0x3d0, Size: 0x4]
	LinearColor CustomShadowColor;//[Offset: 0x3d4, Size: 0x10]
	void SetSourceRadius(float bNewValue);// 0x4e92710
	void SetSourceLength(float NewValue);// 0x4e92694
	void SetSoftSourceRadius(float bNewValue);// 0x4e92618
	void SetLightFalloffExponent(float NewLightFalloffExponent);// 0x4e9259c
<----------Generated by SSpawner v1.0.2---------->


Class: LocalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	enum IntensityUnits;//[Offset: 0x3a9, Size: 0x1]
	float Radius;//[Offset: 0x3ac, Size: 0x4]
	float AttenuationRadius;//[Offset: 0x3b0, Size: 0x4]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x3b4, Size: 0xc]
	void SetAttenuationRadius(float NewRadius);// 0x4dfdfa8
	static float GetUnitsConversionFactor(enum SrcUnits, enum TargetUnits, float CosHalfConeAngle);// 0x4dfdeb4
<----------Generated by SSpawner v1.0.2---------->


Class: LightmassPointLightSettings.LightmassLightSettings
<----------Generated by SSpawner v1.0.2---------->


Class: BP_WEP_Chopper_C.BP_MeleeWeapon_Base_C.GSTMeleeWeapon.GSTWeaponBase.Actor.Object
	void UserConstructionScript();// 0x35332fc
	WeaponBaseComp* WeaponBaseComp;//[Offset: 0x960, Size: 0x8]
	WeaponEntityComp* WeaponEntity;//[Offset: 0x968, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: BP_MeleeWeapon_Base_C.GSTMeleeWeapon.GSTWeaponBase.Actor.Object
	void UserConstructionScript();// 0x35332fc
	MeleeWeaponEntityComp* MeleeWeaponEntity;//[Offset: 0x950, Size: 0x8]
	MeleeWeaponEffectComp* MeleeWeaponEffectComp;//[Offset: 0x958, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: MeleeWeaponEffectComp.WeaponEffectComp.WeaponBaseComp.ActorComponent.Object
	GSTMeleeWeapon* OwnerMeleeWeapon;//[Offset: 0x260, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponEffectComp.WeaponBaseComp.ActorComponent.Object
	WeaponEffectAudioStruct[] SoundDataArray;//[Offset: 0xf8, Size: 0x10]
	WeaponEffectAudioStruct[] SoundDataArrayFemale;//[Offset: 0x108, Size: 0x10]
	<SoftObjectPath,ParticleSystem*> ParticleMap;//[Offset: 0x120, Size: 0x50]
	void HandleWeaponAction(byte Action);// 0x31790c8
<----------Generated by SSpawner v1.0.2---------->


Class: WeaponEffectAudioStruct
	byte Action;//[Offset: 0x0, Size: 0x1]
	AkAudioEvent* SoundEvent;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: DrawPathMap_C.FogActor.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0x378, Size: 0x8]
	void UpdateTexture(int Temp_int_Array_Index_Variable, int Temp_int_Loop_Counter_Variable, int CallFunc_Add_IntInt_ReturnValue, Vector2D[] CallFunc_GetNewExploreGrid_ReturnValue, Vector2D CallFunc_Array_Get_Item, int CallFunc_Array_Length_ReturnValue, bool CallFunc_Less_IntInt_ReturnValue, bool CallFunc_IsValid_ReturnValue, Canvas* CallFunc_BeginDrawCanvasToRenderTarget_Canvas, Vector2D CallFunc_BeginDrawCanvasToRenderTarget_Size, DrawToRenderTargetContext CallFunc_BeginDrawCanvasToRenderTarget_Context);// 0x35332fc
	void InitTexture(MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, Vector CallFunc_GetTexSize_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, Texture2D* CallFunc_CreateTextruePixel_ReturnValue, int CallFunc_FTrunc_ReturnValue, int CallFunc_FTrunc_ReturnValue1, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue1, TextureRenderTarget2D* CallFunc_CreateRenderTarget2D_ReturnValue);// 0x35332fc
	void UserConstructionScript();// 0x35332fc
	void InpActEvt_I_K2Node_InputKeyEvent(Key Key);// 0x35332fc
	void InitPath();// 0x35332fc
	void ReceiveBeginPlay();// 0x35332fc
	void BlurPathMap();// 0x35332fc
	void ExecuteUbergraph_DrawPathMap(int EntryPoint, Key K2Node_InputKeyEvent_Key, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue, Texture2D* CallFunc_CreateTextruePixel_ReturnValue, Vector CallFunc_GetTexSize_ReturnValue, float CallFunc_BreakVector_X, float CallFunc_BreakVector_Y, float CallFunc_BreakVector_Z, int CallFunc_FTrunc_ReturnValue, int CallFunc_FTrunc_ReturnValue1, MaterialInstanceDynamic* CallFunc_CreateDynamicMaterialInstance_ReturnValue1, TextureRenderTarget2D* CallFunc_CreateRenderTarget2D_ReturnValue);// 0x35332fc
	SceneComponent* DefaultSceneRoot;//[Offset: 0x380, Size: 0x8]
	TextureRenderTarget2D* PathRT;//[Offset: 0x388, Size: 0x8]
	Vector2D CurrentPosition;//[Offset: 0x390, Size: 0x8]
	TextureRenderTarget2D* BlurredRT;//[Offset: 0x398, Size: 0x8]
	Vector2D DrawSize;//[Offset: 0x3a0, Size: 0x8]
	float Count;//[Offset: 0x3a8, Size: 0x4]
	MaterialInstanceDynamic* BlurMat;//[Offset: 0x3b0, Size: 0x8]
	IntPoint NewVar;//[Offset: 0x3b8, Size: 0x8]
	bool bIsInit;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x3c0, Size: 0x1]
	MaterialInstanceDynamic* DynamicBlurMat;//[Offset: 0x3c8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: FogActor.Actor.Object
	MaterialInstanceDynamic* MaterialDynamic;//[Offset: 0x340, Size: 0x8]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x348, Size: 0x8]
	MaterialInterface* UpdateMaterial;//[Offset: 0x350, Size: 0x8]
	TextureRenderTarget2D* BlurRT;//[Offset: 0x358, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: DrawToRenderTargetContext
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x0, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: BasePawnBP_C.BasePawn.Pawn.Actor.Object
	PointerToUberGraphFrame UberGraphFrame;//[Offset: 0xa20, Size: 0x8]
	void UserConstructionScript();// 0x35332fc
	void PlayFaceFx(FString AnimPath);// 0x35332fc
	void BndEvt__Avatar_K2Node_ComponentBoundEvent_0_OnAllMeshLoadedDelegate__DelegateSignature();// 0x35332fc
	void ExecuteUbergraph_BasePawnBP(int EntryPoint, FString K2Node_Event_AnimPath, SkeletalMeshComponent* K2Node_DynamicCast_AsSkeletal_Mesh_Component, bool K2Node_DynamicCast_bSuccess);// 0x35332fc
	FaceFXComponent* FaceFX;//[Offset: 0xa28, Size: 0x8]
	Zombie_01_AnimList_C* SkillAnimList;//[Offset: 0xa30, Size: 0x8]
	Zombie_01_AnimList_C* Zombie_01_AnimList;//[Offset: 0xa38, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: FaceFXComponent.ActorComponent.Object
	delegate OnPlaybackAudioStart;//[Offset: 0xf0, Size: 0x10]
	delegate OnPlaybackStopped;//[Offset: 0x100, Size: 0x10]
	FaceFXEntry[] Entries;//[Offset: 0x110, Size: 0x10]
	void StopAll();// 0x1516fb0
	bool Stop(SkeletalMeshComponent* SkelMeshComp, const Object* Caller);// 0x1516ee8
	bool Setup(SkeletalMeshComponent* SkelMeshComp, ActorComponent* AudioComponent, const FaceFXActor* Asset, bool IsCompensateForForceFrontXAxis, bool IsAutoPlaySound, bool IsDisableMorphTargets, bool IsDisableMaterialParameters, const Object* Caller);// 0x1516c88
	bool Resume(SkeletalMeshComponent* SkelMeshComp, const Object* Caller);// 0x1516bc0
	bool PlayById(FName Group, FName AnimName, SkeletalMeshComponent* SkelMeshComp, bool Loop, const Object* Caller);// 0x1516a3c
	bool Play(FaceFXAnim* Animation, SkeletalMeshComponent* SkelMeshComp, bool Loop, const Object* Caller);// 0x15168f4
	bool Pause(SkeletalMeshComponent* SkelMeshComp, const Object* Caller);// 0x151682c
	void OnCharacterPlaybackStopped(FaceFXCharacter* Character, out const FaceFXAnimId AnimId);// 0x1516748
	void OnCharacterAudioStart(FaceFXCharacter* Character, out const FaceFXAnimId AnimId, bool IsAudioStarted, ActorComponent* AudioComponentStartedOn);// 0x15165d8
	bool JumpToById(float Position, bool Pause, FName Group, FName AnimName, bool LoopAnimation, SkeletalMeshComponent* SkelMeshComp, const Object* Caller);// 0x15163d0
	bool JumpTo(float Position, bool Pause, FaceFXAnim* Animation, bool LoopAnimation, SkeletalMeshComponent* SkelMeshComp, const Object* Caller);// 0x1516200
	bool IsPlayingAnimation(out const FaceFXAnimId AnimId, SkeletalMeshComponent* SkelMeshComp, const Object* Caller);// 0x15160cc
	bool IsPlaying(SkeletalMeshComponent* SkelMeshComp, const Object* Caller);// 0x1516004
	bool IsPaused(SkeletalMeshComponent* SkelMeshComp, const Object* Caller);// 0x1515f3c
<----------Generated by SSpawner v1.0.2---------->


Class: FaceFXEntry
	SkeletalMeshComponent* SkelMeshComp;//[Offset: 0x0, Size: 0x8]
	ActorComponent* AudioComp;//[Offset: 0x8, Size: 0x8]
	FaceFXActor* Asset;//[Offset: 0x10, Size: 0x28]
	FaceFXCharacter* Character;//[Offset: 0x38, Size: 0x8]
	bool bIsCompensateForForceFrontXAxis;//(ByteOffset: 1, ByteMask: 1, FieldMask: 1)[Offset: 0x40, Size: 0x1]
	bool bIsAutoPlaySound;//(ByteOffset: 2, ByteMask: 2, FieldMask: 2)[Offset: 0x40, Size: 0x1]
	bool bIsDisableMorphTargets;//(ByteOffset: 4, ByteMask: 4, FieldMask: 4)[Offset: 0x40, Size: 0x1]
	bool bIsDisableMaterialParameters;//(ByteOffset: 8, ByteMask: 8, FieldMask: 8)[Offset: 0x40, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: FaceFXActor.FaceFXAsset.Object
	FaceFXActorData[] PlatformData;//[Offset: 0x28, Size: 0x10]
	FaceFXActorData ActorData;//[Offset: 0x38, Size: 0x30]
	FaceFXAnim*[] Animations;//[Offset: 0x68, Size: 0x10]
	enum BlendMode;//[Offset: 0x78, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: FaceFXAsset.Object
<----------Generated by SSpawner v1.0.2---------->


Class: FaceFXActorData
	byte[] ActorRawData;//[Offset: 0x0, Size: 0x10]
	byte[] BonesRawData;//[Offset: 0x10, Size: 0x10]
	FaceFXIdData[] Ids;//[Offset: 0x20, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: FaceFXIdData
	uint64 ID;//[Offset: 0x0, Size: 0x8]
	FName Name;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: FaceFXAnim.FaceFXAsset.Object
	FaceFXAnimData[] PlatformData;//[Offset: 0x28, Size: 0x10]
	FaceFXAnimData AnimData;//[Offset: 0x38, Size: 0x10]
	FaceFXAnimId ID;//[Offset: 0x48, Size: 0x10]
	SoundWave* Audio;//[Offset: 0x58, Size: 0x28]
	Object* AudioAkEvent;//[Offset: 0x80, Size: 0x28]
	Object* AudioAkEventStop;//[Offset: 0xa8, Size: 0x28]
	Object* AudioAkEventPause;//[Offset: 0xd0, Size: 0x28]
	Object* AudioAkEventResume;//[Offset: 0xf8, Size: 0x28]
<----------Generated by SSpawner v1.0.2---------->


Class: FaceFXAnimData
	byte[] RawData;//[Offset: 0x0, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: FaceFXAnimId
	FName Group;//[Offset: 0x0, Size: 0x8]
	FName Name;//[Offset: 0x8, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: FaceFXCharacter.Object
	FaceFXActor* FaceFXActor;//[Offset: 0x90, Size: 0x8]
	FaceFXAnim* CurrentAnim;//[Offset: 0x158, Size: 0x8]
<----------Generated by SSpawner v1.0.2---------->


Class: Zombie_01_AnimList_C.UAEMonsterAnimListComponent.BaseCharacterAnimListComponent.BaseAnimListComponent.ActorComponent.Object
<----------Generated by SSpawner v1.0.2---------->


Class: UAEMonsterAnimListComponent.BaseCharacterAnimListComponent.BaseAnimListComponent.ActorComponent.Object
	MonsterMovementAnimData[] MovementAnimEditList;//[Offset: 0x270, Size: 0x10]
	MonsterDependAnimData[] DependAnimEditList;//[Offset: 0x280, Size: 0x10]
	float HitBreakTime;//[Offset: 0x290, Size: 0x4]
	float RemoteHitTime;//[Offset: 0x294, Size: 0x4]
	float NearHitTime;//[Offset: 0x298, Size: 0x4]
	UAEMonsterAnimListData* AnimListData;//[Offset: 0x2a0, Size: 0x28]
	UAEMonsterAnimListData* AnimListDataAsset;//[Offset: 0x2c8, Size: 0x8]
	<byte,int> ProbabilityAnimMap;//[Offset: 0x2e8, Size: 0x50]
	<enum,AnimAdditiveData> PartAdditiveAnimMap;//[Offset: 0x338, Size: 0x50]
	void OnAsyncLoadingFinished(AsyncLoadAnimParams LoadingParam);// 0x3132ce4
	AnimationAsset* GetMonsterAnim(byte AnimType, bool bOnlyMaxLayer);// 0x3132c1c
	int GetAnimProbability(byte AnimTypeKey);// 0x3132b98
<----------Generated by SSpawner v1.0.2---------->


Class: MonsterMovementAnimData
	byte AnimType;//[Offset: 0x0, Size: 0x1]
	FString AnimTypeName;//[Offset: 0x8, Size: 0x10]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x18, Size: 0x28]
<----------Generated by SSpawner v1.0.2---------->


Class: MonsterDependAnimData
	FString AnimTypeName;//[Offset: 0x0, Size: 0x10]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x10, Size: 0x28]
<----------Generated by SSpawner v1.0.2---------->


Class: UAEMonsterAnimListData.BaseAnimListData.DataAsset.Object
	MonsterMovementAnimData[] MovementAnimEditList;//[Offset: 0x40, Size: 0x10]
	MonsterDependAnimData[] DependAnimEditList;//[Offset: 0x50, Size: 0x10]
	MonsterAnimProbability[] AnimProbabilityList;//[Offset: 0x60, Size: 0x10]
	MonsterFurnitureInteractAnimData[] FurnitureInteractAnimList;//[Offset: 0x70, Size: 0x10]
	<enum,AnimAdditiveData> PartToAnimAdditiveData;//[Offset: 0x80, Size: 0x50]
<----------Generated by SSpawner v1.0.2---------->


Class: MonsterAnimProbability
	byte AnimType;//[Offset: 0x0, Size: 0x1]
	int Probability;//[Offset: 0x4, Size: 0x4]
<----------Generated by SSpawner v1.0.2---------->


Class: MonsterFurnitureInteractAnimData
	FString InteractName;//[Offset: 0x0, Size: 0x10]
	AnimationAsset* PoseAnimSoftPtr;//[Offset: 0x10, Size: 0x28]
<----------Generated by SSpawner v1.0.2---------->


Class: AnimAdditiveData
	float MinRandomToAddiTime;//[Offset: 0x0, Size: 0x4]
	float MaxRandomToAddiTime;//[Offset: 0x4, Size: 0x4]
	float MinRandomDuration;//[Offset: 0x8, Size: 0x4]
	float MaxRandomDuration;//[Offset: 0xc, Size: 0x4]
	AdditiveAnimSource[] AdditiveAnimSourceList;//[Offset: 0x10, Size: 0x10]
<----------Generated by SSpawner v1.0.2---------->


Class: AdditiveAnimSource
	AnimSequence* AdditiveAnimSquence;//[Offset: 0x0, Size: 0x8]
	AnimSequence* AnimSoftPtr;//[Offset: 0x8, Size: 0x28]
	bool bLoop;//(ByteOffset: 1, ByteMask: 1, FieldMask: 255)[Offset: 0x30, Size: 0x1]
<----------Generated by SSpawner v1.0.2---------->


Class: BaseActorBP_C.BaseActor.Actor.Object
<----------Generated by SSpawner v1.0.2---------->


